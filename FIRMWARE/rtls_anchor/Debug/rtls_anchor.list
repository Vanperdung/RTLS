
rtls_anchor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eaa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  0800ec38  0800ec38  0001ec38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f33c  0800f33c  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  0800f33c  0800f33c  0001f33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f344  0800f344  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f344  0800f344  0001f344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f348  0800f348  0001f348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800f34c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020254  2**0
                  CONTENTS
 10 .bss          00000614  20000258  20000258  00020258  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000086c  2000086c  00020258  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016621  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003511  00000000  00000000  000368a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  00039db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001348  00000000  00000000  0003b260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244cd  00000000  00000000  0003c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b5f  00000000  00000000  00060a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1db2  00000000  00000000  000785d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a386  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d10  00000000  00000000  0014a3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec1c 	.word	0x0800ec1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	0800ec1c 	.word	0x0800ec1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_DMA_Init+0x3c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <MX_DMA_Init+0x3c>)
 8001008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_DMA_Init+0x3c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	200c      	movs	r0, #12
 8001020:	f004 ff23 	bl	8005e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001024:	200c      	movs	r0, #12
 8001026:	f004 ff3c 	bl	8005ea2 <HAL_NVIC_EnableIRQ>

}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800

08001038 <getSector>:
#include "flash_storage.h"
#include "main.h"

uint32_t getSector(uint32_t address)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    uint32_t sector = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
    if ((address < ADDR_FLASH_SECTOR_1) && (address >= ADDR_FLASH_SECTOR_0))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a2c      	ldr	r2, [pc, #176]	; (80010f8 <getSector+0xc0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d206      	bcs.n	800105a <getSector+0x22>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001052:	d302      	bcc.n	800105a <getSector+0x22>
    {
        sector = FLASH_SECTOR_0;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	e047      	b.n	80010ea <getSector+0xb2>
    }
    else if ((address < ADDR_FLASH_SECTOR_2) && (address >= ADDR_FLASH_SECTOR_1))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a27      	ldr	r2, [pc, #156]	; (80010fc <getSector+0xc4>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d206      	bcs.n	8001070 <getSector+0x38>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a24      	ldr	r2, [pc, #144]	; (80010f8 <getSector+0xc0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d302      	bcc.n	8001070 <getSector+0x38>
    {
        sector = FLASH_SECTOR_1;
 800106a:	2301      	movs	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	e03c      	b.n	80010ea <getSector+0xb2>
    }
    else if ((address < ADDR_FLASH_SECTOR_3) && (address >= ADDR_FLASH_SECTOR_2))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a23      	ldr	r2, [pc, #140]	; (8001100 <getSector+0xc8>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d206      	bcs.n	8001086 <getSector+0x4e>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a20      	ldr	r2, [pc, #128]	; (80010fc <getSector+0xc4>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d302      	bcc.n	8001086 <getSector+0x4e>
    {
        sector = FLASH_SECTOR_2;
 8001080:	2302      	movs	r3, #2
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e031      	b.n	80010ea <getSector+0xb2>
    }
    else if ((address < ADDR_FLASH_SECTOR_4) && (address >= ADDR_FLASH_SECTOR_3))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <getSector+0xcc>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d806      	bhi.n	800109c <getSector+0x64>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <getSector+0xc8>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d302      	bcc.n	800109c <getSector+0x64>
    {
        sector = FLASH_SECTOR_3;
 8001096:	2303      	movs	r3, #3
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	e026      	b.n	80010ea <getSector+0xb2>
    }
    else if ((address < ADDR_FLASH_SECTOR_5) && (address >= ADDR_FLASH_SECTOR_4))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <getSector+0xd0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d806      	bhi.n	80010b2 <getSector+0x7a>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <getSector+0xcc>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d902      	bls.n	80010b2 <getSector+0x7a>
    {
        sector = FLASH_SECTOR_4;
 80010ac:	2304      	movs	r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	e01b      	b.n	80010ea <getSector+0xb2>
    }
    else if ((address < ADDR_FLASH_SECTOR_6) && (address >= ADDR_FLASH_SECTOR_5))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a15      	ldr	r2, [pc, #84]	; (800110c <getSector+0xd4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d806      	bhi.n	80010c8 <getSector+0x90>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a12      	ldr	r2, [pc, #72]	; (8001108 <getSector+0xd0>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d902      	bls.n	80010c8 <getSector+0x90>
    {
        sector = FLASH_SECTOR_5;
 80010c2:	2305      	movs	r3, #5
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	e010      	b.n	80010ea <getSector+0xb2>
    }
    else if ((address < ADDR_FLASH_SECTOR_7) && (address >= ADDR_FLASH_SECTOR_6))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a11      	ldr	r2, [pc, #68]	; (8001110 <getSector+0xd8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d806      	bhi.n	80010de <getSector+0xa6>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a0e      	ldr	r2, [pc, #56]	; (800110c <getSector+0xd4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d902      	bls.n	80010de <getSector+0xa6>
    {
        sector = FLASH_SECTOR_6;
 80010d8:	2306      	movs	r3, #6
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e005      	b.n	80010ea <getSector+0xb2>
    }
    else if (address >= ADDR_FLASH_SECTOR_7)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <getSector+0xd8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d901      	bls.n	80010ea <getSector+0xb2>
    {
        sector = FLASH_SECTOR_7;
 80010e6:	2307      	movs	r3, #7
 80010e8:	60fb      	str	r3, [r7, #12]
    }
    return sector;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	08004000 	.word	0x08004000
 80010fc:	08008000 	.word	0x08008000
 8001100:	0800c000 	.word	0x0800c000
 8001104:	0800ffff 	.word	0x0800ffff
 8001108:	0801ffff 	.word	0x0801ffff
 800110c:	0803ffff 	.word	0x0803ffff
 8001110:	0805ffff 	.word	0x0805ffff

08001114 <flashWriteData>:

uint32_t flashWriteData(uint32_t startAddress, uint8_t *data, uint32_t num)
{
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
    static FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t cnt = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
    uint32_t sectorError;
    uint32_t sector = getSector(startAddress);
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ff87 	bl	8001038 <getSector>
 800112a:	6138      	str	r0, [r7, #16]
    HAL_FLASH_Unlock();
 800112c:	f005 fb2e 	bl	800678c <HAL_FLASH_Unlock>
    FLASH_Erase_Sector(sector, FLASH_VOLTAGE_RANGE_3);
 8001130:	2102      	movs	r1, #2
 8001132:	6938      	ldr	r0, [r7, #16]
 8001134:	f005 fc98 	bl	8006a68 <FLASH_Erase_Sector>
    HAL_FLASH_Lock();
 8001138:	f005 fb4a 	bl	80067d0 <HAL_FLASH_Lock>

    HAL_FLASH_Unlock();
 800113c:	f005 fb26 	bl	800678c <HAL_FLASH_Unlock>
    while (cnt < num)
 8001140:	e019      	b.n	8001176 <flashWriteData+0x62>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, startAddress, data[cnt]) == HAL_OK)
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	4413      	add	r3, r2
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2200      	movs	r2, #0
 800114e:	461c      	mov	r4, r3
 8001150:	4615      	mov	r5, r2
 8001152:	4622      	mov	r2, r4
 8001154:	462b      	mov	r3, r5
 8001156:	68f9      	ldr	r1, [r7, #12]
 8001158:	2000      	movs	r0, #0
 800115a:	f005 fac3 	bl	80066e4 <HAL_FLASH_Program>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d106      	bne.n	8001172 <flashWriteData+0x5e>
        {
        	startAddress++;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3301      	adds	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
            cnt++;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3301      	adds	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e001      	b.n	8001176 <flashWriteData+0x62>
        }
        else
        {
            HAL_FLASH_GetError();
 8001172:	f005 fb3d 	bl	80067f0 <HAL_FLASH_GetError>
    while (cnt < num)
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	429a      	cmp	r2, r3
 800117c:	d3e1      	bcc.n	8001142 <flashWriteData+0x2e>
        }
    }
    HAL_FLASH_Lock();
 800117e:	f005 fb27 	bl	80067d0 <HAL_FLASH_Lock>
    return 0;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bdb0      	pop	{r4, r5, r7, pc}

0800118c <flashReadData>:

void flashReadData(uint32_t startAddress, uint8_t *data, uint32_t num)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
    while (num)
 8001198:	e00d      	b.n	80011b6 <flashReadData+0x2a>
    {
        *data = *(__IO uint8_t *)startAddress;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	701a      	strb	r2, [r3, #0]
        startAddress++;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3301      	adds	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
        data++;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	3301      	adds	r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
        num--;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	607b      	str	r3, [r7, #4]
    while (num)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1ee      	bne.n	800119a <flashReadData+0xe>
    }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <MX_GPIO_Init+0x108>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a3a      	ldr	r2, [pc, #232]	; (80012d4 <MX_GPIO_Init+0x108>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <MX_GPIO_Init+0x108>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <MX_GPIO_Init+0x108>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a33      	ldr	r2, [pc, #204]	; (80012d4 <MX_GPIO_Init+0x108>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <MX_GPIO_Init+0x108>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <MX_GPIO_Init+0x108>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a2c      	ldr	r2, [pc, #176]	; (80012d4 <MX_GPIO_Init+0x108>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <MX_GPIO_Init+0x108>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <MX_GPIO_Init+0x108>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a25      	ldr	r2, [pc, #148]	; (80012d4 <MX_GPIO_Init+0x108>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <MX_GPIO_Init+0x108>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UWB_CS_GPIO_Port, UWB_CS_Pin, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001258:	481f      	ldr	r0, [pc, #124]	; (80012d8 <MX_GPIO_Init+0x10c>)
 800125a:	f005 fde9 	bl	8006e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, UWB_RST_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 800125e:	2201      	movs	r2, #1
 8001260:	f240 2106 	movw	r1, #518	; 0x206
 8001264:	481d      	ldr	r0, [pc, #116]	; (80012dc <MX_GPIO_Init+0x110>)
 8001266:	f005 fde3 	bl	8006e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2101      	movs	r1, #1
 800126e:	481b      	ldr	r0, [pc, #108]	; (80012dc <MX_GPIO_Init+0x110>)
 8001270:	f005 fdde 	bl	8006e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB_CS_Pin;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001282:	2302      	movs	r3, #2
 8001284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UWB_CS_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4812      	ldr	r0, [pc, #72]	; (80012d8 <MX_GPIO_Init+0x10c>)
 800128e:	f005 fc33 	bl	8006af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = UWB_RST_Pin|LED2_Pin|LED3_Pin;
 8001292:	f240 2306 	movw	r3, #518	; 0x206
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	480c      	ldr	r0, [pc, #48]	; (80012dc <MX_GPIO_Init+0x110>)
 80012ac:	f005 fc24 	bl	8006af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80012b0:	2301      	movs	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_GPIO_Init+0x110>)
 80012c8:	f005 fc16 	bl	8006af8 <HAL_GPIO_Init>

}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020c00 	.word	0x40020c00

080012e0 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1);
 80012e8:	1d39      	adds	r1, r7, #4
 80012ea:	2301      	movs	r3, #1
 80012ec:	2201      	movs	r2, #1
 80012ee:	4804      	ldr	r0, [pc, #16]	; (8001300 <__io_putchar+0x20>)
 80012f0:	f007 fb7b 	bl	80089ea <HAL_UART_Transmit>
  return ch;
 80012f4:	687b      	ldr	r3, [r7, #4]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200006d0 	.word	0x200006d0

08001304 <dwInteruptHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dwInteruptHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  // dwReadSystemEventStatusRegister(&device);
  if (dwIsTransmitDone(&device))
 8001308:	481a      	ldr	r0, [pc, #104]	; (8001374 <dwInteruptHandler+0x70>)
 800130a:	f003 fae0 	bl	80048ce <dwIsTransmitDone>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <dwInteruptHandler+0x16>
  {
    dwClearTransmitStatus(&device);
 8001314:	4817      	ldr	r0, [pc, #92]	; (8001374 <dwInteruptHandler+0x70>)
 8001316:	f003 fbad 	bl	8004a74 <dwClearTransmitStatus>
  }
  if (dwIsReceiveTimestampAvailable(&device))
 800131a:	4816      	ldr	r0, [pc, #88]	; (8001374 <dwInteruptHandler+0x70>)
 800131c:	f003 fae7 	bl	80048ee <dwIsReceiveTimestampAvailable>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <dwInteruptHandler+0x28>
  {
    dwClearReceiveTimestampAvailableStatus(&device);
 8001326:	4813      	ldr	r0, [pc, #76]	; (8001374 <dwInteruptHandler+0x70>)
 8001328:	f003 fb75 	bl	8004a16 <dwClearReceiveTimestampAvailableStatus>
  }
  if (dwIsReceiveFailed(&device))
 800132c:	4811      	ldr	r0, [pc, #68]	; (8001374 <dwInteruptHandler+0x70>)
 800132e:	f003 fb0c 	bl	800494a <dwIsReceiveFailed>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <dwInteruptHandler+0x40>
  {
    dwClearReceiveStatus(&device);
 8001338:	480e      	ldr	r0, [pc, #56]	; (8001374 <dwInteruptHandler+0x70>)
 800133a:	f003 fb89 	bl	8004a50 <dwClearReceiveStatus>
    dwRxSoftReset(&device);
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <dwInteruptHandler+0x70>)
 8001340:	f002 fb26 	bl	8003990 <dwRxSoftReset>
  }
  if (dwIsReceiveTimeout(&device))
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <dwInteruptHandler+0x70>)
 8001346:	f003 fb56 	bl	80049f6 <dwIsReceiveTimeout>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <dwInteruptHandler+0x58>
  {
    dwClearReceiveStatus(&device);
 8001350:	4808      	ldr	r0, [pc, #32]	; (8001374 <dwInteruptHandler+0x70>)
 8001352:	f003 fb7d 	bl	8004a50 <dwClearReceiveStatus>
    dwRxSoftReset(&device);
 8001356:	4807      	ldr	r0, [pc, #28]	; (8001374 <dwInteruptHandler+0x70>)
 8001358:	f002 fb1a 	bl	8003990 <dwRxSoftReset>
  }
  if (dwIsReceiveDone(&device))
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <dwInteruptHandler+0x70>)
 800135e:	f003 fad6 	bl	800490e <dwIsReceiveDone>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <dwInteruptHandler+0x6a>
  {
    dwClearReceiveStatus(&device);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <dwInteruptHandler+0x70>)
 800136a:	f003 fb71 	bl	8004a50 <dwClearReceiveStatus>
  }
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008

08001378 <HAL_UART_ErrorCallback>:
//     }
//   }
// }

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <HAL_UART_ErrorCallback+0x38>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d10d      	bne.n	80013a6 <HAL_UART_ErrorCallback+0x2e>
  {
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 800138a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138e:	4909      	ldr	r1, [pc, #36]	; (80013b4 <HAL_UART_ErrorCallback+0x3c>)
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <HAL_UART_ErrorCallback+0x40>)
 8001392:	f007 fbbc 	bl	8008b0e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_UART_ErrorCallback+0x44>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <HAL_UART_ErrorCallback+0x44>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0208 	bic.w	r2, r2, #8
 80013a4:	601a      	str	r2, [r3, #0]
  }
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40004800 	.word	0x40004800
 80013b4:	200003e4 	.word	0x200003e4
 80013b8:	20000714 	.word	0x20000714
 80013bc:	20000758 	.word	0x20000758

080013c0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_UARTEx_RxEventCallback+0x30>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d108      	bne.n	80013e8 <HAL_UARTEx_RxEventCallback+0x28>
  {
    systemHandle.rxBufAvai = true;
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <HAL_UARTEx_RxEventCallback+0x34>)
 80013d8:	2201      	movs	r2, #1
 80013da:	709a      	strb	r2, [r3, #2]
    systemHandle.rxBufSize = Size;
 80013dc:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <HAL_UARTEx_RxEventCallback+0x34>)
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	8093      	strh	r3, [r2, #4]
    HAL_UART_AbortReceive_IT(&huart3);
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_UARTEx_RxEventCallback+0x38>)
 80013e4:	f007 fbf8 	bl	8008bd8 <HAL_UART_AbortReceive_IT>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40004800 	.word	0x40004800
 80013f4:	20000278 	.word	0x20000278
 80013f8:	20000714 	.word	0x20000714

080013fc <findAddress>:

int findAddress(uint8_t *str, uint8_t *sub, int n)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < n; i += 2)
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e016      	b.n	800143c <findAddress+0x40>
  {
    if (str[i] == sub[0] && str[i + 1] == sub[1])
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	781a      	ldrb	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d10b      	bne.n	8001436 <findAddress+0x3a>
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4413      	add	r3, r2
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	3301      	adds	r3, #1
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d101      	bne.n	8001436 <findAddress+0x3a>
      return i;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	e008      	b.n	8001448 <findAddress+0x4c>
  for (int i = 0; i < n; i += 2)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3302      	adds	r3, #2
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbe4      	blt.n	800140e <findAddress+0x12>
  }
  return -1;
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001448:	4618      	mov	r0, r3
 800144a:	371c      	adds	r7, #28
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <formatCmd>:

int formatCmd(char *info, char *header, char *data, int size)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
  int k = strlen(header);
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f7fe feb4 	bl	80001d0 <strlen>
 8001468:	4603      	mov	r3, r0
 800146a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < k; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	e00a      	b.n	8001488 <formatCmd+0x34>
  {
    info[i] = header[i];
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	441a      	add	r2, r3
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	68f9      	ldr	r1, [r7, #12]
 800147c:	440b      	add	r3, r1
 800147e:	7812      	ldrb	r2, [r2, #0]
 8001480:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < k; i++)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fa      	ldr	r2, [r7, #28]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	429a      	cmp	r2, r3
 800148e:	dbf0      	blt.n	8001472 <formatCmd+0x1e>
  }
  for (int j = k; j < k + size; j++)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	e00d      	b.n	80014b2 <formatCmd+0x5e>
  {
    info[j] = data[j - k];
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	461a      	mov	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	441a      	add	r2, r3
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	68f9      	ldr	r1, [r7, #12]
 80014a6:	440b      	add	r3, r1
 80014a8:	7812      	ldrb	r2, [r2, #0]
 80014aa:	701a      	strb	r2, [r3, #0]
  for (int j = k; j < k + size; j++)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	3301      	adds	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	dbeb      	blt.n	8001496 <formatCmd+0x42>
  }
  info[k + size] = '*';
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4413      	add	r3, r2
 80014ca:	222a      	movs	r2, #42	; 0x2a
 80014cc:	701a      	strb	r2, [r3, #0]
  return k + size + 1;
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	3301      	adds	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <formatLocCmd>:

int formatLocCmd(char *info, char *header, char *data, uint8_t cnt , int size)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b088      	sub	sp, #32
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	70fb      	strb	r3, [r7, #3]
  int k = strlen(header);
 80014ec:	68b8      	ldr	r0, [r7, #8]
 80014ee:	f7fe fe6f 	bl	80001d0 <strlen>
 80014f2:	4603      	mov	r3, r0
 80014f4:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < k; i++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	e00a      	b.n	8001512 <formatLocCmd+0x34>
  {
    info[i] = header[i];
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	441a      	add	r2, r3
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	68f9      	ldr	r1, [r7, #12]
 8001506:	440b      	add	r3, r1
 8001508:	7812      	ldrb	r2, [r2, #0]
 800150a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < k; i++)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	3301      	adds	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	429a      	cmp	r2, r3
 8001518:	dbf0      	blt.n	80014fc <formatLocCmd+0x1e>
  }
  for (int j = k; j < k + size; j++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	e00d      	b.n	800153c <formatLocCmd+0x5e>
  {
    info[j] = data[j - k];
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	461a      	mov	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	441a      	add	r2, r3
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	68f9      	ldr	r1, [r7, #12]
 8001530:	440b      	add	r3, r1
 8001532:	7812      	ldrb	r2, [r2, #0]
 8001534:	701a      	strb	r2, [r3, #0]
  for (int j = k; j < k + size; j++)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	3301      	adds	r3, #1
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001540:	4413      	add	r3, r2
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbeb      	blt.n	8001520 <formatLocCmd+0x42>
  }
  info[k + size] = cnt;
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154c:	4413      	add	r3, r2
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	78fa      	ldrb	r2, [r7, #3]
 8001556:	701a      	strb	r2, [r3, #0]
  info[k + size + 1] = '*';
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155c:	4413      	add	r3, r2
 800155e:	3301      	adds	r3, #1
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	222a      	movs	r2, #42	; 0x2a
 8001566:	701a      	strb	r2, [r3, #0]
  return k + size + 2;
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156c:	4413      	add	r3, r2
 800156e:	3302      	adds	r3, #2
}
 8001570:	4618      	mov	r0, r3
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <compareString>:

bool compareString(char *src1, char *src2, int len)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < len; i++)
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e00e      	b.n	80015a8 <compareString+0x30>
  {
    if (src1[i] != src2[i])
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	440b      	add	r3, r1
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d001      	beq.n	80015a2 <compareString+0x2a>
      return false;
 800159e:	2300      	movs	r3, #0
 80015a0:	e007      	b.n	80015b2 <compareString+0x3a>
  for (int i = 0; i < len; i++)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbec      	blt.n	800158a <compareString+0x12>
  }
  return true;
 80015b0:	2301      	movs	r3, #1
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	371c      	adds	r7, #28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80015c6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  beaconHandle_t beaconHandle = {0};
 80015c8:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
  pollHandle_t pollHandle = {0};
 80015d4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	615a      	str	r2, [r3, #20]
  respHandle_t respHandle = {0};
 80015e6:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80015ea:	2220      	movs	r2, #32
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f008 fd0c 	bl	800a00c <memset>
  locMess_t locMess = {0};
 80015f4:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	811a      	strh	r2, [r3, #8]
  packet_t beaconPacket = {0};
 8001600:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001604:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001608:	4618      	mov	r0, r3
 800160a:	2389      	movs	r3, #137	; 0x89
 800160c:	461a      	mov	r2, r3
 800160e:	2100      	movs	r1, #0
 8001610:	f008 fcfc 	bl	800a00c <memset>
  packet_t pollPacket = {0};
 8001614:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001618:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800161c:	4618      	mov	r0, r3
 800161e:	2389      	movs	r3, #137	; 0x89
 8001620:	461a      	mov	r2, r3
 8001622:	2100      	movs	r1, #0
 8001624:	f008 fcf2 	bl	800a00c <memset>
  packet_t respPacket = {0};
 8001628:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800162c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8001630:	4618      	mov	r0, r3
 8001632:	2389      	movs	r3, #137	; 0x89
 8001634:	461a      	mov	r2, r3
 8001636:	2100      	movs	r1, #0
 8001638:	f008 fce8 	bl	800a00c <memset>
  packet_t locPacket = {0};
 800163c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001640:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001644:	4618      	mov	r0, r3
 8001646:	2389      	movs	r3, #137	; 0x89
 8001648:	461a      	mov	r2, r3
 800164a:	2100      	movs	r1, #0
 800164c:	f008 fcde 	bl	800a00c <memset>
  packet_t bufPacket = {0};
 8001650:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001654:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001658:	4618      	mov	r0, r3
 800165a:	2389      	movs	r3, #137	; 0x89
 800165c:	461a      	mov	r2, r3
 800165e:	2100      	movs	r1, #0
 8001660:	f008 fcd4 	bl	800a00c <memset>

  uint32_t bcnTimes[BCN_SLOT_TOTAL] = {0};
 8001664:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001668:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800166c:	4618      	mov	r0, r3
 800166e:	2340      	movs	r3, #64	; 0x40
 8001670:	461a      	mov	r2, r3
 8001672:	2100      	movs	r1, #0
 8001674:	f008 fcca 	bl	800a00c <memset>
  uint32_t twrTimes[TWR_SLOT_TOTAL] = {0};
 8001678:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800167c:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8001680:	4618      	mov	r0, r3
 8001682:	2328      	movs	r3, #40	; 0x28
 8001684:	461a      	mov	r2, r3
 8001686:	2100      	movs	r1, #0
 8001688:	f008 fcc0 	bl	800a00c <memset>
  uint32_t uartTime = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454

  rtls_obj_t rtls_obj = {0};
 8001692:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001696:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800169a:	4618      	mov	r0, r3
 800169c:	2329      	movs	r3, #41	; 0x29
 800169e:	461a      	mov	r2, r3
 80016a0:	2100      	movs	r1, #0
 80016a2:	f008 fcb3 	bl	800a00c <memset>
  tagLoc_t tagLoc[TWR_SLOT_TOTAL];
  char all[] = {0xff, 0xff};
 80016a6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80016aa:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80016ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b2:	801a      	strh	r2, [r3, #0]
  char null[] = {0x00, 0x00};
 80016b4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80016b8:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80016bc:	2200      	movs	r2, #0
 80016be:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c0:	f004 fa4c 	bl	8005b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c4:	f001 faba 	bl	8002c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c8:	f7ff fd80 	bl	80011cc <MX_GPIO_Init>
  MX_DMA_Init();
 80016cc:	f7ff fc94 	bl	8000ff8 <MX_DMA_Init>
  MX_SPI2_Init();
 80016d0:	f001 fb24 	bl	8002d1c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80016d4:	f001 fdb4 	bl	8003240 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80016d8:	f001 fddc 	bl	8003294 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80016dc:	f001 fcda 	bl	8003094 <MX_TIM1_Init>
  MX_TIM2_Init();
 80016e0:	f001 fd2a 	bl	8003138 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  logi("ANCHOR START");
 80016e4:	f004 faa0 	bl	8005c28 <HAL_GetTick>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4619      	mov	r1, r3
 80016ec:	48ba      	ldr	r0, [pc, #744]	; (80019d8 <main+0x418>)
 80016ee:	f009 fc05 	bl	800aefc <iprintf>
  dwInit(&device);
 80016f2:	48ba      	ldr	r0, [pc, #744]	; (80019dc <main+0x41c>)
 80016f4:	f001 ffa0 	bl	8003638 <dwInit>
  if (dwConfigure(&device) == DW_ERROR_OK)
 80016f8:	48b8      	ldr	r0, [pc, #736]	; (80019dc <main+0x41c>)
 80016fa:	f001 ffc1 	bl	8003680 <dwConfigure>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10f      	bne.n	8001724 <main+0x164>
  {
    dwEnableAllLeds(&device);
 8001704:	48b5      	ldr	r0, [pc, #724]	; (80019dc <main+0x41c>)
 8001706:	f002 f88e 	bl	8003826 <dwEnableAllLeds>
  {
    loge("Configure failed");
    while (1)
      ;
  }
  dwNewConfiguration(&device);
 800170a:	48b4      	ldr	r0, [pc, #720]	; (80019dc <main+0x41c>)
 800170c:	f002 fc49 	bl	8003fa2 <dwNewConfiguration>
  dwSetDefaults(&device);
 8001710:	48b2      	ldr	r0, [pc, #712]	; (80019dc <main+0x41c>)
 8001712:	f002 fe83 	bl	800441c <dwSetDefaults>
  dwCommitConfiguration(&device);
 8001716:	48b1      	ldr	r0, [pc, #708]	; (80019dc <main+0x41c>)
 8001718:	f002 fc5d 	bl	8003fd6 <dwCommitConfiguration>

  for (uint32_t i = 0; i < superframe.bcnSlotTotal; i++)
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8001722:	e01c      	b.n	800175e <main+0x19e>
    loge("Configure failed");
 8001724:	f004 fa80 	bl	8005c28 <HAL_GetTick>
 8001728:	4601      	mov	r1, r0
 800172a:	f240 1365 	movw	r3, #357	; 0x165
 800172e:	4aac      	ldr	r2, [pc, #688]	; (80019e0 <main+0x420>)
 8001730:	48ac      	ldr	r0, [pc, #688]	; (80019e4 <main+0x424>)
 8001732:	f009 fbe3 	bl	800aefc <iprintf>
    while (1)
 8001736:	e7fe      	b.n	8001736 <main+0x176>
  {
    bcnTimes[i] = SF_BCN_SLOT_TIME * i / DIV;
 8001738:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800173c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001740:	fb02 f103 	mul.w	r1, r2, r3
 8001744:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001748:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800174c:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8001750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint32_t i = 0; i < superframe.bcnSlotTotal; i++)
 8001754:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8001758:	3301      	adds	r3, #1
 800175a:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800175e:	4ba2      	ldr	r3, [pc, #648]	; (80019e8 <main+0x428>)
 8001760:	789b      	ldrb	r3, [r3, #2]
 8001762:	461a      	mov	r2, r3
 8001764:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8001768:	4293      	cmp	r3, r2
 800176a:	d3e5      	bcc.n	8001738 <main+0x178>
  }
  for (uint32_t j = 0; j < superframe.twrSlotTotal; j++)
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8001772:	e01a      	b.n	80017aa <main+0x1ea>
  {
    twrTimes[j] = (SF_TWR_SLOT_TIME * j + SF_BCN_SLOT_TIME * superframe.bcnSlotTotal) / DIV;
 8001774:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8001778:	f641 42e8 	movw	r2, #7400	; 0x1ce8
 800177c:	fb02 f303 	mul.w	r3, r2, r3
 8001780:	4a99      	ldr	r2, [pc, #612]	; (80019e8 <main+0x428>)
 8001782:	7892      	ldrb	r2, [r2, #2]
 8001784:	4611      	mov	r1, r2
 8001786:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800178a:	fb01 f202 	mul.w	r2, r1, r2
 800178e:	1899      	adds	r1, r3, r2
 8001790:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001794:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8001798:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800179c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint32_t j = 0; j < superframe.twrSlotTotal; j++)
 80017a0:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80017a4:	3301      	adds	r3, #1
 80017a6:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 80017aa:	4b8f      	ldr	r3, [pc, #572]	; (80019e8 <main+0x428>)
 80017ac:	78db      	ldrb	r3, [r3, #3]
 80017ae:	461a      	mov	r2, r3
 80017b0:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d3dd      	bcc.n	8001774 <main+0x1b4>
  }
  uartTime = (SF_TWR_SLOT_TIME * superframe.twrSlotTotal + SF_BCN_SLOT_TIME * superframe.bcnSlotTotal) / DIV;
 80017b8:	4b8b      	ldr	r3, [pc, #556]	; (80019e8 <main+0x428>)
 80017ba:	78db      	ldrb	r3, [r3, #3]
 80017bc:	461a      	mov	r2, r3
 80017be:	f641 43e8 	movw	r3, #7400	; 0x1ce8
 80017c2:	fb03 f202 	mul.w	r2, r3, r2
 80017c6:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <main+0x428>)
 80017c8:	789b      	ldrb	r3, [r3, #2]
 80017ca:	4619      	mov	r1, r3
 80017cc:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80017d0:	fb01 f303 	mul.w	r3, r1, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454

#ifndef TEST
  flashReadData(ADDR_FLASH_SECTOR_7, anchorBaseAddr, sizeof(anchorBaseAddr));
 80017da:	2202      	movs	r2, #2
 80017dc:	4983      	ldr	r1, [pc, #524]	; (80019ec <main+0x42c>)
 80017de:	4884      	ldr	r0, [pc, #528]	; (80019f0 <main+0x430>)
 80017e0:	f7ff fcd4 	bl	800118c <flashReadData>
  Logi("Read ID: %02x%02x", anchorBaseAddr[0], anchorBaseAddr[1]);
 80017e4:	f004 fa20 	bl	8005c28 <HAL_GetTick>
 80017e8:	4601      	mov	r1, r0
 80017ea:	4b80      	ldr	r3, [pc, #512]	; (80019ec <main+0x42c>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b7e      	ldr	r3, [pc, #504]	; (80019ec <main+0x42c>)
 80017f2:	785b      	ldrb	r3, [r3, #1]
 80017f4:	487f      	ldr	r0, [pc, #508]	; (80019f4 <main+0x434>)
 80017f6:	f009 fb81 	bl	800aefc <iprintf>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 80017fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fe:	497e      	ldr	r1, [pc, #504]	; (80019f8 <main+0x438>)
 8001800:	487e      	ldr	r0, [pc, #504]	; (80019fc <main+0x43c>)
 8001802:	f007 f984 	bl	8008b0e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001806:	4b7e      	ldr	r3, [pc, #504]	; (8001a00 <main+0x440>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b7c      	ldr	r3, [pc, #496]	; (8001a00 <main+0x440>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0208 	bic.w	r2, r2, #8
 8001814:	601a      	str	r2, [r3, #0]
  while (!(systemHandle.anchorCfg == true))
 8001816:	e1fc      	b.n	8001c12 <main+0x652>
  {
    if (systemHandle.rxBufAvai == true)
 8001818:	4b7a      	ldr	r3, [pc, #488]	; (8001a04 <main+0x444>)
 800181a:	789b      	ldrb	r3, [r3, #2]
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 81f8 	beq.w	8001c12 <main+0x652>
    {
      memset(&rtls_obj, 0, sizeof(rtls_obj));
 8001822:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001826:	2229      	movs	r2, #41	; 0x29
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f008 fbee 	bl	800a00c <memset>
      if (strstr(rxBuffer, "id") != NULL)
 8001830:	4975      	ldr	r1, [pc, #468]	; (8001a08 <main+0x448>)
 8001832:	4871      	ldr	r0, [pc, #452]	; (80019f8 <main+0x438>)
 8001834:	f009 fbb0 	bl	800af98 <strstr>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d027      	beq.n	800188e <main+0x2ce>
      {
        Logi("ID: %02x%02x", rxBuffer[3], rxBuffer[4]);
 800183e:	f004 f9f3 	bl	8005c28 <HAL_GetTick>
 8001842:	4601      	mov	r1, r0
 8001844:	4b6c      	ldr	r3, [pc, #432]	; (80019f8 <main+0x438>)
 8001846:	78db      	ldrb	r3, [r3, #3]
 8001848:	461a      	mov	r2, r3
 800184a:	4b6b      	ldr	r3, [pc, #428]	; (80019f8 <main+0x438>)
 800184c:	791b      	ldrb	r3, [r3, #4]
 800184e:	486f      	ldr	r0, [pc, #444]	; (8001a0c <main+0x44c>)
 8001850:	f009 fb54 	bl	800aefc <iprintf>
        if (!compareString(anchorBaseAddr, &rxBuffer[3], 2))
 8001854:	2202      	movs	r2, #2
 8001856:	496e      	ldr	r1, [pc, #440]	; (8001a10 <main+0x450>)
 8001858:	4864      	ldr	r0, [pc, #400]	; (80019ec <main+0x42c>)
 800185a:	f7ff fe8d 	bl	8001578 <compareString>
 800185e:	4603      	mov	r3, r0
 8001860:	f083 0301 	eor.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00a      	beq.n	8001880 <main+0x2c0>
 800186a:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <main+0x438>)
 800186c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001870:	b29a      	uxth	r2, r3
        {
          memcpy(anchorBaseAddr, &rxBuffer[3], sizeof(anchorBaseAddr));
 8001872:	4b5e      	ldr	r3, [pc, #376]	; (80019ec <main+0x42c>)
 8001874:	801a      	strh	r2, [r3, #0]
          flashWriteData(ADDR_FLASH_SECTOR_7, anchorBaseAddr, sizeof(anchorBaseAddr));
 8001876:	2202      	movs	r2, #2
 8001878:	495c      	ldr	r1, [pc, #368]	; (80019ec <main+0x42c>)
 800187a:	485d      	ldr	r0, [pc, #372]	; (80019f0 <main+0x430>)
 800187c:	f7ff fc4a 	bl	8001114 <flashWriteData>
        }
        HAL_UART_Transmit(&huart3, (uint8_t *)rxBuffer, systemHandle.rxBufSize, 100);
 8001880:	4b60      	ldr	r3, [pc, #384]	; (8001a04 <main+0x444>)
 8001882:	889a      	ldrh	r2, [r3, #4]
 8001884:	2364      	movs	r3, #100	; 0x64
 8001886:	495c      	ldr	r1, [pc, #368]	; (80019f8 <main+0x438>)
 8001888:	485c      	ldr	r0, [pc, #368]	; (80019fc <main+0x43c>)
 800188a:	f007 f8ae 	bl	80089ea <HAL_UART_Transmit>
      }
      if (strstr(rxBuffer, "cfg_anchor") != NULL)
 800188e:	4961      	ldr	r1, [pc, #388]	; (8001a14 <main+0x454>)
 8001890:	4859      	ldr	r0, [pc, #356]	; (80019f8 <main+0x438>)
 8001892:	f009 fb81 	bl	800af98 <strstr>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d055      	beq.n	8001948 <main+0x388>
      {
        Logi("cfg_anchor");
 800189c:	f004 f9c4 	bl	8005c28 <HAL_GetTick>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4619      	mov	r1, r3
 80018a4:	485c      	ldr	r0, [pc, #368]	; (8001a18 <main+0x458>)
 80018a6:	f009 fb29 	bl	800aefc <iprintf>
        memcpy((uint8_t *)&rtls_obj.cfg_anchor, &rxBuffer[11], sizeof(rtls_obj.cfg_anchor));
 80018aa:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80018ae:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80018b2:	4a51      	ldr	r2, [pc, #324]	; (80019f8 <main+0x438>)
 80018b4:	320b      	adds	r2, #11
 80018b6:	6810      	ldr	r0, [r2, #0]
 80018b8:	6851      	ldr	r1, [r2, #4]
 80018ba:	c303      	stmia	r3!, {r0, r1}
 80018bc:	8911      	ldrh	r1, [r2, #8]
 80018be:	7a92      	ldrb	r2, [r2, #10]
 80018c0:	8019      	strh	r1, [r3, #0]
 80018c2:	709a      	strb	r2, [r3, #2]
        if (compareString(rtls_obj.cfg_anchor.address, anchorBaseAddr, sizeof(anchorBaseAddr)) && rtls_obj.cfg_anchor.slot < superframe.bcnSlotTotal)
 80018c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018c8:	2202      	movs	r2, #2
 80018ca:	4948      	ldr	r1, [pc, #288]	; (80019ec <main+0x42c>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fe53 	bl	8001578 <compareString>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 8185 	beq.w	8001be4 <main+0x624>
 80018da:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80018de:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80018e2:	789a      	ldrb	r2, [r3, #2]
 80018e4:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <main+0x428>)
 80018e6:	789b      	ldrb	r3, [r3, #2]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f080 817b 	bcs.w	8001be4 <main+0x624>
 80018ee:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <main+0x42c>)
 80018f0:	881a      	ldrh	r2, [r3, #0]
        {
          memcpy(myAnchor.anchorAddress, anchorBaseAddr, sizeof(anchorBaseAddr));
 80018f2:	4b4a      	ldr	r3, [pc, #296]	; (8001a1c <main+0x45c>)
 80018f4:	809a      	strh	r2, [r3, #4]
          myAnchor.bcnSlotNumber = rtls_obj.cfg_anchor.slot;
 80018f6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80018fa:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80018fe:	789a      	ldrb	r2, [r3, #2]
 8001900:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <main+0x45c>)
 8001902:	719a      	strb	r2, [r3, #6]
          myAnchor.x.xVal = rtls_obj.cfg_anchor.x.xVal;
 8001904:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001908:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800190c:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8001910:	4a42      	ldr	r2, [pc, #264]	; (8001a1c <main+0x45c>)
 8001912:	6093      	str	r3, [r2, #8]
          myAnchor.y.yVal = rtls_obj.cfg_anchor.y.yVal;
 8001914:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001918:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800191c:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001920:	4a3e      	ldr	r2, [pc, #248]	; (8001a1c <main+0x45c>)
 8001922:	60d3      	str	r3, [r2, #12]
          myAnchor.anchorCfg = true;
 8001924:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <main+0x45c>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
          if (myAnchor.bcnSlotNumber == 0)
 800192a:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <main+0x45c>)
 800192c:	799b      	ldrb	r3, [r3, #6]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <main+0x378>
          {
            myAnchor.anchorMain = true;
 8001932:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <main+0x45c>)
 8001934:	2201      	movs	r2, #1
 8001936:	705a      	strb	r2, [r3, #1]
          }
          HAL_UART_Transmit(&huart3, (uint8_t *)rxBuffer, systemHandle.rxBufSize, 100);
 8001938:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <main+0x444>)
 800193a:	889a      	ldrh	r2, [r3, #4]
 800193c:	2364      	movs	r3, #100	; 0x64
 800193e:	492e      	ldr	r1, [pc, #184]	; (80019f8 <main+0x438>)
 8001940:	482e      	ldr	r0, [pc, #184]	; (80019fc <main+0x43c>)
 8001942:	f007 f852 	bl	80089ea <HAL_UART_Transmit>
 8001946:	e14d      	b.n	8001be4 <main+0x624>
        }
      }
      else if (strstr(rxBuffer, "del_anchor") != NULL)
 8001948:	4935      	ldr	r1, [pc, #212]	; (8001a20 <main+0x460>)
 800194a:	482b      	ldr	r0, [pc, #172]	; (80019f8 <main+0x438>)
 800194c:	f009 fb24 	bl	800af98 <strstr>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d06a      	beq.n	8001a2c <main+0x46c>
      {
        Logi("del_anchor");
 8001956:	f004 f967 	bl	8005c28 <HAL_GetTick>
 800195a:	4603      	mov	r3, r0
 800195c:	4619      	mov	r1, r3
 800195e:	4831      	ldr	r0, [pc, #196]	; (8001a24 <main+0x464>)
 8001960:	f009 facc 	bl	800aefc <iprintf>
        memcpy((uint8_t *)&rtls_obj.del_anchor, &rxBuffer[11], sizeof(rtls_obj.del_anchor));
 8001964:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001968:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800196c:	4a22      	ldr	r2, [pc, #136]	; (80019f8 <main+0x438>)
 800196e:	330b      	adds	r3, #11
 8001970:	320b      	adds	r2, #11
 8001972:	8811      	ldrh	r1, [r2, #0]
 8001974:	7892      	ldrb	r2, [r2, #2]
 8001976:	8019      	strh	r1, [r3, #0]
 8001978:	709a      	strb	r2, [r3, #2]
        if ((compareString(rtls_obj.del_anchor.address, myAnchor.anchorAddress, sizeof(myAnchor.anchorAddress)) && rtls_obj.del_anchor.slot == myAnchor.bcnSlotNumber) || compareString(rtls_obj.del_anchor.address, all, sizeof(all)))
 800197a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800197e:	330b      	adds	r3, #11
 8001980:	2202      	movs	r2, #2
 8001982:	4929      	ldr	r1, [pc, #164]	; (8001a28 <main+0x468>)
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fdf7 	bl	8001578 <compareString>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <main+0x3e2>
 8001990:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001994:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001998:	7b5a      	ldrb	r2, [r3, #13]
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <main+0x45c>)
 800199c:	799b      	ldrb	r3, [r3, #6]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d00c      	beq.n	80019bc <main+0x3fc>
 80019a2:	f107 0108 	add.w	r1, r7, #8
 80019a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019aa:	330b      	adds	r3, #11
 80019ac:	2202      	movs	r2, #2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fde2 	bl	8001578 <compareString>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8114 	beq.w	8001be4 <main+0x624>
        {
          memset(&myAnchor, 0, sizeof(myAnchor));
 80019bc:	2210      	movs	r2, #16
 80019be:	2100      	movs	r1, #0
 80019c0:	4816      	ldr	r0, [pc, #88]	; (8001a1c <main+0x45c>)
 80019c2:	f008 fb23 	bl	800a00c <memset>
          HAL_UART_Transmit(&huart3, (uint8_t *)rxBuffer, systemHandle.rxBufSize, 100);
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <main+0x444>)
 80019c8:	889a      	ldrh	r2, [r3, #4]
 80019ca:	2364      	movs	r3, #100	; 0x64
 80019cc:	490a      	ldr	r1, [pc, #40]	; (80019f8 <main+0x438>)
 80019ce:	480b      	ldr	r0, [pc, #44]	; (80019fc <main+0x43c>)
 80019d0:	f007 f80b 	bl	80089ea <HAL_UART_Transmit>
 80019d4:	e106      	b.n	8001be4 <main+0x624>
 80019d6:	bf00      	nop
 80019d8:	0800ec38 	.word	0x0800ec38
 80019dc:	20000008 	.word	0x20000008
 80019e0:	0800ec5c 	.word	0x0800ec5c
 80019e4:	0800ec70 	.word	0x0800ec70
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000274 	.word	0x20000274
 80019f0:	08060000 	.word	0x08060000
 80019f4:	0800ec9c 	.word	0x0800ec9c
 80019f8:	200003e4 	.word	0x200003e4
 80019fc:	20000714 	.word	0x20000714
 8001a00:	20000758 	.word	0x20000758
 8001a04:	20000278 	.word	0x20000278
 8001a08:	0800ecc4 	.word	0x0800ecc4
 8001a0c:	0800ecc8 	.word	0x0800ecc8
 8001a10:	200003e7 	.word	0x200003e7
 8001a14:	0800ecec 	.word	0x0800ecec
 8001a18:	0800ecf8 	.word	0x0800ecf8
 8001a1c:	200002a8 	.word	0x200002a8
 8001a20:	0800ed18 	.word	0x0800ed18
 8001a24:	0800ed24 	.word	0x0800ed24
 8001a28:	200002ac 	.word	0x200002ac
        }
      }
      else if (strstr(rxBuffer, "cfg_superframe") != NULL)
 8001a2c:	4936      	ldr	r1, [pc, #216]	; (8001b08 <main+0x548>)
 8001a2e:	4837      	ldr	r0, [pc, #220]	; (8001b0c <main+0x54c>)
 8001a30:	f009 fab2 	bl	800af98 <strstr>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d048      	beq.n	8001acc <main+0x50c>
      {
        Logi("cfg_superframe");
 8001a3a:	f004 f8f5 	bl	8005c28 <HAL_GetTick>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4619      	mov	r1, r3
 8001a42:	4833      	ldr	r0, [pc, #204]	; (8001b10 <main+0x550>)
 8001a44:	f009 fa5a 	bl	800aefc <iprintf>
        memcpy((uint8_t *)&rtls_obj.cfg_sf, &rxBuffer[15], sizeof(rtls_obj.cfg_sf));
 8001a48:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001a4c:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001a50:	4a2e      	ldr	r2, [pc, #184]	; (8001b0c <main+0x54c>)
 8001a52:	3314      	adds	r3, #20
 8001a54:	320f      	adds	r2, #15
 8001a56:	8811      	ldrh	r1, [r2, #0]
 8001a58:	7892      	ldrb	r2, [r2, #2]
 8001a5a:	8019      	strh	r1, [r3, #0]
 8001a5c:	709a      	strb	r2, [r3, #2]
        if (compareString(rtls_obj.cfg_sf.address, anchorBaseAddr, sizeof(anchorBaseAddr)) || compareString(rtls_obj.cfg_sf.address, all, sizeof(all)))
 8001a5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a62:	3314      	adds	r3, #20
 8001a64:	2202      	movs	r2, #2
 8001a66:	492b      	ldr	r1, [pc, #172]	; (8001b14 <main+0x554>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fd85 	bl	8001578 <compareString>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10c      	bne.n	8001a8e <main+0x4ce>
 8001a74:	f107 0108 	add.w	r1, r7, #8
 8001a78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a7c:	3314      	adds	r3, #20
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fd79 	bl	8001578 <compareString>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80ab 	beq.w	8001be4 <main+0x624>
        {
          if (rtls_obj.cfg_sf.sf_num <= 5 && rtls_obj.cfg_sf.sf_num >= 1)
 8001a8e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001a92:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001a96:	7d9b      	ldrb	r3, [r3, #22]
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	f200 80a3 	bhi.w	8001be4 <main+0x624>
 8001a9e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001aa2:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001aa6:	7d9b      	ldrb	r3, [r3, #22]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 809b 	beq.w	8001be4 <main+0x624>
          {
            superframe.sfNumberTotal = rtls_obj.cfg_sf.sf_num;
 8001aae:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001ab2:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001ab6:	7d9a      	ldrb	r2, [r3, #22]
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <main+0x558>)
 8001aba:	711a      	strb	r2, [r3, #4]
            HAL_UART_Transmit(&huart3, (uint8_t *)rxBuffer, systemHandle.rxBufSize, 100);
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <main+0x55c>)
 8001abe:	889a      	ldrh	r2, [r3, #4]
 8001ac0:	2364      	movs	r3, #100	; 0x64
 8001ac2:	4912      	ldr	r1, [pc, #72]	; (8001b0c <main+0x54c>)
 8001ac4:	4816      	ldr	r0, [pc, #88]	; (8001b20 <main+0x560>)
 8001ac6:	f006 ff90 	bl	80089ea <HAL_UART_Transmit>
 8001aca:	e08b      	b.n	8001be4 <main+0x624>
          }
        }
      }
      else if (strstr(rxBuffer, "start") != NULL)
 8001acc:	4915      	ldr	r1, [pc, #84]	; (8001b24 <main+0x564>)
 8001ace:	480f      	ldr	r0, [pc, #60]	; (8001b0c <main+0x54c>)
 8001ad0:	f009 fa62 	bl	800af98 <strstr>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d02a      	beq.n	8001b30 <main+0x570>
      {
        Logi("start");
 8001ada:	f004 f8a5 	bl	8005c28 <HAL_GetTick>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4811      	ldr	r0, [pc, #68]	; (8001b28 <main+0x568>)
 8001ae4:	f009 fa0a 	bl	800aefc <iprintf>
        if (myAnchor.anchorCfg == true)
 8001ae8:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <main+0x56c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d079      	beq.n	8001be4 <main+0x624>
        {
          systemHandle.anchorCfg = true;
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <main+0x55c>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
          HAL_UART_Transmit(&huart3, (uint8_t *)rxBuffer, systemHandle.rxBufSize, 100);
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <main+0x55c>)
 8001af8:	889a      	ldrh	r2, [r3, #4]
 8001afa:	2364      	movs	r3, #100	; 0x64
 8001afc:	4903      	ldr	r1, [pc, #12]	; (8001b0c <main+0x54c>)
 8001afe:	4808      	ldr	r0, [pc, #32]	; (8001b20 <main+0x560>)
 8001b00:	f006 ff73 	bl	80089ea <HAL_UART_Transmit>
 8001b04:	e06e      	b.n	8001be4 <main+0x624>
 8001b06:	bf00      	nop
 8001b08:	0800ed44 	.word	0x0800ed44
 8001b0c:	200003e4 	.word	0x200003e4
 8001b10:	0800ed54 	.word	0x0800ed54
 8001b14:	20000274 	.word	0x20000274
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000278 	.word	0x20000278
 8001b20:	20000714 	.word	0x20000714
 8001b24:	0800ed78 	.word	0x0800ed78
 8001b28:	0800ed80 	.word	0x0800ed80
 8001b2c:	200002a8 	.word	0x200002a8
        }
      }
      else if (strstr(rxBuffer, "get_info") != NULL)
 8001b30:	49ac      	ldr	r1, [pc, #688]	; (8001de4 <main+0x824>)
 8001b32:	48ad      	ldr	r0, [pc, #692]	; (8001de8 <main+0x828>)
 8001b34:	f009 fa30 	bl	800af98 <strstr>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d052      	beq.n	8001be4 <main+0x624>
      {
        Logi("get_info");
 8001b3e:	f004 f873 	bl	8005c28 <HAL_GetTick>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4619      	mov	r1, r3
 8001b46:	48a9      	ldr	r0, [pc, #676]	; (8001dec <main+0x82c>)
 8001b48:	f009 f9d8 	bl	800aefc <iprintf>
        memset(rxBuffer, 0, sizeof(rxBuffer));
 8001b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b50:	2100      	movs	r1, #0
 8001b52:	48a5      	ldr	r0, [pc, #660]	; (8001de8 <main+0x828>)
 8001b54:	f008 fa5a 	bl	800a00c <memset>
        rtls_obj.info.bcnSlotTotal = superframe.bcnSlotTotal;
 8001b58:	4ba5      	ldr	r3, [pc, #660]	; (8001df0 <main+0x830>)
 8001b5a:	789a      	ldrb	r2, [r3, #2]
 8001b5c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001b60:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001b64:	75da      	strb	r2, [r3, #23]
        rtls_obj.info.sfNumberTotal = superframe.sfNumberTotal;
 8001b66:	4ba2      	ldr	r3, [pc, #648]	; (8001df0 <main+0x830>)
 8001b68:	791a      	ldrb	r2, [r3, #4]
 8001b6a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001b6e:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001b72:	765a      	strb	r2, [r3, #25]
        rtls_obj.info.twrSlotTotal = superframe.twrSlotTotal;
 8001b74:	4b9e      	ldr	r3, [pc, #632]	; (8001df0 <main+0x830>)
 8001b76:	78da      	ldrb	r2, [r3, #3]
 8001b78:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001b7c:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001b80:	761a      	strb	r2, [r3, #24]
 8001b82:	4b9c      	ldr	r3, [pc, #624]	; (8001df4 <main+0x834>)
 8001b84:	889a      	ldrh	r2, [r3, #4]
        memcpy(rtls_obj.info.anchorInfo.address, myAnchor.anchorAddress, sizeof(myAnchor.anchorAddress));
 8001b86:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001b8a:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001b8e:	835a      	strh	r2, [r3, #26]
        rtls_obj.info.anchorInfo.slot = myAnchor.bcnSlotNumber;
 8001b90:	4b98      	ldr	r3, [pc, #608]	; (8001df4 <main+0x834>)
 8001b92:	799a      	ldrb	r2, [r3, #6]
 8001b94:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001b98:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001b9c:	771a      	strb	r2, [r3, #28]
        rtls_obj.info.anchorInfo.x.xVal = myAnchor.x.xVal;
 8001b9e:	4b95      	ldr	r3, [pc, #596]	; (8001df4 <main+0x834>)
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001ba6:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001baa:	f8c3 201d 	str.w	r2, [r3, #29]
        rtls_obj.info.anchorInfo.y.yVal = myAnchor.y.yVal;
 8001bae:	4b91      	ldr	r3, [pc, #580]	; (8001df4 <main+0x834>)
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001bb6:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001bba:	f8c3 2021 	str.w	r2, [r3, #33]	; 0x21
        int len = formatCmd((char *)rxBuffer, "$get_info", (char *)&rtls_obj.info, sizeof(rtls_obj.info));
 8001bbe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bc2:	f103 0217 	add.w	r2, r3, #23
 8001bc6:	230e      	movs	r3, #14
 8001bc8:	498b      	ldr	r1, [pc, #556]	; (8001df8 <main+0x838>)
 8001bca:	4887      	ldr	r0, [pc, #540]	; (8001de8 <main+0x828>)
 8001bcc:	f7ff fc42 	bl	8001454 <formatCmd>
 8001bd0:	f8c7 0420 	str.w	r0, [r7, #1056]	; 0x420
        HAL_UART_Transmit(&huart3, (uint8_t *)rxBuffer, len, 100);
 8001bd4:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	2364      	movs	r3, #100	; 0x64
 8001bdc:	4982      	ldr	r1, [pc, #520]	; (8001de8 <main+0x828>)
 8001bde:	4887      	ldr	r0, [pc, #540]	; (8001dfc <main+0x83c>)
 8001be0:	f006 ff03 	bl	80089ea <HAL_UART_Transmit>
      }
      memset(rxBuffer, 0, sizeof(rxBuffer));
 8001be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be8:	2100      	movs	r1, #0
 8001bea:	487f      	ldr	r0, [pc, #508]	; (8001de8 <main+0x828>)
 8001bec:	f008 fa0e 	bl	800a00c <memset>
      HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 8001bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf4:	497c      	ldr	r1, [pc, #496]	; (8001de8 <main+0x828>)
 8001bf6:	4881      	ldr	r0, [pc, #516]	; (8001dfc <main+0x83c>)
 8001bf8:	f006 ff89 	bl	8008b0e <HAL_UARTEx_ReceiveToIdle_DMA>
      __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001bfc:	4b80      	ldr	r3, [pc, #512]	; (8001e00 <main+0x840>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b7f      	ldr	r3, [pc, #508]	; (8001e00 <main+0x840>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0208 	bic.w	r2, r2, #8
 8001c0a:	601a      	str	r2, [r3, #0]
      systemHandle.rxBufAvai = false;
 8001c0c:	4b7d      	ldr	r3, [pc, #500]	; (8001e04 <main+0x844>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	709a      	strb	r2, [r3, #2]
  while (!(systemHandle.anchorCfg == true))
 8001c12:	4b7c      	ldr	r3, [pc, #496]	; (8001e04 <main+0x844>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	f083 0301 	eor.w	r3, r3, #1
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f47f adfb 	bne.w	8001818 <main+0x258>
    }
  }
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 8001c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c26:	4970      	ldr	r1, [pc, #448]	; (8001de8 <main+0x828>)
 8001c28:	4874      	ldr	r0, [pc, #464]	; (8001dfc <main+0x83c>)
 8001c2a:	f006 ff70 	bl	8008b0e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001c2e:	4b74      	ldr	r3, [pc, #464]	; (8001e00 <main+0x840>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b72      	ldr	r3, [pc, #456]	; (8001e00 <main+0x840>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0208 	bic.w	r2, r2, #8
 8001c3c:	601a      	str	r2, [r3, #0]
    myAnchor.x.xVal = X;
    myAnchor.y.yVal = Y;
  }
#endif

  TIM2->CNT = 0;
 8001c3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(&htim2);
 8001c46:	4870      	ldr	r0, [pc, #448]	; (8001e08 <main+0x848>)
 8001c48:	f006 fb9c 	bl	8008384 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (myAnchor.anchorMain == true)
 8001c4c:	4b69      	ldr	r3, [pc, #420]	; (8001df4 <main+0x834>)
 8001c4e:	785b      	ldrb	r3, [r3, #1]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <main+0x69a>
    {
      systemHandle.anchorSync = true;
 8001c54:	4b6b      	ldr	r3, [pc, #428]	; (8001e04 <main+0x844>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	705a      	strb	r2, [r3, #1]
    }
    if (!systemHandle.anchorSync)
 8001c5a:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <main+0x844>)
 8001c5c:	785b      	ldrb	r3, [r3, #1]
 8001c5e:	f083 0301 	eor.w	r3, r3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80a5 	beq.w	8001db4 <main+0x7f4>
    {
      // Sync clock
      dwNewReceive(&device);
 8001c6a:	4868      	ldr	r0, [pc, #416]	; (8001e0c <main+0x84c>)
 8001c6c:	f002 f8e3 	bl	8003e36 <dwNewReceive>
      dwSetDefaults(&device);
 8001c70:	4866      	ldr	r0, [pc, #408]	; (8001e0c <main+0x84c>)
 8001c72:	f002 fbd3 	bl	800441c <dwSetDefaults>
      dwStartReceive(&device);
 8001c76:	4865      	ldr	r0, [pc, #404]	; (8001e0c <main+0x84c>)
 8001c78:	f002 f8f5 	bl	8003e66 <dwStartReceive>
      do
      {
        dwReadSystemEventStatusRegister(&device);
 8001c7c:	4863      	ldr	r0, [pc, #396]	; (8001e0c <main+0x84c>)
 8001c7e:	f001 fed6 	bl	8003a2e <dwReadSystemEventStatusRegister>
      } while (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))));
 8001c82:	4b62      	ldr	r3, [pc, #392]	; (8001e0c <main+0x84c>)
 8001c84:	7e9b      	ldrb	r3, [r3, #26]
 8001c86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d105      	bne.n	8001c9a <main+0x6da>
 8001c8e:	4b5f      	ldr	r3, [pc, #380]	; (8001e0c <main+0x84c>)
 8001c90:	7edb      	ldrb	r3, [r3, #27]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <main+0x6bc>
      if (device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8))
 8001c9a:	4b5c      	ldr	r3, [pc, #368]	; (8001e0c <main+0x84c>)
 8001c9c:	7e9b      	ldrb	r3, [r3, #26]
 8001c9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8083 	beq.w	8001dae <main+0x7ee>
      {
        systemHandle.timeSyncRecv = TIM2->CNT;
 8001ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	4a55      	ldr	r2, [pc, #340]	; (8001e04 <main+0x844>)
 8001cb0:	6093      	str	r3, [r2, #8]
        dwInteruptHandler();
 8001cb2:	f7ff fb27 	bl	8001304 <dwInteruptHandler>
        memset(&bufPacket, 0, sizeof(bufPacket));
 8001cb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001cba:	2289      	movs	r2, #137	; 0x89
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f008 f9a4 	bl	800a00c <memset>
        int length = dwGetDataLength(&device);
 8001cc4:	4851      	ldr	r0, [pc, #324]	; (8001e0c <main+0x84c>)
 8001cc6:	f002 fc49 	bl	800455c <dwGetDataLength>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
        if (length > 0)
 8001cd0:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	ddb9      	ble.n	8001c4c <main+0x68c>
        {
          dwGetData(&device, (uint8_t *)&bufPacket, length);
 8001cd8:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8001cdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	484a      	ldr	r0, [pc, #296]	; (8001e0c <main+0x84c>)
 8001ce4:	f002 fc72 	bl	80045cc <dwGetData>
          if (bufPacket.payload[BEAC_ID] == TYPE_BEAC)
 8001ce8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001cec:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001cf0:	7a5b      	ldrb	r3, [r3, #9]
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d1aa      	bne.n	8001c4c <main+0x68c>
          {
            uint8_t bcnSlotNum = bufPacket.payload[BEAC_BCN_SLOT_NUM];
 8001cf6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001cfa:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001cfe:	7b1b      	ldrb	r3, [r3, #12]
 8001d00:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
            uint8_t sfNumCurrent = bufPacket.payload[BEAC_SF_NUM];
 8001d04:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001d08:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001d0c:	7adb      	ldrb	r3, [r3, #11]
 8001d0e:	f887 3426 	strb.w	r3, [r7, #1062]	; 0x426
            if (bcnSlotNum < superframe.bcnSlotTotal && sfNumCurrent < superframe.sfNumberTotal)
 8001d12:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <main+0x830>)
 8001d14:	789b      	ldrb	r3, [r3, #2]
 8001d16:	f897 2427 	ldrb.w	r2, [r7, #1063]	; 0x427
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d296      	bcs.n	8001c4c <main+0x68c>
 8001d1e:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <main+0x830>)
 8001d20:	791b      	ldrb	r3, [r3, #4]
 8001d22:	f897 2426 	ldrb.w	r2, [r7, #1062]	; 0x426
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d290      	bcs.n	8001c4c <main+0x68c>
            {
              systemHandle.timeSyncEnd = TIM2->CNT;
 8001d2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	4a34      	ldr	r2, [pc, #208]	; (8001e04 <main+0x844>)
 8001d32:	60d3      	str	r3, [r2, #12]
              if (systemHandle.timeSyncEnd > systemHandle.timeSyncRecv)
 8001d34:	4b33      	ldr	r3, [pc, #204]	; (8001e04 <main+0x844>)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <main+0x844>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d914      	bls.n	8001d6a <main+0x7aa>
              {
                TIM2->CNT = bcnTimes[bcnSlotNum] + superframe.sfOffset + systemHandle.timeSyncEnd - systemHandle.timeSyncRecv;
 8001d40:	f897 2427 	ldrb.w	r2, [r7, #1063]	; 0x427
 8001d44:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001d48:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d50:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <main+0x830>)
 8001d52:	8812      	ldrh	r2, [r2, #0]
 8001d54:	441a      	add	r2, r3
 8001d56:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <main+0x844>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	441a      	add	r2, r3
 8001d5c:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <main+0x844>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	624b      	str	r3, [r1, #36]	; 0x24
 8001d68:	e016      	b.n	8001d98 <main+0x7d8>
              }
              else
              {
                TIM2->CNT = bcnTimes[bcnSlotNum] + superframe.sfOffset + systemHandle.timeSyncEnd + 100000 / DIV - systemHandle.timeSyncRecv;
 8001d6a:	f897 2427 	ldrb.w	r2, [r7, #1063]	; 0x427
 8001d6e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001d72:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7a:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <main+0x830>)
 8001d7c:	8812      	ldrh	r2, [r2, #0]
 8001d7e:	441a      	add	r2, r3
 8001d80:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <main+0x844>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	441a      	add	r2, r3
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <main+0x844>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d90:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8001d94:	33a0      	adds	r3, #160	; 0xa0
 8001d96:	6253      	str	r3, [r2, #36]	; 0x24
              }
              superframe.sfNumberCurrent = sfNumCurrent;
 8001d98:	4a15      	ldr	r2, [pc, #84]	; (8001df0 <main+0x830>)
 8001d9a:	f897 3426 	ldrb.w	r3, [r7, #1062]	; 0x426
 8001d9e:	71d3      	strb	r3, [r2, #7]
              systemHandle.anchorSync = true;
 8001da0:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <main+0x844>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	705a      	strb	r2, [r3, #1]
              systemHandle.notSyncCnt = 0;
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <main+0x844>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	71da      	strb	r2, [r3, #7]
 8001dac:	e74e      	b.n	8001c4c <main+0x68c>
          }
        }
      }
      else
      {
        dwInteruptHandler();
 8001dae:	f7ff faa9 	bl	8001304 <dwInteruptHandler>
 8001db2:	e74b      	b.n	8001c4c <main+0x68c>
      }
    }
    else
    {
      // New superframe
      while (!((TIM2->CNT > 0) && (TIM2->CNT < 10)))
 8001db4:	bf00      	nop
 8001db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0fa      	beq.n	8001db6 <main+0x7f6>
 8001dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	2b09      	cmp	r3, #9
 8001dc8:	d8f5      	bhi.n	8001db6 <main+0x7f6>
        ;
      if (superframe.sfNumberCurrent == superframe.sfNumberTotal - 1)
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <main+0x830>)
 8001dcc:	79db      	ldrb	r3, [r3, #7]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <main+0x830>)
 8001dd2:	791b      	ldrb	r3, [r3, #4]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d11a      	bne.n	8001e10 <main+0x850>
      {
        superframe.sfNumberCurrent = 0;
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <main+0x830>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	71da      	strb	r2, [r3, #7]
 8001de0:	e01c      	b.n	8001e1c <main+0x85c>
 8001de2:	bf00      	nop
 8001de4:	0800ed9c 	.word	0x0800ed9c
 8001de8:	200003e4 	.word	0x200003e4
 8001dec:	0800eda8 	.word	0x0800eda8
 8001df0:	20000000 	.word	0x20000000
 8001df4:	200002a8 	.word	0x200002a8
 8001df8:	0800edc8 	.word	0x0800edc8
 8001dfc:	20000714 	.word	0x20000714
 8001e00:	20000758 	.word	0x20000758
 8001e04:	20000278 	.word	0x20000278
 8001e08:	20000688 	.word	0x20000688
 8001e0c:	20000008 	.word	0x20000008
      }
      else
      {
        superframe.sfNumberCurrent++;
 8001e10:	4b95      	ldr	r3, [pc, #596]	; (8002068 <main+0xaa8>)
 8001e12:	79db      	ldrb	r3, [r3, #7]
 8001e14:	3301      	adds	r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b93      	ldr	r3, [pc, #588]	; (8002068 <main+0xaa8>)
 8001e1a:	71da      	strb	r2, [r3, #7]
      }
      memset(&beaconHandle, 0, sizeof(beaconHandle));
 8001e1c:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001e20:	220c      	movs	r2, #12
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f008 f8f1 	bl	800a00c <memset>
      if (myAnchor.extCnt > 0)
 8001e2a:	4b90      	ldr	r3, [pc, #576]	; (800206c <main+0xaac>)
 8001e2c:	78db      	ldrb	r3, [r3, #3]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d056      	beq.n	8001ee0 <main+0x920>
      {
        // Add extend part into Beacon Message
        if (myAnchor.bcnFlag == PROV_TAG)
 8001e32:	4b8e      	ldr	r3, [pc, #568]	; (800206c <main+0xaac>)
 8001e34:	789b      	ldrb	r3, [r3, #2]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d111      	bne.n	8001e5e <main+0x89e>
        {
          beaconHandle.beaconMess.flag = (1 << PROV_TAG);
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f887 3415 	strb.w	r3, [r7, #1045]	; 0x415
 8001e40:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001e44:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001e48:	89db      	ldrh	r3, [r3, #14]
          memcpy(beaconHandle.beaconMess.beaconExt.tagAddr, rtls_obj.cfg_tag.address, sizeof(rtls_obj.cfg_tag.address));
 8001e4a:	f8a7 3418 	strh.w	r3, [r7, #1048]	; 0x418
          beaconHandle.beaconMess.beaconExt.twrSlotNumber = rtls_obj.cfg_tag.slot;
 8001e4e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001e52:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001e56:	7c1b      	ldrb	r3, [r3, #16]
 8001e58:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
 8001e5c:	e016      	b.n	8001e8c <main+0x8cc>
        }
        else if (myAnchor.bcnFlag == DEL_TAG)
 8001e5e:	4b83      	ldr	r3, [pc, #524]	; (800206c <main+0xaac>)
 8001e60:	789b      	ldrb	r3, [r3, #2]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d112      	bne.n	8001e8c <main+0x8cc>
        {
          beaconHandle.beaconMess.flag = (1 << DEL_TAG);
 8001e66:	2304      	movs	r3, #4
 8001e68:	f887 3415 	strb.w	r3, [r7, #1045]	; 0x415
 8001e6c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001e70:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001e74:	f8b3 3011 	ldrh.w	r3, [r3, #17]
 8001e78:	b29b      	uxth	r3, r3
          memcpy(beaconHandle.beaconMess.beaconExt.tagAddr, rtls_obj.del_tag.address, sizeof(rtls_obj.del_tag.address));
 8001e7a:	f8a7 3418 	strh.w	r3, [r7, #1048]	; 0x418
          beaconHandle.beaconMess.beaconExt.twrSlotNumber = rtls_obj.del_tag.slot;
 8001e7e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001e82:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001e86:	7cdb      	ldrb	r3, [r3, #19]
 8001e88:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
        }
        myAnchor.extCnt--;
 8001e8c:	4b77      	ldr	r3, [pc, #476]	; (800206c <main+0xaac>)
 8001e8e:	78db      	ldrb	r3, [r3, #3]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b75      	ldr	r3, [pc, #468]	; (800206c <main+0xaac>)
 8001e96:	70da      	strb	r2, [r3, #3]
        if (myAnchor.extCnt == 0)
 8001e98:	4b74      	ldr	r3, [pc, #464]	; (800206c <main+0xaac>)
 8001e9a:	78db      	ldrb	r3, [r3, #3]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d122      	bne.n	8001ee6 <main+0x926>
        {
          if (myAnchor.bcnFlag == PROV_TAG)
 8001ea0:	4b72      	ldr	r3, [pc, #456]	; (800206c <main+0xaac>)
 8001ea2:	789b      	ldrb	r3, [r3, #2]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d10b      	bne.n	8001ec0 <main+0x900>
          {
            memset(&rtls_obj.cfg_tag, 0, sizeof(rtls_obj.cfg_tag));
 8001ea8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001eac:	330e      	adds	r3, #14
 8001eae:	2203      	movs	r2, #3
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f008 f8aa 	bl	800a00c <memset>
            myAnchor.bcnFlag = NONE;
 8001eb8:	4b6c      	ldr	r3, [pc, #432]	; (800206c <main+0xaac>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	709a      	strb	r2, [r3, #2]
 8001ebe:	e012      	b.n	8001ee6 <main+0x926>
          }
          else if (myAnchor.bcnFlag == DEL_TAG)
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <main+0xaac>)
 8001ec2:	789b      	ldrb	r3, [r3, #2]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d10e      	bne.n	8001ee6 <main+0x926>
          {
            memset(&rtls_obj.del_tag, 0, sizeof(rtls_obj.del_tag));
 8001ec8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ecc:	3311      	adds	r3, #17
 8001ece:	2203      	movs	r2, #3
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f008 f89a 	bl	800a00c <memset>
            myAnchor.bcnFlag = NONE;
 8001ed8:	4b64      	ldr	r3, [pc, #400]	; (800206c <main+0xaac>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	709a      	strb	r2, [r3, #2]
 8001ede:	e002      	b.n	8001ee6 <main+0x926>
          }
        }
      }
      else
      {
        beaconHandle.beaconMess.flag = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3415 	strb.w	r3, [r7, #1045]	; 0x415
      }
      if (myAnchor.anchorMain)
 8001ee6:	4b61      	ldr	r3, [pc, #388]	; (800206c <main+0xaac>)
 8001ee8:	785b      	ldrb	r3, [r3, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80b4 	beq.w	8002058 <main+0xa98>
      {
        rtlsTimes.bcnStart = TIM2->CNT;
 8001ef0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	4a5e      	ldr	r2, [pc, #376]	; (8002070 <main+0xab0>)
 8001ef8:	6013      	str	r3, [r2, #0]
        systemHandle.testOneCnt++;
 8001efa:	4b5e      	ldr	r3, [pc, #376]	; (8002074 <main+0xab4>)
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	3301      	adds	r3, #1
 8001f00:	4a5c      	ldr	r2, [pc, #368]	; (8002074 <main+0xab4>)
 8001f02:	6293      	str	r3, [r2, #40]	; 0x28
        // Anchor Main
        while (TIM2->CNT < 100 / DIV)
 8001f04:	bf00      	nop
 8001f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	2b63      	cmp	r3, #99	; 0x63
 8001f0e:	d9fa      	bls.n	8001f06 <main+0x946>
          ;
        beaconHandle.beaconMess.messID = TYPE_BEAC;
 8001f10:	2310      	movs	r3, #16
 8001f12:	f887 3414 	strb.w	r3, [r7, #1044]	; 0x414
        beaconHandle.beaconMess.sfNumber = superframe.sfNumberCurrent;
 8001f16:	4b54      	ldr	r3, [pc, #336]	; (8002068 <main+0xaa8>)
 8001f18:	79db      	ldrb	r3, [r3, #7]
 8001f1a:	f887 3416 	strb.w	r3, [r7, #1046]	; 0x416
        beaconHandle.beaconMess.bcnSlotNumber = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
        memset(&beaconPacket, 0, sizeof(beaconPacket));
 8001f24:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001f28:	2289      	movs	r2, #137	; 0x89
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f008 f86d 	bl	800a00c <memset>
        MAC80215_PACKET_INIT(beaconPacket, MAC802154_TYPE_DATA);
 8001f32:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001f36:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8001f3a:	7813      	ldrb	r3, [r2, #0]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	f361 0302 	bfi	r3, r1, #0, #3
 8001f42:	7013      	strb	r3, [r2, #0]
 8001f44:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001f48:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8001f4c:	7813      	ldrb	r3, [r2, #0]
 8001f4e:	f36f 03c3 	bfc	r3, #3, #1
 8001f52:	7013      	strb	r3, [r2, #0]
 8001f54:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001f58:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8001f5c:	7813      	ldrb	r3, [r2, #0]
 8001f5e:	f36f 1304 	bfc	r3, #4, #1
 8001f62:	7013      	strb	r3, [r2, #0]
 8001f64:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001f68:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8001f6c:	7813      	ldrb	r3, [r2, #0]
 8001f6e:	f36f 1345 	bfc	r3, #5, #1
 8001f72:	7013      	strb	r3, [r2, #0]
 8001f74:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001f78:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8001f7c:	7813      	ldrb	r3, [r2, #0]
 8001f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f82:	7013      	strb	r3, [r2, #0]
 8001f84:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001f88:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8001f8c:	7853      	ldrb	r3, [r2, #1]
 8001f8e:	2102      	movs	r1, #2
 8001f90:	f361 0383 	bfi	r3, r1, #2, #2
 8001f94:	7053      	strb	r3, [r2, #1]
 8001f96:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001f9a:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8001f9e:	7853      	ldrb	r3, [r2, #1]
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	f361 1305 	bfi	r3, r1, #4, #2
 8001fa6:	7053      	strb	r3, [r2, #1]
 8001fa8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001fac:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8001fb0:	7853      	ldrb	r3, [r2, #1]
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	f361 1387 	bfi	r3, r1, #6, #2
 8001fb8:	7053      	strb	r3, [r2, #1]
 8001fba:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001fbe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8001fc8:	70da      	strb	r2, [r3, #3]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8001fd0:	711a      	strb	r2, [r3, #4]
        memset(beaconPacket.destAddress, 0xFF, 2);
 8001fd2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001fd6:	3305      	adds	r3, #5
 8001fd8:	2202      	movs	r2, #2
 8001fda:	21ff      	movs	r1, #255	; 0xff
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f008 f815 	bl	800a00c <memset>
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <main+0xaac>)
 8001fe4:	889a      	ldrh	r2, [r3, #4]
        memcpy(beaconPacket.sourceAddress, myAnchor.anchorAddress, sizeof(myAnchor.anchorAddress));
 8001fe6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001fea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001fee:	f8a3 2007 	strh.w	r2, [r3, #7]
        memcpy(beaconPacket.payload, (uint8_t *)&beaconHandle.beaconMess, sizeof(beaconHandle.beaconMess));
 8001ff2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001ff6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ffa:	3309      	adds	r3, #9
 8001ffc:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8002000:	6810      	ldr	r0, [r2, #0]
 8002002:	6018      	str	r0, [r3, #0]
 8002004:	8891      	ldrh	r1, [r2, #4]
 8002006:	7992      	ldrb	r2, [r2, #6]
 8002008:	8099      	strh	r1, [r3, #4]
 800200a:	719a      	strb	r2, [r3, #6]
        dwNewTransmit(&device);
 800200c:	481a      	ldr	r0, [pc, #104]	; (8002078 <main+0xab8>)
 800200e:	f001 ff56 	bl	8003ebe <dwNewTransmit>
        dwSetDefaults(&device);
 8002012:	4819      	ldr	r0, [pc, #100]	; (8002078 <main+0xab8>)
 8002014:	f002 fa02 	bl	800441c <dwSetDefaults>
        dwSetData(&device, (uint8_t *)&beaconPacket, MAC802154_HEADER_LENGTH + sizeof(beaconHandle.beaconMess));
 8002018:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800201c:	2210      	movs	r2, #16
 800201e:	4619      	mov	r1, r3
 8002020:	4815      	ldr	r0, [pc, #84]	; (8002078 <main+0xab8>)
 8002022:	f002 fa59 	bl	80044d8 <dwSetData>
        dwStartTransmit(&device, false);
 8002026:	2100      	movs	r1, #0
 8002028:	4813      	ldr	r0, [pc, #76]	; (8002078 <main+0xab8>)
 800202a:	f001 ff60 	bl	8003eee <dwStartTransmit>
        do
        {
          dwReadSystemEventStatusRegister(&device);
 800202e:	4812      	ldr	r0, [pc, #72]	; (8002078 <main+0xab8>)
 8002030:	f001 fcfd 	bl	8003a2e <dwReadSystemEventStatusRegister>
        } while (!(device.sysstatus[0] & (1 << TXFRS_BIT)));
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <main+0xab8>)
 8002036:	7e5b      	ldrb	r3, [r3, #25]
 8002038:	b25b      	sxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	daf7      	bge.n	800202e <main+0xa6e>
        rtlsTimes.bcnSent = TIM2->CNT;
 800203e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <main+0xab0>)
 8002046:	6053      	str	r3, [r2, #4]
        dwInteruptHandler();
 8002048:	f7ff f95c 	bl	8001304 <dwInteruptHandler>
        rtlsTimes.bcnEnd = TIM2->CNT;
 800204c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	4a07      	ldr	r2, [pc, #28]	; (8002070 <main+0xab0>)
 8002054:	6093      	str	r3, [r2, #8]
 8002056:	e1b1      	b.n	80023bc <main+0xdfc>
      }
      else
      {
        superframe.bcnSlotCurrent = 0;
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <main+0xaa8>)
 800205a:	2200      	movs	r2, #0
 800205c:	715a      	strb	r2, [r3, #5]
        systemHandle.anchorSfSync = false;
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <main+0xab4>)
 8002060:	2200      	movs	r2, #0
 8002062:	719a      	strb	r2, [r3, #6]
        while (superframe.bcnSlotCurrent < superframe.bcnSlotTotal)
 8002064:	e18e      	b.n	8002384 <main+0xdc4>
 8002066:	bf00      	nop
 8002068:	20000000 	.word	0x20000000
 800206c:	200002a8 	.word	0x200002a8
 8002070:	200002b8 	.word	0x200002b8
 8002074:	20000278 	.word	0x20000278
 8002078:	20000008 	.word	0x20000008
        {
          while (TIM2->CNT < bcnTimes[superframe.bcnSlotCurrent])
 800207c:	bf00      	nop
 800207e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002084:	4ba8      	ldr	r3, [pc, #672]	; (8002328 <main+0xd68>)
 8002086:	795b      	ldrb	r3, [r3, #5]
 8002088:	4619      	mov	r1, r3
 800208a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800208e:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8002092:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002096:	429a      	cmp	r2, r3
 8002098:	d3f1      	bcc.n	800207e <main+0xabe>
            ;
          if (myAnchor.bcnSlotNumber == superframe.bcnSlotCurrent)
 800209a:	4ba4      	ldr	r3, [pc, #656]	; (800232c <main+0xd6c>)
 800209c:	799a      	ldrb	r2, [r3, #6]
 800209e:	4ba2      	ldr	r3, [pc, #648]	; (8002328 <main+0xd68>)
 80020a0:	795b      	ldrb	r3, [r3, #5]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	f040 80ba 	bne.w	800221c <main+0xc5c>
          {
		    rtlsTimes.bcnStart = TIM2->CNT;
 80020a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	4aa0      	ldr	r2, [pc, #640]	; (8002330 <main+0xd70>)
 80020b0:	6013      	str	r3, [r2, #0]
            while (TIM2->CNT < (bcnTimes[superframe.bcnSlotCurrent] + 100 / DIV))
 80020b2:	bf00      	nop
 80020b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ba:	4b9b      	ldr	r3, [pc, #620]	; (8002328 <main+0xd68>)
 80020bc:	795b      	ldrb	r3, [r3, #5]
 80020be:	4619      	mov	r1, r3
 80020c0:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80020c4:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80020c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020cc:	3364      	adds	r3, #100	; 0x64
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d3f0      	bcc.n	80020b4 <main+0xaf4>
              ;
            beaconHandle.beaconMess.messID = TYPE_BEAC;
 80020d2:	2310      	movs	r3, #16
 80020d4:	f887 3414 	strb.w	r3, [r7, #1044]	; 0x414
            beaconHandle.beaconMess.sfNumber = superframe.sfNumberCurrent;
 80020d8:	4b93      	ldr	r3, [pc, #588]	; (8002328 <main+0xd68>)
 80020da:	79db      	ldrb	r3, [r3, #7]
 80020dc:	f887 3416 	strb.w	r3, [r7, #1046]	; 0x416
            beaconHandle.beaconMess.bcnSlotNumber = superframe.bcnSlotCurrent;
 80020e0:	4b91      	ldr	r3, [pc, #580]	; (8002328 <main+0xd68>)
 80020e2:	795b      	ldrb	r3, [r3, #5]
 80020e4:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
            memset(&beaconPacket, 0, sizeof(beaconPacket));
 80020e8:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80020ec:	2289      	movs	r2, #137	; 0x89
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f007 ff8b 	bl	800a00c <memset>
            MAC80215_PACKET_INIT(beaconPacket, MAC802154_TYPE_DATA);
 80020f6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80020fa:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 80020fe:	7813      	ldrb	r3, [r2, #0]
 8002100:	2101      	movs	r1, #1
 8002102:	f361 0302 	bfi	r3, r1, #0, #3
 8002106:	7013      	strb	r3, [r2, #0]
 8002108:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800210c:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8002110:	7813      	ldrb	r3, [r2, #0]
 8002112:	f36f 03c3 	bfc	r3, #3, #1
 8002116:	7013      	strb	r3, [r2, #0]
 8002118:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800211c:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8002120:	7813      	ldrb	r3, [r2, #0]
 8002122:	f36f 1304 	bfc	r3, #4, #1
 8002126:	7013      	strb	r3, [r2, #0]
 8002128:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800212c:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8002130:	7813      	ldrb	r3, [r2, #0]
 8002132:	f36f 1345 	bfc	r3, #5, #1
 8002136:	7013      	strb	r3, [r2, #0]
 8002138:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800213c:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8002140:	7813      	ldrb	r3, [r2, #0]
 8002142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002146:	7013      	strb	r3, [r2, #0]
 8002148:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800214c:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8002150:	7853      	ldrb	r3, [r2, #1]
 8002152:	2102      	movs	r1, #2
 8002154:	f361 0383 	bfi	r3, r1, #2, #2
 8002158:	7053      	strb	r3, [r2, #1]
 800215a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800215e:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8002162:	7853      	ldrb	r3, [r2, #1]
 8002164:	2101      	movs	r1, #1
 8002166:	f361 1305 	bfi	r3, r1, #4, #2
 800216a:	7053      	strb	r3, [r2, #1]
 800216c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002170:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8002174:	7853      	ldrb	r3, [r2, #1]
 8002176:	2102      	movs	r1, #2
 8002178:	f361 1387 	bfi	r3, r1, #6, #2
 800217c:	7053      	strb	r3, [r2, #1]
 800217e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002182:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002186:	2200      	movs	r2, #0
 8002188:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800218c:	70da      	strb	r2, [r3, #3]
 800218e:	2200      	movs	r2, #0
 8002190:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8002194:	711a      	strb	r2, [r3, #4]
            memset(beaconPacket.destAddress, 0xFF, 2);
 8002196:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800219a:	3305      	adds	r3, #5
 800219c:	2202      	movs	r2, #2
 800219e:	21ff      	movs	r1, #255	; 0xff
 80021a0:	4618      	mov	r0, r3
 80021a2:	f007 ff33 	bl	800a00c <memset>
 80021a6:	4b61      	ldr	r3, [pc, #388]	; (800232c <main+0xd6c>)
 80021a8:	889a      	ldrh	r2, [r3, #4]
            memcpy(beaconPacket.sourceAddress, myAnchor.anchorAddress, sizeof(myAnchor.anchorAddress));
 80021aa:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80021ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021b2:	f8a3 2007 	strh.w	r2, [r3, #7]
            memcpy(beaconPacket.payload, (uint8_t *)&beaconHandle.beaconMess, sizeof(beaconHandle.beaconMess));
 80021b6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80021ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021be:	3309      	adds	r3, #9
 80021c0:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80021c4:	6810      	ldr	r0, [r2, #0]
 80021c6:	6018      	str	r0, [r3, #0]
 80021c8:	8891      	ldrh	r1, [r2, #4]
 80021ca:	7992      	ldrb	r2, [r2, #6]
 80021cc:	8099      	strh	r1, [r3, #4]
 80021ce:	719a      	strb	r2, [r3, #6]
            dwNewTransmit(&device);
 80021d0:	4858      	ldr	r0, [pc, #352]	; (8002334 <main+0xd74>)
 80021d2:	f001 fe74 	bl	8003ebe <dwNewTransmit>
            dwSetDefaults(&device);
 80021d6:	4857      	ldr	r0, [pc, #348]	; (8002334 <main+0xd74>)
 80021d8:	f002 f920 	bl	800441c <dwSetDefaults>
            dwSetData(&device, (uint8_t *)&beaconPacket, MAC802154_HEADER_LENGTH + sizeof(beaconHandle.beaconMess));
 80021dc:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80021e0:	2210      	movs	r2, #16
 80021e2:	4619      	mov	r1, r3
 80021e4:	4853      	ldr	r0, [pc, #332]	; (8002334 <main+0xd74>)
 80021e6:	f002 f977 	bl	80044d8 <dwSetData>
            dwStartTransmit(&device, false);
 80021ea:	2100      	movs	r1, #0
 80021ec:	4851      	ldr	r0, [pc, #324]	; (8002334 <main+0xd74>)
 80021ee:	f001 fe7e 	bl	8003eee <dwStartTransmit>
            do
            {
              dwReadSystemEventStatusRegister(&device);
 80021f2:	4850      	ldr	r0, [pc, #320]	; (8002334 <main+0xd74>)
 80021f4:	f001 fc1b 	bl	8003a2e <dwReadSystemEventStatusRegister>
            } while (!(device.sysstatus[0] & (1 << TXFRS_BIT)));
 80021f8:	4b4e      	ldr	r3, [pc, #312]	; (8002334 <main+0xd74>)
 80021fa:	7e5b      	ldrb	r3, [r3, #25]
 80021fc:	b25b      	sxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	daf7      	bge.n	80021f2 <main+0xc32>
            rtlsTimes.bcnSent = TIM2->CNT;
 8002202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	4a49      	ldr	r2, [pc, #292]	; (8002330 <main+0xd70>)
 800220a:	6053      	str	r3, [r2, #4]
            dwInteruptHandler();
 800220c:	f7ff f87a 	bl	8001304 <dwInteruptHandler>
            rtlsTimes.bcnEnd = TIM2->CNT;
 8002210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	4a46      	ldr	r2, [pc, #280]	; (8002330 <main+0xd70>)
 8002218:	6093      	str	r3, [r2, #8]
 800221a:	e0ad      	b.n	8002378 <main+0xdb8>
          }
          else if (systemHandle.anchorSfSync == false)
 800221c:	4b46      	ldr	r3, [pc, #280]	; (8002338 <main+0xd78>)
 800221e:	799b      	ldrb	r3, [r3, #6]
 8002220:	f083 0301 	eor.w	r3, r3, #1
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80a6 	beq.w	8002378 <main+0xdb8>
          {
            dwSetReceiveWaitTimeout(&device, RX_BEACON_TIMEOUT);
 800222c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002230:	4840      	ldr	r0, [pc, #256]	; (8002334 <main+0xd74>)
 8002232:	f001 fc95 	bl	8003b60 <dwSetReceiveWaitTimeout>
            dwWriteSystemConfigurationRegister(&device);
 8002236:	483f      	ldr	r0, [pc, #252]	; (8002334 <main+0xd74>)
 8002238:	f001 fbe8 	bl	8003a0c <dwWriteSystemConfigurationRegister>
            dwNewReceive(&device);
 800223c:	483d      	ldr	r0, [pc, #244]	; (8002334 <main+0xd74>)
 800223e:	f001 fdfa 	bl	8003e36 <dwNewReceive>
            dwSetDefaults(&device);
 8002242:	483c      	ldr	r0, [pc, #240]	; (8002334 <main+0xd74>)
 8002244:	f002 f8ea 	bl	800441c <dwSetDefaults>
            dwStartReceive(&device);
 8002248:	483a      	ldr	r0, [pc, #232]	; (8002334 <main+0xd74>)
 800224a:	f001 fe0c 	bl	8003e66 <dwStartReceive>
            do
            {
              dwReadSystemEventStatusRegister(&device);
 800224e:	4839      	ldr	r0, [pc, #228]	; (8002334 <main+0xd74>)
 8002250:	f001 fbed 	bl	8003a2e <dwReadSystemEventStatusRegister>
            } while (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))));
 8002254:	4b37      	ldr	r3, [pc, #220]	; (8002334 <main+0xd74>)
 8002256:	7e9b      	ldrb	r3, [r3, #26]
 8002258:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <main+0xcac>
 8002260:	4b34      	ldr	r3, [pc, #208]	; (8002334 <main+0xd74>)
 8002262:	7edb      	ldrb	r3, [r3, #27]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <main+0xc8e>
            systemHandle.timeSyncRecv = TIM2->CNT;
 800226c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	4a31      	ldr	r2, [pc, #196]	; (8002338 <main+0xd78>)
 8002274:	6093      	str	r3, [r2, #8]
            dwInteruptHandler();
 8002276:	f7ff f845 	bl	8001304 <dwInteruptHandler>
            if (device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8))
 800227a:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <main+0xd74>)
 800227c:	7e9b      	ldrb	r3, [r3, #26]
 800227e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002282:	2b00      	cmp	r3, #0
 8002284:	d078      	beq.n	8002378 <main+0xdb8>
            {
              int length = dwGetDataLength(&device);
 8002286:	482b      	ldr	r0, [pc, #172]	; (8002334 <main+0xd74>)
 8002288:	f002 f968 	bl	800455c <dwGetDataLength>
 800228c:	4603      	mov	r3, r0
 800228e:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
              if (length > 0)
 8002292:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8002296:	2b00      	cmp	r3, #0
 8002298:	dd6e      	ble.n	8002378 <main+0xdb8>
              {
                memset(&beaconPacket, 0, sizeof(beaconPacket));
 800229a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800229e:	2289      	movs	r2, #137	; 0x89
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f007 feb2 	bl	800a00c <memset>
                dwGetData(&device, (uint8_t *)&beaconPacket, length);
 80022a8:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 80022ac:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80022b0:	4619      	mov	r1, r3
 80022b2:	4820      	ldr	r0, [pc, #128]	; (8002334 <main+0xd74>)
 80022b4:	f002 f98a 	bl	80045cc <dwGetData>
                if (beaconPacket.payload[BEAC_ID] == TYPE_BEAC)
 80022b8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80022bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022c0:	7a5b      	ldrb	r3, [r3, #9]
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d158      	bne.n	8002378 <main+0xdb8>
                  //				  for (uint32_t j = 0; j < superframe.twrSlotTotal; j++)
                  //				  {
                  //				    twrTimes[j] *= systemHandle.ratio;
                  //				  }
                  //				  uartTime *= systemHandle.ratio;
                  systemHandle.timeSyncEnd = TIM2->CNT;
 80022c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	4a1a      	ldr	r2, [pc, #104]	; (8002338 <main+0xd78>)
 80022ce:	60d3      	str	r3, [r2, #12]
                  if (systemHandle.anchorSfSync == false)
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <main+0xd78>)
 80022d2:	799b      	ldrb	r3, [r3, #6]
 80022d4:	f083 0301 	eor.w	r3, r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d04c      	beq.n	8002378 <main+0xdb8>
                  {
                	systemHandle.testOneCnt++;
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <main+0xd78>)
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	3301      	adds	r3, #1
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <main+0xd78>)
 80022e6:	6293      	str	r3, [r2, #40]	; 0x28
                    if (systemHandle.timeSyncEnd > systemHandle.timeSyncRecv)
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <main+0xd78>)
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <main+0xd78>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d923      	bls.n	800233c <main+0xd7c>
                    {
                      TIM2->CNT = bcnTimes[beaconPacket.payload[BEAC_BCN_SLOT_NUM]] + superframe.sfOffset + (systemHandle.timeSyncEnd - systemHandle.timeSyncRecv);
 80022f4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80022f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022fc:	7b1b      	ldrb	r3, [r3, #12]
 80022fe:	461a      	mov	r2, r3
 8002300:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002304:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8002308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <main+0xd68>)
 800230e:	8812      	ldrh	r2, [r2, #0]
 8002310:	441a      	add	r2, r3
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <main+0xd78>)
 8002314:	68d9      	ldr	r1, [r3, #12]
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <main+0xd78>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	1acb      	subs	r3, r1, r3
 800231c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002320:	4413      	add	r3, r2
 8002322:	624b      	str	r3, [r1, #36]	; 0x24
 8002324:	e025      	b.n	8002372 <main+0xdb2>
 8002326:	bf00      	nop
 8002328:	20000000 	.word	0x20000000
 800232c:	200002a8 	.word	0x200002a8
 8002330:	200002b8 	.word	0x200002b8
 8002334:	20000008 	.word	0x20000008
 8002338:	20000278 	.word	0x20000278
                    }
                    else
                    {
                      TIM2->CNT = bcnTimes[beaconPacket.payload[BEAC_BCN_SLOT_NUM]] + superframe.sfOffset + (systemHandle.timeSyncEnd + 100000 / DIV - systemHandle.timeSyncRecv);
 800233c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002340:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002344:	7b1b      	ldrb	r3, [r3, #12]
 8002346:	461a      	mov	r2, r3
 8002348:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800234c:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8002350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002354:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <main+0xe28>)
 8002356:	8812      	ldrh	r2, [r2, #0]
 8002358:	441a      	add	r2, r3
 800235a:	4b24      	ldr	r3, [pc, #144]	; (80023ec <main+0xe2c>)
 800235c:	68d9      	ldr	r1, [r3, #12]
 800235e:	4b23      	ldr	r3, [pc, #140]	; (80023ec <main+0xe2c>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	1acb      	subs	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800236a:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800236e:	33a0      	adds	r3, #160	; 0xa0
 8002370:	6253      	str	r3, [r2, #36]	; 0x24
                    }
                    systemHandle.anchorSfSync = true;
 8002372:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <main+0xe2c>)
 8002374:	2201      	movs	r2, #1
 8002376:	719a      	strb	r2, [r3, #6]
            }
            else
            {
            }
          }
          superframe.bcnSlotCurrent++;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <main+0xe28>)
 800237a:	795b      	ldrb	r3, [r3, #5]
 800237c:	3301      	adds	r3, #1
 800237e:	b2da      	uxtb	r2, r3
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <main+0xe28>)
 8002382:	715a      	strb	r2, [r3, #5]
        while (superframe.bcnSlotCurrent < superframe.bcnSlotTotal)
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <main+0xe28>)
 8002386:	795a      	ldrb	r2, [r3, #5]
 8002388:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <main+0xe28>)
 800238a:	789b      	ldrb	r3, [r3, #2]
 800238c:	429a      	cmp	r2, r3
 800238e:	f4ff ae75 	bcc.w	800207c <main+0xabc>
        }
        if (systemHandle.anchorSfSync == true)
 8002392:	4b16      	ldr	r3, [pc, #88]	; (80023ec <main+0xe2c>)
 8002394:	799b      	ldrb	r3, [r3, #6]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <main+0xde2>
        {
          systemHandle.notSyncCnt = 0;
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <main+0xe2c>)
 800239c:	2200      	movs	r2, #0
 800239e:	71da      	strb	r2, [r3, #7]
 80023a0:	e00c      	b.n	80023bc <main+0xdfc>
        }
        else
        {
          systemHandle.notSyncCnt++;
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <main+0xe2c>)
 80023a4:	79db      	ldrb	r3, [r3, #7]
 80023a6:	3301      	adds	r3, #1
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <main+0xe2c>)
 80023ac:	71da      	strb	r2, [r3, #7]
          if (systemHandle.notSyncCnt >= 5)
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <main+0xe2c>)
 80023b0:	79db      	ldrb	r3, [r3, #7]
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d902      	bls.n	80023bc <main+0xdfc>
          {
            systemHandle.anchorSync = false;
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <main+0xe2c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	705a      	strb	r2, [r3, #1]
          }
        }
      }
      // TWR
      superframe.twrSlotCurrent = 0;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <main+0xe28>)
 80023be:	2200      	movs	r2, #0
 80023c0:	719a      	strb	r2, [r3, #6]
      systemHandle.locCnt = 0;
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <main+0xe2c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	761a      	strb	r2, [r3, #24]
      memset(tagLoc, 0, superframe.twrSlotTotal * sizeof(tagLoc_t));
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <main+0xe28>)
 80023ca:	78db      	ldrb	r3, [r3, #3]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	441a      	add	r2, r3
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2100      	movs	r1, #0
 80023de:	4618      	mov	r0, r3
 80023e0:	f007 fe14 	bl	800a00c <memset>
      while (superframe.twrSlotCurrent < superframe.twrSlotTotal)
 80023e4:	e2c5      	b.n	8002972 <main+0x13b2>
 80023e6:	bf00      	nop
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000278 	.word	0x20000278
      {
        while (TIM2->CNT < twrTimes[superframe.twrSlotCurrent])
 80023f0:	bf00      	nop
 80023f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f8:	4bd5      	ldr	r3, [pc, #852]	; (8002750 <main+0x1190>)
 80023fa:	799b      	ldrb	r3, [r3, #6]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002402:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8002406:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800240a:	429a      	cmp	r2, r3
 800240c:	d3f1      	bcc.n	80023f2 <main+0xe32>
          ;
        dwSetReceiveWaitTimeout(&device, RX_POLL_TIMEOUT);
 800240e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002412:	48d0      	ldr	r0, [pc, #832]	; (8002754 <main+0x1194>)
 8002414:	f001 fba4 	bl	8003b60 <dwSetReceiveWaitTimeout>
        dwWriteSystemConfigurationRegister(&device);
 8002418:	48ce      	ldr	r0, [pc, #824]	; (8002754 <main+0x1194>)
 800241a:	f001 faf7 	bl	8003a0c <dwWriteSystemConfigurationRegister>
        dwNewReceive(&device);
 800241e:	48cd      	ldr	r0, [pc, #820]	; (8002754 <main+0x1194>)
 8002420:	f001 fd09 	bl	8003e36 <dwNewReceive>
        dwSetDefaults(&device);
 8002424:	48cb      	ldr	r0, [pc, #812]	; (8002754 <main+0x1194>)
 8002426:	f001 fff9 	bl	800441c <dwSetDefaults>
        dwStartReceive(&device);
 800242a:	48ca      	ldr	r0, [pc, #808]	; (8002754 <main+0x1194>)
 800242c:	f001 fd1b 	bl	8003e66 <dwStartReceive>
        do
        {
          dwReadSystemEventStatusRegister(&device);
 8002430:	48c8      	ldr	r0, [pc, #800]	; (8002754 <main+0x1194>)
 8002432:	f001 fafc 	bl	8003a2e <dwReadSystemEventStatusRegister>
        } while (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))));
 8002436:	4bc7      	ldr	r3, [pc, #796]	; (8002754 <main+0x1194>)
 8002438:	7e9b      	ldrb	r3, [r3, #26]
 800243a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <main+0xe8e>
 8002442:	4bc4      	ldr	r3, [pc, #784]	; (8002754 <main+0x1194>)
 8002444:	7edb      	ldrb	r3, [r3, #27]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <main+0xe70>
        rtlsTimes.pollRecv[superframe.twrSlotCurrent] = TIM2->CNT;
 800244e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002452:	4abf      	ldr	r2, [pc, #764]	; (8002750 <main+0x1190>)
 8002454:	7992      	ldrb	r2, [r2, #6]
 8002456:	4610      	mov	r0, r2
 8002458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800245a:	49bf      	ldr	r1, [pc, #764]	; (8002758 <main+0x1198>)
 800245c:	1c83      	adds	r3, r0, #2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	605a      	str	r2, [r3, #4]
        dwInteruptHandler();
 8002464:	f7fe ff4e 	bl	8001304 <dwInteruptHandler>
        if (device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8))
 8002468:	4bba      	ldr	r3, [pc, #744]	; (8002754 <main+0x1194>)
 800246a:	7e9b      	ldrb	r3, [r3, #26]
 800246c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 826c 	beq.w	800294e <main+0x138e>
        {
          int length = dwGetDataLength(&device);
 8002476:	48b7      	ldr	r0, [pc, #732]	; (8002754 <main+0x1194>)
 8002478:	f002 f870 	bl	800455c <dwGetDataLength>
 800247c:	4603      	mov	r3, r0
 800247e:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
          if (length > 0)
 8002482:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8002486:	2b00      	cmp	r3, #0
 8002488:	f340 826d 	ble.w	8002966 <main+0x13a6>
          {
            memset(&pollPacket, 0, sizeof(pollPacket));
 800248c:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8002490:	2289      	movs	r2, #137	; 0x89
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f007 fdb9 	bl	800a00c <memset>
            dwGetData(&device, (uint8_t *)&pollPacket, length);
 800249a:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 800249e:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80024a2:	4619      	mov	r1, r3
 80024a4:	48ab      	ldr	r0, [pc, #684]	; (8002754 <main+0x1194>)
 80024a6:	f002 f891 	bl	80045cc <dwGetData>
            if (pollPacket.payload[POLL_ID] == TYPE_POLL)
 80024aa:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80024ae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024b2:	7a5b      	ldrb	r3, [r3, #9]
 80024b4:	2b21      	cmp	r3, #33	; 0x21
 80024b6:	f040 8256 	bne.w	8002966 <main+0x13a6>
            {
              memset(&pollHandle, 0, sizeof(pollHandle));
 80024ba:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80024be:	2218      	movs	r2, #24
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f007 fda2 	bl	800a00c <memset>
              memcpy(&pollHandle.pollMess, pollPacket.payload, sizeof(pollHandle.pollMess));
 80024c8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80024cc:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 80024d0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80024d4:	f102 0409 	add.w	r4, r2, #9
 80024d8:	6820      	ldr	r0, [r4, #0]
 80024da:	6861      	ldr	r1, [r4, #4]
 80024dc:	68a2      	ldr	r2, [r4, #8]
 80024de:	c307      	stmia	r3!, {r0, r1, r2}
 80024e0:	7b22      	ldrb	r2, [r4, #12]
 80024e2:	701a      	strb	r2, [r3, #0]
              int myAddrIndex = findAddress(pollHandle.pollMess.anchorAddr, myAnchor.anchorAddress, sizeof(pollHandle.pollMess.anchorAddr));
 80024e4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80024e8:	3305      	adds	r3, #5
 80024ea:	2208      	movs	r2, #8
 80024ec:	499b      	ldr	r1, [pc, #620]	; (800275c <main+0x119c>)
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe ff84 	bl	80013fc <findAddress>
 80024f4:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
              if (myAddrIndex != -1)
 80024f8:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	f000 8231 	beq.w	8002966 <main+0x13a6>
              {
                // Have my address
                dwGetReceiveTimestamp(&device, &pollHandle.timestamp);
 8002504:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002508:	3310      	adds	r3, #16
 800250a:	4619      	mov	r1, r3
 800250c:	4891      	ldr	r0, [pc, #580]	; (8002754 <main+0x1194>)
 800250e:	f002 f873 	bl	80045f8 <dwGetReceiveTimestamp>
                int myRespIndex = myAddrIndex / 2;
 8002512:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8002516:	0fda      	lsrs	r2, r3, #31
 8002518:	4413      	add	r3, r2
 800251a:	105b      	asrs	r3, r3, #1
 800251c:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
                rtlsTimes.pollEnd[superframe.twrSlotCurrent] = TIM2->CNT;
 8002520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002524:	4a8a      	ldr	r2, [pc, #552]	; (8002750 <main+0x1190>)
 8002526:	7992      	ldrb	r2, [r2, #6]
 8002528:	4610      	mov	r0, r2
 800252a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800252c:	498a      	ldr	r1, [pc, #552]	; (8002758 <main+0x1198>)
 800252e:	f100 030c 	add.w	r3, r0, #12
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	605a      	str	r2, [r3, #4]
                while (TIM2->CNT < twrTimes[superframe.twrSlotCurrent] + (SF_POLL_SLOT_TIME + myRespIndex * SF_RESP_SLOT_TIME + 100) / DIV)
 8002538:	bf00      	nop
 800253a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800253e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002540:	4b83      	ldr	r3, [pc, #524]	; (8002750 <main+0x1190>)
 8002542:	799b      	ldrb	r3, [r3, #6]
 8002544:	4619      	mov	r1, r3
 8002546:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800254a:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800254e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002552:	f8d7 1438 	ldr.w	r1, [r7, #1080]	; 0x438
 8002556:	3101      	adds	r1, #1
 8002558:	f240 5014 	movw	r0, #1300	; 0x514
 800255c:	fb00 f101 	mul.w	r1, r0, r1
 8002560:	440b      	add	r3, r1
 8002562:	429a      	cmp	r2, r3
 8002564:	d3e9      	bcc.n	800253a <main+0xf7a>
                  ;
                rtlsTimes.respStart[superframe.twrSlotCurrent] = TIM2->CNT;
 8002566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800256a:	4a79      	ldr	r2, [pc, #484]	; (8002750 <main+0x1190>)
 800256c:	7992      	ldrb	r2, [r2, #6]
 800256e:	4610      	mov	r0, r2
 8002570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002572:	4979      	ldr	r1, [pc, #484]	; (8002758 <main+0x1198>)
 8002574:	f100 0316 	add.w	r3, r0, #22
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	605a      	str	r2, [r3, #4]
                memset(&respPacket, 0, sizeof(respPacket));
 800257e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002582:	2289      	movs	r2, #137	; 0x89
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f007 fd40 	bl	800a00c <memset>
                memset(&respHandle, 0, sizeof(respHandle));
 800258c:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8002590:	2220      	movs	r2, #32
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f007 fd39 	bl	800a00c <memset>
                MAC80215_PACKET_INIT(respPacket, MAC802154_TYPE_DATA);
 800259a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800259e:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 80025a2:	7813      	ldrb	r3, [r2, #0]
 80025a4:	2101      	movs	r1, #1
 80025a6:	f361 0302 	bfi	r3, r1, #0, #3
 80025aa:	7013      	strb	r3, [r2, #0]
 80025ac:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80025b0:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 80025b4:	7813      	ldrb	r3, [r2, #0]
 80025b6:	f36f 03c3 	bfc	r3, #3, #1
 80025ba:	7013      	strb	r3, [r2, #0]
 80025bc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80025c0:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 80025c4:	7813      	ldrb	r3, [r2, #0]
 80025c6:	f36f 1304 	bfc	r3, #4, #1
 80025ca:	7013      	strb	r3, [r2, #0]
 80025cc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80025d0:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 80025d4:	7813      	ldrb	r3, [r2, #0]
 80025d6:	f36f 1345 	bfc	r3, #5, #1
 80025da:	7013      	strb	r3, [r2, #0]
 80025dc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80025e0:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 80025e4:	7813      	ldrb	r3, [r2, #0]
 80025e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ea:	7013      	strb	r3, [r2, #0]
 80025ec:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80025f0:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 80025f4:	7853      	ldrb	r3, [r2, #1]
 80025f6:	2102      	movs	r1, #2
 80025f8:	f361 0383 	bfi	r3, r1, #2, #2
 80025fc:	7053      	strb	r3, [r2, #1]
 80025fe:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002602:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 8002606:	7853      	ldrb	r3, [r2, #1]
 8002608:	2101      	movs	r1, #1
 800260a:	f361 1305 	bfi	r3, r1, #4, #2
 800260e:	7053      	strb	r3, [r2, #1]
 8002610:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002614:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 8002618:	7853      	ldrb	r3, [r2, #1]
 800261a:	2102      	movs	r1, #2
 800261c:	f361 1387 	bfi	r3, r1, #6, #2
 8002620:	7053      	strb	r3, [r2, #1]
 8002622:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002626:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800262a:	2200      	movs	r2, #0
 800262c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8002630:	70da      	strb	r2, [r3, #3]
 8002632:	2200      	movs	r2, #0
 8002634:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8002638:	711a      	strb	r2, [r3, #4]
 800263a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800263e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002642:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8002646:	b29a      	uxth	r2, r3
                memcpy(respPacket.destAddress, pollPacket.sourceAddress, sizeof(pollPacket.sourceAddress));
 8002648:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800264c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8002650:	f8a3 2005 	strh.w	r2, [r3, #5]
 8002654:	4b42      	ldr	r3, [pc, #264]	; (8002760 <main+0x11a0>)
 8002656:	889a      	ldrh	r2, [r3, #4]
                memcpy(respPacket.sourceAddress, myAnchor.anchorAddress, sizeof(myAnchor.anchorAddress));
 8002658:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800265c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8002660:	f8a3 2007 	strh.w	r2, [r3, #7]
                respHandle.respMess.messID = TYPE_RESP;
 8002664:	2332      	movs	r3, #50	; 0x32
 8002666:	f887 33d8 	strb.w	r3, [r7, #984]	; 0x3d8
                respHandle.respMess.x.xVal = myAnchor.x.xVal;
 800266a:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <main+0x11a0>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f8c7 33d9 	str.w	r3, [r7, #985]	; 0x3d9
                respHandle.respMess.y.yVal = myAnchor.y.yVal;
 8002672:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <main+0x11a0>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f8c7 33dd 	str.w	r3, [r7, #989]	; 0x3dd
                memcpy(respHandle.respMess.rxTimestamp.timeRaw, pollHandle.timestamp.timeRaw, sizeof(pollHandle.timestamp.timeRaw));
 800267a:	f207 33e1 	addw	r3, r7, #993	; 0x3e1
 800267e:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8002682:	6810      	ldr	r0, [r2, #0]
 8002684:	6018      	str	r0, [r3, #0]
 8002686:	7912      	ldrb	r2, [r2, #4]
 8002688:	711a      	strb	r2, [r3, #4]
                uint64_t delayTx = US_TO_DECAWAVE_TICK * RESP_DELAY;
 800268a:	a32f      	add	r3, pc, #188	; (adr r3, 8002748 <main+0x1188>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8002694:	e9c1 2300 	strd	r2, r3, [r1]
                respHandle.timestamp.timeFull = dwSetTxDelay(&device, delayTx);
 8002698:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	482c      	ldr	r0, [pc, #176]	; (8002754 <main+0x1194>)
 80026a2:	f001 fd01 	bl	80040a8 <dwSetTxDelay>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
                memcpy(respHandle.respMess.txTimestamp.timeRaw, respHandle.timestamp.timeRaw, sizeof(respHandle.timestamp.timeRaw));
 80026ae:	f207 33e6 	addw	r3, r7, #998	; 0x3e6
 80026b2:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 80026b6:	6810      	ldr	r0, [r2, #0]
 80026b8:	6018      	str	r0, [r3, #0]
 80026ba:	7912      	ldrb	r2, [r2, #4]
 80026bc:	711a      	strb	r2, [r3, #4]
                memcpy(respPacket.payload, (uint8_t *)&respHandle.respMess, sizeof(respHandle.respMess));
 80026be:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80026c2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80026c6:	f103 0509 	add.w	r5, r3, #9
 80026ca:	f507 7476 	add.w	r4, r7, #984	; 0x3d8
 80026ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d0:	6028      	str	r0, [r5, #0]
 80026d2:	6069      	str	r1, [r5, #4]
 80026d4:	60aa      	str	r2, [r5, #8]
 80026d6:	60eb      	str	r3, [r5, #12]
 80026d8:	8823      	ldrh	r3, [r4, #0]
 80026da:	78a2      	ldrb	r2, [r4, #2]
 80026dc:	822b      	strh	r3, [r5, #16]
 80026de:	4613      	mov	r3, r2
 80026e0:	74ab      	strb	r3, [r5, #18]
                dwNewTransmit(&device);
 80026e2:	481c      	ldr	r0, [pc, #112]	; (8002754 <main+0x1194>)
 80026e4:	f001 fbeb 	bl	8003ebe <dwNewTransmit>
                dwSetDefaults(&device);
 80026e8:	481a      	ldr	r0, [pc, #104]	; (8002754 <main+0x1194>)
 80026ea:	f001 fe97 	bl	800441c <dwSetDefaults>
                dwSetData(&device, (uint8_t *)&respPacket, MAC802154_HEADER_LENGTH + sizeof(respHandle.respMess));
 80026ee:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80026f2:	221c      	movs	r2, #28
 80026f4:	4619      	mov	r1, r3
 80026f6:	4817      	ldr	r0, [pc, #92]	; (8002754 <main+0x1194>)
 80026f8:	f001 feee 	bl	80044d8 <dwSetData>
                dwStartTransmit(&device, true);
 80026fc:	2101      	movs	r1, #1
 80026fe:	4815      	ldr	r0, [pc, #84]	; (8002754 <main+0x1194>)
 8002700:	f001 fbf5 	bl	8003eee <dwStartTransmit>
                do
                {
                  dwReadSystemEventStatusRegister(&device);
 8002704:	4813      	ldr	r0, [pc, #76]	; (8002754 <main+0x1194>)
 8002706:	f001 f992 	bl	8003a2e <dwReadSystemEventStatusRegister>
                } while (!(device.sysstatus[0] & (1 << TXFRS_BIT)));
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <main+0x1194>)
 800270c:	7e5b      	ldrb	r3, [r3, #25]
 800270e:	b25b      	sxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	daf7      	bge.n	8002704 <main+0x1144>
                rtlsTimes.respSent[superframe.twrSlotCurrent] = TIM2->CNT;
 8002714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <main+0x1190>)
 800271a:	7992      	ldrb	r2, [r2, #6]
 800271c:	4610      	mov	r0, r2
 800271e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002720:	490d      	ldr	r1, [pc, #52]	; (8002758 <main+0x1198>)
 8002722:	f100 0320 	add.w	r3, r0, #32
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	605a      	str	r2, [r3, #4]
                dwInteruptHandler();
 800272c:	f7fe fdea 	bl	8001304 <dwInteruptHandler>
                rtlsTimes.respEnd[superframe.twrSlotCurrent] = TIM2->CNT;
 8002730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002734:	4a06      	ldr	r2, [pc, #24]	; (8002750 <main+0x1190>)
 8002736:	7992      	ldrb	r2, [r2, #6]
 8002738:	4610      	mov	r0, r2
 800273a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800273c:	4906      	ldr	r1, [pc, #24]	; (8002758 <main+0x1198>)
 800273e:	f100 032a 	add.w	r3, r0, #42	; 0x2a
 8002742:	e00f      	b.n	8002764 <main+0x11a4>
 8002744:	f3af 8000 	nop.w
 8002748:	015f0090 	.word	0x015f0090
 800274c:	00000000 	.word	0x00000000
 8002750:	20000000 	.word	0x20000000
 8002754:	20000008 	.word	0x20000008
 8002758:	200002b8 	.word	0x200002b8
 800275c:	200002ac 	.word	0x200002ac
 8002760:	200002a8 	.word	0x200002a8
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	605a      	str	r2, [r3, #4]
                while (TIM2->CNT < twrTimes[superframe.twrSlotCurrent] + (SF_POLL_SLOT_TIME + 4 * SF_RESP_SLOT_TIME) / DIV)
 800276a:	bf00      	nop
 800276c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002772:	4bb1      	ldr	r3, [pc, #708]	; (8002a38 <main+0x1478>)
 8002774:	799b      	ldrb	r3, [r3, #6]
 8002776:	4619      	mov	r1, r3
 8002778:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800277c:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8002780:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002784:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8002788:	429a      	cmp	r2, r3
 800278a:	d3ef      	bcc.n	800276c <main+0x11ac>
                  ;
                dwSetReceiveWaitTimeout(&device, RX_LOC_TIMEOUT);
 800278c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002790:	48aa      	ldr	r0, [pc, #680]	; (8002a3c <main+0x147c>)
 8002792:	f001 f9e5 	bl	8003b60 <dwSetReceiveWaitTimeout>
                dwWriteSystemConfigurationRegister(&device);
 8002796:	48a9      	ldr	r0, [pc, #676]	; (8002a3c <main+0x147c>)
 8002798:	f001 f938 	bl	8003a0c <dwWriteSystemConfigurationRegister>
                dwNewReceive(&device);
 800279c:	48a7      	ldr	r0, [pc, #668]	; (8002a3c <main+0x147c>)
 800279e:	f001 fb4a 	bl	8003e36 <dwNewReceive>
                dwSetDefaults(&device);
 80027a2:	48a6      	ldr	r0, [pc, #664]	; (8002a3c <main+0x147c>)
 80027a4:	f001 fe3a 	bl	800441c <dwSetDefaults>
                dwStartReceive(&device);
 80027a8:	48a4      	ldr	r0, [pc, #656]	; (8002a3c <main+0x147c>)
 80027aa:	f001 fb5c 	bl	8003e66 <dwStartReceive>
                do
                {
                  dwReadSystemEventStatusRegister(&device);
 80027ae:	48a3      	ldr	r0, [pc, #652]	; (8002a3c <main+0x147c>)
 80027b0:	f001 f93d 	bl	8003a2e <dwReadSystemEventStatusRegister>
                } while (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))));
 80027b4:	4ba1      	ldr	r3, [pc, #644]	; (8002a3c <main+0x147c>)
 80027b6:	7e9b      	ldrb	r3, [r3, #26]
 80027b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <main+0x120c>
 80027c0:	4b9e      	ldr	r3, [pc, #632]	; (8002a3c <main+0x147c>)
 80027c2:	7edb      	ldrb	r3, [r3, #27]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <main+0x11ee>
                rtlsTimes.locRecv[superframe.twrSlotCurrent] = TIM2->CNT;
 80027cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027d0:	4a99      	ldr	r2, [pc, #612]	; (8002a38 <main+0x1478>)
 80027d2:	7992      	ldrb	r2, [r2, #6]
 80027d4:	4610      	mov	r0, r2
 80027d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d8:	4999      	ldr	r1, [pc, #612]	; (8002a40 <main+0x1480>)
 80027da:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	605a      	str	r2, [r3, #4]
                dwInteruptHandler();
 80027e4:	f7fe fd8e 	bl	8001304 <dwInteruptHandler>
                if (device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8))
 80027e8:	4b94      	ldr	r3, [pc, #592]	; (8002a3c <main+0x147c>)
 80027ea:	7e9b      	ldrb	r3, [r3, #26]
 80027ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 809f 	beq.w	8002934 <main+0x1374>
                {
                  int length = dwGetDataLength(&device);
 80027f6:	4891      	ldr	r0, [pc, #580]	; (8002a3c <main+0x147c>)
 80027f8:	f001 feb0 	bl	800455c <dwGetDataLength>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
                  if (length > 0)
 8002802:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8002806:	2b00      	cmp	r3, #0
 8002808:	f340 8087 	ble.w	800291a <main+0x135a>
                  {
                    memset(&locPacket, 0, sizeof(locPacket));
 800280c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8002810:	2289      	movs	r2, #137	; 0x89
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f007 fbf9 	bl	800a00c <memset>
                    memset(&locMess, 0, sizeof(locMess));
 800281a:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 800281e:	220a      	movs	r2, #10
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f007 fbf2 	bl	800a00c <memset>
                    dwGetData(&device, (uint8_t *)&locPacket, length);
 8002828:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 800282c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8002830:	4619      	mov	r1, r3
 8002832:	4882      	ldr	r0, [pc, #520]	; (8002a3c <main+0x147c>)
 8002834:	f001 feca 	bl	80045cc <dwGetData>

                    if (locPacket.payload[LOC_ID] == TYPE_LOC && memcmp(locPacket.destAddress, myAnchor.anchorAddress, sizeof(myAnchor.anchorAddress)) == 0)
 8002838:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800283c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002840:	7a5b      	ldrb	r3, [r3, #9]
 8002842:	2b43      	cmp	r3, #67	; 0x43
 8002844:	d169      	bne.n	800291a <main+0x135a>
 8002846:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800284a:	3305      	adds	r3, #5
 800284c:	2202      	movs	r2, #2
 800284e:	497d      	ldr	r1, [pc, #500]	; (8002a44 <main+0x1484>)
 8002850:	4618      	mov	r0, r3
 8002852:	f007 fbbd 	bl	8009fd0 <memcmp>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d15e      	bne.n	800291a <main+0x135a>
                    {
                      memcpy((uint8_t *)&locMess, locPacket.payload, sizeof(locMess));
 800285c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002860:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8002864:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8002868:	3209      	adds	r2, #9
 800286a:	6810      	ldr	r0, [r2, #0]
 800286c:	6851      	ldr	r1, [r2, #4]
 800286e:	c303      	stmia	r3!, {r0, r1}
 8002870:	8912      	ldrh	r2, [r2, #8]
 8002872:	801a      	strh	r2, [r3, #0]
                      memcpy(tagLoc[systemHandle.locCnt].tagAddress, locPacket.sourceAddress, sizeof(locPacket.sourceAddress));
 8002874:	4b74      	ldr	r3, [pc, #464]	; (8002a48 <main+0x1488>)
 8002876:	7e1b      	ldrb	r3, [r3, #24]
 8002878:	461a      	mov	r2, r3
 800287a:	f107 010c 	add.w	r1, r7, #12
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	440b      	add	r3, r1
 800288a:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800288e:	f5a2 7231 	sub.w	r2, r2, #708	; 0x2c4
 8002892:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 8002896:	b292      	uxth	r2, r2
 8002898:	801a      	strh	r2, [r3, #0]
                      tagLoc[systemHandle.locCnt].twrSlotNumber = locMess.twrSlotNumber;
 800289a:	4b6b      	ldr	r3, [pc, #428]	; (8002a48 <main+0x1488>)
 800289c:	7e1b      	ldrb	r3, [r3, #24]
 800289e:	461a      	mov	r2, r3
 80028a0:	f897 03cd 	ldrb.w	r0, [r7, #973]	; 0x3cd
 80028a4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80028a8:	f2a3 4154 	subw	r1, r3, #1108	; 0x454
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	440b      	add	r3, r1
 80028b8:	3302      	adds	r3, #2
 80028ba:	4602      	mov	r2, r0
 80028bc:	701a      	strb	r2, [r3, #0]
                      tagLoc[systemHandle.locCnt].x.xVal = locMess.x.xVal;
 80028be:	4b62      	ldr	r3, [pc, #392]	; (8002a48 <main+0x1488>)
 80028c0:	7e1b      	ldrb	r3, [r3, #24]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f8d7 03ce 	ldr.w	r0, [r7, #974]	; 0x3ce
 80028c8:	4603      	mov	r3, r0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80028d0:	f2a3 4154 	subw	r1, r3, #1108	; 0x454
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	440b      	add	r3, r1
 80028e0:	3303      	adds	r3, #3
 80028e2:	4602      	mov	r2, r0
 80028e4:	601a      	str	r2, [r3, #0]
                      tagLoc[systemHandle.locCnt].y.yVal = locMess.y.yVal;
 80028e6:	4b58      	ldr	r3, [pc, #352]	; (8002a48 <main+0x1488>)
 80028e8:	7e1b      	ldrb	r3, [r3, #24]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f8d7 03d2 	ldr.w	r0, [r7, #978]	; 0x3d2
 80028f0:	4603      	mov	r3, r0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80028f8:	f2a3 4154 	subw	r1, r3, #1108	; 0x454
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	440b      	add	r3, r1
 8002908:	3307      	adds	r3, #7
 800290a:	4602      	mov	r2, r0
 800290c:	601a      	str	r2, [r3, #0]
                      systemHandle.locCnt++;
 800290e:	4b4e      	ldr	r3, [pc, #312]	; (8002a48 <main+0x1488>)
 8002910:	7e1b      	ldrb	r3, [r3, #24]
 8002912:	3301      	adds	r3, #1
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b4c      	ldr	r3, [pc, #304]	; (8002a48 <main+0x1488>)
 8002918:	761a      	strb	r2, [r3, #24]
                    }
                  }
                  rtlsTimes.locEnd[superframe.twrSlotCurrent] = TIM2->CNT;
 800291a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800291e:	4a46      	ldr	r2, [pc, #280]	; (8002a38 <main+0x1478>)
 8002920:	7992      	ldrb	r2, [r2, #6]
 8002922:	4610      	mov	r0, r2
 8002924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002926:	4946      	ldr	r1, [pc, #280]	; (8002a40 <main+0x1480>)
 8002928:	f100 033e 	add.w	r3, r0, #62	; 0x3e
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	e018      	b.n	8002966 <main+0x13a6>
                }
                else
                {
                	rtlsTimes.locEnd[superframe.twrSlotCurrent] = TIM2->CNT;
 8002934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002938:	4a3f      	ldr	r2, [pc, #252]	; (8002a38 <main+0x1478>)
 800293a:	7992      	ldrb	r2, [r2, #6]
 800293c:	4610      	mov	r0, r2
 800293e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002940:	493f      	ldr	r1, [pc, #252]	; (8002a40 <main+0x1480>)
 8002942:	f100 033e 	add.w	r3, r0, #62	; 0x3e
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	e00b      	b.n	8002966 <main+0x13a6>
            }
          }
        }
        else
        {
        	rtlsTimes.pollEnd[superframe.twrSlotCurrent] = TIM2->CNT;
 800294e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002952:	4a39      	ldr	r2, [pc, #228]	; (8002a38 <main+0x1478>)
 8002954:	7992      	ldrb	r2, [r2, #6]
 8002956:	4610      	mov	r0, r2
 8002958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800295a:	4939      	ldr	r1, [pc, #228]	; (8002a40 <main+0x1480>)
 800295c:	f100 030c 	add.w	r3, r0, #12
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	605a      	str	r2, [r3, #4]
        }
        superframe.twrSlotCurrent++;
 8002966:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <main+0x1478>)
 8002968:	799b      	ldrb	r3, [r3, #6]
 800296a:	3301      	adds	r3, #1
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4b32      	ldr	r3, [pc, #200]	; (8002a38 <main+0x1478>)
 8002970:	719a      	strb	r2, [r3, #6]
      while (superframe.twrSlotCurrent < superframe.twrSlotTotal)
 8002972:	4b31      	ldr	r3, [pc, #196]	; (8002a38 <main+0x1478>)
 8002974:	799a      	ldrb	r2, [r3, #6]
 8002976:	4b30      	ldr	r3, [pc, #192]	; (8002a38 <main+0x1478>)
 8002978:	78db      	ldrb	r3, [r3, #3]
 800297a:	429a      	cmp	r2, r3
 800297c:	f4ff ad38 	bcc.w	80023f0 <main+0xe30>
      }
      // UART
      while (TIM2->CNT < uartTime)
 8002980:	bf00      	nop
 8002982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 800298c:	429a      	cmp	r2, r3
 800298e:	d8f8      	bhi.n	8002982 <main+0x13c2>
        ;
      rtlsTimes.uartStart = TIM2->CNT;
 8002990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	4a2a      	ldr	r2, [pc, #168]	; (8002a40 <main+0x1480>)
 8002998:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
      if (systemHandle.locCnt > 0)
 800299c:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <main+0x1488>)
 800299e:	7e1b      	ldrb	r3, [r3, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d032      	beq.n	8002a0a <main+0x144a>
      {
        uint8_t *tagPayload = calloc(sizeof(tagLoc_t) * systemHandle.locCnt + 20, sizeof(uint8_t));
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <main+0x1488>)
 80029a6:	7e1b      	ldrb	r3, [r3, #24]
 80029a8:	461a      	mov	r2, r3
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4413      	add	r3, r2
 80029b4:	3314      	adds	r3, #20
 80029b6:	2101      	movs	r1, #1
 80029b8:	4618      	mov	r0, r3
 80029ba:	f007 fac7 	bl	8009f4c <calloc>
 80029be:	4603      	mov	r3, r0
 80029c0:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        int len = formatLocCmd((char *)tagPayload, "$location", (char *)tagLoc, systemHandle.locCnt, sizeof(tagLoc_t) * systemHandle.locCnt);
 80029c4:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <main+0x1488>)
 80029c6:	7e19      	ldrb	r1, [r3, #24]
 80029c8:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <main+0x1488>)
 80029ca:	7e1b      	ldrb	r3, [r3, #24]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	f107 020c 	add.w	r2, r7, #12
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	460b      	mov	r3, r1
 80029e0:	491a      	ldr	r1, [pc, #104]	; (8002a4c <main+0x148c>)
 80029e2:	f8d7 044c 	ldr.w	r0, [r7, #1100]	; 0x44c
 80029e6:	f7fe fd7a 	bl	80014de <formatLocCmd>
 80029ea:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448
        HAL_UART_Transmit(&huart3, tagPayload, len, 1000);
 80029ee:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f8:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 80029fc:	4814      	ldr	r0, [pc, #80]	; (8002a50 <main+0x1490>)
 80029fe:	f005 fff4 	bl	80089ea <HAL_UART_Transmit>
        free(tagPayload);
 8002a02:	f8d7 044c 	ldr.w	r0, [r7, #1100]	; 0x44c
 8002a06:	f007 fadb 	bl	8009fc0 <free>
      }
      if (systemHandle.rxBufAvai == true)
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <main+0x1488>)
 8002a0c:	789b      	ldrb	r3, [r3, #2]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80f2 	beq.w	8002bf8 <main+0x1638>
      {
        if (strstr(rxBuffer, "stop") != NULL)
 8002a14:	490f      	ldr	r1, [pc, #60]	; (8002a54 <main+0x1494>)
 8002a16:	4810      	ldr	r0, [pc, #64]	; (8002a58 <main+0x1498>)
 8002a18:	f008 fabe 	bl	800af98 <strstr>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01c      	beq.n	8002a5c <main+0x149c>
        {
          HAL_UART_Transmit(&huart3, (uint8_t *)rxBuffer, systemHandle.rxBufSize, 100);
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <main+0x1488>)
 8002a24:	889a      	ldrh	r2, [r3, #4]
 8002a26:	2364      	movs	r3, #100	; 0x64
 8002a28:	490b      	ldr	r1, [pc, #44]	; (8002a58 <main+0x1498>)
 8002a2a:	4809      	ldr	r0, [pc, #36]	; (8002a50 <main+0x1490>)
 8002a2c:	f005 ffdd 	bl	80089ea <HAL_UART_Transmit>
          HAL_NVIC_SystemReset();
 8002a30:	f003 fa45 	bl	8005ebe <HAL_NVIC_SystemReset>
 8002a34:	e0c9      	b.n	8002bca <main+0x160a>
 8002a36:	bf00      	nop
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000008 	.word	0x20000008
 8002a40:	200002b8 	.word	0x200002b8
 8002a44:	200002ac 	.word	0x200002ac
 8002a48:	20000278 	.word	0x20000278
 8002a4c:	0800edd4 	.word	0x0800edd4
 8002a50:	20000714 	.word	0x20000714
 8002a54:	0800ede0 	.word	0x0800ede0
 8002a58:	200003e4 	.word	0x200003e4
        }
        else if (strstr(rxBuffer, "cfg_tag") != NULL)
 8002a5c:	496a      	ldr	r1, [pc, #424]	; (8002c08 <main+0x1648>)
 8002a5e:	486b      	ldr	r0, [pc, #428]	; (8002c0c <main+0x164c>)
 8002a60:	f008 fa9a 	bl	800af98 <strstr>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d01d      	beq.n	8002aa6 <main+0x14e6>
        {
          if (myAnchor.bcnFlag == NONE)
 8002a6a:	4b69      	ldr	r3, [pc, #420]	; (8002c10 <main+0x1650>)
 8002a6c:	789b      	ldrb	r3, [r3, #2]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 80ab 	bne.w	8002bca <main+0x160a>
          {
            myAnchor.bcnFlag = PROV_TAG;
 8002a74:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <main+0x1650>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	709a      	strb	r2, [r3, #2]
            myAnchor.extCnt = 5;
 8002a7a:	4b65      	ldr	r3, [pc, #404]	; (8002c10 <main+0x1650>)
 8002a7c:	2205      	movs	r2, #5
 8002a7e:	70da      	strb	r2, [r3, #3]
            memcpy((uint8_t *)&rtls_obj.cfg_tag, &rxBuffer[8], sizeof(rtls_obj.cfg_tag));
 8002a80:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002a84:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002a88:	4a60      	ldr	r2, [pc, #384]	; (8002c0c <main+0x164c>)
 8002a8a:	330e      	adds	r3, #14
 8002a8c:	3208      	adds	r2, #8
 8002a8e:	8811      	ldrh	r1, [r2, #0]
 8002a90:	7892      	ldrb	r2, [r2, #2]
 8002a92:	8019      	strh	r1, [r3, #0]
 8002a94:	709a      	strb	r2, [r3, #2]
            HAL_UART_Transmit(&huart3, (uint8_t *)rxBuffer, systemHandle.rxBufSize, 100);
 8002a96:	4b5f      	ldr	r3, [pc, #380]	; (8002c14 <main+0x1654>)
 8002a98:	889a      	ldrh	r2, [r3, #4]
 8002a9a:	2364      	movs	r3, #100	; 0x64
 8002a9c:	495b      	ldr	r1, [pc, #364]	; (8002c0c <main+0x164c>)
 8002a9e:	485e      	ldr	r0, [pc, #376]	; (8002c18 <main+0x1658>)
 8002aa0:	f005 ffa3 	bl	80089ea <HAL_UART_Transmit>
 8002aa4:	e091      	b.n	8002bca <main+0x160a>
          }
        }
        else if (strstr(rxBuffer, "del_tag") != NULL)
 8002aa6:	495d      	ldr	r1, [pc, #372]	; (8002c1c <main+0x165c>)
 8002aa8:	4858      	ldr	r0, [pc, #352]	; (8002c0c <main+0x164c>)
 8002aaa:	f008 fa75 	bl	800af98 <strstr>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d018      	beq.n	8002ae6 <main+0x1526>
        {
          myAnchor.bcnFlag = DEL_TAG;
 8002ab4:	4b56      	ldr	r3, [pc, #344]	; (8002c10 <main+0x1650>)
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	709a      	strb	r2, [r3, #2]
          myAnchor.extCnt = 5;
 8002aba:	4b55      	ldr	r3, [pc, #340]	; (8002c10 <main+0x1650>)
 8002abc:	2205      	movs	r2, #5
 8002abe:	70da      	strb	r2, [r3, #3]
          memcpy((uint8_t *)&rtls_obj.del_tag, &rxBuffer[8], sizeof(rtls_obj.del_tag));
 8002ac0:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002ac4:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002ac8:	4a50      	ldr	r2, [pc, #320]	; (8002c0c <main+0x164c>)
 8002aca:	3311      	adds	r3, #17
 8002acc:	3208      	adds	r2, #8
 8002ace:	8811      	ldrh	r1, [r2, #0]
 8002ad0:	7892      	ldrb	r2, [r2, #2]
 8002ad2:	8019      	strh	r1, [r3, #0]
 8002ad4:	709a      	strb	r2, [r3, #2]
          HAL_UART_Transmit(&huart3, (uint8_t *)rxBuffer, systemHandle.rxBufSize, 100);
 8002ad6:	4b4f      	ldr	r3, [pc, #316]	; (8002c14 <main+0x1654>)
 8002ad8:	889a      	ldrh	r2, [r3, #4]
 8002ada:	2364      	movs	r3, #100	; 0x64
 8002adc:	494b      	ldr	r1, [pc, #300]	; (8002c0c <main+0x164c>)
 8002ade:	484e      	ldr	r0, [pc, #312]	; (8002c18 <main+0x1658>)
 8002ae0:	f005 ff83 	bl	80089ea <HAL_UART_Transmit>
 8002ae4:	e071      	b.n	8002bca <main+0x160a>
        }
        else if (strstr(rxBuffer, "get_info") != NULL)
 8002ae6:	494e      	ldr	r1, [pc, #312]	; (8002c20 <main+0x1660>)
 8002ae8:	4848      	ldr	r0, [pc, #288]	; (8002c0c <main+0x164c>)
 8002aea:	f008 fa55 	bl	800af98 <strstr>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d04c      	beq.n	8002b8e <main+0x15ce>
        {
          memset(rxBuffer, 0, sizeof(rxBuffer));
 8002af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af8:	2100      	movs	r1, #0
 8002afa:	4844      	ldr	r0, [pc, #272]	; (8002c0c <main+0x164c>)
 8002afc:	f007 fa86 	bl	800a00c <memset>
          rtls_obj.info.bcnSlotTotal = superframe.bcnSlotTotal;
 8002b00:	4b48      	ldr	r3, [pc, #288]	; (8002c24 <main+0x1664>)
 8002b02:	789a      	ldrb	r2, [r3, #2]
 8002b04:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002b08:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002b0c:	75da      	strb	r2, [r3, #23]
          rtls_obj.info.sfNumberTotal = superframe.sfNumberTotal;
 8002b0e:	4b45      	ldr	r3, [pc, #276]	; (8002c24 <main+0x1664>)
 8002b10:	791a      	ldrb	r2, [r3, #4]
 8002b12:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002b16:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002b1a:	765a      	strb	r2, [r3, #25]
          rtls_obj.info.twrSlotTotal = superframe.twrSlotTotal;
 8002b1c:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <main+0x1664>)
 8002b1e:	78da      	ldrb	r2, [r3, #3]
 8002b20:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002b24:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002b28:	761a      	strb	r2, [r3, #24]
 8002b2a:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <main+0x1650>)
 8002b2c:	889a      	ldrh	r2, [r3, #4]
          memcpy(rtls_obj.info.anchorInfo.address, myAnchor.anchorAddress, sizeof(myAnchor.anchorAddress));
 8002b2e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002b32:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002b36:	835a      	strh	r2, [r3, #26]
          rtls_obj.info.anchorInfo.slot = myAnchor.bcnSlotNumber;
 8002b38:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <main+0x1650>)
 8002b3a:	799a      	ldrb	r2, [r3, #6]
 8002b3c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002b40:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002b44:	771a      	strb	r2, [r3, #28]
          rtls_obj.info.anchorInfo.x.xVal = myAnchor.x.xVal;
 8002b46:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <main+0x1650>)
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002b4e:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002b52:	f8c3 201d 	str.w	r2, [r3, #29]
          rtls_obj.info.anchorInfo.y.yVal = myAnchor.y.yVal;
 8002b56:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <main+0x1650>)
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002b5e:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002b62:	f8c3 2021 	str.w	r2, [r3, #33]	; 0x21
          int len = formatCmd((char *)rxBuffer, "$get_info", (char *)&rtls_obj.info, sizeof(rtls_obj.info));
 8002b66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b6a:	f103 0217 	add.w	r2, r3, #23
 8002b6e:	230e      	movs	r3, #14
 8002b70:	492d      	ldr	r1, [pc, #180]	; (8002c28 <main+0x1668>)
 8002b72:	4826      	ldr	r0, [pc, #152]	; (8002c0c <main+0x164c>)
 8002b74:	f7fe fc6e 	bl	8001454 <formatCmd>
 8002b78:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
          HAL_UART_Transmit(&huart3, (uint8_t *)rxBuffer, len, 100);
 8002b7c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	2364      	movs	r3, #100	; 0x64
 8002b84:	4921      	ldr	r1, [pc, #132]	; (8002c0c <main+0x164c>)
 8002b86:	4824      	ldr	r0, [pc, #144]	; (8002c18 <main+0x1658>)
 8002b88:	f005 ff2f 	bl	80089ea <HAL_UART_Transmit>
 8002b8c:	e01d      	b.n	8002bca <main+0x160a>
        }
        else if (strstr(rxBuffer, "get_test") != NULL)
 8002b8e:	4927      	ldr	r1, [pc, #156]	; (8002c2c <main+0x166c>)
 8002b90:	481e      	ldr	r0, [pc, #120]	; (8002c0c <main+0x164c>)
 8002b92:	f008 fa01 	bl	800af98 <strstr>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d016      	beq.n	8002bca <main+0x160a>
        {
        	memset(rxBuffer, 0, sizeof(rxBuffer));
 8002b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	481a      	ldr	r0, [pc, #104]	; (8002c0c <main+0x164c>)
 8002ba4:	f007 fa32 	bl	800a00c <memset>
        	sprintf(rxBuffer, "$get_test%d*", systemHandle.testOneCnt);
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <main+0x1654>)
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	461a      	mov	r2, r3
 8002bae:	4920      	ldr	r1, [pc, #128]	; (8002c30 <main+0x1670>)
 8002bb0:	4816      	ldr	r0, [pc, #88]	; (8002c0c <main+0x164c>)
 8002bb2:	f008 f9d1 	bl	800af58 <siprintf>
        	HAL_UART_Transmit(&huart3, (uint8_t *)rxBuffer, strlen(rxBuffer), 100);
 8002bb6:	4815      	ldr	r0, [pc, #84]	; (8002c0c <main+0x164c>)
 8002bb8:	f7fd fb0a 	bl	80001d0 <strlen>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	2364      	movs	r3, #100	; 0x64
 8002bc2:	4912      	ldr	r1, [pc, #72]	; (8002c0c <main+0x164c>)
 8002bc4:	4814      	ldr	r0, [pc, #80]	; (8002c18 <main+0x1658>)
 8002bc6:	f005 ff10 	bl	80089ea <HAL_UART_Transmit>
        }
        memset(rxBuffer, 0, sizeof(rxBuffer));
 8002bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bce:	2100      	movs	r1, #0
 8002bd0:	480e      	ldr	r0, [pc, #56]	; (8002c0c <main+0x164c>)
 8002bd2:	f007 fa1b 	bl	800a00c <memset>
        HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 8002bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bda:	490c      	ldr	r1, [pc, #48]	; (8002c0c <main+0x164c>)
 8002bdc:	480e      	ldr	r0, [pc, #56]	; (8002c18 <main+0x1658>)
 8002bde:	f005 ff96 	bl	8008b0e <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002be2:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <main+0x1674>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <main+0x1674>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0208 	bic.w	r2, r2, #8
 8002bf0:	601a      	str	r2, [r3, #0]
        systemHandle.rxBufAvai = false;
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <main+0x1654>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	709a      	strb	r2, [r3, #2]
      }
      rtlsTimes.uartEnd = TIM2->CNT;
 8002bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	4a0e      	ldr	r2, [pc, #56]	; (8002c38 <main+0x1678>)
 8002c00:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    if (myAnchor.anchorMain == true)
 8002c04:	f7ff b822 	b.w	8001c4c <main+0x68c>
 8002c08:	0800ede8 	.word	0x0800ede8
 8002c0c:	200003e4 	.word	0x200003e4
 8002c10:	200002a8 	.word	0x200002a8
 8002c14:	20000278 	.word	0x20000278
 8002c18:	20000714 	.word	0x20000714
 8002c1c:	0800edf0 	.word	0x0800edf0
 8002c20:	0800ed9c 	.word	0x0800ed9c
 8002c24:	20000000 	.word	0x20000000
 8002c28:	0800edc8 	.word	0x0800edc8
 8002c2c:	0800edf8 	.word	0x0800edf8
 8002c30:	0800ee04 	.word	0x0800ee04
 8002c34:	20000758 	.word	0x20000758
 8002c38:	200002b8 	.word	0x200002b8

08002c3c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b094      	sub	sp, #80	; 0x50
 8002c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c42:	f107 0320 	add.w	r3, r7, #32
 8002c46:	2230      	movs	r2, #48	; 0x30
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f007 f9de 	bl	800a00c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c50:	f107 030c 	add.w	r3, r7, #12
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <SystemClock_Config+0xcc>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <SystemClock_Config+0xcc>)
 8002c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <SystemClock_Config+0xcc>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <SystemClock_Config+0xd0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <SystemClock_Config+0xd0>)
 8002c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <SystemClock_Config+0xd0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ca6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002cac:	2304      	movs	r3, #4
 8002cae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002cb0:	23a0      	movs	r3, #160	; 0xa0
 8002cb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002cb8:	2304      	movs	r3, #4
 8002cba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cbc:	f107 0320 	add.w	r3, r7, #32
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f004 f8cf 	bl	8006e64 <HAL_RCC_OscConfig>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ccc:	f000 f820 	bl	8002d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cd0:	230f      	movs	r3, #15
 8002cd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002cdc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ce0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	2105      	movs	r1, #5
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f004 fb30 	bl	8007354 <HAL_RCC_ClockConfig>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002cfa:	f000 f809 	bl	8002d10 <Error_Handler>
  }
}
 8002cfe:	bf00      	nop
 8002d00:	3750      	adds	r7, #80	; 0x50
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40007000 	.word	0x40007000

08002d10 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d14:	b672      	cpsid	i
}
 8002d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d18:	e7fe      	b.n	8002d18 <Error_Handler+0x8>
	...

08002d1c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002d20:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d22:	4a18      	ldr	r2, [pc, #96]	; (8002d84 <MX_SPI2_Init+0x68>)
 8002d24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d26:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d34:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d68:	220a      	movs	r2, #10
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d6c:	4804      	ldr	r0, [pc, #16]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d6e:	f004 fd11 	bl	8007794 <HAL_SPI_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002d78:	f7ff ffca 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	200005e4 	.word	0x200005e4
 8002d84:	40003800 	.word	0x40003800

08002d88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_SPI_MspInit+0x84>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d12c      	bne.n	8002e04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_SPI_MspInit+0x88>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <HAL_SPI_MspInit+0x88>)
 8002db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <HAL_SPI_MspInit+0x88>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <HAL_SPI_MspInit+0x88>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <HAL_SPI_MspInit+0x88>)
 8002dd0:	f043 0302 	orr.w	r3, r3, #2
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_SPI_MspInit+0x88>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002de2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df0:	2303      	movs	r3, #3
 8002df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002df4:	2305      	movs	r3, #5
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4805      	ldr	r0, [pc, #20]	; (8002e14 <HAL_SPI_MspInit+0x8c>)
 8002e00:	f003 fe7a 	bl	8006af8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002e04:	bf00      	nop
 8002e06:	3728      	adds	r7, #40	; 0x28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40003800 	.word	0x40003800
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020400 	.word	0x40020400

08002e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <HAL_MspInit+0x4c>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	4a0f      	ldr	r2, [pc, #60]	; (8002e64 <HAL_MspInit+0x4c>)
 8002e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_MspInit+0x4c>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_MspInit+0x4c>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <HAL_MspInit+0x4c>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_MspInit+0x4c>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800

08002e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e6c:	e7fe      	b.n	8002e6c <NMI_Handler+0x4>

08002e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e72:	e7fe      	b.n	8002e72 <HardFault_Handler+0x4>

08002e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <MemManage_Handler+0x4>

08002e7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e7e:	e7fe      	b.n	8002e7e <BusFault_Handler+0x4>

08002e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e84:	e7fe      	b.n	8002e84 <UsageFault_Handler+0x4>

08002e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eb4:	f002 fea4 	bl	8005c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eb8:	bf00      	nop
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002ec0:	4802      	ldr	r0, [pc, #8]	; (8002ecc <DMA1_Stream1_IRQHandler+0x10>)
 8002ec2:	f003 f9a5 	bl	8006210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000758 	.word	0x20000758

08002ed0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ed4:	4802      	ldr	r0, [pc, #8]	; (8002ee0 <USART3_IRQHandler+0x10>)
 8002ed6:	f005 ff31 	bl	8008d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000714 	.word	0x20000714

08002ee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
	return 1;
 8002ee8:	2301      	movs	r3, #1
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <_kill>:

int _kill(int pid, int sig)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002efe:	f007 f82d 	bl	8009f5c <__errno>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2216      	movs	r2, #22
 8002f06:	601a      	str	r2, [r3, #0]
	return -1;
 8002f08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <_exit>:

void _exit (int status)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ffe7 	bl	8002ef4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f26:	e7fe      	b.n	8002f26 <_exit+0x12>

08002f28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	e00a      	b.n	8002f50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f3a:	f3af 8000 	nop.w
 8002f3e:	4601      	mov	r1, r0
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	60ba      	str	r2, [r7, #8]
 8002f46:	b2ca      	uxtb	r2, r1
 8002f48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	dbf0      	blt.n	8002f3a <_read+0x12>
	}

return len;
 8002f58:	687b      	ldr	r3, [r7, #4]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e009      	b.n	8002f88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	60ba      	str	r2, [r7, #8]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe f9af 	bl	80012e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	3301      	adds	r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	dbf1      	blt.n	8002f74 <_write+0x12>
	}
	return len;
 8002f90:	687b      	ldr	r3, [r7, #4]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <_close>:

int _close(int file)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
	return -1;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <_isatty>:

int _isatty(int file)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
	return 1;
 8002fda:	2301      	movs	r3, #1
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800300c:	4a14      	ldr	r2, [pc, #80]	; (8003060 <_sbrk+0x5c>)
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <_sbrk+0x60>)
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <_sbrk+0x64>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <_sbrk+0x64>)
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <_sbrk+0x68>)
 8003024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <_sbrk+0x64>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	429a      	cmp	r2, r3
 8003032:	d207      	bcs.n	8003044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003034:	f006 ff92 	bl	8009f5c <__errno>
 8003038:	4603      	mov	r3, r0
 800303a:	220c      	movs	r2, #12
 800303c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800303e:	f04f 33ff 	mov.w	r3, #4294967295
 8003042:	e009      	b.n	8003058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <_sbrk+0x64>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <_sbrk+0x64>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	4a05      	ldr	r2, [pc, #20]	; (8003068 <_sbrk+0x64>)
 8003054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20020000 	.word	0x20020000
 8003064:	00000400 	.word	0x00000400
 8003068:	2000063c 	.word	0x2000063c
 800306c:	20000870 	.word	0x20000870

08003070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <SystemInit+0x20>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	4a05      	ldr	r2, [pc, #20]	; (8003090 <SystemInit+0x20>)
 800307c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800309a:	f107 0308 	add.w	r3, r7, #8
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	609a      	str	r2, [r3, #8]
 80030a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a8:	463b      	mov	r3, r7
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80030b0:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <MX_TIM1_Init+0x9c>)
 80030b2:	4a20      	ldr	r2, [pc, #128]	; (8003134 <MX_TIM1_Init+0xa0>)
 80030b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 319;
 80030b6:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <MX_TIM1_Init+0x9c>)
 80030b8:	f240 123f 	movw	r2, #319	; 0x13f
 80030bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030be:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <MX_TIM1_Init+0x9c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 80030c4:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <MX_TIM1_Init+0x9c>)
 80030c6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80030ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030cc:	4b18      	ldr	r3, [pc, #96]	; (8003130 <MX_TIM1_Init+0x9c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030d2:	4b17      	ldr	r3, [pc, #92]	; (8003130 <MX_TIM1_Init+0x9c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030d8:	4b15      	ldr	r3, [pc, #84]	; (8003130 <MX_TIM1_Init+0x9c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80030de:	4814      	ldr	r0, [pc, #80]	; (8003130 <MX_TIM1_Init+0x9c>)
 80030e0:	f005 f900 	bl	80082e4 <HAL_TIM_Base_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80030ea:	f7ff fe11 	bl	8002d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030f4:	f107 0308 	add.w	r3, r7, #8
 80030f8:	4619      	mov	r1, r3
 80030fa:	480d      	ldr	r0, [pc, #52]	; (8003130 <MX_TIM1_Init+0x9c>)
 80030fc:	f005 f9aa 	bl	8008454 <HAL_TIM_ConfigClockSource>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003106:	f7ff fe03 	bl	8002d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003112:	463b      	mov	r3, r7
 8003114:	4619      	mov	r1, r3
 8003116:	4806      	ldr	r0, [pc, #24]	; (8003130 <MX_TIM1_Init+0x9c>)
 8003118:	f005 fb9e 	bl	8008858 <HAL_TIMEx_MasterConfigSynchronization>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003122:	f7ff fdf5 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003126:	bf00      	nop
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000640 	.word	0x20000640
 8003134:	40010000 	.word	0x40010000

08003138 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800313e:	f107 0308 	add.w	r3, r7, #8
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	609a      	str	r2, [r3, #8]
 800314a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800314c:	463b      	mov	r3, r7
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003154:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <MX_TIM2_Init+0x94>)
 8003156:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800315a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800315c:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <MX_TIM2_Init+0x94>)
 800315e:	224f      	movs	r2, #79	; 0x4f
 8003160:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003162:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <MX_TIM2_Init+0x94>)
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8003168:	4b18      	ldr	r3, [pc, #96]	; (80031cc <MX_TIM2_Init+0x94>)
 800316a:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <MX_TIM2_Init+0x98>)
 800316c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <MX_TIM2_Init+0x94>)
 8003170:	2200      	movs	r2, #0
 8003172:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003174:	4b15      	ldr	r3, [pc, #84]	; (80031cc <MX_TIM2_Init+0x94>)
 8003176:	2200      	movs	r2, #0
 8003178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800317a:	4814      	ldr	r0, [pc, #80]	; (80031cc <MX_TIM2_Init+0x94>)
 800317c:	f005 f8b2 	bl	80082e4 <HAL_TIM_Base_Init>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8003186:	f7ff fdc3 	bl	8002d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800318a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800318e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003190:	f107 0308 	add.w	r3, r7, #8
 8003194:	4619      	mov	r1, r3
 8003196:	480d      	ldr	r0, [pc, #52]	; (80031cc <MX_TIM2_Init+0x94>)
 8003198:	f005 f95c 	bl	8008454 <HAL_TIM_ConfigClockSource>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80031a2:	f7ff fdb5 	bl	8002d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031ae:	463b      	mov	r3, r7
 80031b0:	4619      	mov	r1, r3
 80031b2:	4806      	ldr	r0, [pc, #24]	; (80031cc <MX_TIM2_Init+0x94>)
 80031b4:	f005 fb50 	bl	8008858 <HAL_TIMEx_MasterConfigSynchronization>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80031be:	f7ff fda7 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80031c2:	bf00      	nop
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000688 	.word	0x20000688
 80031d0:	0001869f 	.word	0x0001869f

080031d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a15      	ldr	r2, [pc, #84]	; (8003238 <HAL_TIM_Base_MspInit+0x64>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10e      	bne.n	8003204 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	4b14      	ldr	r3, [pc, #80]	; (800323c <HAL_TIM_Base_MspInit+0x68>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	4a13      	ldr	r2, [pc, #76]	; (800323c <HAL_TIM_Base_MspInit+0x68>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6453      	str	r3, [r2, #68]	; 0x44
 80031f6:	4b11      	ldr	r3, [pc, #68]	; (800323c <HAL_TIM_Base_MspInit+0x68>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003202:	e012      	b.n	800322a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320c:	d10d      	bne.n	800322a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_TIM_Base_MspInit+0x68>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a09      	ldr	r2, [pc, #36]	; (800323c <HAL_TIM_Base_MspInit+0x68>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b07      	ldr	r3, [pc, #28]	; (800323c <HAL_TIM_Base_MspInit+0x68>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
}
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40010000 	.word	0x40010000
 800323c:	40023800 	.word	0x40023800

08003240 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003244:	4b10      	ldr	r3, [pc, #64]	; (8003288 <MX_USART2_UART_Init+0x48>)
 8003246:	4a11      	ldr	r2, [pc, #68]	; (800328c <MX_USART2_UART_Init+0x4c>)
 8003248:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 800324a:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <MX_USART2_UART_Init+0x48>)
 800324c:	4a10      	ldr	r2, [pc, #64]	; (8003290 <MX_USART2_UART_Init+0x50>)
 800324e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <MX_USART2_UART_Init+0x48>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <MX_USART2_UART_Init+0x48>)
 8003258:	2200      	movs	r2, #0
 800325a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <MX_USART2_UART_Init+0x48>)
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <MX_USART2_UART_Init+0x48>)
 8003264:	220c      	movs	r2, #12
 8003266:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003268:	4b07      	ldr	r3, [pc, #28]	; (8003288 <MX_USART2_UART_Init+0x48>)
 800326a:	2200      	movs	r2, #0
 800326c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <MX_USART2_UART_Init+0x48>)
 8003270:	2200      	movs	r2, #0
 8003272:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003274:	4804      	ldr	r0, [pc, #16]	; (8003288 <MX_USART2_UART_Init+0x48>)
 8003276:	f005 fb6b 	bl	8008950 <HAL_UART_Init>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8003280:	f7ff fd46 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003284:	bf00      	nop
 8003286:	bd80      	pop	{r7, pc}
 8003288:	200006d0 	.word	0x200006d0
 800328c:	40004400 	.word	0x40004400
 8003290:	001e8480 	.word	0x001e8480

08003294 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <MX_USART3_UART_Init+0x48>)
 800329a:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <MX_USART3_UART_Init+0x4c>)
 800329c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <MX_USART3_UART_Init+0x48>)
 80032a0:	4a10      	ldr	r2, [pc, #64]	; (80032e4 <MX_USART3_UART_Init+0x50>)
 80032a2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80032a4:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <MX_USART3_UART_Init+0x48>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <MX_USART3_UART_Init+0x48>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <MX_USART3_UART_Init+0x48>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <MX_USART3_UART_Init+0x48>)
 80032b8:	220c      	movs	r2, #12
 80032ba:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032bc:	4b07      	ldr	r3, [pc, #28]	; (80032dc <MX_USART3_UART_Init+0x48>)
 80032be:	2200      	movs	r2, #0
 80032c0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <MX_USART3_UART_Init+0x48>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032c8:	4804      	ldr	r0, [pc, #16]	; (80032dc <MX_USART3_UART_Init+0x48>)
 80032ca:	f005 fb41 	bl	8008950 <HAL_UART_Init>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80032d4:	f7ff fd1c 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80032d8:	bf00      	nop
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000714 	.word	0x20000714
 80032e0:	40004800 	.word	0x40004800
 80032e4:	001e8480 	.word	0x001e8480

080032e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08c      	sub	sp, #48	; 0x30
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f0:	f107 031c 	add.w	r3, r7, #28
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a4d      	ldr	r2, [pc, #308]	; (800343c <HAL_UART_MspInit+0x154>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d12c      	bne.n	8003364 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	4b4c      	ldr	r3, [pc, #304]	; (8003440 <HAL_UART_MspInit+0x158>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a4b      	ldr	r2, [pc, #300]	; (8003440 <HAL_UART_MspInit+0x158>)
 8003314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
 800331a:	4b49      	ldr	r3, [pc, #292]	; (8003440 <HAL_UART_MspInit+0x158>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	61bb      	str	r3, [r7, #24]
 8003324:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	4b45      	ldr	r3, [pc, #276]	; (8003440 <HAL_UART_MspInit+0x158>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a44      	ldr	r2, [pc, #272]	; (8003440 <HAL_UART_MspInit+0x158>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b42      	ldr	r3, [pc, #264]	; (8003440 <HAL_UART_MspInit+0x158>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003342:	230c      	movs	r3, #12
 8003344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334e:	2303      	movs	r3, #3
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003352:	2307      	movs	r3, #7
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003356:	f107 031c 	add.w	r3, r7, #28
 800335a:	4619      	mov	r1, r3
 800335c:	4839      	ldr	r0, [pc, #228]	; (8003444 <HAL_UART_MspInit+0x15c>)
 800335e:	f003 fbcb 	bl	8006af8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003362:	e067      	b.n	8003434 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART3)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a37      	ldr	r2, [pc, #220]	; (8003448 <HAL_UART_MspInit+0x160>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d162      	bne.n	8003434 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	4b33      	ldr	r3, [pc, #204]	; (8003440 <HAL_UART_MspInit+0x158>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a32      	ldr	r2, [pc, #200]	; (8003440 <HAL_UART_MspInit+0x158>)
 8003378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
 800337e:	4b30      	ldr	r3, [pc, #192]	; (8003440 <HAL_UART_MspInit+0x158>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <HAL_UART_MspInit+0x158>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a2b      	ldr	r2, [pc, #172]	; (8003440 <HAL_UART_MspInit+0x158>)
 8003394:	f043 0302 	orr.w	r3, r3, #2
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <HAL_UART_MspInit+0x158>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80033a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80033aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b4:	2303      	movs	r3, #3
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033b8:	2307      	movs	r3, #7
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033bc:	f107 031c 	add.w	r3, r7, #28
 80033c0:	4619      	mov	r1, r3
 80033c2:	4822      	ldr	r0, [pc, #136]	; (800344c <HAL_UART_MspInit+0x164>)
 80033c4:	f003 fb98 	bl	8006af8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80033c8:	4b21      	ldr	r3, [pc, #132]	; (8003450 <HAL_UART_MspInit+0x168>)
 80033ca:	4a22      	ldr	r2, [pc, #136]	; (8003454 <HAL_UART_MspInit+0x16c>)
 80033cc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80033ce:	4b20      	ldr	r3, [pc, #128]	; (8003450 <HAL_UART_MspInit+0x168>)
 80033d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033d4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033d6:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <HAL_UART_MspInit+0x168>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033dc:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <HAL_UART_MspInit+0x168>)
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033e2:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <HAL_UART_MspInit+0x168>)
 80033e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033ea:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_UART_MspInit+0x168>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033f0:	4b17      	ldr	r3, [pc, #92]	; (8003450 <HAL_UART_MspInit+0x168>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <HAL_UART_MspInit+0x168>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <HAL_UART_MspInit+0x168>)
 80033fe:	2200      	movs	r2, #0
 8003400:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003402:	4b13      	ldr	r3, [pc, #76]	; (8003450 <HAL_UART_MspInit+0x168>)
 8003404:	2200      	movs	r2, #0
 8003406:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003408:	4811      	ldr	r0, [pc, #68]	; (8003450 <HAL_UART_MspInit+0x168>)
 800340a:	f002 fd69 	bl	8005ee0 <HAL_DMA_Init>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8003414:	f7ff fc7c 	bl	8002d10 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a0d      	ldr	r2, [pc, #52]	; (8003450 <HAL_UART_MspInit+0x168>)
 800341c:	639a      	str	r2, [r3, #56]	; 0x38
 800341e:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <HAL_UART_MspInit+0x168>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003424:	2200      	movs	r2, #0
 8003426:	2100      	movs	r1, #0
 8003428:	2027      	movs	r0, #39	; 0x27
 800342a:	f002 fd1e 	bl	8005e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800342e:	2027      	movs	r0, #39	; 0x27
 8003430:	f002 fd37 	bl	8005ea2 <HAL_NVIC_EnableIRQ>
}
 8003434:	bf00      	nop
 8003436:	3730      	adds	r7, #48	; 0x30
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40004400 	.word	0x40004400
 8003440:	40023800 	.word	0x40023800
 8003444:	40020000 	.word	0x40020000
 8003448:	40004800 	.word	0x40004800
 800344c:	40020400 	.word	0x40020400
 8003450:	20000758 	.word	0x20000758
 8003454:	40026028 	.word	0x40026028

08003458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003490 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800345c:	480d      	ldr	r0, [pc, #52]	; (8003494 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800345e:	490e      	ldr	r1, [pc, #56]	; (8003498 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003460:	4a0e      	ldr	r2, [pc, #56]	; (800349c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003464:	e002      	b.n	800346c <LoopCopyDataInit>

08003466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800346a:	3304      	adds	r3, #4

0800346c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800346c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800346e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003470:	d3f9      	bcc.n	8003466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003472:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003474:	4c0b      	ldr	r4, [pc, #44]	; (80034a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003478:	e001      	b.n	800347e <LoopFillZerobss>

0800347a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800347a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800347c:	3204      	adds	r2, #4

0800347e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800347e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003480:	d3fb      	bcc.n	800347a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003482:	f7ff fdf5 	bl	8003070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003486:	f006 fd6f 	bl	8009f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800348a:	f7fe f899 	bl	80015c0 <main>
  bx  lr    
 800348e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003498:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 800349c:	0800f34c 	.word	0x0800f34c
  ldr r2, =_sbss
 80034a0:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80034a4:	2000086c 	.word	0x2000086c

080034a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034a8:	e7fe      	b.n	80034a8 <ADC_IRQHandler>

080034aa <setBit>:
static const uint8_t BIAS_900_16[] = {137, 122, 105, 88, 69, 47, 25, 0, 21, 48, 79, 105, 127, 147, 160, 169, 178, 197};
static const uint8_t BIAS_900_64[] = {147, 133, 117, 99, 75, 50, 29, 0, 24, 45, 63, 76, 87, 98, 116, 122, 132, 142};

// Utility functions
static void setBit(uint8_t data[], unsigned int n, unsigned int bit, bool val)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b089      	sub	sp, #36	; 0x24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	70fb      	strb	r3, [r7, #3]
    unsigned int idx;
    unsigned int shift;
    idx = bit / 8;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	08db      	lsrs	r3, r3, #3
 80034bc:	61fb      	str	r3, [r7, #28]
    if (idx >= n)
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d228      	bcs.n	8003518 <setBit+0x6e>
        return; // TODO proper error handling: out of bounds
    uint8_t *targetByte = &data[idx];
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	4413      	add	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
    shift = bit % 8;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	617b      	str	r3, [r7, #20]
    if (val)
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <setBit+0x4e>
        *targetByte |= (1 << shift);
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	b25a      	sxtb	r2, r3
 80034e2:	2101      	movs	r1, #1
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	b25b      	sxtb	r3, r3
 80034ec:	4313      	orrs	r3, r2
 80034ee:	b25b      	sxtb	r3, r3
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	e010      	b.n	800351a <setBit+0x70>
    else
        *targetByte &= ~(1 << shift);
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b25a      	sxtb	r2, r3
 80034fe:	2101      	movs	r1, #1
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	b25b      	sxtb	r3, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	b25b      	sxtb	r3, r3
 800350c:	4013      	ands	r3, r2
 800350e:	b25b      	sxtb	r3, r3
 8003510:	b2da      	uxtb	r2, r3
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	e000      	b.n	800351a <setBit+0x70>
        return; // TODO proper error handling: out of bounds
 8003518:	bf00      	nop
}
 800351a:	3724      	adds	r7, #36	; 0x24
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <getBit>:

static bool getBit(uint8_t data[], unsigned int n, unsigned int bit)
{
 8003524:	b480      	push	{r7}
 8003526:	b089      	sub	sp, #36	; 0x24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
    unsigned int idx;
    unsigned int shift;

    idx = bit / 8;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	08db      	lsrs	r3, r3, #3
 8003534:	61fb      	str	r3, [r7, #28]
    if (idx >= n)
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	429a      	cmp	r2, r3
 800353c:	d301      	bcc.n	8003542 <getBit+0x1e>
        return false; // TODO proper error handling: out of bounds
 800353e:	2300      	movs	r3, #0
 8003540:	e013      	b.n	800356a <getBit+0x46>
    uint8_t targetByte = data[idx];
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	4413      	add	r3, r2
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	76fb      	strb	r3, [r7, #27]
    shift = bit % 8;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	617b      	str	r3, [r7, #20]
    return (targetByte >> shift) & 0x01;
 8003554:	7efa      	ldrb	r2, [r7, #27]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	fa42 f303 	asr.w	r3, r2, r3
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2db      	uxtb	r3, r3
}
 800356a:	4618      	mov	r0, r3
 800356c:	3724      	adds	r7, #36	; 0x24
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <writeValueToBytes>:

static void writeValueToBytes(uint8_t data[], long val, unsigned int n)
{
 8003576:	b480      	push	{r7}
 8003578:	b087      	sub	sp, #28
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
    unsigned int i;
    for (i = 0; i < n; i++)
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	e00c      	b.n	80035a2 <writeValueToBytes+0x2c>
    {
        data[i] = ((val >> (i * 8)) & 0xFF);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	fa42 f103 	asr.w	r1, r2, r3
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	4413      	add	r3, r2
 8003598:	b2ca      	uxtb	r2, r1
 800359a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < n; i++)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	3301      	adds	r3, #1
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d3ee      	bcc.n	8003588 <writeValueToBytes+0x12>
    }
}
 80035aa:	bf00      	nop
 80035ac:	bf00      	nop
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <readBytesOTP>:

static void readBytesOTP(dwDeviceTypes_t *dev, uint16_t address, uint8_t data[])
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	460b      	mov	r3, r1
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	817b      	strh	r3, [r7, #10]
    uint8_t addressBytes[LEN_OTP_ADDR];
    addressBytes[0] = (address & 0xFF);
 80035c6:	897b      	ldrh	r3, [r7, #10]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	753b      	strb	r3, [r7, #20]
    addressBytes[1] = ((address >> 8) & 0xFF);
 80035cc:	897b      	ldrh	r3, [r7, #10]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	757b      	strb	r3, [r7, #21]
    // set address
    dwSpiWrite(dev, OTP_IF, OTP_ADDR_SUB, addressBytes, LEN_OTP_ADDR);
 80035d6:	f107 0314 	add.w	r3, r7, #20
 80035da:	2202      	movs	r2, #2
 80035dc:	9200      	str	r2, [sp, #0]
 80035de:	2204      	movs	r2, #4
 80035e0:	212d      	movs	r1, #45	; 0x2d
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f002 fa4c 	bl	8005a80 <dwSpiWrite>
    // switch into read mode
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x03); // OTPRDEN | OTPREAD
 80035e8:	2303      	movs	r3, #3
 80035ea:	2206      	movs	r2, #6
 80035ec:	212d      	movs	r1, #45	; 0x2d
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f002 fa89 	bl	8005b06 <dwSpiWrite8>
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x01); // OTPRDEN
 80035f4:	2301      	movs	r3, #1
 80035f6:	2206      	movs	r2, #6
 80035f8:	212d      	movs	r1, #45	; 0x2d
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f002 fa83 	bl	8005b06 <dwSpiWrite8>
    // read value/block - 4 bytes
    dwSpiRead(dev, OTP_IF, OTP_RDAT_SUB, data, LEN_OTP_RDAT);
 8003600:	2304      	movs	r3, #4
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	220a      	movs	r2, #10
 8003608:	212d      	movs	r1, #45	; 0x2d
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f002 f9d0 	bl	80059b0 <dwSpiRead>
    // end read mode
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x00);
 8003610:	2300      	movs	r3, #0
 8003612:	2206      	movs	r2, #6
 8003614:	212d      	movs	r1, #45	; 0x2d
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f002 fa75 	bl	8005b06 <dwSpiWrite8>
}
 800361c:	bf00      	nop
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <dummyHandler>:

void dummyHandler(dwDeviceTypes_t *dev)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
    ;
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <dwInit>:

void dwInit(dwDeviceTypes_t *dev)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
    dev->func = &dwFunc;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <dwInit+0x40>)
 8003644:	601a      	str	r2, [r3, #0]
    dev->handleSent = dummyHandler;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a0c      	ldr	r2, [pc, #48]	; (800367c <dwInit+0x44>)
 800364a:	639a      	str	r2, [r3, #56]	; 0x38
	dev->handleError = dummyHandler;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a0b      	ldr	r2, [pc, #44]	; (800367c <dwInit+0x44>)
 8003650:	63da      	str	r2, [r3, #60]	; 0x3c
	dev->handleReceived = dummyHandler;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a09      	ldr	r2, [pc, #36]	; (800367c <dwInit+0x44>)
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
	dev->handleReceiveTimeout = dummyHandler;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a08      	ldr	r2, [pc, #32]	; (800367c <dwInit+0x44>)
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
	dev->handleReceiveFailed = dummyHandler;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a06      	ldr	r2, [pc, #24]	; (800367c <dwInit+0x44>)
 8003662:	649a      	str	r2, [r3, #72]	; 0x48
	dev->handleReceiveTimestampAvailable = dummyHandler;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a05      	ldr	r2, [pc, #20]	; (800367c <dwInit+0x44>)
 8003668:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000064 	.word	0x20000064
 800367c:	08003625 	.word	0x08003625

08003680 <dwConfigure>:

int dwConfigure(dwDeviceTypes_t *dev)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af02      	add	r7, sp, #8
 8003686:	6078      	str	r0, [r7, #4]
    dwEnableClock(dev, dwClockAuto);
 8003688:	2100      	movs	r1, #0
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f91c 	bl	80038c8 <dwEnableClock>
    dev->func->delayms(dev, 5);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	2105      	movs	r1, #5
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
	dev->func->reset(dev);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	4798      	blx	r3
    dev->func->delayms(dev, 5);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2105      	movs	r1, #5
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	4798      	blx	r3
    uint32_t deviceID = dwGetDeviceId(dev);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f8a9 	bl	800380a <dwGetDeviceId>
 80036b8:	60f8      	str	r0, [r7, #12]
    if (deviceID != 0xdeca0130)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4a27      	ldr	r2, [pc, #156]	; (800375c <dwConfigure+0xdc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d001      	beq.n	80036c6 <dwConfigure+0x46>
    {
        return DW_ERROR_WRONG_ID;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e045      	b.n	8003752 <dwConfigure+0xd2>
    }

    memset(dev->networkAndAddress, 0x38, LEN_PANADR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3309      	adds	r3, #9
 80036ca:	2204      	movs	r2, #4
 80036cc:	2138      	movs	r1, #56	; 0x38
 80036ce:	4618      	mov	r0, r3
 80036d0:	f006 fc9c 	bl	800a00c <memset>
    dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3309      	adds	r3, #9
 80036d8:	2204      	movs	r2, #4
 80036da:	9200      	str	r2, [sp, #0]
 80036dc:	2200      	movs	r2, #0
 80036de:	2103      	movs	r1, #3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f002 f9cd 	bl	8005a80 <dwSpiWrite>

    memset(dev->syscfg, 0, LEN_SYS_CFG);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	330d      	adds	r3, #13
 80036ea:	2204      	movs	r2, #4
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f006 fc8c 	bl	800a00c <memset>
    dwSetDoubleBuffering(dev, false);
 80036f4:	2100      	movs	r1, #0
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fa87 	bl	8003c0a <dwSetDoubleBuffering>
    dwSetInterruptPolarity(dev, true);
 80036fc:	2101      	movs	r1, #1
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 faa0 	bl	8003c44 <dwSetInterruptPolarity>
    dwWriteSystemConfigurationRegister(dev);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f981 	bl	8003a0c <dwWriteSystemConfigurationRegister>

    dwClearInterrupts(dev);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fb62 	bl	8003dd4 <dwClearInterrupts>
    dwWriteSystemEventMaskRegister(dev);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f9d0 	bl	8003ab6 <dwWriteSystemEventMaskRegister>

    dwEnableClock(dev, dwClockXti);
 8003716:	2101      	movs	r1, #1
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f8d5 	bl	80038c8 <dwEnableClock>
    dev->func->delayms(dev, 5);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2105      	movs	r1, #5
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	4798      	blx	r3
    dwManageLDE(dev);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f818 	bl	8003760 <dwManageLDE>
    dev->func->delayms(dev, 5);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2105      	movs	r1, #5
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4798      	blx	r3
    dwEnableClock(dev, dwClockPll);
 800373c:	2102      	movs	r1, #2
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f8c2 	bl	80038c8 <dwEnableClock>
    dev->func->delayms(dev, 5);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2105      	movs	r1, #5
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
//    dev->func->spiSetSpeed(dev, dwSpiSpeedHigh);
//    dev->func->delayms(dev, 5);
    return DW_ERROR_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	deca0130 	.word	0xdeca0130

08003760 <dwManageLDE>:

void dwManageLDE(dwDeviceTypes_t *dev)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af02      	add	r7, sp, #8
 8003766:	6078      	str	r0, [r7, #4]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    uint8_t otpctrl[LEN_OTP_CTRL];
    memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8003768:	f107 030c 	add.w	r3, r7, #12
 800376c:	2204      	movs	r2, #4
 800376e:	2100      	movs	r1, #0
 8003770:	4618      	mov	r0, r3
 8003772:	f006 fc4b 	bl	800a00c <memset>
    memset(otpctrl, 0, LEN_OTP_CTRL);
 8003776:	f107 0308 	add.w	r3, r7, #8
 800377a:	2202      	movs	r2, #2
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f006 fc44 	bl	800a00c <memset>
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8003784:	f107 030c 	add.w	r3, r7, #12
 8003788:	2204      	movs	r2, #4
 800378a:	9200      	str	r2, [sp, #0]
 800378c:	2200      	movs	r2, #0
 800378e:	2136      	movs	r1, #54	; 0x36
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f002 f90d 	bl	80059b0 <dwSpiRead>
    dwSpiRead(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 8003796:	f107 0308 	add.w	r3, r7, #8
 800379a:	2202      	movs	r2, #2
 800379c:	9200      	str	r2, [sp, #0]
 800379e:	2206      	movs	r2, #6
 80037a0:	212d      	movs	r1, #45	; 0x2d
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f002 f904 	bl	80059b0 <dwSpiRead>
    pmscctrl0[0] = 0x01;
 80037a8:	2301      	movs	r3, #1
 80037aa:	733b      	strb	r3, [r7, #12]
    pmscctrl0[1] = 0x03;
 80037ac:	2303      	movs	r3, #3
 80037ae:	737b      	strb	r3, [r7, #13]
    otpctrl[0] = 0x00;
 80037b0:	2300      	movs	r3, #0
 80037b2:	723b      	strb	r3, [r7, #8]
    otpctrl[1] = 0x80;
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	727b      	strb	r3, [r7, #9]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80037b8:	f107 030c 	add.w	r3, r7, #12
 80037bc:	2204      	movs	r2, #4
 80037be:	9200      	str	r2, [sp, #0]
 80037c0:	2200      	movs	r2, #0
 80037c2:	2136      	movs	r1, #54	; 0x36
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f002 f95b 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 80037ca:	f107 0308 	add.w	r3, r7, #8
 80037ce:	2202      	movs	r2, #2
 80037d0:	9200      	str	r2, [sp, #0]
 80037d2:	2206      	movs	r2, #6
 80037d4:	212d      	movs	r1, #45	; 0x2d
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f002 f952 	bl	8005a80 <dwSpiWrite>
    dev->func->delayms(dev, 5);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2105      	movs	r1, #5
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4798      	blx	r3
    pmscctrl0[0] = 0x00;
 80037e8:	2300      	movs	r3, #0
 80037ea:	733b      	strb	r3, [r7, #12]
    pmscctrl0[1] = 0x02;
 80037ec:	2302      	movs	r3, #2
 80037ee:	737b      	strb	r3, [r7, #13]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80037f0:	f107 030c 	add.w	r3, r7, #12
 80037f4:	2204      	movs	r2, #4
 80037f6:	9200      	str	r2, [sp, #0]
 80037f8:	2200      	movs	r2, #0
 80037fa:	2136      	movs	r1, #54	; 0x36
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f002 f93f 	bl	8005a80 <dwSpiWrite>
}
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <dwGetDeviceId>:

uint32_t dwGetDeviceId(dwDeviceTypes_t *dev)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
    return dwSpiRead32(dev, DEV_ID, 0);
 8003812:	2200      	movs	r2, #0
 8003814:	2100      	movs	r1, #0
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f002 f91d 	bl	8005a56 <dwSpiRead32>
 800381c:	4603      	mov	r3, r0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <dwEnableAllLeds>:

void dwEnableAllLeds(dwDeviceTypes_t *dev)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
    uint32_t reg;
    // Set all 4 GPIO in LED mode
    reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 800382e:	2200      	movs	r2, #0
 8003830:	2126      	movs	r1, #38	; 0x26
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f002 f90f 	bl	8005a56 <dwSpiRead32>
 8003838:	60f8      	str	r0, [r7, #12]
    reg &= ~0x00003FC0ul;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003840:	60fb      	str	r3, [r7, #12]
    reg |= 0x00001540ul;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f443 53aa 	orr.w	r3, r3, #5440	; 0x1540
 8003848:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, GPIO_CTRL, GPIO_MODE_SUB, reg);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	2126      	movs	r1, #38	; 0x26
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f002 f96f 	bl	8005b34 <dwSpiWrite32>
    reg = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
    reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 800385a:	2200      	movs	r2, #0
 800385c:	2126      	movs	r1, #38	; 0x26
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f002 f8f9 	bl	8005a56 <dwSpiRead32>
 8003864:	60f8      	str	r0, [r7, #12]
    // Enable debounce clock (used to clock the LED blinking)
    reg = dwSpiRead32(dev, PMSC, PMSC_CTRL0_SUB);
 8003866:	2200      	movs	r2, #0
 8003868:	2136      	movs	r1, #54	; 0x36
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f002 f8f3 	bl	8005a56 <dwSpiRead32>
 8003870:	60f8      	str	r0, [r7, #12]
    reg |= 0x00840000ul;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f443 0304 	orr.w	r3, r3, #8650752	; 0x840000
 8003878:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_CTRL0_SUB, reg);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	2136      	movs	r1, #54	; 0x36
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f002 f957 	bl	8005b34 <dwSpiWrite32>

    // Enable LED blinking and set the rate
    reg = 0x00000110ul;
 8003886:	f44f 7388 	mov.w	r3, #272	; 0x110
 800388a:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2228      	movs	r2, #40	; 0x28
 8003890:	2136      	movs	r1, #54	; 0x36
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f002 f94e 	bl	8005b34 <dwSpiWrite32>

    // Trigger a manual blink of the LEDs for test
    reg |= 0x000f0000ul;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 800389e:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2228      	movs	r2, #40	; 0x28
 80038a4:	2136      	movs	r1, #54	; 0x36
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f002 f944 	bl	8005b34 <dwSpiWrite32>
    reg &= ~0x000f0000ul;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80038b2:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2228      	movs	r2, #40	; 0x28
 80038b8:	2136      	movs	r1, #54	; 0x36
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f002 f93a 	bl	8005b34 <dwSpiWrite32>
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <dwEnableClock>:

void dwEnableClock(dwDeviceTypes_t *dev, dwClock_t clock)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	70fb      	strb	r3, [r7, #3]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	2204      	movs	r2, #4
 80038da:	2100      	movs	r1, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	f006 fb95 	bl	800a00c <memset>
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	2204      	movs	r2, #4
 80038e8:	9200      	str	r2, [sp, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	2136      	movs	r1, #54	; 0x36
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f002 f85e 	bl	80059b0 <dwSpiRead>
    if (clock == dwClockAuto)
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <dwEnableClock+0x4e>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedLow);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2100      	movs	r1, #0
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
        pmscctrl0[0] = dwClockAuto;
 8003906:	2300      	movs	r3, #0
 8003908:	733b      	strb	r3, [r7, #12]
        pmscctrl0[1] &= 0xFE;
 800390a:	7b7b      	ldrb	r3, [r7, #13]
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	737b      	strb	r3, [r7, #13]
 8003914:	e026      	b.n	8003964 <dwEnableClock+0x9c>
    }
    else if (clock == dwClockXti)
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d110      	bne.n	800393e <dwEnableClock+0x76>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedLow);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2100      	movs	r1, #0
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
        pmscctrl0[0] &= 0xFC;
 8003928:	7b3b      	ldrb	r3, [r7, #12]
 800392a:	f023 0303 	bic.w	r3, r3, #3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	733b      	strb	r3, [r7, #12]
        pmscctrl0[0] |= dwClockXti;
 8003932:	7b3b      	ldrb	r3, [r7, #12]
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	b2db      	uxtb	r3, r3
 800393a:	733b      	strb	r3, [r7, #12]
 800393c:	e012      	b.n	8003964 <dwEnableClock+0x9c>
    }
    else if (clock == dwClockPll)
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d10f      	bne.n	8003964 <dwEnableClock+0x9c>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedHigh);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2101      	movs	r1, #1
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	4798      	blx	r3
        pmscctrl0[0] &= 0xFC;
 8003950:	7b3b      	ldrb	r3, [r7, #12]
 8003952:	f023 0303 	bic.w	r3, r3, #3
 8003956:	b2db      	uxtb	r3, r3
 8003958:	733b      	strb	r3, [r7, #12]
        pmscctrl0[0] |= dwClockPll;
 800395a:	7b3b      	ldrb	r3, [r7, #12]
 800395c:	f043 0302 	orr.w	r3, r3, #2
 8003960:	b2db      	uxtb	r3, r3
 8003962:	733b      	strb	r3, [r7, #12]
    }
    else
    {
        // TODO deliver proper warning
    }
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, 1);
 8003964:	f107 030c 	add.w	r3, r7, #12
 8003968:	2201      	movs	r2, #1
 800396a:	9200      	str	r2, [sp, #0]
 800396c:	2200      	movs	r2, #0
 800396e:	2136      	movs	r1, #54	; 0x36
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f002 f885 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8003976:	f107 030c 	add.w	r3, r7, #12
 800397a:	2204      	movs	r2, #4
 800397c:	9200      	str	r2, [sp, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	2136      	movs	r1, #54	; 0x36
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f002 f87c 	bl	8005a80 <dwSpiWrite>
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <dwRxSoftReset>:
/**
    Reset the receiver. Needed after errors or timeouts.
    From the DW1000 User Manual, v2.13 page 35: "Due to an issue in the re-initialisation of the receiver, it is necessary to apply a receiver reset after certain receiver error or timeout events (i.e. RXPHE (PHY Header Error), RXRFSL (Reed Solomon error), RXRFTO (Frame wait timeout), etc.). This ensures that the next good frame will have correctly calculated timestamp. It is not necessary to do this in the cases of RXPTO (Preamble detection Timeout) and RXSFDTO (SFD timeout). For details on how to apply a receiver-only reset see SOFTRESET field of Sub- Register 0x36:00 – PMSC_CTRL0."
 */
void dwRxSoftReset(dwDeviceTypes_t *dev)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af02      	add	r7, sp, #8
 8003996:	6078      	str	r0, [r7, #4]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8003998:	f107 030c 	add.w	r3, r7, #12
 800399c:	2204      	movs	r2, #4
 800399e:	9200      	str	r2, [sp, #0]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2136      	movs	r1, #54	; 0x36
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f002 f803 	bl	80059b0 <dwSpiRead>
    pmscctrl0[3] = pmscctrl0[3] & 0xEF;
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	f023 0310 	bic.w	r3, r3, #16
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	73fb      	strb	r3, [r7, #15]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80039b4:	f107 030c 	add.w	r3, r7, #12
 80039b8:	2204      	movs	r2, #4
 80039ba:	9200      	str	r2, [sp, #0]
 80039bc:	2200      	movs	r2, #0
 80039be:	2136      	movs	r1, #54	; 0x36
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f002 f85d 	bl	8005a80 <dwSpiWrite>
    pmscctrl0[3] = pmscctrl0[3] | 0x10;
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
 80039c8:	f043 0310 	orr.w	r3, r3, #16
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	73fb      	strb	r3, [r7, #15]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80039d0:	f107 030c 	add.w	r3, r7, #12
 80039d4:	2204      	movs	r2, #4
 80039d6:	9200      	str	r2, [sp, #0]
 80039d8:	2200      	movs	r2, #0
 80039da:	2136      	movs	r1, #54	; 0x36
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f002 f84f 	bl	8005a80 <dwSpiWrite>
}
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <dwReadSystemConfigurationRegister>:

/* ###########################################################################
 * #### DW1000 register read/write ###########################################
 * ######################################################################### */
void dwReadSystemConfigurationRegister(dwDeviceTypes_t *dev)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af02      	add	r7, sp, #8
 80039f0:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	330d      	adds	r3, #13
 80039f6:	2204      	movs	r2, #4
 80039f8:	9200      	str	r2, [sp, #0]
 80039fa:	2200      	movs	r2, #0
 80039fc:	2104      	movs	r1, #4
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f001 ffd6 	bl	80059b0 <dwSpiRead>
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <dwWriteSystemConfigurationRegister>:

void dwWriteSystemConfigurationRegister(dwDeviceTypes_t *dev)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	330d      	adds	r3, #13
 8003a18:	2204      	movs	r2, #4
 8003a1a:	9200      	str	r2, [sp, #0]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2104      	movs	r1, #4
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f002 f82d 	bl	8005a80 <dwSpiWrite>
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <dwReadSystemEventStatusRegister>:

void dwReadSystemEventStatusRegister(dwDeviceTypes_t *dev)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af02      	add	r7, sp, #8
 8003a34:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_STATUS, NO_SUB, dev->sysstatus, LEN_SYS_STATUS);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3319      	adds	r3, #25
 8003a3a:	2205      	movs	r2, #5
 8003a3c:	9200      	str	r2, [sp, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	210f      	movs	r1, #15
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f001 ffb4 	bl	80059b0 <dwSpiRead>
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <dwReadNetworkIdAndDeviceAddress>:

void dwReadNetworkIdAndDeviceAddress(dwDeviceTypes_t *dev)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3309      	adds	r3, #9
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	9200      	str	r2, [sp, #0]
 8003a60:	2200      	movs	r2, #0
 8003a62:	2103      	movs	r1, #3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f001 ffa3 	bl	80059b0 <dwSpiRead>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <dwWriteNetworkIdAndDeviceAddress>:

void dwWriteNetworkIdAndDeviceAddress(dwDeviceTypes_t *dev)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af02      	add	r7, sp, #8
 8003a78:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3309      	adds	r3, #9
 8003a7e:	2204      	movs	r2, #4
 8003a80:	9200      	str	r2, [sp, #0]
 8003a82:	2200      	movs	r2, #0
 8003a84:	2103      	movs	r1, #3
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f001 fffa 	bl	8005a80 <dwSpiWrite>
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <dwReadSystemEventMaskRegister>:

void dwReadSystemEventMaskRegister(dwDeviceTypes_t *dev)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3311      	adds	r3, #17
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	9200      	str	r2, [sp, #0]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	210e      	movs	r1, #14
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f001 ff81 	bl	80059b0 <dwSpiRead>
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <dwWriteSystemEventMaskRegister>:

void dwWriteSystemEventMaskRegister(dwDeviceTypes_t *dev)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af02      	add	r7, sp, #8
 8003abc:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3311      	adds	r3, #17
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	9200      	str	r2, [sp, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	210e      	movs	r1, #14
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f001 ffd8 	bl	8005a80 <dwSpiWrite>
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <dwReadChannelControlRegister>:

void dwReadChannelControlRegister(dwDeviceTypes_t *dev)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3315      	adds	r3, #21
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	9200      	str	r2, [sp, #0]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	211f      	movs	r1, #31
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f001 ff5f 	bl	80059b0 <dwSpiRead>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <dwWriteChannelControlRegister>:

void dwWriteChannelControlRegister(dwDeviceTypes_t *dev)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af02      	add	r7, sp, #8
 8003b00:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3315      	adds	r3, #21
 8003b06:	2204      	movs	r2, #4
 8003b08:	9200      	str	r2, [sp, #0]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	211f      	movs	r1, #31
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f001 ffb6 	bl	8005a80 <dwSpiWrite>
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <dwReadTransmitFrameControlRegister>:

void dwReadTransmitFrameControlRegister(dwDeviceTypes_t *dev)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	331e      	adds	r3, #30
 8003b28:	2205      	movs	r2, #5
 8003b2a:	9200      	str	r2, [sp, #0]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2108      	movs	r1, #8
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f001 ff3d 	bl	80059b0 <dwSpiRead>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <dwWriteTransmitFrameControlRegister>:

void dwWriteTransmitFrameControlRegister(dwDeviceTypes_t *dev)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af02      	add	r7, sp, #8
 8003b44:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	331e      	adds	r3, #30
 8003b4a:	2205      	movs	r2, #5
 8003b4c:	9200      	str	r2, [sp, #0]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2108      	movs	r1, #8
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f001 ff94 	bl	8005a80 <dwSpiWrite>
}
 8003b58:	bf00      	nop
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <dwSetReceiveWaitTimeout>:

/******************************************************************/

void dwSetReceiveWaitTimeout(dwDeviceTypes_t *dev, uint16_t timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
    dwSpiWrite(dev, RX_FWTO, NO_SUB, &timeout, 2);
 8003b6c:	1cbb      	adds	r3, r7, #2
 8003b6e:	2202      	movs	r2, #2
 8003b70:	9200      	str	r2, [sp, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	210c      	movs	r1, #12
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f001 ff82 	bl	8005a80 <dwSpiWrite>
    setBit(dev->syscfg, LEN_SYS_CFG, RXWTOE_BIT, timeout != 0);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f103 000d 	add.w	r0, r3, #13
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf14      	ite	ne
 8003b88:	2301      	movne	r3, #1
 8003b8a:	2300      	moveq	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	221c      	movs	r2, #28
 8003b90:	2104      	movs	r1, #4
 8003b92:	f7ff fc8a 	bl	80034aa <setBit>
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <dwSetFrameFilter>:

void dwSetFrameFilter(dwDeviceTypes_t *dev, bool val)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFEN_BIT, val);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f103 000d 	add.w	r0, r3, #13
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2104      	movs	r1, #4
 8003bb6:	f7ff fc78 	bl	80034aa <setBit>
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <dwSetFrameFilterAllowData>:
{
    setBit(dev->syscfg, LEN_SYS_CFG, FFAB_BIT, val);
}

void dwSetFrameFilterAllowData(dwDeviceTypes_t *dev, bool val)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFAD_BIT, val);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f103 000d 	add.w	r0, r3, #13
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	2104      	movs	r1, #4
 8003bda:	f7ff fc66 	bl	80034aa <setBit>
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <dwSetFrameFilterAllowReserved>:
{
    setBit(dev->syscfg, LEN_SYS_CFG, FFAM_BIT, val);
}

void dwSetFrameFilterAllowReserved(dwDeviceTypes_t *dev, bool val)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFAR_BIT, val);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f103 000d 	add.w	r0, r3, #13
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	2206      	movs	r2, #6
 8003bfc:	2104      	movs	r1, #4
 8003bfe:	f7ff fc54 	bl	80034aa <setBit>
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <dwSetDoubleBuffering>:

void dwSetDoubleBuffering(dwDeviceTypes_t *dev, bool val)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	460b      	mov	r3, r1
 8003c14:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, DIS_DRXB_BIT, !val);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f103 000d 	add.w	r0, r3, #13
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	bf14      	ite	ne
 8003c22:	2301      	movne	r3, #1
 8003c24:	2300      	moveq	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f083 0301 	eor.w	r3, r3, #1
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	220c      	movs	r2, #12
 8003c36:	2104      	movs	r1, #4
 8003c38:	f7ff fc37 	bl	80034aa <setBit>
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <dwSetInterruptPolarity>:

void dwSetInterruptPolarity(dwDeviceTypes_t *dev, bool val)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, HIRQ_POL_BIT, val);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f103 000d 	add.w	r0, r3, #13
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	2209      	movs	r2, #9
 8003c5a:	2104      	movs	r1, #4
 8003c5c:	f7ff fc25 	bl	80034aa <setBit>
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <dwSetReceiverAutoReenable>:

void dwSetReceiverAutoReenable(dwDeviceTypes_t *dev, bool val)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, RXAUTR_BIT, val);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f103 000d 	add.w	r0, r3, #13
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	221d      	movs	r2, #29
 8003c7e:	2104      	movs	r1, #4
 8003c80:	f7ff fc13 	bl	80034aa <setBit>
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <dwInterruptOnSent>:

void dwInterruptOnSent(dwDeviceTypes_t *dev, bool val)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, TXFRS_BIT, val);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f103 0011 	add.w	r0, r3, #17
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	2207      	movs	r2, #7
 8003ca2:	2104      	movs	r1, #4
 8003ca4:	f7ff fc01 	bl	80034aa <setBit>
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <dwInterruptOnReceived>:

void dwInterruptOnReceived(dwDeviceTypes_t *dev, bool val)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, RXDFR_BIT, val);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f103 0011 	add.w	r0, r3, #17
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	220d      	movs	r2, #13
 8003cc6:	2104      	movs	r1, #4
 8003cc8:	f7ff fbef 	bl	80034aa <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXFCG_BIT, val);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f103 0011 	add.w	r0, r3, #17
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	220e      	movs	r2, #14
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	f7ff fbe7 	bl	80034aa <setBit>
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <dwInterruptOnReceiveFailed>:

void dwInterruptOnReceiveFailed(dwDeviceTypes_t *dev, bool val)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_STATUS, LDEERR_BIT, val);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f103 0011 	add.w	r0, r3, #17
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	2212      	movs	r2, #18
 8003cfa:	2105      	movs	r1, #5
 8003cfc:	f7ff fbd5 	bl	80034aa <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXFCE_BIT, val);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f103 0011 	add.w	r0, r3, #17
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	220f      	movs	r2, #15
 8003d0a:	2105      	movs	r1, #5
 8003d0c:	f7ff fbcd 	bl	80034aa <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXPHE_BIT, val);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f103 0011 	add.w	r0, r3, #17
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	220c      	movs	r2, #12
 8003d1a:	2105      	movs	r1, #5
 8003d1c:	f7ff fbc5 	bl	80034aa <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXRFSL_BIT, val);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f103 0011 	add.w	r0, r3, #17
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	2210      	movs	r2, #16
 8003d2a:	2105      	movs	r1, #5
 8003d2c:	f7ff fbbd 	bl	80034aa <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXSFDTO_BIT, val);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f103 0011 	add.w	r0, r3, #17
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	221a      	movs	r2, #26
 8003d3a:	2104      	movs	r1, #4
 8003d3c:	f7ff fbb5 	bl	80034aa <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, AFFREJ_BIT, val);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f103 0011 	add.w	r0, r3, #17
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	221d      	movs	r2, #29
 8003d4a:	2104      	movs	r1, #4
 8003d4c:	f7ff fbad 	bl	80034aa <setBit>
}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <dwInterruptOnReceiveTimeout>:

void dwInterruptOnReceiveTimeout(dwDeviceTypes_t *dev, bool val)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, RXRFTO_BIT, val);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f103 0011 	add.w	r0, r3, #17
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	2211      	movs	r2, #17
 8003d6e:	2104      	movs	r1, #4
 8003d70:	f7ff fb9b 	bl	80034aa <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXPTO_BIT, val);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f103 0011 	add.w	r0, r3, #17
 8003d7a:	78fb      	ldrb	r3, [r7, #3]
 8003d7c:	2215      	movs	r2, #21
 8003d7e:	2104      	movs	r1, #4
 8003d80:	f7ff fb93 	bl	80034aa <setBit>
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <dwInterruptOnReceiveTimestampAvailable>:

void dwInterruptOnReceiveTimestampAvailable(dwDeviceTypes_t *dev, bool val)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, LDEDONE_BIT, val);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f103 0011 	add.w	r0, r3, #17
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	220a      	movs	r2, #10
 8003da2:	2104      	movs	r1, #4
 8003da4:	f7ff fb81 	bl	80034aa <setBit>
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <dwInterruptOnAutomaticAcknowledgeTrigger>:

void dwInterruptOnAutomaticAcknowledgeTrigger(dwDeviceTypes_t *dev, bool val)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, AAT_BIT, val);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f103 0011 	add.w	r0, r3, #17
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	2104      	movs	r1, #4
 8003dc8:	f7ff fb6f 	bl	80034aa <setBit>
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <dwClearInterrupts>:

void dwClearInterrupts(dwDeviceTypes_t *dev)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
    memset(dev->sysmask, 0, LEN_SYS_MASK);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3311      	adds	r3, #17
 8003de0:	2204      	movs	r2, #4
 8003de2:	2100      	movs	r1, #0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f006 f911 	bl	800a00c <memset>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <dwIdle>:

void dwIdle(dwDeviceTypes_t *dev)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af02      	add	r7, sp, #8
 8003df8:	6078      	str	r0, [r7, #4]
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	2204      	movs	r2, #4
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f006 f902 	bl	800a00c <memset>
    dev->sysctrl[0] |= 1 << TRXOFF_BIT;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	791b      	ldrb	r3, [r3, #4]
 8003e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	711a      	strb	r2, [r3, #4]
    dev->deviceMode = IDLE_MODE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	721a      	strb	r2, [r3, #8]
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	2204      	movs	r2, #4
 8003e22:	9200      	str	r2, [sp, #0]
 8003e24:	2200      	movs	r2, #0
 8003e26:	210d      	movs	r1, #13
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f001 fe29 	bl	8005a80 <dwSpiWrite>
}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <dwNewReceive>:

void dwNewReceive(dwDeviceTypes_t *dev)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff ffd7 	bl	8003df2 <dwIdle>
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	2204      	movs	r2, #4
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f006 f8dd 	bl	800a00c <memset>
    dwClearReceiveStatus(dev);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fdfc 	bl	8004a50 <dwClearReceiveStatus>
    dev->deviceMode = RX_MODE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	721a      	strb	r2, [r3, #8]
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <dwStartReceive>:

void dwStartReceive(dwDeviceTypes_t *dev)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af02      	add	r7, sp, #8
 8003e6c:	6078      	str	r0, [r7, #4]
    setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	1d18      	adds	r0, r3, #4
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bf14      	ite	ne
 8003e7c:	2301      	movne	r3, #1
 8003e7e:	2300      	moveq	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f083 0301 	eor.w	r3, r3, #1
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2104      	movs	r1, #4
 8003e92:	f7ff fb0a 	bl	80034aa <setBit>
    setBit(dev->sysctrl, LEN_SYS_CTRL, RXENAB_BIT, true);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	1d18      	adds	r0, r3, #4
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	2104      	movs	r1, #4
 8003ea0:	f7ff fb03 	bl	80034aa <setBit>
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	9200      	str	r2, [sp, #0]
 8003eac:	2200      	movs	r2, #0
 8003eae:	210d      	movs	r1, #13
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f001 fde5 	bl	8005a80 <dwSpiWrite>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <dwNewTransmit>:

void dwNewTransmit(dwDeviceTypes_t *dev)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ff93 	bl	8003df2 <dwIdle>
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f006 f899 	bl	800a00c <memset>
    dwClearTransmitStatus(dev);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fdca 	bl	8004a74 <dwClearTransmitStatus>
    dev->deviceMode = TX_MODE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	721a      	strb	r2, [r3, #8]
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <dwStartTransmit>:

void dwStartTransmit(dwDeviceTypes_t *dev, bool isTxDelay)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af02      	add	r7, sp, #8
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	70fb      	strb	r3, [r7, #3]
    dwWriteTransmitFrameControlRegister(dev);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fe1f 	bl	8003b3e <dwWriteTransmitFrameControlRegister>
    setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	1d18      	adds	r0, r3, #4
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bf14      	ite	ne
 8003f0e:	2301      	movne	r3, #1
 8003f10:	2300      	moveq	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f083 0301 	eor.w	r3, r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2200      	movs	r2, #0
 8003f22:	2104      	movs	r1, #4
 8003f24:	f7ff fac1 	bl	80034aa <setBit>
    if (isTxDelay)
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d006      	beq.n	8003f3c <dwStartTransmit+0x4e>
    	setBit(dev->sysctrl, LEN_SYS_CTRL, TXDLYS_BIT, true);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	1d18      	adds	r0, r3, #4
 8003f32:	2301      	movs	r3, #1
 8003f34:	2202      	movs	r2, #2
 8003f36:	2104      	movs	r1, #4
 8003f38:	f7ff fab7 	bl	80034aa <setBit>
    setBit(dev->sysctrl, LEN_SYS_CTRL, TXSTRT_BIT, true);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	1d18      	adds	r0, r3, #4
 8003f40:	2301      	movs	r3, #1
 8003f42:	2201      	movs	r2, #1
 8003f44:	2104      	movs	r1, #4
 8003f46:	f7ff fab0 	bl	80034aa <setBit>
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	2204      	movs	r2, #4
 8003f50:	9200      	str	r2, [sp, #0]
 8003f52:	2200      	movs	r2, #0
 8003f54:	210d      	movs	r1, #13
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f001 fd92 	bl	8005a80 <dwSpiWrite>
    if (dev->permanentReceive)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <dwStartTransmit+0x94>
    {
        memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f006 f84c 	bl	800a00c <memset>
        dev->deviceMode = RX_MODE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	721a      	strb	r2, [r3, #8]
        dwStartReceive(dev);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7ff ff73 	bl	8003e66 <dwStartReceive>
    }
    else
    {
        dev->deviceMode = IDLE_MODE;
    }
}
 8003f80:	e00b      	b.n	8003f9a <dwStartTransmit+0xac>
    else if (dev->wait4resp)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <dwStartTransmit+0xa6>
        dev->deviceMode = RX_MODE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	721a      	strb	r2, [r3, #8]
}
 8003f92:	e002      	b.n	8003f9a <dwStartTransmit+0xac>
        dev->deviceMode = IDLE_MODE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	721a      	strb	r2, [r3, #8]
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <dwNewConfiguration>:

void dwNewConfiguration(dwDeviceTypes_t *dev)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ff21 	bl	8003df2 <dwIdle>
    dwReadNetworkIdAndDeviceAddress(dev);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff fd4d 	bl	8003a50 <dwReadNetworkIdAndDeviceAddress>
    dwReadSystemConfigurationRegister(dev);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff fd17 	bl	80039ea <dwReadSystemConfigurationRegister>
    dwReadChannelControlRegister(dev);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff fd8b 	bl	8003ad8 <dwReadChannelControlRegister>
    dwReadTransmitFrameControlRegister(dev);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff fdaa 	bl	8003b1c <dwReadTransmitFrameControlRegister>
    dwReadSystemEventMaskRegister(dev);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff fd63 	bl	8003a94 <dwReadSystemEventMaskRegister>
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <dwCommitConfiguration>:

void dwCommitConfiguration(dwDeviceTypes_t *dev)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af02      	add	r7, sp, #8
 8003fdc:	6078      	str	r0, [r7, #4]
    // write all configurations back to device
    dwWriteNetworkIdAndDeviceAddress(dev);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fd47 	bl	8003a72 <dwWriteNetworkIdAndDeviceAddress>
    dwWriteSystemConfigurationRegister(dev);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff fd11 	bl	8003a0c <dwWriteSystemConfigurationRegister>
    dwWriteChannelControlRegister(dev);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fd85 	bl	8003afa <dwWriteChannelControlRegister>
    dwWriteTransmitFrameControlRegister(dev);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff fda4 	bl	8003b3e <dwWriteTransmitFrameControlRegister>
    dwWriteSystemEventMaskRegister(dev);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff fd5d 	bl	8003ab6 <dwWriteSystemEventMaskRegister>
    // tune according to configuration
    dwTune(dev);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fe1d 	bl	8004c3c <dwTune>
    // uint8_t antennaDelayBytes[LEN_STAMP];
    // writeValueToBytes(antennaDelayBytes, 16384, LEN_STAMP);
    // dev->antennaDelay.setTimestamp(antennaDelayBytes);
    // dwSpiRead(dev, TX_ANTD, NO_SUB, antennaDelayBytes, LEN_TX_ANTD);
    // dwSpiRead(dev, LDE_IF, LDE_RXANTD_SUB, antennaDelayBytes, LEN_LDE_RXANTD);
    dwSpiWrite(dev, TX_ANTD, NO_SUB, dev->antennaDelay.timeRaw, LEN_TX_ANTD);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3330      	adds	r3, #48	; 0x30
 8004006:	2202      	movs	r2, #2
 8004008:	9200      	str	r2, [sp, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	2118      	movs	r1, #24
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f001 fd36 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_RXANTD_SUB, dev->antennaDelay.timeRaw, LEN_LDE_RXANTD);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3330      	adds	r3, #48	; 0x30
 8004018:	2202      	movs	r2, #2
 800401a:	9200      	str	r2, [sp, #0]
 800401c:	f641 0204 	movw	r2, #6148	; 0x1804
 8004020:	212e      	movs	r1, #46	; 0x2e
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f001 fd2c 	bl	8005a80 <dwSpiWrite>
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <dwSuppressFrameCheck>:
    dev->wait4resp = val;
    setBit(dev->sysctrl, LEN_SYS_CTRL, WAIT4RESP_BIT, val);
}

void dwSuppressFrameCheck(dwDeviceTypes_t *dev, bool val)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
    dev->frameCheck = !val;
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f083 0301 	eor.w	r3, r3, #1
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	b2da      	uxtb	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <dwUseSmartPower>:

void dwUseSmartPower(dwDeviceTypes_t *dev, bool smartPower)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	460b      	mov	r3, r1
 8004070:	70fb      	strb	r3, [r7, #3]
    dev->smartPower = smartPower;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    setBit(dev->syscfg, LEN_SYS_CFG, DIS_STXP_BIT, !smartPower);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f103 000d 	add.w	r0, r3, #13
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	2b00      	cmp	r3, #0
 8004084:	bf14      	ite	ne
 8004086:	2301      	movne	r3, #1
 8004088:	2300      	moveq	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f083 0301 	eor.w	r3, r3, #1
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2212      	movs	r2, #18
 800409a:	2104      	movs	r1, #4
 800409c:	f7ff fa05 	bl	80034aa <setBit>
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <dwSetTxDelay>:
    futureTime.timeFull += dev->antennaDelay.timeFull;
    return futureTime;
}

uint64_t dwSetTxDelay(dwDeviceTypes_t *dev, uint64_t delay)
{
 80040a8:	b5b0      	push	{r4, r5, r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t delayBytes[5];
	dwTimestamp_t timeTx;
	dwGetSystemTimestamp(dev, &timeTx);
 80040b4:	f107 0310 	add.w	r3, r7, #16
 80040b8:	4619      	mov	r1, r3
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fbf6 	bl	80048ac <dwGetSystemTimestamp>
	timeTx.timeFull += delay;
 80040c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80040c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040c8:	1884      	adds	r4, r0, r2
 80040ca:	eb41 0503 	adc.w	r5, r1, r3
 80040ce:	e9c7 4504 	strd	r4, r5, [r7, #16]
	memcpy(delayBytes, timeTx.timeRaw, sizeof(timeTx.timeRaw));
 80040d2:	f107 0318 	add.w	r3, r7, #24
 80040d6:	f107 0210 	add.w	r2, r7, #16
 80040da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040de:	6018      	str	r0, [r3, #0]
 80040e0:	3304      	adds	r3, #4
 80040e2:	7019      	strb	r1, [r3, #0]
    delayBytes[0] = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	763b      	strb	r3, [r7, #24]
    delayBytes[1] &= 0xFE;
 80040e8:	7e7b      	ldrb	r3, [r7, #25]
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	767b      	strb	r3, [r7, #25]
    dwSpiWrite(dev, DX_TIME, NO_SUB, delayBytes, LEN_DX_TIME);
 80040f2:	f107 0318 	add.w	r3, r7, #24
 80040f6:	2205      	movs	r2, #5
 80040f8:	9200      	str	r2, [sp, #0]
 80040fa:	2200      	movs	r2, #0
 80040fc:	210a      	movs	r1, #10
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f001 fcbe 	bl	8005a80 <dwSpiWrite>
    memcpy(timeTx.timeRaw, delayBytes, sizeof(delayBytes));
 8004104:	f107 0310 	add.w	r3, r7, #16
 8004108:	f107 0218 	add.w	r2, r7, #24
 800410c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004110:	6018      	str	r0, [r3, #0]
 8004112:	3304      	adds	r3, #4
 8004114:	7019      	strb	r1, [r3, #0]
    return timeTx.timeFull;
 8004116:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800411a:	4610      	mov	r0, r2
 800411c:	4619      	mov	r1, r3
 800411e:	3720      	adds	r7, #32
 8004120:	46bd      	mov	sp, r7
 8004122:	bdb0      	pop	{r4, r5, r7, pc}

08004124 <dwSetDataRate>:
    delayBytes[1] &= 0xFE;
    dwSpiWrite(dev, DX_TIME, NO_SUB, delayBytes, LEN_DX_TIME);
}

void dwSetDataRate(dwDeviceTypes_t *dev, uint8_t rate)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af02      	add	r7, sp, #8
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	70fb      	strb	r3, [r7, #3]
    rate &= 0x03;
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[1] &= 0x83;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	7fdb      	ldrb	r3, [r3, #31]
 800413c:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8004140:	b2da      	uxtb	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	77da      	strb	r2, [r3, #31]
    dev->txfctrl[1] |= (uint8_t)((rate << 5) & 0xFF);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	7fda      	ldrb	r2, [r3, #31]
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	015b      	lsls	r3, r3, #5
 800414e:	b2db      	uxtb	r3, r3
 8004150:	4313      	orrs	r3, r2
 8004152:	b2da      	uxtb	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	77da      	strb	r2, [r3, #31]
    // special 110kbps flag
    if (rate == TRX_RATE_110KBPS)
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d108      	bne.n	8004170 <dwSetDataRate+0x4c>
    {
        setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, true);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f103 000d 	add.w	r0, r3, #13
 8004164:	2301      	movs	r3, #1
 8004166:	2216      	movs	r2, #22
 8004168:	2104      	movs	r1, #4
 800416a:	f7ff f99e 	bl	80034aa <setBit>
 800416e:	e007      	b.n	8004180 <dwSetDataRate+0x5c>
    }
    else
    {
        setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, false);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f103 000d 	add.w	r0, r3, #13
 8004176:	2300      	movs	r3, #0
 8004178:	2216      	movs	r2, #22
 800417a:	2104      	movs	r1, #4
 800417c:	f7ff f995 	bl	80034aa <setBit>
    }
    // SFD mode and type (non-configurable, as in Table )
    if (rate == TRX_RATE_6800KBPS)
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d118      	bne.n	80041b8 <dwSetDataRate+0x94>
    {
        setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, false);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f103 0015 	add.w	r0, r3, #21
 800418c:	2300      	movs	r3, #0
 800418e:	2211      	movs	r2, #17
 8004190:	2104      	movs	r1, #4
 8004192:	f7ff f98a 	bl	80034aa <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, false);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f103 0015 	add.w	r0, r3, #21
 800419c:	2300      	movs	r3, #0
 800419e:	2214      	movs	r2, #20
 80041a0:	2104      	movs	r1, #4
 80041a2:	f7ff f982 	bl	80034aa <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, false);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f103 0015 	add.w	r0, r3, #21
 80041ac:	2300      	movs	r3, #0
 80041ae:	2215      	movs	r2, #21
 80041b0:	2104      	movs	r1, #4
 80041b2:	f7ff f97a 	bl	80034aa <setBit>
 80041b6:	e017      	b.n	80041e8 <dwSetDataRate+0xc4>
    }
    else
    {
        setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, true);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f103 0015 	add.w	r0, r3, #21
 80041be:	2301      	movs	r3, #1
 80041c0:	2211      	movs	r2, #17
 80041c2:	2104      	movs	r1, #4
 80041c4:	f7ff f971 	bl	80034aa <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, true);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f103 0015 	add.w	r0, r3, #21
 80041ce:	2301      	movs	r3, #1
 80041d0:	2214      	movs	r2, #20
 80041d2:	2104      	movs	r1, #4
 80041d4:	f7ff f969 	bl	80034aa <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, true);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f103 0015 	add.w	r0, r3, #21
 80041de:	2301      	movs	r3, #1
 80041e0:	2215      	movs	r2, #21
 80041e2:	2104      	movs	r1, #4
 80041e4:	f7ff f961 	bl	80034aa <setBit>
    }
    uint8_t sfdLength;
    if (rate == TRX_RATE_6800KBPS)
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d102      	bne.n	80041f4 <dwSetDataRate+0xd0>
    {
        sfdLength = 0x08;
 80041ee:	2308      	movs	r3, #8
 80041f0:	73fb      	strb	r3, [r7, #15]
 80041f2:	e007      	b.n	8004204 <dwSetDataRate+0xe0>
    }
    else if (rate == TRX_RATE_850KBPS)
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d102      	bne.n	8004200 <dwSetDataRate+0xdc>
    {
        sfdLength = 0x10;
 80041fa:	2310      	movs	r3, #16
 80041fc:	73fb      	strb	r3, [r7, #15]
 80041fe:	e001      	b.n	8004204 <dwSetDataRate+0xe0>
    }
    else
    {
        sfdLength = 0x40;
 8004200:	2340      	movs	r3, #64	; 0x40
 8004202:	73fb      	strb	r3, [r7, #15]
    }
    dwSpiWrite(dev, USR_SFD, SFD_LENGTH_SUB, &sfdLength, LEN_SFD_LENGTH);
 8004204:	f107 030f 	add.w	r3, r7, #15
 8004208:	2201      	movs	r2, #1
 800420a:	9200      	str	r2, [sp, #0]
 800420c:	2200      	movs	r2, #0
 800420e:	2121      	movs	r1, #33	; 0x21
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f001 fc35 	bl	8005a80 <dwSpiWrite>
    dev->dataRate = rate;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <dwSetPulseFrequency>:

void dwSetPulseFrequency(dwDeviceTypes_t *dev, uint8_t freq)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	70fb      	strb	r3, [r7, #3]
    freq &= 0x03;
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[2] &= 0xFC;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004240:	f023 0303 	bic.w	r3, r3, #3
 8004244:	b2da      	uxtb	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f883 2020 	strb.w	r2, [r3, #32]
    dev->txfctrl[2] |= (uint8_t)(freq & 0xFF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	4313      	orrs	r3, r2
 8004256:	b2da      	uxtb	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f883 2020 	strb.w	r2, [r3, #32]
    dev->chanctrl[2] &= 0xF3;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7ddb      	ldrb	r3, [r3, #23]
 8004262:	f023 030c 	bic.w	r3, r3, #12
 8004266:	b2da      	uxtb	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[2] |= (uint8_t)((freq << 2) & 0xFF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	7dda      	ldrb	r2, [r3, #23]
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	b2db      	uxtb	r3, r3
 8004276:	4313      	orrs	r3, r2
 8004278:	b2da      	uxtb	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	75da      	strb	r2, [r3, #23]
    dev->pulseFrequency = freq;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	78fa      	ldrb	r2, [r7, #3]
 8004282:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <dwSetPreambleLength>:
{
    return dev->pulseFrequency;
}

void dwSetPreambleLength(dwDeviceTypes_t *dev, uint8_t prealen)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	460b      	mov	r3, r1
 800429c:	70fb      	strb	r3, [r7, #3]
    prealen &= 0x0F;
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[2] &= 0xC3;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ac:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f883 2020 	strb.w	r2, [r3, #32]
    dev->txfctrl[2] |= (uint8_t)((prealen << 2) & 0xFF);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 2020 	ldrb.w	r2, [r3, #32]
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	4313      	orrs	r3, r2
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f883 2020 	strb.w	r2, [r3, #32]
    if (prealen == TX_PREAMBLE_LEN_64 || prealen == TX_PREAMBLE_LEN_128)
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d002      	beq.n	80042da <dwSetPreambleLength+0x48>
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	2b05      	cmp	r3, #5
 80042d8:	d104      	bne.n	80042e4 <dwSetPreambleLength+0x52>
    {
        dev->pacSize = PAC_SIZE_8;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2208      	movs	r2, #8
 80042de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80042e2:	e016      	b.n	8004312 <dwSetPreambleLength+0x80>
    }
    else if (prealen == TX_PREAMBLE_LEN_256 || prealen == TX_PREAMBLE_LEN_512)
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	2b09      	cmp	r3, #9
 80042e8:	d002      	beq.n	80042f0 <dwSetPreambleLength+0x5e>
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	2b0d      	cmp	r3, #13
 80042ee:	d104      	bne.n	80042fa <dwSetPreambleLength+0x68>
    {
        dev->pacSize = PAC_SIZE_16;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2210      	movs	r2, #16
 80042f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80042f8:	e00b      	b.n	8004312 <dwSetPreambleLength+0x80>
    }
    else if (prealen == TX_PREAMBLE_LEN_1024)
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d104      	bne.n	800430a <dwSetPreambleLength+0x78>
    {
        dev->pacSize = PAC_SIZE_32;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004308:	e003      	b.n	8004312 <dwSetPreambleLength+0x80>
    }
    else
    {
        dev->pacSize = PAC_SIZE_64;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2240      	movs	r2, #64	; 0x40
 800430e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    dev->preambleLength = prealen;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <dwUseExtendedFrameLength>:

void dwUseExtendedFrameLength(dwDeviceTypes_t *dev, bool val)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	70fb      	strb	r3, [r7, #3]
    dev->extendedFrameLength = (val ? FRAME_LENGTH_EXTENDED : FRAME_LENGTH_NORMAL);
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <dwUseExtendedFrameLength+0x16>
 8004338:	2203      	movs	r2, #3
 800433a:	e000      	b.n	800433e <dwUseExtendedFrameLength+0x18>
 800433c:	2200      	movs	r2, #0
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    dev->syscfg[2] &= 0xFC;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	7bdb      	ldrb	r3, [r3, #15]
 8004348:	f023 0303 	bic.w	r3, r3, #3
 800434c:	b2da      	uxtb	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	73da      	strb	r2, [r3, #15]
    dev->syscfg[2] |= dev->extendedFrameLength;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	7bda      	ldrb	r2, [r3, #15]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800435c:	4313      	orrs	r3, r2
 800435e:	b2da      	uxtb	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	73da      	strb	r2, [r3, #15]
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <dwSetChannel>:
{
    dev->permanentReceive = val;
}

void dwSetChannel(dwDeviceTypes_t *dev, uint8_t channel)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]
    channel &= 0xF;
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	70fb      	strb	r3, [r7, #3]
    dev->chanctrl[0] = ((channel | (channel << 4)) & 0xFF);
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	b25a      	sxtb	r2, r3
 800438a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800438e:	4313      	orrs	r3, r2
 8004390:	b25b      	sxtb	r3, r3
 8004392:	b2da      	uxtb	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	755a      	strb	r2, [r3, #21]
    dev->channel = channel;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <dwSetPreambleCode>:

void dwSetPreambleCode(dwDeviceTypes_t *dev, uint8_t preacode)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]
    preacode &= 0x1F;
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	70fb      	strb	r3, [r7, #3]
    dev->chanctrl[2] &= 0x3F;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	7ddb      	ldrb	r3, [r3, #23]
 80043c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[2] |= ((preacode << 6) & 0xFF);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	7ddb      	ldrb	r3, [r3, #23]
 80043d2:	b25a      	sxtb	r2, r3
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	019b      	lsls	r3, r3, #6
 80043d8:	b25b      	sxtb	r3, r3
 80043da:	4313      	orrs	r3, r2
 80043dc:	b25b      	sxtb	r3, r3
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[3] = 0x00;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	761a      	strb	r2, [r3, #24]
    dev->chanctrl[3] = ((((preacode >> 2) & 0x07) | (preacode << 3)) & 0xFF);
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	089b      	lsrs	r3, r3, #2
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	b25b      	sxtb	r3, r3
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	b25a      	sxtb	r2, r3
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	b25b      	sxtb	r3, r3
 80043fe:	4313      	orrs	r3, r2
 8004400:	b25b      	sxtb	r3, r3
 8004402:	b2da      	uxtb	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	761a      	strb	r2, [r3, #24]
    dev->preambleCode = preacode;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <dwSetDefaults>:

void dwSetDefaults(dwDeviceTypes_t *dev)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
    if (dev->deviceMode == TX_MODE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	7a1b      	ldrb	r3, [r3, #8]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d04d      	beq.n	80044c8 <dwSetDefaults+0xac>
    {
    }
    else if (dev->deviceMode == RX_MODE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	7a1b      	ldrb	r3, [r3, #8]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d049      	beq.n	80044c8 <dwSetDefaults+0xac>
    {
    }
    else if (dev->deviceMode == IDLE_MODE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	7a1b      	ldrb	r3, [r3, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d145      	bne.n	80044c8 <dwSetDefaults+0xac>
    {
        dwUseExtendedFrameLength(dev, false);
 800443c:	2100      	movs	r1, #0
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff ff71 	bl	8004326 <dwUseExtendedFrameLength>
        dwUseSmartPower(dev, false);
 8004444:	2100      	movs	r1, #0
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff fe0d 	bl	8004066 <dwUseSmartPower>
        dwSuppressFrameCheck(dev, false);
 800444c:	2100      	movs	r1, #0
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff fdee 	bl	8004030 <dwSuppressFrameCheck>
        // for global frame filtering
        dwSetFrameFilter(dev, false);
 8004454:	2100      	movs	r1, #0
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff fba1 	bl	8003b9e <dwSetFrameFilter>
        // for data frame (poll, poll_ack, range, range report, range failed) filtering
        dwSetFrameFilterAllowData(dev, false);
 800445c:	2100      	movs	r1, #0
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff fbaf 	bl	8003bc2 <dwSetFrameFilterAllowData>
        // for reserved (blink) frame filtering
        dwSetFrameFilterAllowReserved(dev, false);
 8004464:	2100      	movs	r1, #0
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff fbbd 	bl	8003be6 <dwSetFrameFilterAllowReserved>
        // setFrameFilterAllowMAC(true);
        // setFrameFilterAllowBeacon(true);
        // setFrameFilterAllowAcknowledgement(true);
        dwInterruptOnSent(dev, true);
 800446c:	2101      	movs	r1, #1
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff fc0c 	bl	8003c8c <dwInterruptOnSent>
        dwInterruptOnReceived(dev, true);
 8004474:	2101      	movs	r1, #1
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff fc1a 	bl	8003cb0 <dwInterruptOnReceived>
        dwInterruptOnReceiveTimeout(dev, true);
 800447c:	2101      	movs	r1, #1
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff fc6a 	bl	8003d58 <dwInterruptOnReceiveTimeout>
        dwInterruptOnReceiveFailed(dev, false);
 8004484:	2100      	movs	r1, #0
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff fc2c 	bl	8003ce4 <dwInterruptOnReceiveFailed>
        dwInterruptOnReceiveTimestampAvailable(dev, false);
 800448c:	2100      	movs	r1, #0
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff fc7c 	bl	8003d8c <dwInterruptOnReceiveTimestampAvailable>
        dwInterruptOnAutomaticAcknowledgeTrigger(dev, false);
 8004494:	2100      	movs	r1, #0
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff fc8a 	bl	8003db0 <dwInterruptOnAutomaticAcknowledgeTrigger>
        dwSetReceiverAutoReenable(dev, true);
 800449c:	2101      	movs	r1, #1
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff fbe2 	bl	8003c68 <dwSetReceiverAutoReenable>
        // default mode when powering up the chip
        // still explicitly selected for later tuning
        dwEnableMode(dev, MODE_LONGDATA_RANGE_LOWPOWER);
 80044a4:	490a      	ldr	r1, [pc, #40]	; (80044d0 <dwSetDefaults+0xb4>)
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fb9d 	bl	8004be6 <dwEnableMode>
        dev->func->delayms(dev, 5);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2105      	movs	r1, #5
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
        dwUseSmartPower(dev, true);
 80044b8:	2101      	movs	r1, #1
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff fdd3 	bl	8004066 <dwUseSmartPower>
        dwEnableMode(dev, MODE_SHORTDATA_FAST_LOWPOWER);
 80044c0:	4904      	ldr	r1, [pc, #16]	; (80044d4 <dwSetDefaults+0xb8>)
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fb8f 	bl	8004be6 <dwEnableMode>
    }
}
 80044c8:	bf00      	nop
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	0800ee2c 	.word	0x0800ee2c
 80044d4:	0800ee30 	.word	0x0800ee30

080044d8 <dwSetData>:

void dwSetData(dwDeviceTypes_t *dev, uint8_t data[], unsigned int n)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
    if (dev->frameCheck)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <dwSetData+0x1c>
    {
        n += 2; // two bytes CRC-16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3302      	adds	r3, #2
 80044f2:	607b      	str	r3, [r7, #4]
    }
    if (n > LEN_EXT_UWB_FRAMES)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fa:	d229      	bcs.n	8004550 <dwSetData+0x78>
    {
        return; // TODO proper error handling: frame/buffer size
    }
    if (n > LEN_UWB_FRAMES && !dev->extendedFrameLength)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004500:	d904      	bls.n	800450c <dwSetData+0x34>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004508:	2b00      	cmp	r3, #0
 800450a:	d023      	beq.n	8004554 <dwSetData+0x7c>
    {
        return; // TODO proper error handling: frame/buffer size
    }
    // transmit data and length
    dwSpiWrite(dev, TX_BUFFER, NO_SUB, data, n);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2200      	movs	r2, #0
 8004514:	2109      	movs	r1, #9
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f001 fab2 	bl	8005a80 <dwSpiWrite>
    dev->txfctrl[0] = (uint8_t)(n & 0xFF); // 1 byte (regular length + 1 bit)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	b2da      	uxtb	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	779a      	strb	r2, [r3, #30]
    dev->txfctrl[1] &= 0xE0;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	7fdb      	ldrb	r3, [r3, #31]
 8004528:	f023 031f 	bic.w	r3, r3, #31
 800452c:	b2da      	uxtb	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	77da      	strb	r2, [r3, #31]
    dev->txfctrl[1] |= (uint8_t)((n >> 8) & 0x03); // 2 added bits if extended length
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	7fdb      	ldrb	r3, [r3, #31]
 8004536:	b25a      	sxtb	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	b25b      	sxtb	r3, r3
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	b25b      	sxtb	r3, r3
 8004544:	4313      	orrs	r3, r2
 8004546:	b25b      	sxtb	r3, r3
 8004548:	b2da      	uxtb	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	77da      	strb	r2, [r3, #31]
 800454e:	e002      	b.n	8004556 <dwSetData+0x7e>
        return; // TODO proper error handling: frame/buffer size
 8004550:	bf00      	nop
 8004552:	e000      	b.n	8004556 <dwSetData+0x7e>
        return; // TODO proper error handling: frame/buffer size
 8004554:	bf00      	nop
}
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <dwGetDataLength>:

unsigned int dwGetDataLength(dwDeviceTypes_t *dev)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af02      	add	r7, sp, #8
 8004562:	6078      	str	r0, [r7, #4]
    unsigned int len = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
    if (dev->deviceMode == TX_MODE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	7a1b      	ldrb	r3, [r3, #8]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d109      	bne.n	8004584 <dwGetDataLength+0x28>
    {
        // 10 bits of TX frame control register
        len = ((((unsigned int)dev->txfctrl[1] << 8) | (unsigned int)dev->txfctrl[0]) & 0x03FF);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	7fdb      	ldrb	r3, [r3, #31]
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	7f92      	ldrb	r2, [r2, #30]
 800457a:	4313      	orrs	r3, r2
 800457c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	e013      	b.n	80045ac <dwGetDataLength+0x50>
    }
    else if (dev->deviceMode == RX_MODE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	7a1b      	ldrb	r3, [r3, #8]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10f      	bne.n	80045ac <dwGetDataLength+0x50>
    {
        // 10 bits of RX frame control register
        uint8_t rxFrameInfo[LEN_RX_FINFO];
        dwSpiRead(dev, RX_FINFO, NO_SUB, rxFrameInfo, LEN_RX_FINFO);
 800458c:	f107 0308 	add.w	r3, r7, #8
 8004590:	2204      	movs	r2, #4
 8004592:	9200      	str	r2, [sp, #0]
 8004594:	2200      	movs	r2, #0
 8004596:	2110      	movs	r1, #16
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f001 fa09 	bl	80059b0 <dwSpiRead>
        len = ((((unsigned int)rxFrameInfo[1] << 8) | (unsigned int)rxFrameInfo[0]) & 0x03FF);
 800459e:	7a7b      	ldrb	r3, [r7, #9]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	7a3a      	ldrb	r2, [r7, #8]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045aa:	60fb      	str	r3, [r7, #12]
    }
    if (dev->frameCheck && len > 2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <dwGetDataLength+0x66>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d902      	bls.n	80045c2 <dwGetDataLength+0x66>
    {
        return len - 2;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3b02      	subs	r3, #2
 80045c0:	e000      	b.n	80045c4 <dwGetDataLength+0x68>
    }
    return len;
 80045c2:	68fb      	ldr	r3, [r7, #12]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <dwGetData>:

void dwGetData(dwDeviceTypes_t *dev, uint8_t data[], unsigned int n)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
    if (n <= 0)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d008      	beq.n	80045f0 <dwGetData+0x24>
    {
        return;
    }
    dwSpiRead(dev, RX_BUFFER, NO_SUB, data, n);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2200      	movs	r2, #0
 80045e6:	2111      	movs	r1, #17
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f001 f9e1 	bl	80059b0 <dwSpiRead>
 80045ee:	e000      	b.n	80045f2 <dwGetData+0x26>
        return;
 80045f0:	bf00      	nop
}
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <dwGetReceiveTimestamp>:
{
    dwSpiRead(dev, TX_TIME, TX_STAMP_SUB, time->timeRaw, LEN_TX_STAMP);
}

void dwGetReceiveTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *time)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
    time->timeFull = 0;
 8004602:	6839      	ldr	r1, [r7, #0]
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9c1 2300 	strd	r2, r3, [r1]
    dwSpiRead(dev, RX_TIME, RX_STAMP_SUB, time->timeRaw, LEN_RX_STAMP);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2205      	movs	r2, #5
 8004614:	9200      	str	r2, [sp, #0]
 8004616:	2200      	movs	r2, #0
 8004618:	2115      	movs	r1, #21
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f001 f9c8 	bl	80059b0 <dwSpiRead>
    // correct timestamp (i.e. consider range bias)
    dwCorrectTimestamp(dev, time);
 8004620:	6839      	ldr	r1, [r7, #0]
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f804 	bl	8004630 <dwCorrectTimestamp>
}
 8004628:	bf00      	nop
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <dwCorrectTimestamp>:
    time->timeFull = 0;
    dwSpiRead(dev, RX_TIME, RX_STAMP_SUB, time->timeRaw, LEN_RX_STAMP);
}

void dwCorrectTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *timestamp)
{
 8004630:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004634:	b08a      	sub	sp, #40	; 0x28
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
    // base line dBm, which is -61, 2 dBm steps, total 18 data points (down to -95 dBm)
    float rxPowerBase = -(dwGetReceivePower(dev) + 61.0f) * 0.5f;
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 faa3 	bl	8004b88 <dwGetReceivePower>
 8004642:	eef0 7a40 	vmov.f32	s15, s0
 8004646:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800488c <dwCorrectTimestamp+0x25c>
 800464a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800464e:	eef1 7a67 	vneg.f32	s15, s15
 8004652:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800465a:	edc7 7a05 	vstr	s15, [r7, #20]

    if (!isfinite(rxPowerBase))
 800465e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004662:	eef0 7ae7 	vabs.f32	s15, s15
 8004666:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8004890 <dwCorrectTimestamp+0x260>
 800466a:	eef4 7a47 	vcmp.f32	s15, s14
 800466e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004672:	f200 8106 	bhi.w	8004882 <dwCorrectTimestamp+0x252>
    {
        return;
    }
    int rxPowerBaseLow = (int)rxPowerBase;
 8004676:	edd7 7a05 	vldr	s15, [r7, #20]
 800467a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800467e:	ee17 3a90 	vmov	r3, s15
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
    int rxPowerBaseHigh = rxPowerBaseLow + 1;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	3301      	adds	r3, #1
 8004688:	623b      	str	r3, [r7, #32]
    if (rxPowerBaseLow <= 0)
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	2b00      	cmp	r3, #0
 800468e:	dc04      	bgt.n	800469a <dwCorrectTimestamp+0x6a>
    {
        rxPowerBaseLow = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
        rxPowerBaseHigh = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	623b      	str	r3, [r7, #32]
 8004698:	e006      	b.n	80046a8 <dwCorrectTimestamp+0x78>
    }
    else if (rxPowerBaseHigh >= 17)
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	2b10      	cmp	r3, #16
 800469e:	dd03      	ble.n	80046a8 <dwCorrectTimestamp+0x78>
    {
        rxPowerBaseLow = 17;
 80046a0:	2311      	movs	r3, #17
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
        rxPowerBaseHigh = 17;
 80046a4:	2311      	movs	r3, #17
 80046a6:	623b      	str	r3, [r7, #32]
    }
    // select range low/high values from corresponding table
    int rangeBiasHigh = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
    int rangeBiasLow = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
    if (dev->channel == CHANNEL_4 || dev->channel == CHANNEL_7)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d004      	beq.n	80046c4 <dwCorrectTimestamp+0x94>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80046c0:	2b07      	cmp	r3, #7
 80046c2:	d157      	bne.n	8004774 <dwCorrectTimestamp+0x144>
    {
        // 900 MHz receiver bandwidth
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d126      	bne.n	800471c <dwCorrectTimestamp+0xec>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_900_16_ZERO ? -BIAS_900_16[rxPowerBaseHigh] : BIAS_900_16[rxPowerBaseHigh]);
 80046ce:	2307      	movs	r3, #7
 80046d0:	461a      	mov	r2, r3
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	4293      	cmp	r3, r2
 80046d6:	da05      	bge.n	80046e4 <dwCorrectTimestamp+0xb4>
 80046d8:	4a6e      	ldr	r2, [pc, #440]	; (8004894 <dwCorrectTimestamp+0x264>)
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	4413      	add	r3, r2
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	425b      	negs	r3, r3
 80046e2:	e003      	b.n	80046ec <dwCorrectTimestamp+0xbc>
 80046e4:	4a6b      	ldr	r2, [pc, #428]	; (8004894 <dwCorrectTimestamp+0x264>)
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	4413      	add	r3, r2
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	61fb      	str	r3, [r7, #28]
            rangeBiasHigh <<= 1;
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_900_16_ZERO ? -BIAS_900_16[rxPowerBaseLow] : BIAS_900_16[rxPowerBaseLow]);
 80046f4:	2307      	movs	r3, #7
 80046f6:	461a      	mov	r2, r3
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	4293      	cmp	r3, r2
 80046fc:	da05      	bge.n	800470a <dwCorrectTimestamp+0xda>
 80046fe:	4a65      	ldr	r2, [pc, #404]	; (8004894 <dwCorrectTimestamp+0x264>)
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	4413      	add	r3, r2
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	425b      	negs	r3, r3
 8004708:	e003      	b.n	8004712 <dwCorrectTimestamp+0xe2>
 800470a:	4a62      	ldr	r2, [pc, #392]	; (8004894 <dwCorrectTimestamp+0x264>)
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	4413      	add	r3, r2
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	61bb      	str	r3, [r7, #24]
            rangeBiasLow <<= 1;
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	61bb      	str	r3, [r7, #24]
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800471a:	e077      	b.n	800480c <dwCorrectTimestamp+0x1dc>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004722:	2b02      	cmp	r3, #2
 8004724:	d172      	bne.n	800480c <dwCorrectTimestamp+0x1dc>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_900_64_ZERO ? -BIAS_900_64[rxPowerBaseHigh] : BIAS_900_64[rxPowerBaseHigh]);
 8004726:	2307      	movs	r3, #7
 8004728:	461a      	mov	r2, r3
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	4293      	cmp	r3, r2
 800472e:	da05      	bge.n	800473c <dwCorrectTimestamp+0x10c>
 8004730:	4a59      	ldr	r2, [pc, #356]	; (8004898 <dwCorrectTimestamp+0x268>)
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	4413      	add	r3, r2
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	425b      	negs	r3, r3
 800473a:	e003      	b.n	8004744 <dwCorrectTimestamp+0x114>
 800473c:	4a56      	ldr	r2, [pc, #344]	; (8004898 <dwCorrectTimestamp+0x268>)
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	4413      	add	r3, r2
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	61fb      	str	r3, [r7, #28]
            rangeBiasHigh <<= 1;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_900_64_ZERO ? -BIAS_900_64[rxPowerBaseLow] : BIAS_900_64[rxPowerBaseLow]);
 800474c:	2307      	movs	r3, #7
 800474e:	461a      	mov	r2, r3
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	4293      	cmp	r3, r2
 8004754:	da05      	bge.n	8004762 <dwCorrectTimestamp+0x132>
 8004756:	4a50      	ldr	r2, [pc, #320]	; (8004898 <dwCorrectTimestamp+0x268>)
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	4413      	add	r3, r2
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	425b      	negs	r3, r3
 8004760:	e003      	b.n	800476a <dwCorrectTimestamp+0x13a>
 8004762:	4a4d      	ldr	r2, [pc, #308]	; (8004898 <dwCorrectTimestamp+0x268>)
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	4413      	add	r3, r2
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	61bb      	str	r3, [r7, #24]
            rangeBiasLow <<= 1;
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	61bb      	str	r3, [r7, #24]
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004772:	e04b      	b.n	800480c <dwCorrectTimestamp+0x1dc>
        }
    }
    else
    {
        // 500 MHz receiver bandwidth
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800477a:	2b01      	cmp	r3, #1
 800477c:	d120      	bne.n	80047c0 <dwCorrectTimestamp+0x190>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_500_16_ZERO ? -BIAS_500_16[rxPowerBaseHigh] : BIAS_500_16[rxPowerBaseHigh]);
 800477e:	230a      	movs	r3, #10
 8004780:	461a      	mov	r2, r3
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	4293      	cmp	r3, r2
 8004786:	da05      	bge.n	8004794 <dwCorrectTimestamp+0x164>
 8004788:	4a44      	ldr	r2, [pc, #272]	; (800489c <dwCorrectTimestamp+0x26c>)
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	4413      	add	r3, r2
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	425b      	negs	r3, r3
 8004792:	e003      	b.n	800479c <dwCorrectTimestamp+0x16c>
 8004794:	4a41      	ldr	r2, [pc, #260]	; (800489c <dwCorrectTimestamp+0x26c>)
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	4413      	add	r3, r2
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_500_16_ZERO ? -BIAS_500_16[rxPowerBaseLow] : BIAS_500_16[rxPowerBaseLow]);
 800479e:	230a      	movs	r3, #10
 80047a0:	461a      	mov	r2, r3
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	4293      	cmp	r3, r2
 80047a6:	da05      	bge.n	80047b4 <dwCorrectTimestamp+0x184>
 80047a8:	4a3c      	ldr	r2, [pc, #240]	; (800489c <dwCorrectTimestamp+0x26c>)
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	4413      	add	r3, r2
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	425b      	negs	r3, r3
 80047b2:	e003      	b.n	80047bc <dwCorrectTimestamp+0x18c>
 80047b4:	4a39      	ldr	r2, [pc, #228]	; (800489c <dwCorrectTimestamp+0x26c>)
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	4413      	add	r3, r2
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	e026      	b.n	800480e <dwCorrectTimestamp+0x1de>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d121      	bne.n	800480e <dwCorrectTimestamp+0x1de>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_500_64_ZERO ? -BIAS_500_64[rxPowerBaseHigh] : BIAS_500_64[rxPowerBaseHigh]);
 80047ca:	2308      	movs	r3, #8
 80047cc:	461a      	mov	r2, r3
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	4293      	cmp	r3, r2
 80047d2:	da05      	bge.n	80047e0 <dwCorrectTimestamp+0x1b0>
 80047d4:	4a32      	ldr	r2, [pc, #200]	; (80048a0 <dwCorrectTimestamp+0x270>)
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	4413      	add	r3, r2
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	425b      	negs	r3, r3
 80047de:	e003      	b.n	80047e8 <dwCorrectTimestamp+0x1b8>
 80047e0:	4a2f      	ldr	r2, [pc, #188]	; (80048a0 <dwCorrectTimestamp+0x270>)
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	4413      	add	r3, r2
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_500_64_ZERO ? -BIAS_500_64[rxPowerBaseLow] : BIAS_500_64[rxPowerBaseLow]);
 80047ea:	2308      	movs	r3, #8
 80047ec:	461a      	mov	r2, r3
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	4293      	cmp	r3, r2
 80047f2:	da05      	bge.n	8004800 <dwCorrectTimestamp+0x1d0>
 80047f4:	4a2a      	ldr	r2, [pc, #168]	; (80048a0 <dwCorrectTimestamp+0x270>)
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	4413      	add	r3, r2
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	425b      	negs	r3, r3
 80047fe:	e003      	b.n	8004808 <dwCorrectTimestamp+0x1d8>
 8004800:	4a27      	ldr	r2, [pc, #156]	; (80048a0 <dwCorrectTimestamp+0x270>)
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	4413      	add	r3, r2
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	e000      	b.n	800480e <dwCorrectTimestamp+0x1de>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800480c:	bf00      	nop
        {
            // TODO proper error handling
        }
    }
    // linear interpolation of bias values
    float rangeBias = rangeBiasLow + (rxPowerBase - rxPowerBaseLow) * (rangeBiasHigh - rangeBiasLow);
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	ee07 3a90 	vmov	s15, r3
 8004814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004822:	edd7 6a05 	vldr	s13, [r7, #20]
 8004826:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800483c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004840:	edc7 7a04 	vstr	s15, [r7, #16]
    // range bias [mm] to timestamp modification value conversion
    dwTimestamp_t adjustmentTime;
    adjustmentTime.timeFull = (int)(rangeBias * DISTANCE_OF_RADIO_INV * 0.001f);
 8004844:	edd7 7a04 	vldr	s15, [r7, #16]
 8004848:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80048a4 <dwCorrectTimestamp+0x274>
 800484c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004850:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80048a8 <dwCorrectTimestamp+0x278>
 8004854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800485c:	ee17 2a90 	vmov	r2, s15
 8004860:	17d3      	asrs	r3, r2, #31
 8004862:	4690      	mov	r8, r2
 8004864:	4699      	mov	r9, r3
 8004866:	e9c7 8902 	strd	r8, r9, [r7, #8]
    // apply correction
    timestamp->timeFull -= adjustmentTime.timeFull;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004870:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004874:	1a84      	subs	r4, r0, r2
 8004876:	eb61 0503 	sbc.w	r5, r1, r3
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	e9c3 4500 	strd	r4, r5, [r3]
 8004880:	e000      	b.n	8004884 <dwCorrectTimestamp+0x254>
        return;
 8004882:	bf00      	nop
}
 8004884:	3728      	adds	r7, #40	; 0x28
 8004886:	46bd      	mov	sp, r7
 8004888:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800488c:	42740000 	.word	0x42740000
 8004890:	7f7fffff 	.word	0x7f7fffff
 8004894:	0800ee5c 	.word	0x0800ee5c
 8004898:	0800ee70 	.word	0x0800ee70
 800489c:	0800ee34 	.word	0x0800ee34
 80048a0:	0800ee48 	.word	0x0800ee48
 80048a4:	435523b3 	.word	0x435523b3
 80048a8:	3a83126f 	.word	0x3a83126f

080048ac <dwGetSystemTimestamp>:

void dwGetSystemTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *time)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
    dwSpiRead(dev, SYS_TIME, NO_SUB, time->timeRaw, LEN_SYS_TIME);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2205      	movs	r2, #5
 80048ba:	9200      	str	r2, [sp, #0]
 80048bc:	2200      	movs	r2, #0
 80048be:	2106      	movs	r1, #6
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f001 f875 	bl	80059b0 <dwSpiRead>
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <dwIsTransmitDone>:

bool dwIsTransmitDone(dwDeviceTypes_t *dev)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, TXFRS_BIT);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3319      	adds	r3, #25
 80048da:	2207      	movs	r2, #7
 80048dc:	2105      	movs	r1, #5
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe fe20 	bl	8003524 <getBit>
 80048e4:	4603      	mov	r3, r0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <dwIsReceiveTimestampAvailable>:

bool dwIsReceiveTimestampAvailable(dwDeviceTypes_t *dev)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, LDEDONE_BIT);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3319      	adds	r3, #25
 80048fa:	220a      	movs	r2, #10
 80048fc:	2105      	movs	r1, #5
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe fe10 	bl	8003524 <getBit>
 8004904:	4603      	mov	r3, r0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <dwIsReceiveDone>:

bool dwIsReceiveDone(dwDeviceTypes_t *dev)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
    if (dev->frameCheck)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <dwIsReceiveDone+0x24>
    {
        return getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCG_BIT);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3319      	adds	r3, #25
 8004924:	220e      	movs	r2, #14
 8004926:	2105      	movs	r1, #5
 8004928:	4618      	mov	r0, r3
 800492a:	f7fe fdfb 	bl	8003524 <getBit>
 800492e:	4603      	mov	r3, r0
 8004930:	e007      	b.n	8004942 <dwIsReceiveDone+0x34>
    }
    return getBit(dev->sysstatus, LEN_SYS_STATUS, RXDFR_BIT);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3319      	adds	r3, #25
 8004936:	220d      	movs	r2, #13
 8004938:	2105      	movs	r1, #5
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe fdf2 	bl	8003524 <getBit>
 8004940:	4603      	mov	r3, r0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <dwIsReceiveFailed>:

bool dwIsReceiveFailed(dwDeviceTypes_t *dev)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
    bool ldeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, LDEERR_BIT);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3319      	adds	r3, #25
 8004956:	2212      	movs	r2, #18
 8004958:	2105      	movs	r1, #5
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe fde2 	bl	8003524 <getBit>
 8004960:	4603      	mov	r3, r0
 8004962:	73fb      	strb	r3, [r7, #15]
    bool rxCRCErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCE_BIT);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3319      	adds	r3, #25
 8004968:	220f      	movs	r2, #15
 800496a:	2105      	movs	r1, #5
 800496c:	4618      	mov	r0, r3
 800496e:	f7fe fdd9 	bl	8003524 <getBit>
 8004972:	4603      	mov	r3, r0
 8004974:	73bb      	strb	r3, [r7, #14]
    bool rxHeaderErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXPHE_BIT);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3319      	adds	r3, #25
 800497a:	220c      	movs	r2, #12
 800497c:	2105      	movs	r1, #5
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe fdd0 	bl	8003524 <getBit>
 8004984:	4603      	mov	r3, r0
 8004986:	737b      	strb	r3, [r7, #13]
    bool rxDecodeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFSL_BIT);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3319      	adds	r3, #25
 800498c:	2210      	movs	r2, #16
 800498e:	2105      	movs	r1, #5
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe fdc7 	bl	8003524 <getBit>
 8004996:	4603      	mov	r3, r0
 8004998:	733b      	strb	r3, [r7, #12]

    bool rxSfdto = getBit(dev->sysstatus, LEN_SYS_STATUS, RXSFDTO_BIT);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3319      	adds	r3, #25
 800499e:	221a      	movs	r2, #26
 80049a0:	2105      	movs	r1, #5
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fe fdbe 	bl	8003524 <getBit>
 80049a8:	4603      	mov	r3, r0
 80049aa:	72fb      	strb	r3, [r7, #11]
    bool affrej = getBit(dev->sysstatus, LEN_SYS_STATUS, AFFREJ_BIT);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3319      	adds	r3, #25
 80049b0:	221d      	movs	r2, #29
 80049b2:	2105      	movs	r1, #5
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fe fdb5 	bl	8003524 <getBit>
 80049ba:	4603      	mov	r3, r0
 80049bc:	72bb      	strb	r3, [r7, #10]

    return (ldeErr || rxCRCErr || rxHeaderErr || rxDecodeErr || rxSfdto || affrej);
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10e      	bne.n	80049e2 <dwIsReceiveFailed+0x98>
 80049c4:	7bbb      	ldrb	r3, [r7, #14]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10b      	bne.n	80049e2 <dwIsReceiveFailed+0x98>
 80049ca:	7b7b      	ldrb	r3, [r7, #13]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d108      	bne.n	80049e2 <dwIsReceiveFailed+0x98>
 80049d0:	7b3b      	ldrb	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d105      	bne.n	80049e2 <dwIsReceiveFailed+0x98>
 80049d6:	7afb      	ldrb	r3, [r7, #11]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d102      	bne.n	80049e2 <dwIsReceiveFailed+0x98>
 80049dc:	7abb      	ldrb	r3, [r7, #10]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <dwIsReceiveFailed+0x9c>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <dwIsReceiveFailed+0x9e>
 80049e6:	2300      	movs	r3, #0
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	b2db      	uxtb	r3, r3
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <dwIsReceiveTimeout>:

bool dwIsReceiveTimeout(dwDeviceTypes_t *dev)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFTO_BIT);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3319      	adds	r3, #25
 8004a02:	2211      	movs	r2, #17
 8004a04:	2105      	movs	r1, #5
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe fd8c 	bl	8003524 <getBit>
 8004a0c:	4603      	mov	r3, r0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <dwClearReceiveTimestampAvailableStatus>:
    uint32_t reg = 0xffffffff;
    dwSpiWrite(dev, SYS_STATUS, NO_SUB, &reg, LEN_SYS_STATUS);
}

void dwClearReceiveTimestampAvailableStatus(dwDeviceTypes_t *dev)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b086      	sub	sp, #24
 8004a1a:	af02      	add	r7, sp, #8
 8004a1c:	6078      	str	r0, [r7, #4]
    uint8_t reg[LEN_SYS_STATUS] = {0};
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	2300      	movs	r3, #0
 8004a24:	733b      	strb	r3, [r7, #12]
    setBit(reg, LEN_SYS_STATUS, LDEDONE_BIT, true);
 8004a26:	f107 0008 	add.w	r0, r7, #8
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	220a      	movs	r2, #10
 8004a2e:	2105      	movs	r1, #5
 8004a30:	f7fe fd3b 	bl	80034aa <setBit>
    dwSpiWrite(dev, SYS_STATUS, NO_SUB, reg, LEN_SYS_STATUS);
 8004a34:	f107 0308 	add.w	r3, r7, #8
 8004a38:	2205      	movs	r2, #5
 8004a3a:	9200      	str	r2, [sp, #0]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	210f      	movs	r1, #15
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f001 f81d 	bl	8005a80 <dwSpiWrite>
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <dwClearReceiveStatus>:

void dwClearReceiveStatus(dwDeviceTypes_t *dev)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
    // clear latched RX bits (i.e. write 1 to clear)
    uint32_t regData = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_GOOD;
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <dwClearReceiveStatus+0x20>)
 8004a5a:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	210f      	movs	r1, #15
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f001 f866 	bl	8005b34 <dwSpiWrite32>
}
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	2427ff00 	.word	0x2427ff00

08004a74 <dwClearTransmitStatus>:

void dwClearTransmitStatus(dwDeviceTypes_t *dev)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
    // clear latched TX bits
    uint32_t regData = SYS_STATUS_ALL_TX;
 8004a7c:	23f8      	movs	r3, #248	; 0xf8
 8004a7e:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	210f      	movs	r1, #15
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f001 f854 	bl	8005b34 <dwSpiWrite32>
}
 8004a8c:	bf00      	nop
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <spiReadRxInfo>:
    f2 = (unsigned int)fpAmpl2Bytes[0] | ((unsigned int)fpAmpl2Bytes[1] << 8);
    return (float)f2 / noise;
}

static float spiReadRxInfo(dwDeviceTypes_t *dev)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	6078      	str	r0, [r7, #4]
    uint8_t rxFrameInfo[LEN_RX_FINFO];
    dwSpiRead(dev, RX_FINFO, NO_SUB, rxFrameInfo, LEN_RX_FINFO);
 8004a9c:	f107 030c 	add.w	r3, r7, #12
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	9200      	str	r2, [sp, #0]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2110      	movs	r1, #16
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 ff81 	bl	80059b0 <dwSpiRead>
    return (float)((((unsigned int)rxFrameInfo[2] >> 4) & 0xFF) | ((unsigned int)rxFrameInfo[3] << 4));
 8004aae:	7bbb      	ldrb	r3, [r7, #14]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	4313      	orrs	r3, r2
 8004abc:	ee07 3a90 	vmov	s15, r3
 8004ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8004ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <calculatePower>:

static float calculatePower(float base, float N, uint8_t pulseFrequency)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	ed87 0a03 	vstr	s0, [r7, #12]
 8004ada:	edc7 0a02 	vstr	s1, [r7, #8]
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
    float A, corrFac;

    if (TX_PULSE_FREQ_16MHZ == pulseFrequency)
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d104      	bne.n	8004af2 <calculatePower+0x22>
    {
        A = 113.77f;
 8004ae8:	4b21      	ldr	r3, [pc, #132]	; (8004b70 <calculatePower+0xa0>)
 8004aea:	61fb      	str	r3, [r7, #28]
        corrFac = 2.3334f;
 8004aec:	4b21      	ldr	r3, [pc, #132]	; (8004b74 <calculatePower+0xa4>)
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	e003      	b.n	8004afa <calculatePower+0x2a>
    }
    else
    {
        A = 121.74f;
 8004af2:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <calculatePower+0xa8>)
 8004af4:	61fb      	str	r3, [r7, #28]
        corrFac = 1.1667f;
 8004af6:	4b21      	ldr	r3, [pc, #132]	; (8004b7c <calculatePower+0xac>)
 8004af8:	61bb      	str	r3, [r7, #24]
    }

    float estFpPwr = 10.0f * log10f(base / (N * N)) - A;
 8004afa:	edd7 7a02 	vldr	s15, [r7, #8]
 8004afe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004b02:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b0a:	eeb0 0a66 	vmov.f32	s0, s13
 8004b0e:	f009 ff0f 	bl	800e930 <log10f>
 8004b12:	eef0 7a40 	vmov.f32	s15, s0
 8004b16:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b26:	edc7 7a05 	vstr	s15, [r7, #20]

    if (estFpPwr <= -88)
 8004b2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b2e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004b80 <calculatePower+0xb0>
 8004b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3a:	d801      	bhi.n	8004b40 <calculatePower+0x70>
    {
        return estFpPwr;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	e010      	b.n	8004b62 <calculatePower+0x92>
    }
    else
    {
        // approximation of Fig. 22 in user manual for dbm correction
        estFpPwr += (estFpPwr + 88) * corrFac;
 8004b40:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b44:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004b84 <calculatePower+0xb4>
 8004b48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b54:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b5c:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    return estFpPwr;
 8004b60:	697b      	ldr	r3, [r7, #20]
}
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eeb0 0a67 	vmov.f32	s0, s15
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	42e38a3d 	.word	0x42e38a3d
 8004b74:	4015566d 	.word	0x4015566d
 8004b78:	42f37ae1 	.word	0x42f37ae1
 8004b7c:	3f95566d 	.word	0x3f95566d
 8004b80:	c2b00000 	.word	0xc2b00000
 8004b84:	42b00000 	.word	0x42b00000

08004b88 <dwGetReceivePower>:

    return calculatePower(f1 * f1 + f2 * f2 + f3 * f3, N, dev->pulseFrequency);
}

float dwGetReceivePower(dwDeviceTypes_t *dev)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
    float C = (float)dwSpiRead16(dev, RX_FQUAL, CIR_PWR_SUB);
 8004b90:	2206      	movs	r2, #6
 8004b92:	2112      	movs	r1, #18
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 ff49 	bl	8005a2c <dwSpiRead16>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba4:	edc7 7a05 	vstr	s15, [r7, #20]
    float N = spiReadRxInfo(dev);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff ff73 	bl	8004a94 <spiReadRxInfo>
 8004bae:	ed87 0a04 	vstr	s0, [r7, #16]

    float twoPower17 = 131072.0f;
 8004bb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bb6:	60fb      	str	r3, [r7, #12]

    return calculatePower(C * twoPower17, N, dev->pulseFrequency);
 8004bb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8004bbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004bca:	4618      	mov	r0, r3
 8004bcc:	edd7 0a04 	vldr	s1, [r7, #16]
 8004bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8004bd4:	f7ff ff7c 	bl	8004ad0 <calculatePower>
 8004bd8:	eef0 7a40 	vmov.f32	s15, s0
}
 8004bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <dwEnableMode>:

void dwEnableMode(dwDeviceTypes_t *dev, const uint8_t mode[])
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
    dwSetDataRate(dev, mode[0]);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7ff fa94 	bl	8004124 <dwSetDataRate>
    dwSetPulseFrequency(dev, mode[1]);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	4619      	mov	r1, r3
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff fb0e 	bl	8004226 <dwSetPulseFrequency>
    dwSetPreambleLength(dev, mode[2]);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	3302      	adds	r3, #2
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff fb3d 	bl	8004292 <dwSetPreambleLength>
    // TODO add channel and code to mode tuples
    // TODO add channel and code settings with checks (see Table 58)
    dwSetChannel(dev, dev->channel);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004c1e:	4619      	mov	r1, r3
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff fba5 	bl	8004370 <dwSetChannel>
    dwSetPreambleCode(dev, dev->preambleCode);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff fbbc 	bl	80043ac <dwSetPreambleCode>
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <dwTune>:
    dwSetChannel(dev, dev->channel);
    dwSetPreambleCode(dev, dev->preambleCode);
}

void dwTune(dwDeviceTypes_t *dev)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b098      	sub	sp, #96	; 0x60
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	6078      	str	r0, [r7, #4]
    uint8_t tcpgdelay[LEN_TC_PGDELAY];
    uint8_t fspllcfg[LEN_FS_PLLCFG];
    uint8_t fsplltune[LEN_FS_PLLTUNE];
    uint8_t fsxtalt[LEN_FS_XTALT];
    // AGC_TUNE1
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d108      	bne.n	8004c60 <dwTune+0x24>
    {
        writeValueToBytes(agctune1, 0x8870, LEN_AGC_TUNE1);
 8004c4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c52:	2202      	movs	r2, #2
 8004c54:	f648 0170 	movw	r1, #34928	; 0x8870
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe fc8c 	bl	8003576 <writeValueToBytes>
 8004c5e:	e00c      	b.n	8004c7a <dwTune+0x3e>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d107      	bne.n	8004c7a <dwTune+0x3e>
    {
        writeValueToBytes(agctune1, 0x889B, LEN_AGC_TUNE1);
 8004c6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f648 019b 	movw	r1, #34971	; 0x889b
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fe fc7e 	bl	8003576 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // AGC_TUNE2
    writeValueToBytes(agctune2, 0x2502A907L, LEN_AGC_TUNE2);
 8004c7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004c7e:	2204      	movs	r2, #4
 8004c80:	49b9      	ldr	r1, [pc, #740]	; (8004f68 <dwTune+0x32c>)
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe fc77 	bl	8003576 <writeValueToBytes>
    // AGC_TUNE3
    writeValueToBytes(agctune3, 0x0035, LEN_AGC_TUNE3);
 8004c88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	2135      	movs	r1, #53	; 0x35
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fe fc70 	bl	8003576 <writeValueToBytes>
    // DRX_TUNE0b (already optimized according to Table 20 of user manual)
    if (dev->dataRate == TRX_RATE_110KBPS)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d107      	bne.n	8004cb0 <dwTune+0x74>
    {
        writeValueToBytes(drxtune0b, 0x0016, LEN_DRX_TUNE0b);
 8004ca0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	2116      	movs	r1, #22
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe fc64 	bl	8003576 <writeValueToBytes>
 8004cae:	e018      	b.n	8004ce2 <dwTune+0xa6>
    }
    else if (dev->dataRate == TRX_RATE_850KBPS)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d107      	bne.n	8004cca <dwTune+0x8e>
    {
        writeValueToBytes(drxtune0b, 0x0006, LEN_DRX_TUNE0b);
 8004cba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	2106      	movs	r1, #6
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fc57 	bl	8003576 <writeValueToBytes>
 8004cc8:	e00b      	b.n	8004ce2 <dwTune+0xa6>
    }
    else if (dev->dataRate == TRX_RATE_6800KBPS)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d106      	bne.n	8004ce2 <dwTune+0xa6>
    {
        writeValueToBytes(drxtune0b, 0x0001, LEN_DRX_TUNE0b);
 8004cd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cd8:	2202      	movs	r2, #2
 8004cda:	2101      	movs	r1, #1
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fe fc4a 	bl	8003576 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE1a
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d107      	bne.n	8004cfc <dwTune+0xc0>
    {
        writeValueToBytes(drxtune1a, 0x0087, LEN_DRX_TUNE1a);
 8004cec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	2187      	movs	r1, #135	; 0x87
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fe fc3e 	bl	8003576 <writeValueToBytes>
 8004cfa:	e00b      	b.n	8004d14 <dwTune+0xd8>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d106      	bne.n	8004d14 <dwTune+0xd8>
    {
        writeValueToBytes(drxtune1a, 0x008D, LEN_DRX_TUNE1a);
 8004d06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	218d      	movs	r1, #141	; 0x8d
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fe fc31 	bl	8003576 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE1b
    if (dev->preambleLength == TX_PREAMBLE_LEN_1536 || dev->preambleLength == TX_PREAMBLE_LEN_2048 ||
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004d1a:	2b06      	cmp	r3, #6
 8004d1c:	d009      	beq.n	8004d32 <dwTune+0xf6>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004d24:	2b0a      	cmp	r3, #10
 8004d26:	d004      	beq.n	8004d32 <dwTune+0xf6>
        dev->preambleLength == TX_PREAMBLE_LEN_4096)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    if (dev->preambleLength == TX_PREAMBLE_LEN_1536 || dev->preambleLength == TX_PREAMBLE_LEN_2048 ||
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d10c      	bne.n	8004d4c <dwTune+0x110>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d12a      	bne.n	8004d92 <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0064, LEN_DRX_TUNE1b);
 8004d3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d40:	2202      	movs	r2, #2
 8004d42:	2164      	movs	r1, #100	; 0x64
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fe fc16 	bl	8003576 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004d4a:	e022      	b.n	8004d92 <dwTune+0x156>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->preambleLength != TX_PREAMBLE_LEN_64)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d011      	beq.n	8004d7a <dwTune+0x13e>
    {
        if (dev->dataRate == TRX_RATE_850KBPS || dev->dataRate == TRX_RATE_6800KBPS)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d004      	beq.n	8004d6a <dwTune+0x12e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d113      	bne.n	8004d92 <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0020, LEN_DRX_TUNE1b);
 8004d6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d6e:	2202      	movs	r2, #2
 8004d70:	2120      	movs	r1, #32
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe fbff 	bl	8003576 <writeValueToBytes>
 8004d78:	e00b      	b.n	8004d92 <dwTune+0x156>
            // TODO proper error/warning handling
        }
    }
    else
    {
        if (dev->dataRate == TRX_RATE_6800KBPS)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d106      	bne.n	8004d92 <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0010, LEN_DRX_TUNE1b);
 8004d84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d88:	2202      	movs	r2, #2
 8004d8a:	2110      	movs	r1, #16
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fe fbf2 	bl	8003576 <writeValueToBytes>
        {
            // TODO proper error/warning handling
        }
    }
    // DRX_TUNE2
    if (dev->pacSize == PAC_SIZE_8)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d119      	bne.n	8004dd0 <dwTune+0x194>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d107      	bne.n	8004db6 <dwTune+0x17a>
        {
            writeValueToBytes(drxtune2, 0x311A002DL, LEN_DRX_TUNE2);
 8004da6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004daa:	2204      	movs	r2, #4
 8004dac:	496f      	ldr	r1, [pc, #444]	; (8004f6c <dwTune+0x330>)
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe fbe1 	bl	8003576 <writeValueToBytes>
 8004db4:	e068      	b.n	8004e88 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d163      	bne.n	8004e88 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x313B006BL, LEN_DRX_TUNE2);
 8004dc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	496a      	ldr	r1, [pc, #424]	; (8004f70 <dwTune+0x334>)
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fe fbd4 	bl	8003576 <writeValueToBytes>
 8004dce:	e05b      	b.n	8004e88 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_16)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dd6:	2b10      	cmp	r3, #16
 8004dd8:	d119      	bne.n	8004e0e <dwTune+0x1d2>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d107      	bne.n	8004df4 <dwTune+0x1b8>
        {
            writeValueToBytes(drxtune2, 0x331A0052L, LEN_DRX_TUNE2);
 8004de4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004de8:	2204      	movs	r2, #4
 8004dea:	4962      	ldr	r1, [pc, #392]	; (8004f74 <dwTune+0x338>)
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fe fbc2 	bl	8003576 <writeValueToBytes>
 8004df2:	e049      	b.n	8004e88 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d144      	bne.n	8004e88 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x333B00BEL, LEN_DRX_TUNE2);
 8004dfe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004e02:	2204      	movs	r2, #4
 8004e04:	495c      	ldr	r1, [pc, #368]	; (8004f78 <dwTune+0x33c>)
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fbb5 	bl	8003576 <writeValueToBytes>
 8004e0c:	e03c      	b.n	8004e88 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_32)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d119      	bne.n	8004e4c <dwTune+0x210>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d107      	bne.n	8004e32 <dwTune+0x1f6>
        {
            writeValueToBytes(drxtune2, 0x351A009AL, LEN_DRX_TUNE2);
 8004e22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004e26:	2204      	movs	r2, #4
 8004e28:	4954      	ldr	r1, [pc, #336]	; (8004f7c <dwTune+0x340>)
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fe fba3 	bl	8003576 <writeValueToBytes>
 8004e30:	e02a      	b.n	8004e88 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d125      	bne.n	8004e88 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x353B015EL, LEN_DRX_TUNE2);
 8004e3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004e40:	2204      	movs	r2, #4
 8004e42:	494f      	ldr	r1, [pc, #316]	; (8004f80 <dwTune+0x344>)
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fe fb96 	bl	8003576 <writeValueToBytes>
 8004e4a:	e01d      	b.n	8004e88 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_64)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d118      	bne.n	8004e88 <dwTune+0x24c>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d107      	bne.n	8004e70 <dwTune+0x234>
        {
            writeValueToBytes(drxtune2, 0x371A011DL, LEN_DRX_TUNE2);
 8004e60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004e64:	2204      	movs	r2, #4
 8004e66:	4947      	ldr	r1, [pc, #284]	; (8004f84 <dwTune+0x348>)
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fe fb84 	bl	8003576 <writeValueToBytes>
 8004e6e:	e00b      	b.n	8004e88 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d106      	bne.n	8004e88 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x373B0296L, LEN_DRX_TUNE2);
 8004e7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004e7e:	2204      	movs	r2, #4
 8004e80:	4941      	ldr	r1, [pc, #260]	; (8004f88 <dwTune+0x34c>)
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fe fb77 	bl	8003576 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE4H
    if (dev->preambleLength == TX_PREAMBLE_LEN_64)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d107      	bne.n	8004ea2 <dwTune+0x266>
    {
        writeValueToBytes(drxtune4H, 0x0010, LEN_DRX_TUNE4H);
 8004e92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e96:	2202      	movs	r2, #2
 8004e98:	2110      	movs	r1, #16
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe fb6b 	bl	8003576 <writeValueToBytes>
 8004ea0:	e006      	b.n	8004eb0 <dwTune+0x274>
    }
    else
    {
        writeValueToBytes(drxtune4H, 0x0028, LEN_DRX_TUNE4H);
 8004ea2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	2128      	movs	r1, #40	; 0x28
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fe fb63 	bl	8003576 <writeValueToBytes>
    }
    // RF_RXCTRLH
    if (dev->channel != CHANNEL_4 && dev->channel != CHANNEL_7)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d00c      	beq.n	8004ed4 <dwTune+0x298>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004ec0:	2b07      	cmp	r3, #7
 8004ec2:	d007      	beq.n	8004ed4 <dwTune+0x298>
    {
        writeValueToBytes(rfrxctrlh, 0xD8, LEN_RF_RXCTRLH);
 8004ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ec8:	2201      	movs	r2, #1
 8004eca:	21d8      	movs	r1, #216	; 0xd8
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fe fb52 	bl	8003576 <writeValueToBytes>
 8004ed2:	e006      	b.n	8004ee2 <dwTune+0x2a6>
    }
    else
    {
        writeValueToBytes(rfrxctrlh, 0xBC, LEN_RF_RXCTRLH);
 8004ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ed8:	2201      	movs	r2, #1
 8004eda:	21bc      	movs	r1, #188	; 0xbc
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fe fb4a 	bl	8003576 <writeValueToBytes>
    }
    // RX_TXCTRL
    if (dev->channel == CHANNEL_1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d108      	bne.n	8004efe <dwTune+0x2c2>
    {
        writeValueToBytes(rftxctrl, 0x00005C40L, LEN_RF_TXCTRL);
 8004eec:	f107 0320 	add.w	r3, r7, #32
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	f645 4140 	movw	r1, #23616	; 0x5c40
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fe fb3d 	bl	8003576 <writeValueToBytes>
 8004efc:	e05a      	b.n	8004fb4 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d107      	bne.n	8004f18 <dwTune+0x2dc>
    {
        writeValueToBytes(rftxctrl, 0x00045CA0L, LEN_RF_TXCTRL);
 8004f08:	f107 0320 	add.w	r3, r7, #32
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	491f      	ldr	r1, [pc, #124]	; (8004f8c <dwTune+0x350>)
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fe fb30 	bl	8003576 <writeValueToBytes>
 8004f16:	e04d      	b.n	8004fb4 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_3)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d107      	bne.n	8004f32 <dwTune+0x2f6>
    {
        writeValueToBytes(rftxctrl, 0x00086CC0L, LEN_RF_TXCTRL);
 8004f22:	f107 0320 	add.w	r3, r7, #32
 8004f26:	2204      	movs	r2, #4
 8004f28:	4919      	ldr	r1, [pc, #100]	; (8004f90 <dwTune+0x354>)
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe fb23 	bl	8003576 <writeValueToBytes>
 8004f30:	e040      	b.n	8004fb4 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_4)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d107      	bne.n	8004f4c <dwTune+0x310>
    {
        writeValueToBytes(rftxctrl, 0x00045C80L, LEN_RF_TXCTRL);
 8004f3c:	f107 0320 	add.w	r3, r7, #32
 8004f40:	2204      	movs	r2, #4
 8004f42:	4914      	ldr	r1, [pc, #80]	; (8004f94 <dwTune+0x358>)
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fe fb16 	bl	8003576 <writeValueToBytes>
 8004f4a:	e033      	b.n	8004fb4 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_5)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f52:	2b05      	cmp	r3, #5
 8004f54:	d122      	bne.n	8004f9c <dwTune+0x360>
    {
        writeValueToBytes(rftxctrl, 0x001E3FE0L, LEN_RF_TXCTRL);
 8004f56:	f107 0320 	add.w	r3, r7, #32
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	490e      	ldr	r1, [pc, #56]	; (8004f98 <dwTune+0x35c>)
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fe fb09 	bl	8003576 <writeValueToBytes>
 8004f64:	e026      	b.n	8004fb4 <dwTune+0x378>
 8004f66:	bf00      	nop
 8004f68:	2502a907 	.word	0x2502a907
 8004f6c:	311a002d 	.word	0x311a002d
 8004f70:	313b006b 	.word	0x313b006b
 8004f74:	331a0052 	.word	0x331a0052
 8004f78:	333b00be 	.word	0x333b00be
 8004f7c:	351a009a 	.word	0x351a009a
 8004f80:	353b015e 	.word	0x353b015e
 8004f84:	371a011d 	.word	0x371a011d
 8004f88:	373b0296 	.word	0x373b0296
 8004f8c:	00045ca0 	.word	0x00045ca0
 8004f90:	00086cc0 	.word	0x00086cc0
 8004f94:	00045c80 	.word	0x00045c80
 8004f98:	001e3fe0 	.word	0x001e3fe0
    }
    else if (dev->channel == CHANNEL_7)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004fa2:	2b07      	cmp	r3, #7
 8004fa4:	d106      	bne.n	8004fb4 <dwTune+0x378>
    {
        writeValueToBytes(rftxctrl, 0x001E7DE0L, LEN_RF_TXCTRL);
 8004fa6:	f107 0320 	add.w	r3, r7, #32
 8004faa:	2204      	movs	r2, #4
 8004fac:	49be      	ldr	r1, [pc, #760]	; (80052a8 <dwTune+0x66c>)
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fae1 	bl	8003576 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // TC_PGDELAY
    if (dev->channel == CHANNEL_1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d107      	bne.n	8004fce <dwTune+0x392>
    {
        writeValueToBytes(tcpgdelay, 0xC9, LEN_TC_PGDELAY);
 8004fbe:	f107 031c 	add.w	r3, r7, #28
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	21c9      	movs	r1, #201	; 0xc9
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fe fad5 	bl	8003576 <writeValueToBytes>
 8004fcc:	e03f      	b.n	800504e <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_2)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d107      	bne.n	8004fe8 <dwTune+0x3ac>
    {
        writeValueToBytes(tcpgdelay, 0xC2, LEN_TC_PGDELAY);
 8004fd8:	f107 031c 	add.w	r3, r7, #28
 8004fdc:	2201      	movs	r2, #1
 8004fde:	21c2      	movs	r1, #194	; 0xc2
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fe fac8 	bl	8003576 <writeValueToBytes>
 8004fe6:	e032      	b.n	800504e <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_3)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d107      	bne.n	8005002 <dwTune+0x3c6>
    {
        writeValueToBytes(tcpgdelay, 0xC5, LEN_TC_PGDELAY);
 8004ff2:	f107 031c 	add.w	r3, r7, #28
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	21c5      	movs	r1, #197	; 0xc5
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe fabb 	bl	8003576 <writeValueToBytes>
 8005000:	e025      	b.n	800504e <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_4)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005008:	2b04      	cmp	r3, #4
 800500a:	d107      	bne.n	800501c <dwTune+0x3e0>
    {
        writeValueToBytes(tcpgdelay, 0x95, LEN_TC_PGDELAY);
 800500c:	f107 031c 	add.w	r3, r7, #28
 8005010:	2201      	movs	r2, #1
 8005012:	2195      	movs	r1, #149	; 0x95
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe faae 	bl	8003576 <writeValueToBytes>
 800501a:	e018      	b.n	800504e <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_5)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005022:	2b05      	cmp	r3, #5
 8005024:	d107      	bne.n	8005036 <dwTune+0x3fa>
    {
        writeValueToBytes(tcpgdelay, 0xC0, LEN_TC_PGDELAY);
 8005026:	f107 031c 	add.w	r3, r7, #28
 800502a:	2201      	movs	r2, #1
 800502c:	21c0      	movs	r1, #192	; 0xc0
 800502e:	4618      	mov	r0, r3
 8005030:	f7fe faa1 	bl	8003576 <writeValueToBytes>
 8005034:	e00b      	b.n	800504e <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_7)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800503c:	2b07      	cmp	r3, #7
 800503e:	d106      	bne.n	800504e <dwTune+0x412>
    {
        writeValueToBytes(tcpgdelay, 0x93, LEN_TC_PGDELAY);
 8005040:	f107 031c 	add.w	r3, r7, #28
 8005044:	2201      	movs	r2, #1
 8005046:	2193      	movs	r1, #147	; 0x93
 8005048:	4618      	mov	r0, r3
 800504a:	f7fe fa94 	bl	8003576 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // FS_PLLCFG and FS_PLLTUNE
    if (dev->channel == CHANNEL_1)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005054:	2b01      	cmp	r3, #1
 8005056:	d10e      	bne.n	8005076 <dwTune+0x43a>
    {
        writeValueToBytes(fspllcfg, 0x09000407L, LEN_FS_PLLCFG);
 8005058:	f107 0318 	add.w	r3, r7, #24
 800505c:	2204      	movs	r2, #4
 800505e:	4993      	ldr	r1, [pc, #588]	; (80052ac <dwTune+0x670>)
 8005060:	4618      	mov	r0, r3
 8005062:	f7fe fa88 	bl	8003576 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x1E, LEN_FS_PLLTUNE);
 8005066:	f107 0314 	add.w	r3, r7, #20
 800506a:	2201      	movs	r2, #1
 800506c:	211e      	movs	r1, #30
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe fa81 	bl	8003576 <writeValueToBytes>
 8005074:	e044      	b.n	8005100 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_2 || dev->channel == CHANNEL_4)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800507c:	2b02      	cmp	r3, #2
 800507e:	d004      	beq.n	800508a <dwTune+0x44e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005086:	2b04      	cmp	r3, #4
 8005088:	d10e      	bne.n	80050a8 <dwTune+0x46c>
    {
        writeValueToBytes(fspllcfg, 0x08400508L, LEN_FS_PLLCFG);
 800508a:	f107 0318 	add.w	r3, r7, #24
 800508e:	2204      	movs	r2, #4
 8005090:	4987      	ldr	r1, [pc, #540]	; (80052b0 <dwTune+0x674>)
 8005092:	4618      	mov	r0, r3
 8005094:	f7fe fa6f 	bl	8003576 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x26, LEN_FS_PLLTUNE);
 8005098:	f107 0314 	add.w	r3, r7, #20
 800509c:	2201      	movs	r2, #1
 800509e:	2126      	movs	r1, #38	; 0x26
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fe fa68 	bl	8003576 <writeValueToBytes>
 80050a6:	e02b      	b.n	8005100 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_3)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d10e      	bne.n	80050d0 <dwTune+0x494>
    {
        writeValueToBytes(fspllcfg, 0x08401009L, LEN_FS_PLLCFG);
 80050b2:	f107 0318 	add.w	r3, r7, #24
 80050b6:	2204      	movs	r2, #4
 80050b8:	497e      	ldr	r1, [pc, #504]	; (80052b4 <dwTune+0x678>)
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fe fa5b 	bl	8003576 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x56, LEN_FS_PLLTUNE);
 80050c0:	f107 0314 	add.w	r3, r7, #20
 80050c4:	2201      	movs	r2, #1
 80050c6:	2156      	movs	r1, #86	; 0x56
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fe fa54 	bl	8003576 <writeValueToBytes>
 80050ce:	e017      	b.n	8005100 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_5 || dev->channel == CHANNEL_7)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80050d6:	2b05      	cmp	r3, #5
 80050d8:	d004      	beq.n	80050e4 <dwTune+0x4a8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80050e0:	2b07      	cmp	r3, #7
 80050e2:	d10d      	bne.n	8005100 <dwTune+0x4c4>
    {
        writeValueToBytes(fspllcfg, 0x0800041DL, LEN_FS_PLLCFG);
 80050e4:	f107 0318 	add.w	r3, r7, #24
 80050e8:	2204      	movs	r2, #4
 80050ea:	4973      	ldr	r1, [pc, #460]	; (80052b8 <dwTune+0x67c>)
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fe fa42 	bl	8003576 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0xA6, LEN_FS_PLLTUNE);
 80050f2:	f107 0314 	add.w	r3, r7, #20
 80050f6:	2201      	movs	r2, #1
 80050f8:	21a6      	movs	r1, #166	; 0xa6
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe fa3b 	bl	8003576 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // LDE_CFG1
    writeValueToBytes(ldecfg1, 0xD, LEN_LDE_CFG1);
 8005100:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005104:	2201      	movs	r2, #1
 8005106:	210d      	movs	r1, #13
 8005108:	4618      	mov	r0, r3
 800510a:	f7fe fa34 	bl	8003576 <writeValueToBytes>
    // LDE_CFG2
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005114:	2b01      	cmp	r3, #1
 8005116:	d108      	bne.n	800512a <dwTune+0x4ee>
    {
        writeValueToBytes(ldecfg2, 0x1607, LEN_LDE_CFG2);
 8005118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800511c:	2202      	movs	r2, #2
 800511e:	f241 6107 	movw	r1, #5639	; 0x1607
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe fa27 	bl	8003576 <writeValueToBytes>
 8005128:	e00c      	b.n	8005144 <dwTune+0x508>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005130:	2b02      	cmp	r3, #2
 8005132:	d107      	bne.n	8005144 <dwTune+0x508>
    {
        writeValueToBytes(ldecfg2, 0x0607, LEN_LDE_CFG2);
 8005134:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005138:	2202      	movs	r2, #2
 800513a:	f240 6107 	movw	r1, #1543	; 0x607
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fa19 	bl	8003576 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // LDE_REPC
    if (dev->preambleCode == PREAMBLE_CODE_16MHZ_1 || dev->preambleCode == PREAMBLE_CODE_16MHZ_2)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800514a:	2b01      	cmp	r3, #1
 800514c:	d004      	beq.n	8005158 <dwTune+0x51c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005154:	2b02      	cmp	r3, #2
 8005156:	d116      	bne.n	8005186 <dwTune+0x54a>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800515e:	2b00      	cmp	r3, #0
 8005160:	d108      	bne.n	8005174 <dwTune+0x538>
        {
            writeValueToBytes(lderepc, ((0x5998 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005166:	2202      	movs	r2, #2
 8005168:	f640 3133 	movw	r1, #2867	; 0xb33
 800516c:	4618      	mov	r0, r3
 800516e:	f7fe fa02 	bl	8003576 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005172:	e154      	b.n	800541e <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x5998, LEN_LDE_REPC);
 8005174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005178:	2202      	movs	r2, #2
 800517a:	f645 1198 	movw	r1, #22936	; 0x5998
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe f9f9 	bl	8003576 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005184:	e14b      	b.n	800541e <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_3 || dev->preambleCode == PREAMBLE_CODE_16MHZ_8)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800518c:	2b03      	cmp	r3, #3
 800518e:	d004      	beq.n	800519a <dwTune+0x55e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005196:	2b08      	cmp	r3, #8
 8005198:	d116      	bne.n	80051c8 <dwTune+0x58c>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d108      	bne.n	80051b6 <dwTune+0x57a>
        {
            writeValueToBytes(lderepc, ((0x51EA >> 3) & 0xFFFF), LEN_LDE_REPC);
 80051a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051a8:	2202      	movs	r2, #2
 80051aa:	f640 213d 	movw	r1, #2621	; 0xa3d
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe f9e1 	bl	8003576 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 80051b4:	e133      	b.n	800541e <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x51EA, LEN_LDE_REPC);
 80051b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051ba:	2202      	movs	r2, #2
 80051bc:	f245 11ea 	movw	r1, #20970	; 0x51ea
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe f9d8 	bl	8003576 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 80051c6:	e12a      	b.n	800541e <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_4)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d116      	bne.n	8005200 <dwTune+0x5c4>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d108      	bne.n	80051ee <dwTune+0x5b2>
        {
            writeValueToBytes(lderepc, ((0x428E >> 3) & 0xFFFF), LEN_LDE_REPC);
 80051dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051e0:	2202      	movs	r2, #2
 80051e2:	f640 0151 	movw	r1, #2129	; 0x851
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fe f9c5 	bl	8003576 <writeValueToBytes>
 80051ec:	e117      	b.n	800541e <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x428E, LEN_LDE_REPC);
 80051ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051f2:	2202      	movs	r2, #2
 80051f4:	f244 218e 	movw	r1, #17038	; 0x428e
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fe f9bc 	bl	8003576 <writeValueToBytes>
 80051fe:	e10e      	b.n	800541e <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_5)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005206:	2b05      	cmp	r3, #5
 8005208:	d116      	bne.n	8005238 <dwTune+0x5fc>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005210:	2b00      	cmp	r3, #0
 8005212:	d108      	bne.n	8005226 <dwTune+0x5ea>
        {
            writeValueToBytes(lderepc, ((0x451E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005218:	2202      	movs	r2, #2
 800521a:	f640 01a3 	movw	r1, #2211	; 0x8a3
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe f9a9 	bl	8003576 <writeValueToBytes>
 8005224:	e0fb      	b.n	800541e <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x451E, LEN_LDE_REPC);
 8005226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800522a:	2202      	movs	r2, #2
 800522c:	f244 511e 	movw	r1, #17694	; 0x451e
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe f9a0 	bl	8003576 <writeValueToBytes>
 8005236:	e0f2      	b.n	800541e <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_6)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800523e:	2b06      	cmp	r3, #6
 8005240:	d116      	bne.n	8005270 <dwTune+0x634>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005248:	2b00      	cmp	r3, #0
 800524a:	d108      	bne.n	800525e <dwTune+0x622>
        {
            writeValueToBytes(lderepc, ((0x2E14 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800524c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005250:	2202      	movs	r2, #2
 8005252:	f240 51c2 	movw	r1, #1474	; 0x5c2
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe f98d 	bl	8003576 <writeValueToBytes>
 800525c:	e0df      	b.n	800541e <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x2E14, LEN_LDE_REPC);
 800525e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005262:	2202      	movs	r2, #2
 8005264:	f642 6114 	movw	r1, #11796	; 0x2e14
 8005268:	4618      	mov	r0, r3
 800526a:	f7fe f984 	bl	8003576 <writeValueToBytes>
 800526e:	e0d6      	b.n	800541e <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_7)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005276:	2b07      	cmp	r3, #7
 8005278:	d120      	bne.n	80052bc <dwTune+0x680>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005280:	2b00      	cmp	r3, #0
 8005282:	d108      	bne.n	8005296 <dwTune+0x65a>
        {
            writeValueToBytes(lderepc, ((0x8000 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005288:	2202      	movs	r2, #2
 800528a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800528e:	4618      	mov	r0, r3
 8005290:	f7fe f971 	bl	8003576 <writeValueToBytes>
 8005294:	e0c3      	b.n	800541e <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x8000, LEN_LDE_REPC);
 8005296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800529a:	2202      	movs	r2, #2
 800529c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fe f968 	bl	8003576 <writeValueToBytes>
 80052a6:	e0ba      	b.n	800541e <dwTune+0x7e2>
 80052a8:	001e7de0 	.word	0x001e7de0
 80052ac:	09000407 	.word	0x09000407
 80052b0:	08400508 	.word	0x08400508
 80052b4:	08401009 	.word	0x08401009
 80052b8:	0800041d 	.word	0x0800041d
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_9)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052c2:	2b09      	cmp	r3, #9
 80052c4:	d116      	bne.n	80052f4 <dwTune+0x6b8>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d108      	bne.n	80052e2 <dwTune+0x6a6>
        {
            writeValueToBytes(lderepc, ((0x28F4 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80052d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052d4:	2202      	movs	r2, #2
 80052d6:	f240 511e 	movw	r1, #1310	; 0x51e
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fe f94b 	bl	8003576 <writeValueToBytes>
 80052e0:	e09d      	b.n	800541e <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x28F4, LEN_LDE_REPC);
 80052e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052e6:	2202      	movs	r2, #2
 80052e8:	f642 01f4 	movw	r1, #10484	; 0x28f4
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fe f942 	bl	8003576 <writeValueToBytes>
 80052f2:	e094      	b.n	800541e <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_10 || dev->preambleCode == PREAMBLE_CODE_64MHZ_17)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052fa:	2b0a      	cmp	r3, #10
 80052fc:	d004      	beq.n	8005308 <dwTune+0x6cc>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005304:	2b11      	cmp	r3, #17
 8005306:	d116      	bne.n	8005336 <dwTune+0x6fa>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800530e:	2b00      	cmp	r3, #0
 8005310:	d108      	bne.n	8005324 <dwTune+0x6e8>
        {
            writeValueToBytes(lderepc, ((0x3332 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005316:	2202      	movs	r2, #2
 8005318:	f240 6166 	movw	r1, #1638	; 0x666
 800531c:	4618      	mov	r0, r3
 800531e:	f7fe f92a 	bl	8003576 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005322:	e07c      	b.n	800541e <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3332, LEN_LDE_REPC);
 8005324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005328:	2202      	movs	r2, #2
 800532a:	f243 3132 	movw	r1, #13106	; 0x3332
 800532e:	4618      	mov	r0, r3
 8005330:	f7fe f921 	bl	8003576 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005334:	e073      	b.n	800541e <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_11)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800533c:	2b0b      	cmp	r3, #11
 800533e:	d116      	bne.n	800536e <dwTune+0x732>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005346:	2b00      	cmp	r3, #0
 8005348:	d108      	bne.n	800535c <dwTune+0x720>
        {
            writeValueToBytes(lderepc, ((0x3AE0 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800534a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800534e:	2202      	movs	r2, #2
 8005350:	f240 715c 	movw	r1, #1884	; 0x75c
 8005354:	4618      	mov	r0, r3
 8005356:	f7fe f90e 	bl	8003576 <writeValueToBytes>
 800535a:	e060      	b.n	800541e <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3AE0, LEN_LDE_REPC);
 800535c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005360:	2202      	movs	r2, #2
 8005362:	f643 21e0 	movw	r1, #15072	; 0x3ae0
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe f905 	bl	8003576 <writeValueToBytes>
 800536c:	e057      	b.n	800541e <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_12)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005374:	2b0c      	cmp	r3, #12
 8005376:	d116      	bne.n	80053a6 <dwTune+0x76a>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800537e:	2b00      	cmp	r3, #0
 8005380:	d108      	bne.n	8005394 <dwTune+0x758>
        {
            writeValueToBytes(lderepc, ((0x3D70 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005382:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005386:	2202      	movs	r2, #2
 8005388:	f240 71ae 	movw	r1, #1966	; 0x7ae
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe f8f2 	bl	8003576 <writeValueToBytes>
 8005392:	e044      	b.n	800541e <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3D70, LEN_LDE_REPC);
 8005394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005398:	2202      	movs	r2, #2
 800539a:	f643 5170 	movw	r1, #15728	; 0x3d70
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe f8e9 	bl	8003576 <writeValueToBytes>
 80053a4:	e03b      	b.n	800541e <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_18 || dev->preambleCode == PREAMBLE_CODE_64MHZ_19)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053ac:	2b12      	cmp	r3, #18
 80053ae:	d004      	beq.n	80053ba <dwTune+0x77e>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053b6:	2b13      	cmp	r3, #19
 80053b8:	d116      	bne.n	80053e8 <dwTune+0x7ac>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d108      	bne.n	80053d6 <dwTune+0x79a>
        {
            writeValueToBytes(lderepc, ((0x35C2 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80053c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053c8:	2202      	movs	r2, #2
 80053ca:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe f8d1 	bl	8003576 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 80053d4:	e023      	b.n	800541e <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x35C2, LEN_LDE_REPC);
 80053d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053da:	2202      	movs	r2, #2
 80053dc:	f243 51c2 	movw	r1, #13762	; 0x35c2
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fe f8c8 	bl	8003576 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 80053e6:	e01a      	b.n	800541e <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_20)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053ee:	2b14      	cmp	r3, #20
 80053f0:	d115      	bne.n	800541e <dwTune+0x7e2>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d108      	bne.n	800540e <dwTune+0x7d2>
        {
            writeValueToBytes(lderepc, ((0x47AE >> 3) & 0xFFFF), LEN_LDE_REPC);
 80053fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005400:	2202      	movs	r2, #2
 8005402:	f640 01f5 	movw	r1, #2293	; 0x8f5
 8005406:	4618      	mov	r0, r3
 8005408:	f7fe f8b5 	bl	8003576 <writeValueToBytes>
 800540c:	e007      	b.n	800541e <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x47AE, LEN_LDE_REPC);
 800540e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005412:	2202      	movs	r2, #2
 8005414:	f244 71ae 	movw	r1, #18350	; 0x47ae
 8005418:	4618      	mov	r0, r3
 800541a:	f7fe f8ac 	bl	8003576 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // TX_POWER (enabled smart transmit power control)
    if (dev->forceTxPower)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005424:	2b00      	cmp	r3, #0
 8005426:	d009      	beq.n	800543c <dwTune+0x800>
    {
        writeValueToBytes(txpower, dev->txPower, LEN_TX_POWER);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542c:	4619      	mov	r1, r3
 800542e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005432:	2204      	movs	r2, #4
 8005434:	4618      	mov	r0, r3
 8005436:	f7fe f89e 	bl	8003576 <writeValueToBytes>
 800543a:	e131      	b.n	80056a0 <dwTune+0xa64>
    }
    else if (dev->channel == CHANNEL_1 || dev->channel == CHANNEL_2)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005442:	2b01      	cmp	r3, #1
 8005444:	d004      	beq.n	8005450 <dwTune+0x814>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800544c:	2b02      	cmp	r3, #2
 800544e:	d138      	bne.n	80054c2 <dwTune+0x886>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005456:	2b01      	cmp	r3, #1
 8005458:	d116      	bne.n	8005488 <dwTune+0x84c>
        {
            if (dev->smartPower)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <dwTune+0x83a>
            {
                writeValueToBytes(txpower, 0x1F1F1F1FL, LEN_TX_POWER);
 8005464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005468:	2204      	movs	r2, #4
 800546a:	f04f 311f 	mov.w	r1, #522133279	; 0x1f1f1f1f
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe f881 	bl	8003576 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8005474:	e113      	b.n	800569e <dwTune+0xa62>
            }
            else
            {
                writeValueToBytes(txpower, 0x75757575L, LEN_TX_POWER);
 8005476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800547a:	2204      	movs	r2, #4
 800547c:	f04f 3175 	mov.w	r1, #1970632053	; 0x75757575
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe f878 	bl	8003576 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8005486:	e10a      	b.n	800569e <dwTune+0xa62>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800548e:	2b02      	cmp	r3, #2
 8005490:	f040 8105 	bne.w	800569e <dwTune+0xa62>
        {
            if (dev->smartPower)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800549a:	2b00      	cmp	r3, #0
 800549c:	d008      	beq.n	80054b0 <dwTune+0x874>
            {
//                writeValueToBytes(txpower, 0x07274767L, LEN_TX_POWER);
            	writeValueToBytes(txpower, 0x1F1F1F1FL, LEN_TX_POWER);
 800549e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054a2:	2204      	movs	r2, #4
 80054a4:	f04f 311f 	mov.w	r1, #522133279	; 0x1f1f1f1f
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fe f864 	bl	8003576 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80054ae:	e0f6      	b.n	800569e <dwTune+0xa62>
            }
            else
            {
                writeValueToBytes(txpower, 0x67676767L, LEN_TX_POWER);
 80054b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054b4:	2204      	movs	r2, #4
 80054b6:	f04f 3167 	mov.w	r1, #1734829927	; 0x67676767
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fe f85b 	bl	8003576 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80054c0:	e0ed      	b.n	800569e <dwTune+0xa62>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_3)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d136      	bne.n	800553a <dwTune+0x8fe>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d115      	bne.n	8005502 <dwTune+0x8c6>
        {
            if (dev->smartPower)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d007      	beq.n	80054f0 <dwTune+0x8b4>
            {
                writeValueToBytes(txpower, 0x0F2F4F6FL, LEN_TX_POWER);
 80054e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054e4:	2204      	movs	r2, #4
 80054e6:	4977      	ldr	r1, [pc, #476]	; (80056c4 <dwTune+0xa88>)
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fe f844 	bl	8003576 <writeValueToBytes>
 80054ee:	e0d7      	b.n	80056a0 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0x6F6F6F6FL, LEN_TX_POWER);
 80054f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054f4:	2204      	movs	r2, #4
 80054f6:	f04f 316f 	mov.w	r1, #1869573999	; 0x6f6f6f6f
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fe f83b 	bl	8003576 <writeValueToBytes>
 8005500:	e0ce      	b.n	80056a0 <dwTune+0xa64>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005508:	2b02      	cmp	r3, #2
 800550a:	f040 80c9 	bne.w	80056a0 <dwTune+0xa64>
        {
            if (dev->smartPower)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005514:	2b00      	cmp	r3, #0
 8005516:	d007      	beq.n	8005528 <dwTune+0x8ec>
            {
                writeValueToBytes(txpower, 0x2B4B6B8BL, LEN_TX_POWER);
 8005518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800551c:	2204      	movs	r2, #4
 800551e:	496a      	ldr	r1, [pc, #424]	; (80056c8 <dwTune+0xa8c>)
 8005520:	4618      	mov	r0, r3
 8005522:	f7fe f828 	bl	8003576 <writeValueToBytes>
 8005526:	e0bb      	b.n	80056a0 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0x8B8B8B8BL, LEN_TX_POWER);
 8005528:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800552c:	2204      	movs	r2, #4
 800552e:	f04f 318b 	mov.w	r1, #2341178251	; 0x8b8b8b8b
 8005532:	4618      	mov	r0, r3
 8005534:	f7fe f81f 	bl	8003576 <writeValueToBytes>
 8005538:	e0b2      	b.n	80056a0 <dwTune+0xa64>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_4)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005540:	2b04      	cmp	r3, #4
 8005542:	d136      	bne.n	80055b2 <dwTune+0x976>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800554a:	2b01      	cmp	r3, #1
 800554c:	d115      	bne.n	800557a <dwTune+0x93e>
        {
            if (dev->smartPower)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <dwTune+0x92c>
            {
                writeValueToBytes(txpower, 0x1F1F3F5FL, LEN_TX_POWER);
 8005558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800555c:	2204      	movs	r2, #4
 800555e:	495b      	ldr	r1, [pc, #364]	; (80056cc <dwTune+0xa90>)
 8005560:	4618      	mov	r0, r3
 8005562:	f7fe f808 	bl	8003576 <writeValueToBytes>
 8005566:	e09b      	b.n	80056a0 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0x5F5F5F5FL, LEN_TX_POWER);
 8005568:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800556c:	2204      	movs	r2, #4
 800556e:	f04f 315f 	mov.w	r1, #1600085855	; 0x5f5f5f5f
 8005572:	4618      	mov	r0, r3
 8005574:	f7fd ffff 	bl	8003576 <writeValueToBytes>
 8005578:	e092      	b.n	80056a0 <dwTune+0xa64>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005580:	2b02      	cmp	r3, #2
 8005582:	f040 808d 	bne.w	80056a0 <dwTune+0xa64>
        {
            if (dev->smartPower)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800558c:	2b00      	cmp	r3, #0
 800558e:	d007      	beq.n	80055a0 <dwTune+0x964>
            {
                writeValueToBytes(txpower, 0x3A5A7A9AL, LEN_TX_POWER);
 8005590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005594:	2204      	movs	r2, #4
 8005596:	494e      	ldr	r1, [pc, #312]	; (80056d0 <dwTune+0xa94>)
 8005598:	4618      	mov	r0, r3
 800559a:	f7fd ffec 	bl	8003576 <writeValueToBytes>
 800559e:	e07f      	b.n	80056a0 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0x9A9A9A9AL, LEN_TX_POWER);
 80055a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055a4:	2204      	movs	r2, #4
 80055a6:	f04f 319a 	mov.w	r1, #2593823386	; 0x9a9a9a9a
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fd ffe3 	bl	8003576 <writeValueToBytes>
 80055b0:	e076      	b.n	80056a0 <dwTune+0xa64>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_5)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80055b8:	2b05      	cmp	r3, #5
 80055ba:	d135      	bne.n	8005628 <dwTune+0x9ec>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d115      	bne.n	80055f2 <dwTune+0x9b6>
        {
            if (dev->smartPower)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <dwTune+0x9a4>
            {
                writeValueToBytes(txpower, 0x0E082848L, LEN_TX_POWER);
 80055d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055d4:	2204      	movs	r2, #4
 80055d6:	493f      	ldr	r1, [pc, #252]	; (80056d4 <dwTune+0xa98>)
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fd ffcc 	bl	8003576 <writeValueToBytes>
 80055de:	e05f      	b.n	80056a0 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0x48484848L, LEN_TX_POWER);
 80055e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055e4:	2204      	movs	r2, #4
 80055e6:	f04f 3148 	mov.w	r1, #1212696648	; 0x48484848
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fd ffc3 	bl	8003576 <writeValueToBytes>
 80055f0:	e056      	b.n	80056a0 <dwTune+0xa64>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d151      	bne.n	80056a0 <dwTune+0xa64>
        {
            if (dev->smartPower)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005602:	2b00      	cmp	r3, #0
 8005604:	d007      	beq.n	8005616 <dwTune+0x9da>
            {
                writeValueToBytes(txpower, 0x25456585L, LEN_TX_POWER);
 8005606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800560a:	2204      	movs	r2, #4
 800560c:	4932      	ldr	r1, [pc, #200]	; (80056d8 <dwTune+0xa9c>)
 800560e:	4618      	mov	r0, r3
 8005610:	f7fd ffb1 	bl	8003576 <writeValueToBytes>
 8005614:	e044      	b.n	80056a0 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0x85858585L, LEN_TX_POWER);
 8005616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800561a:	2204      	movs	r2, #4
 800561c:	f04f 3185 	mov.w	r1, #2240120197	; 0x85858585
 8005620:	4618      	mov	r0, r3
 8005622:	f7fd ffa8 	bl	8003576 <writeValueToBytes>
 8005626:	e03b      	b.n	80056a0 <dwTune+0xa64>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_7)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800562e:	2b07      	cmp	r3, #7
 8005630:	d136      	bne.n	80056a0 <dwTune+0xa64>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005638:	2b01      	cmp	r3, #1
 800563a:	d115      	bne.n	8005668 <dwTune+0xa2c>
        {
            if (dev->smartPower)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <dwTune+0xa1a>
            {
                writeValueToBytes(txpower, 0x32527292L, LEN_TX_POWER);
 8005646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800564a:	2204      	movs	r2, #4
 800564c:	4923      	ldr	r1, [pc, #140]	; (80056dc <dwTune+0xaa0>)
 800564e:	4618      	mov	r0, r3
 8005650:	f7fd ff91 	bl	8003576 <writeValueToBytes>
 8005654:	e024      	b.n	80056a0 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0x92929292L, LEN_TX_POWER);
 8005656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800565a:	2204      	movs	r2, #4
 800565c:	f04f 3192 	mov.w	r1, #2459079314	; 0x92929292
 8005660:	4618      	mov	r0, r3
 8005662:	f7fd ff88 	bl	8003576 <writeValueToBytes>
 8005666:	e01b      	b.n	80056a0 <dwTune+0xa64>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800566e:	2b02      	cmp	r3, #2
 8005670:	d116      	bne.n	80056a0 <dwTune+0xa64>
        {
            if (dev->smartPower)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <dwTune+0xa50>
            {
                writeValueToBytes(txpower, 0x5171B1D1L, LEN_TX_POWER);
 800567c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005680:	2204      	movs	r2, #4
 8005682:	4917      	ldr	r1, [pc, #92]	; (80056e0 <dwTune+0xaa4>)
 8005684:	4618      	mov	r0, r3
 8005686:	f7fd ff76 	bl	8003576 <writeValueToBytes>
 800568a:	e009      	b.n	80056a0 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0xD1D1D1D1L, LEN_TX_POWER);
 800568c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005690:	2204      	movs	r2, #4
 8005692:	f04f 31d1 	mov.w	r1, #3520188881	; 0xd1d1d1d1
 8005696:	4618      	mov	r0, r3
 8005698:	f7fd ff6d 	bl	8003576 <writeValueToBytes>
 800569c:	e000      	b.n	80056a0 <dwTune+0xa64>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800569e:	bf00      	nop
    {
        // TODO proper error/warning handling
    }
    // Crystal calibration from OTP (if available)
    uint8_t buf_otp[4];
    readBytesOTP(dev, 0x01E, buf_otp);
 80056a0:	f107 030c 	add.w	r3, r7, #12
 80056a4:	461a      	mov	r2, r3
 80056a6:	211e      	movs	r1, #30
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7fd ff85 	bl	80035b8 <readBytesOTP>
    if (buf_otp[0] == 0)
 80056ae:	7b3b      	ldrb	r3, [r7, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d117      	bne.n	80056e4 <dwTune+0xaa8>
    {
        // No trim value available from OTP, use midrange value of 0x10
        writeValueToBytes(fsxtalt, ((0x10 & 0x1F) | 0x60), LEN_FS_XTALT);
 80056b4:	f107 0310 	add.w	r3, r7, #16
 80056b8:	2201      	movs	r2, #1
 80056ba:	2170      	movs	r1, #112	; 0x70
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fd ff5a 	bl	8003576 <writeValueToBytes>
 80056c2:	e01a      	b.n	80056fa <dwTune+0xabe>
 80056c4:	0f2f4f6f 	.word	0x0f2f4f6f
 80056c8:	2b4b6b8b 	.word	0x2b4b6b8b
 80056cc:	1f1f3f5f 	.word	0x1f1f3f5f
 80056d0:	3a5a7a9a 	.word	0x3a5a7a9a
 80056d4:	0e082848 	.word	0x0e082848
 80056d8:	25456585 	.word	0x25456585
 80056dc:	32527292 	.word	0x32527292
 80056e0:	5171b1d1 	.word	0x5171b1d1
    }
    else
    {
        writeValueToBytes(fsxtalt, ((buf_otp[0] & 0x1F) | 0x60), LEN_FS_XTALT);
 80056e4:	7b3b      	ldrb	r3, [r7, #12]
 80056e6:	f003 031f 	and.w	r3, r3, #31
 80056ea:	f043 0160 	orr.w	r1, r3, #96	; 0x60
 80056ee:	f107 0310 	add.w	r3, r7, #16
 80056f2:	2201      	movs	r2, #1
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fd ff3e 	bl	8003576 <writeValueToBytes>
    }
    // write configuration back to chip
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE1_SUB, agctune1, LEN_AGC_TUNE1);
 80056fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80056fe:	2202      	movs	r2, #2
 8005700:	9200      	str	r2, [sp, #0]
 8005702:	2204      	movs	r2, #4
 8005704:	2123      	movs	r1, #35	; 0x23
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f9ba 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE2_SUB, agctune2, LEN_AGC_TUNE2);
 800570c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005710:	2204      	movs	r2, #4
 8005712:	9200      	str	r2, [sp, #0]
 8005714:	220c      	movs	r2, #12
 8005716:	2123      	movs	r1, #35	; 0x23
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f9b1 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE3_SUB, agctune3, LEN_AGC_TUNE3);
 800571e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005722:	2202      	movs	r2, #2
 8005724:	9200      	str	r2, [sp, #0]
 8005726:	2212      	movs	r2, #18
 8005728:	2123      	movs	r1, #35	; 0x23
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f9a8 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE0b_SUB, drxtune0b, LEN_DRX_TUNE0b);
 8005730:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005734:	2202      	movs	r2, #2
 8005736:	9200      	str	r2, [sp, #0]
 8005738:	2202      	movs	r2, #2
 800573a:	2127      	movs	r1, #39	; 0x27
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f99f 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1a_SUB, drxtune1a, LEN_DRX_TUNE1a);
 8005742:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005746:	2202      	movs	r2, #2
 8005748:	9200      	str	r2, [sp, #0]
 800574a:	2204      	movs	r2, #4
 800574c:	2127      	movs	r1, #39	; 0x27
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f996 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1b_SUB, drxtune1b, LEN_DRX_TUNE1b);
 8005754:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005758:	2202      	movs	r2, #2
 800575a:	9200      	str	r2, [sp, #0]
 800575c:	2206      	movs	r2, #6
 800575e:	2127      	movs	r1, #39	; 0x27
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f98d 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE2_SUB, drxtune2, LEN_DRX_TUNE2);
 8005766:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800576a:	2204      	movs	r2, #4
 800576c:	9200      	str	r2, [sp, #0]
 800576e:	2208      	movs	r2, #8
 8005770:	2127      	movs	r1, #39	; 0x27
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f984 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE4H_SUB, drxtune4H, LEN_DRX_TUNE4H);
 8005778:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800577c:	2202      	movs	r2, #2
 800577e:	9200      	str	r2, [sp, #0]
 8005780:	2226      	movs	r2, #38	; 0x26
 8005782:	2127      	movs	r1, #39	; 0x27
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f97b 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_CFG1_SUB, ldecfg1, LEN_LDE_CFG1);
 800578a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800578e:	2201      	movs	r2, #1
 8005790:	9200      	str	r2, [sp, #0]
 8005792:	f640 0206 	movw	r2, #2054	; 0x806
 8005796:	212e      	movs	r1, #46	; 0x2e
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f971 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_CFG2_SUB, ldecfg2, LEN_LDE_CFG2);
 800579e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057a2:	2202      	movs	r2, #2
 80057a4:	9200      	str	r2, [sp, #0]
 80057a6:	f641 0206 	movw	r2, #6150	; 0x1806
 80057aa:	212e      	movs	r1, #46	; 0x2e
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f967 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_REPC_SUB, lderepc, LEN_LDE_REPC);
 80057b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057b6:	2202      	movs	r2, #2
 80057b8:	9200      	str	r2, [sp, #0]
 80057ba:	f642 0204 	movw	r2, #10244	; 0x2804
 80057be:	212e      	movs	r1, #46	; 0x2e
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f95d 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, TX_POWER, NO_SUB, txpower, LEN_TX_POWER);
 80057c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ca:	2204      	movs	r2, #4
 80057cc:	9200      	str	r2, [sp, #0]
 80057ce:	2200      	movs	r2, #0
 80057d0:	211e      	movs	r1, #30
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f954 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, RF_CONF, RF_RXCTRLH_SUB, rfrxctrlh, LEN_RF_RXCTRLH);
 80057d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057dc:	2201      	movs	r2, #1
 80057de:	9200      	str	r2, [sp, #0]
 80057e0:	220b      	movs	r2, #11
 80057e2:	2128      	movs	r1, #40	; 0x28
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f94b 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, RF_CONF, RF_TXCTRL_SUB, rftxctrl, LEN_RF_TXCTRL);
 80057ea:	f107 0320 	add.w	r3, r7, #32
 80057ee:	2204      	movs	r2, #4
 80057f0:	9200      	str	r2, [sp, #0]
 80057f2:	220c      	movs	r2, #12
 80057f4:	2128      	movs	r1, #40	; 0x28
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f942 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, TX_CAL, TC_PGDELAY_SUB, tcpgdelay, LEN_TC_PGDELAY);
 80057fc:	f107 031c 	add.w	r3, r7, #28
 8005800:	2201      	movs	r2, #1
 8005802:	9200      	str	r2, [sp, #0]
 8005804:	220b      	movs	r2, #11
 8005806:	212a      	movs	r1, #42	; 0x2a
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f939 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_PLLTUNE_SUB, fsplltune, LEN_FS_PLLTUNE);
 800580e:	f107 0314 	add.w	r3, r7, #20
 8005812:	2201      	movs	r2, #1
 8005814:	9200      	str	r2, [sp, #0]
 8005816:	220b      	movs	r2, #11
 8005818:	212b      	movs	r1, #43	; 0x2b
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f930 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_PLLCFG_SUB, fspllcfg, LEN_FS_PLLCFG);
 8005820:	f107 0318 	add.w	r3, r7, #24
 8005824:	2204      	movs	r2, #4
 8005826:	9200      	str	r2, [sp, #0]
 8005828:	2207      	movs	r2, #7
 800582a:	212b      	movs	r1, #43	; 0x2b
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f927 	bl	8005a80 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_XTALT_SUB, fsxtalt, LEN_FS_XTALT);
 8005832:	f107 0310 	add.w	r3, r7, #16
 8005836:	2201      	movs	r2, #1
 8005838:	9200      	str	r2, [sp, #0]
 800583a:	220e      	movs	r2, #14
 800583c:	212b      	movs	r1, #43	; 0x2b
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f91e 	bl	8005a80 <dwSpiWrite>
}
 8005844:	bf00      	nop
 8005846:	3758      	adds	r7, #88	; 0x58
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <spiWrite>:

uint16_t buffer[64];

static void spiWrite(dwDeviceTypes_t *dev, const void *header, size_t headerLength,
                     const void *data, size_t dataLength)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800585a:	2200      	movs	r2, #0
 800585c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005860:	4813      	ldr	r0, [pc, #76]	; (80058b0 <spiWrite+0x64>)
 8005862:	f001 fae5 	bl	8006e30 <HAL_GPIO_WritePin>
    memcpy(buffer, header, headerLength);
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	4812      	ldr	r0, [pc, #72]	; (80058b4 <spiWrite+0x68>)
 800586c:	f004 fbc0 	bl	8009ff0 <memcpy>
    HAL_SPI_Transmit(&hspi2, (uint8_t *)buffer, headerLength, HAL_MAX_DELAY);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	b29a      	uxth	r2, r3
 8005874:	f04f 33ff 	mov.w	r3, #4294967295
 8005878:	490e      	ldr	r1, [pc, #56]	; (80058b4 <spiWrite+0x68>)
 800587a:	480f      	ldr	r0, [pc, #60]	; (80058b8 <spiWrite+0x6c>)
 800587c:	f002 f813 	bl	80078a6 <HAL_SPI_Transmit>
    memcpy(buffer, data, dataLength);
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	480b      	ldr	r0, [pc, #44]	; (80058b4 <spiWrite+0x68>)
 8005886:	f004 fbb3 	bl	8009ff0 <memcpy>
    HAL_SPI_Transmit(&hspi2, (uint8_t *)buffer, dataLength, HAL_MAX_DELAY);
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	b29a      	uxth	r2, r3
 800588e:	f04f 33ff 	mov.w	r3, #4294967295
 8005892:	4908      	ldr	r1, [pc, #32]	; (80058b4 <spiWrite+0x68>)
 8005894:	4808      	ldr	r0, [pc, #32]	; (80058b8 <spiWrite+0x6c>)
 8005896:	f002 f806 	bl	80078a6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800589a:	2201      	movs	r2, #1
 800589c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058a0:	4803      	ldr	r0, [pc, #12]	; (80058b0 <spiWrite+0x64>)
 80058a2:	f001 fac5 	bl	8006e30 <HAL_GPIO_WritePin>
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40020400 	.word	0x40020400
 80058b4:	200007b8 	.word	0x200007b8
 80058b8:	200005e4 	.word	0x200005e4

080058bc <spiRead>:

static void spiRead(dwDeviceTypes_t *dev, const void *header, size_t headerLength,
                    void *data, size_t dataLength)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80058ca:	2200      	movs	r2, #0
 80058cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058d0:	4813      	ldr	r0, [pc, #76]	; (8005920 <spiRead+0x64>)
 80058d2:	f001 faad 	bl	8006e30 <HAL_GPIO_WritePin>
    memcpy(buffer, header, headerLength);
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	4812      	ldr	r0, [pc, #72]	; (8005924 <spiRead+0x68>)
 80058dc:	f004 fb88 	bl	8009ff0 <memcpy>
    HAL_SPI_Transmit(&hspi2, (uint8_t *)buffer, headerLength, HAL_MAX_DELAY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	f04f 33ff 	mov.w	r3, #4294967295
 80058e8:	490e      	ldr	r1, [pc, #56]	; (8005924 <spiRead+0x68>)
 80058ea:	480f      	ldr	r0, [pc, #60]	; (8005928 <spiRead+0x6c>)
 80058ec:	f001 ffdb 	bl	80078a6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, (uint8_t *)buffer, dataLength, HAL_MAX_DELAY);
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	f04f 33ff 	mov.w	r3, #4294967295
 80058f8:	490a      	ldr	r1, [pc, #40]	; (8005924 <spiRead+0x68>)
 80058fa:	480b      	ldr	r0, [pc, #44]	; (8005928 <spiRead+0x6c>)
 80058fc:	f002 f90f 	bl	8007b1e <HAL_SPI_Receive>
    memcpy(data, buffer, dataLength);
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	4908      	ldr	r1, [pc, #32]	; (8005924 <spiRead+0x68>)
 8005904:	6838      	ldr	r0, [r7, #0]
 8005906:	f004 fb73 	bl	8009ff0 <memcpy>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800590a:	2201      	movs	r2, #1
 800590c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005910:	4803      	ldr	r0, [pc, #12]	; (8005920 <spiRead+0x64>)
 8005912:	f001 fa8d 	bl	8006e30 <HAL_GPIO_WritePin>
}
 8005916:	bf00      	nop
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	40020400 	.word	0x40020400
 8005924:	200007b8 	.word	0x200007b8
 8005928:	200005e4 	.word	0x200005e4

0800592c <spiSetSpeed>:

static void spiSetSpeed(dwDeviceTypes_t *dev, dwSpiSpeed_t speed)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	70fb      	strb	r3, [r7, #3]
    if (speed == dwSpiSpeedLow)
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <spiSetSpeed+0x20>
    {
    	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800593e:	4b08      	ldr	r3, [pc, #32]	; (8005960 <spiSetSpeed+0x34>)
 8005940:	2218      	movs	r2, #24
 8005942:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi2);
 8005944:	4806      	ldr	r0, [pc, #24]	; (8005960 <spiSetSpeed+0x34>)
 8005946:	f001 ff25 	bl	8007794 <HAL_SPI_Init>
    else
    {
    	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
        HAL_SPI_Init(&hspi2);
    }
}
 800594a:	e005      	b.n	8005958 <spiSetSpeed+0x2c>
    	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800594c:	4b04      	ldr	r3, [pc, #16]	; (8005960 <spiSetSpeed+0x34>)
 800594e:	2200      	movs	r2, #0
 8005950:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi2);
 8005952:	4803      	ldr	r0, [pc, #12]	; (8005960 <spiSetSpeed+0x34>)
 8005954:	f001 ff1e 	bl	8007794 <HAL_SPI_Init>
}
 8005958:	bf00      	nop
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	200005e4 	.word	0x200005e4

08005964 <reset>:

static void reset(dwDeviceTypes_t *dev)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 800596c:	2200      	movs	r2, #0
 800596e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005972:	4808      	ldr	r0, [pc, #32]	; (8005994 <reset+0x30>)
 8005974:	f001 fa5c 	bl	8006e30 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8005978:	2002      	movs	r0, #2
 800597a:	f000 f961 	bl	8005c40 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 800597e:	2201      	movs	r2, #1
 8005980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005984:	4803      	ldr	r0, [pc, #12]	; (8005994 <reset+0x30>)
 8005986:	f001 fa53 	bl	8006e30 <HAL_GPIO_WritePin>
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	40020c00 	.word	0x40020c00

08005998 <delayms>:
    HAL_Delay(2);
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}

static void delayms(dwDeviceTypes_t *dev, unsigned int delay)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
    HAL_Delay(delay);
 80059a2:	6838      	ldr	r0, [r7, #0]
 80059a4:	f000 f94c 	bl	8005c40 <HAL_Delay>
}
 80059a8:	bf00      	nop
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <dwSpiRead>:
#include "dw_spi.h"

void dwSpiRead(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, void *data, size_t length)
{
 80059b0:	b590      	push	{r4, r7, lr}
 80059b2:	b089      	sub	sp, #36	; 0x24
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	607a      	str	r2, [r7, #4]
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	460b      	mov	r3, r1
 80059be:	72fb      	strb	r3, [r7, #11]
    uint8_t header[3];
    size_t headerLength = 1;
 80059c0:	2301      	movs	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
    header[0] = regid & 0x3f;
 80059c4:	7afb      	ldrb	r3, [r7, #11]
 80059c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	743b      	strb	r3, [r7, #16]
    if (address != 0)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01c      	beq.n	8005a0e <dwSpiRead+0x5e>
    {
        header[0] |= 0x40;
 80059d4:	7c3b      	ldrb	r3, [r7, #16]
 80059d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	743b      	strb	r3, [r7, #16]
        header[1] = address & 0x7f;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	747b      	strb	r3, [r7, #17]
        address >>= 7;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	09db      	lsrs	r3, r3, #7
 80059ee:	607b      	str	r3, [r7, #4]
        headerLength = 2;
 80059f0:	2302      	movs	r3, #2
 80059f2:	617b      	str	r3, [r7, #20]
        if (address != 0)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <dwSpiRead+0x5e>
        {
            header[1] |= 0x80;
 80059fa:	7c7b      	ldrb	r3, [r7, #17]
 80059fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	747b      	strb	r3, [r7, #17]
            header[2] = address & 0xff;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	74bb      	strb	r3, [r7, #18]
            headerLength = 3;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	617b      	str	r3, [r7, #20]
        }
    }
    dev->func->spiRead(dev, header, headerLength, data, length);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681c      	ldr	r4, [r3, #0]
 8005a14:	f107 0110 	add.w	r1, r7, #16
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	47a0      	blx	r4
}
 8005a24:	bf00      	nop
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd90      	pop	{r4, r7, pc}

08005a2c <dwSpiRead16>:

uint16_t dwSpiRead16(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	460b      	mov	r3, r1
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	72fb      	strb	r3, [r7, #11]
    uint16_t data;
    dwSpiRead(dev, regid, address, &data, sizeof(data));
 8005a3a:	f107 0316 	add.w	r3, r7, #22
 8005a3e:	7af9      	ldrb	r1, [r7, #11]
 8005a40:	2202      	movs	r2, #2
 8005a42:	9200      	str	r2, [sp, #0]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f7ff ffb2 	bl	80059b0 <dwSpiRead>
    return data;
 8005a4c:	8afb      	ldrh	r3, [r7, #22]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <dwSpiRead32>:

uint32_t dwSpiRead32(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b088      	sub	sp, #32
 8005a5a:	af02      	add	r7, sp, #8
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	607a      	str	r2, [r7, #4]
 8005a62:	72fb      	strb	r3, [r7, #11]
    uint32_t data;
    dwSpiRead(dev, regid, address, &data, sizeof(data));
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	7af9      	ldrb	r1, [r7, #11]
 8005a6a:	2204      	movs	r2, #4
 8005a6c:	9200      	str	r2, [sp, #0]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff ff9d 	bl	80059b0 <dwSpiRead>
    return data;
 8005a76:	697b      	ldr	r3, [r7, #20]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <dwSpiWrite>:

void dwSpiWrite(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, const void *data, size_t length)
{
 8005a80:	b590      	push	{r4, r7, lr}
 8005a82:	b089      	sub	sp, #36	; 0x24
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	72fb      	strb	r3, [r7, #11]
    uint8_t header[3];
    size_t headerLength = 1;
 8005a90:	2301      	movs	r3, #1
 8005a92:	617b      	str	r3, [r7, #20]
    header[0] = regid & 0x3f;
 8005a94:	7afb      	ldrb	r3, [r7, #11]
 8005a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	743b      	strb	r3, [r7, #16]
    header[0] |= 0x80;
 8005a9e:	7c3b      	ldrb	r3, [r7, #16]
 8005aa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	743b      	strb	r3, [r7, #16]
    if (address != 0)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d01c      	beq.n	8005ae8 <dwSpiWrite+0x68>
    {
        header[0] |= 0x40;
 8005aae:	7c3b      	ldrb	r3, [r7, #16]
 8005ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	743b      	strb	r3, [r7, #16]
        header[1] = address & 0x7f;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	747b      	strb	r3, [r7, #17]
        address >>= 7;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	09db      	lsrs	r3, r3, #7
 8005ac8:	607b      	str	r3, [r7, #4]
        headerLength = 2;
 8005aca:	2302      	movs	r3, #2
 8005acc:	617b      	str	r3, [r7, #20]
        if (address != 0)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d009      	beq.n	8005ae8 <dwSpiWrite+0x68>
        {
            header[1] |= 0x80;
 8005ad4:	7c7b      	ldrb	r3, [r7, #17]
 8005ad6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	747b      	strb	r3, [r7, #17]
            header[2] = address & 0xff;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	74bb      	strb	r3, [r7, #18]
            headerLength = 3;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	617b      	str	r3, [r7, #20]
        }
    }
    dev->func->spiWrite(dev, header, headerLength, data, length);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685c      	ldr	r4, [r3, #4]
 8005aee:	f107 0110 	add.w	r1, r7, #16
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	47a0      	blx	r4
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd90      	pop	{r4, r7, pc}

08005b06 <dwSpiWrite8>:

void dwSpiWrite8(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, uint8_t data)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b086      	sub	sp, #24
 8005b0a:	af02      	add	r7, sp, #8
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	461a      	mov	r2, r3
 8005b12:	460b      	mov	r3, r1
 8005b14:	72fb      	strb	r3, [r7, #11]
 8005b16:	4613      	mov	r3, r2
 8005b18:	72bb      	strb	r3, [r7, #10]
    dwSpiWrite(dev, regid, address, &data, sizeof(data));
 8005b1a:	f107 030a 	add.w	r3, r7, #10
 8005b1e:	7af9      	ldrb	r1, [r7, #11]
 8005b20:	2201      	movs	r2, #1
 8005b22:	9200      	str	r2, [sp, #0]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff ffaa 	bl	8005a80 <dwSpiWrite>
}
 8005b2c:	bf00      	nop
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <dwSpiWrite32>:

void dwSpiWrite32(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, uint32_t data)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	603b      	str	r3, [r7, #0]
 8005b40:	460b      	mov	r3, r1
 8005b42:	72fb      	strb	r3, [r7, #11]
    dwSpiWrite(dev, regid, address, &data, sizeof(data));
 8005b44:	463b      	mov	r3, r7
 8005b46:	7af9      	ldrb	r1, [r7, #11]
 8005b48:	2204      	movs	r2, #4
 8005b4a:	9200      	str	r2, [sp, #0]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7ff ff96 	bl	8005a80 <dwSpiWrite>
}
 8005b54:	bf00      	nop
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b60:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <HAL_Init+0x40>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a0d      	ldr	r2, [pc, #52]	; (8005b9c <HAL_Init+0x40>)
 8005b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <HAL_Init+0x40>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <HAL_Init+0x40>)
 8005b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b78:	4b08      	ldr	r3, [pc, #32]	; (8005b9c <HAL_Init+0x40>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a07      	ldr	r2, [pc, #28]	; (8005b9c <HAL_Init+0x40>)
 8005b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b84:	2003      	movs	r0, #3
 8005b86:	f000 f965 	bl	8005e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b8a:	200f      	movs	r0, #15
 8005b8c:	f000 f808 	bl	8005ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b90:	f7fd f942 	bl	8002e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40023c00 	.word	0x40023c00

08005ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ba8:	4b12      	ldr	r3, [pc, #72]	; (8005bf4 <HAL_InitTick+0x54>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <HAL_InitTick+0x58>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 f981 	bl	8005ec6 <HAL_SYSTICK_Config>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e00e      	b.n	8005bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b0f      	cmp	r3, #15
 8005bd2:	d80a      	bhi.n	8005bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bdc:	f000 f945 	bl	8005e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005be0:	4a06      	ldr	r2, [pc, #24]	; (8005bfc <HAL_InitTick+0x5c>)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	e000      	b.n	8005bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20000060 	.word	0x20000060
 8005bf8:	2000007c 	.word	0x2000007c
 8005bfc:	20000078 	.word	0x20000078

08005c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c04:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <HAL_IncTick+0x20>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <HAL_IncTick+0x24>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4413      	add	r3, r2
 8005c10:	4a04      	ldr	r2, [pc, #16]	; (8005c24 <HAL_IncTick+0x24>)
 8005c12:	6013      	str	r3, [r2, #0]
}
 8005c14:	bf00      	nop
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	2000007c 	.word	0x2000007c
 8005c24:	20000838 	.word	0x20000838

08005c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8005c2c:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <HAL_GetTick+0x14>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	20000838 	.word	0x20000838

08005c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c48:	f7ff ffee 	bl	8005c28 <HAL_GetTick>
 8005c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c58:	d005      	beq.n	8005c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c5a:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <HAL_Delay+0x44>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4413      	add	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005c66:	bf00      	nop
 8005c68:	f7ff ffde 	bl	8005c28 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d8f7      	bhi.n	8005c68 <HAL_Delay+0x28>
  {
  }
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	2000007c 	.word	0x2000007c

08005c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <__NVIC_SetPriorityGrouping+0x44>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cba:	4a04      	ldr	r2, [pc, #16]	; (8005ccc <__NVIC_SetPriorityGrouping+0x44>)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	60d3      	str	r3, [r2, #12]
}
 8005cc0:	bf00      	nop
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	e000ed00 	.word	0xe000ed00

08005cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cd4:	4b04      	ldr	r3, [pc, #16]	; (8005ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	0a1b      	lsrs	r3, r3, #8
 8005cda:	f003 0307 	and.w	r3, r3, #7
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	e000ed00 	.word	0xe000ed00

08005cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	db0b      	blt.n	8005d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	f003 021f 	and.w	r2, r3, #31
 8005d04:	4907      	ldr	r1, [pc, #28]	; (8005d24 <__NVIC_EnableIRQ+0x38>)
 8005d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	2001      	movs	r0, #1
 8005d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	e000e100 	.word	0xe000e100

08005d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	6039      	str	r1, [r7, #0]
 8005d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	db0a      	blt.n	8005d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	490c      	ldr	r1, [pc, #48]	; (8005d74 <__NVIC_SetPriority+0x4c>)
 8005d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d46:	0112      	lsls	r2, r2, #4
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	440b      	add	r3, r1
 8005d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d50:	e00a      	b.n	8005d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	4908      	ldr	r1, [pc, #32]	; (8005d78 <__NVIC_SetPriority+0x50>)
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	3b04      	subs	r3, #4
 8005d60:	0112      	lsls	r2, r2, #4
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	440b      	add	r3, r1
 8005d66:	761a      	strb	r2, [r3, #24]
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	e000e100 	.word	0xe000e100
 8005d78:	e000ed00 	.word	0xe000ed00

08005d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b089      	sub	sp, #36	; 0x24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f1c3 0307 	rsb	r3, r3, #7
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	bf28      	it	cs
 8005d9a:	2304      	movcs	r3, #4
 8005d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	3304      	adds	r3, #4
 8005da2:	2b06      	cmp	r3, #6
 8005da4:	d902      	bls.n	8005dac <NVIC_EncodePriority+0x30>
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	3b03      	subs	r3, #3
 8005daa:	e000      	b.n	8005dae <NVIC_EncodePriority+0x32>
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005db0:	f04f 32ff 	mov.w	r2, #4294967295
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dba:	43da      	mvns	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	401a      	ands	r2, r3
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	fa01 f303 	lsl.w	r3, r1, r3
 8005dce:	43d9      	mvns	r1, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dd4:	4313      	orrs	r3, r2
         );
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3724      	adds	r7, #36	; 0x24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005de8:	f3bf 8f4f 	dsb	sy
}
 8005dec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005dee:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <__NVIC_SystemReset+0x24>)
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005df6:	4904      	ldr	r1, [pc, #16]	; (8005e08 <__NVIC_SystemReset+0x24>)
 8005df8:	4b04      	ldr	r3, [pc, #16]	; (8005e0c <__NVIC_SystemReset+0x28>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dfe:	f3bf 8f4f 	dsb	sy
}
 8005e02:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <__NVIC_SystemReset+0x20>
 8005e08:	e000ed00 	.word	0xe000ed00
 8005e0c:	05fa0004 	.word	0x05fa0004

08005e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e20:	d301      	bcc.n	8005e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e22:	2301      	movs	r3, #1
 8005e24:	e00f      	b.n	8005e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e26:	4a0a      	ldr	r2, [pc, #40]	; (8005e50 <SysTick_Config+0x40>)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e2e:	210f      	movs	r1, #15
 8005e30:	f04f 30ff 	mov.w	r0, #4294967295
 8005e34:	f7ff ff78 	bl	8005d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e38:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <SysTick_Config+0x40>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e3e:	4b04      	ldr	r3, [pc, #16]	; (8005e50 <SysTick_Config+0x40>)
 8005e40:	2207      	movs	r2, #7
 8005e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	e000e010 	.word	0xe000e010

08005e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff ff13 	bl	8005c88 <__NVIC_SetPriorityGrouping>
}
 8005e62:	bf00      	nop
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b086      	sub	sp, #24
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	4603      	mov	r3, r0
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	607a      	str	r2, [r7, #4]
 8005e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e7c:	f7ff ff28 	bl	8005cd0 <__NVIC_GetPriorityGrouping>
 8005e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	68b9      	ldr	r1, [r7, #8]
 8005e86:	6978      	ldr	r0, [r7, #20]
 8005e88:	f7ff ff78 	bl	8005d7c <NVIC_EncodePriority>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e92:	4611      	mov	r1, r2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff ff47 	bl	8005d28 <__NVIC_SetPriority>
}
 8005e9a:	bf00      	nop
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff ff1b 	bl	8005cec <__NVIC_EnableIRQ>
}
 8005eb6:	bf00      	nop
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005ec2:	f7ff ff8f 	bl	8005de4 <__NVIC_SystemReset>

08005ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff ff9e 	bl	8005e10 <SysTick_Config>
 8005ed4:	4603      	mov	r3, r0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005eec:	f7ff fe9c 	bl	8005c28 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e099      	b.n	8006030 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0201 	bic.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f1c:	e00f      	b.n	8005f3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f1e:	f7ff fe83 	bl	8005c28 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b05      	cmp	r3, #5
 8005f2a:	d908      	bls.n	8005f3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2203      	movs	r2, #3
 8005f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e078      	b.n	8006030 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e8      	bne.n	8005f1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	4b38      	ldr	r3, [pc, #224]	; (8006038 <HAL_DMA_Init+0x158>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d107      	bne.n	8005fa8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f023 0307 	bic.w	r3, r3, #7
 8005fbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d117      	bne.n	8006002 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00e      	beq.n	8006002 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fb01 	bl	80065ec <DMA_CheckFifoParam>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d008      	beq.n	8006002 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2240      	movs	r2, #64	; 0x40
 8005ff4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005ffe:	2301      	movs	r3, #1
 8006000:	e016      	b.n	8006030 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fab8 	bl	8006580 <DMA_CalcBaseAndBitshift>
 8006010:	4603      	mov	r3, r0
 8006012:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006018:	223f      	movs	r2, #63	; 0x3f
 800601a:	409a      	lsls	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	f010803f 	.word	0xf010803f

0800603c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006052:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_DMA_Start_IT+0x26>
 800605e:	2302      	movs	r3, #2
 8006060:	e040      	b.n	80060e4 <HAL_DMA_Start_IT+0xa8>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b01      	cmp	r3, #1
 8006074:	d12f      	bne.n	80060d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2202      	movs	r2, #2
 800607a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	68b9      	ldr	r1, [r7, #8]
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 fa4a 	bl	8006524 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006094:	223f      	movs	r2, #63	; 0x3f
 8006096:	409a      	lsls	r2, r3
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0216 	orr.w	r2, r2, #22
 80060aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d007      	beq.n	80060c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0208 	orr.w	r2, r2, #8
 80060c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e005      	b.n	80060e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80060de:	2302      	movs	r3, #2
 80060e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80060fa:	f7ff fd95 	bl	8005c28 <HAL_GetTick>
 80060fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d008      	beq.n	800611e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2280      	movs	r2, #128	; 0x80
 8006110:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e052      	b.n	80061c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0216 	bic.w	r2, r2, #22
 800612c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695a      	ldr	r2, [r3, #20]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800613c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d103      	bne.n	800614e <HAL_DMA_Abort+0x62>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0208 	bic.w	r2, r2, #8
 800615c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800616e:	e013      	b.n	8006198 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006170:	f7ff fd5a 	bl	8005c28 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b05      	cmp	r3, #5
 800617c:	d90c      	bls.n	8006198 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2203      	movs	r2, #3
 8006188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e015      	b.n	80061c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e4      	bne.n	8006170 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061aa:	223f      	movs	r2, #63	; 0x3f
 80061ac:	409a      	lsls	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d004      	beq.n	80061ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2280      	movs	r2, #128	; 0x80
 80061e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e00c      	b.n	8006204 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2205      	movs	r2, #5
 80061ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0201 	bic.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800621c:	4b8e      	ldr	r3, [pc, #568]	; (8006458 <HAL_DMA_IRQHandler+0x248>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a8e      	ldr	r2, [pc, #568]	; (800645c <HAL_DMA_IRQHandler+0x24c>)
 8006222:	fba2 2303 	umull	r2, r3, r2, r3
 8006226:	0a9b      	lsrs	r3, r3, #10
 8006228:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800623a:	2208      	movs	r2, #8
 800623c:	409a      	lsls	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4013      	ands	r3, r2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d01a      	beq.n	800627c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b00      	cmp	r3, #0
 8006252:	d013      	beq.n	800627c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0204 	bic.w	r2, r2, #4
 8006262:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006268:	2208      	movs	r2, #8
 800626a:	409a      	lsls	r2, r3
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006274:	f043 0201 	orr.w	r2, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006280:	2201      	movs	r2, #1
 8006282:	409a      	lsls	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4013      	ands	r3, r2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d012      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00b      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629e:	2201      	movs	r2, #1
 80062a0:	409a      	lsls	r2, r3
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062aa:	f043 0202 	orr.w	r2, r3, #2
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b6:	2204      	movs	r2, #4
 80062b8:	409a      	lsls	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4013      	ands	r3, r2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d012      	beq.n	80062e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00b      	beq.n	80062e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d4:	2204      	movs	r2, #4
 80062d6:	409a      	lsls	r2, r3
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e0:	f043 0204 	orr.w	r2, r3, #4
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ec:	2210      	movs	r2, #16
 80062ee:	409a      	lsls	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4013      	ands	r3, r2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d043      	beq.n	8006380 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d03c      	beq.n	8006380 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630a:	2210      	movs	r2, #16
 800630c:	409a      	lsls	r2, r3
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d018      	beq.n	8006352 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d108      	bne.n	8006340 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d024      	beq.n	8006380 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
 800633e:	e01f      	b.n	8006380 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01b      	beq.n	8006380 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4798      	blx	r3
 8006350:	e016      	b.n	8006380 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635c:	2b00      	cmp	r3, #0
 800635e:	d107      	bne.n	8006370 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0208 	bic.w	r2, r2, #8
 800636e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006384:	2220      	movs	r2, #32
 8006386:	409a      	lsls	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 808f 	beq.w	80064b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 8087 	beq.w	80064b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a6:	2220      	movs	r2, #32
 80063a8:	409a      	lsls	r2, r3
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b05      	cmp	r3, #5
 80063b8:	d136      	bne.n	8006428 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0216 	bic.w	r2, r2, #22
 80063c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695a      	ldr	r2, [r3, #20]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d103      	bne.n	80063ea <HAL_DMA_IRQHandler+0x1da>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0208 	bic.w	r2, r2, #8
 80063f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fe:	223f      	movs	r2, #63	; 0x3f
 8006400:	409a      	lsls	r2, r3
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641a:	2b00      	cmp	r3, #0
 800641c:	d07e      	beq.n	800651c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	4798      	blx	r3
        }
        return;
 8006426:	e079      	b.n	800651c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d01d      	beq.n	8006472 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10d      	bne.n	8006460 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006448:	2b00      	cmp	r3, #0
 800644a:	d031      	beq.n	80064b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	4798      	blx	r3
 8006454:	e02c      	b.n	80064b0 <HAL_DMA_IRQHandler+0x2a0>
 8006456:	bf00      	nop
 8006458:	20000060 	.word	0x20000060
 800645c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d023      	beq.n	80064b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	4798      	blx	r3
 8006470:	e01e      	b.n	80064b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10f      	bne.n	80064a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0210 	bic.w	r2, r2, #16
 800648e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d032      	beq.n	800651e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d022      	beq.n	800650a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2205      	movs	r2, #5
 80064c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0201 	bic.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	3301      	adds	r3, #1
 80064e0:	60bb      	str	r3, [r7, #8]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d307      	bcc.n	80064f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1f2      	bne.n	80064dc <HAL_DMA_IRQHandler+0x2cc>
 80064f6:	e000      	b.n	80064fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80064f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d005      	beq.n	800651e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	4798      	blx	r3
 800651a:	e000      	b.n	800651e <HAL_DMA_IRQHandler+0x30e>
        return;
 800651c:	bf00      	nop
    }
  }
}
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006540:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	2b40      	cmp	r3, #64	; 0x40
 8006550:	d108      	bne.n	8006564 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006562:	e007      	b.n	8006574 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	60da      	str	r2, [r3, #12]
}
 8006574:	bf00      	nop
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	3b10      	subs	r3, #16
 8006590:	4a14      	ldr	r2, [pc, #80]	; (80065e4 <DMA_CalcBaseAndBitshift+0x64>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	091b      	lsrs	r3, r3, #4
 8006598:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800659a:	4a13      	ldr	r2, [pc, #76]	; (80065e8 <DMA_CalcBaseAndBitshift+0x68>)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d909      	bls.n	80065c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065b6:	f023 0303 	bic.w	r3, r3, #3
 80065ba:	1d1a      	adds	r2, r3, #4
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	659a      	str	r2, [r3, #88]	; 0x58
 80065c0:	e007      	b.n	80065d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065ca:	f023 0303 	bic.w	r3, r3, #3
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	aaaaaaab 	.word	0xaaaaaaab
 80065e8:	0800ee84 	.word	0x0800ee84

080065ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d11f      	bne.n	8006646 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b03      	cmp	r3, #3
 800660a:	d856      	bhi.n	80066ba <DMA_CheckFifoParam+0xce>
 800660c:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <DMA_CheckFifoParam+0x28>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	08006625 	.word	0x08006625
 8006618:	08006637 	.word	0x08006637
 800661c:	08006625 	.word	0x08006625
 8006620:	080066bb 	.word	0x080066bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d046      	beq.n	80066be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006634:	e043      	b.n	80066be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800663e:	d140      	bne.n	80066c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006644:	e03d      	b.n	80066c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664e:	d121      	bne.n	8006694 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b03      	cmp	r3, #3
 8006654:	d837      	bhi.n	80066c6 <DMA_CheckFifoParam+0xda>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <DMA_CheckFifoParam+0x70>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	0800666d 	.word	0x0800666d
 8006660:	08006673 	.word	0x08006673
 8006664:	0800666d 	.word	0x0800666d
 8006668:	08006685 	.word	0x08006685
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]
      break;
 8006670:	e030      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d025      	beq.n	80066ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006682:	e022      	b.n	80066ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800668c:	d11f      	bne.n	80066ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006692:	e01c      	b.n	80066ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d903      	bls.n	80066a2 <DMA_CheckFifoParam+0xb6>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b03      	cmp	r3, #3
 800669e:	d003      	beq.n	80066a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80066a0:	e018      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	73fb      	strb	r3, [r7, #15]
      break;
 80066a6:	e015      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00e      	beq.n	80066d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	73fb      	strb	r3, [r7, #15]
      break;
 80066b8:	e00b      	b.n	80066d2 <DMA_CheckFifoParam+0xe6>
      break;
 80066ba:	bf00      	nop
 80066bc:	e00a      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      break;
 80066be:	bf00      	nop
 80066c0:	e008      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      break;
 80066c2:	bf00      	nop
 80066c4:	e006      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      break;
 80066c6:	bf00      	nop
 80066c8:	e004      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      break;
 80066ca:	bf00      	nop
 80066cc:	e002      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80066ce:	bf00      	nop
 80066d0:	e000      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      break;
 80066d2:	bf00      	nop
    }
  } 
  
  return status; 
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop

080066e4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80066f6:	4b23      	ldr	r3, [pc, #140]	; (8006784 <HAL_FLASH_Program+0xa0>)
 80066f8:	7e1b      	ldrb	r3, [r3, #24]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d101      	bne.n	8006702 <HAL_FLASH_Program+0x1e>
 80066fe:	2302      	movs	r3, #2
 8006700:	e03b      	b.n	800677a <HAL_FLASH_Program+0x96>
 8006702:	4b20      	ldr	r3, [pc, #128]	; (8006784 <HAL_FLASH_Program+0xa0>)
 8006704:	2201      	movs	r2, #1
 8006706:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006708:	f24c 3050 	movw	r0, #50000	; 0xc350
 800670c:	f000 f87c 	bl	8006808 <FLASH_WaitForLastOperation>
 8006710:	4603      	mov	r3, r0
 8006712:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d12b      	bne.n	8006772 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d105      	bne.n	800672c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006720:	783b      	ldrb	r3, [r7, #0]
 8006722:	4619      	mov	r1, r3
 8006724:	68b8      	ldr	r0, [r7, #8]
 8006726:	f000 f927 	bl	8006978 <FLASH_Program_Byte>
 800672a:	e016      	b.n	800675a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d105      	bne.n	800673e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006732:	883b      	ldrh	r3, [r7, #0]
 8006734:	4619      	mov	r1, r3
 8006736:	68b8      	ldr	r0, [r7, #8]
 8006738:	f000 f8fa 	bl	8006930 <FLASH_Program_HalfWord>
 800673c:	e00d      	b.n	800675a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d105      	bne.n	8006750 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	4619      	mov	r1, r3
 8006748:	68b8      	ldr	r0, [r7, #8]
 800674a:	f000 f8cf 	bl	80068ec <FLASH_Program_Word>
 800674e:	e004      	b.n	800675a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006754:	68b8      	ldr	r0, [r7, #8]
 8006756:	f000 f897 	bl	8006888 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800675a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800675e:	f000 f853 	bl	8006808 <FLASH_WaitForLastOperation>
 8006762:	4603      	mov	r3, r0
 8006764:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006766:	4b08      	ldr	r3, [pc, #32]	; (8006788 <HAL_FLASH_Program+0xa4>)
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	4a07      	ldr	r2, [pc, #28]	; (8006788 <HAL_FLASH_Program+0xa4>)
 800676c:	f023 0301 	bic.w	r3, r3, #1
 8006770:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006772:	4b04      	ldr	r3, [pc, #16]	; (8006784 <HAL_FLASH_Program+0xa0>)
 8006774:	2200      	movs	r2, #0
 8006776:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006778:	7dfb      	ldrb	r3, [r7, #23]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	2000083c 	.word	0x2000083c
 8006788:	40023c00 	.word	0x40023c00

0800678c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006796:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <HAL_FLASH_Unlock+0x38>)
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	da0b      	bge.n	80067b6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800679e:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <HAL_FLASH_Unlock+0x38>)
 80067a0:	4a09      	ldr	r2, [pc, #36]	; (80067c8 <HAL_FLASH_Unlock+0x3c>)
 80067a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80067a4:	4b07      	ldr	r3, [pc, #28]	; (80067c4 <HAL_FLASH_Unlock+0x38>)
 80067a6:	4a09      	ldr	r2, [pc, #36]	; (80067cc <HAL_FLASH_Unlock+0x40>)
 80067a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80067aa:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <HAL_FLASH_Unlock+0x38>)
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da01      	bge.n	80067b6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80067b6:	79fb      	ldrb	r3, [r7, #7]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	40023c00 	.word	0x40023c00
 80067c8:	45670123 	.word	0x45670123
 80067cc:	cdef89ab 	.word	0xcdef89ab

080067d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <HAL_FLASH_Lock+0x1c>)
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	4a04      	ldr	r2, [pc, #16]	; (80067ec <HAL_FLASH_Lock+0x1c>)
 80067da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067de:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	40023c00 	.word	0x40023c00

080067f0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80067f4:	4b03      	ldr	r3, [pc, #12]	; (8006804 <HAL_FLASH_GetError+0x14>)
 80067f6:	69db      	ldr	r3, [r3, #28]
}  
 80067f8:	4618      	mov	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	2000083c 	.word	0x2000083c

08006808 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006814:	4b1a      	ldr	r3, [pc, #104]	; (8006880 <FLASH_WaitForLastOperation+0x78>)
 8006816:	2200      	movs	r2, #0
 8006818:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800681a:	f7ff fa05 	bl	8005c28 <HAL_GetTick>
 800681e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006820:	e010      	b.n	8006844 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006828:	d00c      	beq.n	8006844 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d007      	beq.n	8006840 <FLASH_WaitForLastOperation+0x38>
 8006830:	f7ff f9fa 	bl	8005c28 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	429a      	cmp	r2, r3
 800683e:	d201      	bcs.n	8006844 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e019      	b.n	8006878 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006844:	4b0f      	ldr	r3, [pc, #60]	; (8006884 <FLASH_WaitForLastOperation+0x7c>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e8      	bne.n	8006822 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006850:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <FLASH_WaitForLastOperation+0x7c>)
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800685c:	4b09      	ldr	r3, [pc, #36]	; (8006884 <FLASH_WaitForLastOperation+0x7c>)
 800685e:	2201      	movs	r2, #1
 8006860:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006862:	4b08      	ldr	r3, [pc, #32]	; (8006884 <FLASH_WaitForLastOperation+0x7c>)
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800686e:	f000 f8a5 	bl	80069bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e000      	b.n	8006878 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006876:	2300      	movs	r3, #0
  
}  
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	2000083c 	.word	0x2000083c
 8006884:	40023c00 	.word	0x40023c00

08006888 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006894:	4b14      	ldr	r3, [pc, #80]	; (80068e8 <FLASH_Program_DoubleWord+0x60>)
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	4a13      	ldr	r2, [pc, #76]	; (80068e8 <FLASH_Program_DoubleWord+0x60>)
 800689a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80068a0:	4b11      	ldr	r3, [pc, #68]	; (80068e8 <FLASH_Program_DoubleWord+0x60>)
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	4a10      	ldr	r2, [pc, #64]	; (80068e8 <FLASH_Program_DoubleWord+0x60>)
 80068a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80068aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80068ac:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <FLASH_Program_DoubleWord+0x60>)
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	4a0d      	ldr	r2, [pc, #52]	; (80068e8 <FLASH_Program_DoubleWord+0x60>)
 80068b2:	f043 0301 	orr.w	r3, r3, #1
 80068b6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80068be:	f3bf 8f6f 	isb	sy
}
 80068c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80068c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	000a      	movs	r2, r1
 80068d2:	2300      	movs	r3, #0
 80068d4:	68f9      	ldr	r1, [r7, #12]
 80068d6:	3104      	adds	r1, #4
 80068d8:	4613      	mov	r3, r2
 80068da:	600b      	str	r3, [r1, #0]
}
 80068dc:	bf00      	nop
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	40023c00 	.word	0x40023c00

080068ec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80068f6:	4b0d      	ldr	r3, [pc, #52]	; (800692c <FLASH_Program_Word+0x40>)
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	4a0c      	ldr	r2, [pc, #48]	; (800692c <FLASH_Program_Word+0x40>)
 80068fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006900:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006902:	4b0a      	ldr	r3, [pc, #40]	; (800692c <FLASH_Program_Word+0x40>)
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	4a09      	ldr	r2, [pc, #36]	; (800692c <FLASH_Program_Word+0x40>)
 8006908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800690c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800690e:	4b07      	ldr	r3, [pc, #28]	; (800692c <FLASH_Program_Word+0x40>)
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	4a06      	ldr	r2, [pc, #24]	; (800692c <FLASH_Program_Word+0x40>)
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	601a      	str	r2, [r3, #0]
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	40023c00 	.word	0x40023c00

08006930 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800693c:	4b0d      	ldr	r3, [pc, #52]	; (8006974 <FLASH_Program_HalfWord+0x44>)
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	4a0c      	ldr	r2, [pc, #48]	; (8006974 <FLASH_Program_HalfWord+0x44>)
 8006942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006946:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <FLASH_Program_HalfWord+0x44>)
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	4a09      	ldr	r2, [pc, #36]	; (8006974 <FLASH_Program_HalfWord+0x44>)
 800694e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006952:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006954:	4b07      	ldr	r3, [pc, #28]	; (8006974 <FLASH_Program_HalfWord+0x44>)
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	4a06      	ldr	r2, [pc, #24]	; (8006974 <FLASH_Program_HalfWord+0x44>)
 800695a:	f043 0301 	orr.w	r3, r3, #1
 800695e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	887a      	ldrh	r2, [r7, #2]
 8006964:	801a      	strh	r2, [r3, #0]
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40023c00 	.word	0x40023c00

08006978 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006984:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <FLASH_Program_Byte+0x40>)
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	4a0b      	ldr	r2, [pc, #44]	; (80069b8 <FLASH_Program_Byte+0x40>)
 800698a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006990:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <FLASH_Program_Byte+0x40>)
 8006992:	4a09      	ldr	r2, [pc, #36]	; (80069b8 <FLASH_Program_Byte+0x40>)
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006998:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <FLASH_Program_Byte+0x40>)
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	4a06      	ldr	r2, [pc, #24]	; (80069b8 <FLASH_Program_Byte+0x40>)
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	78fa      	ldrb	r2, [r7, #3]
 80069a8:	701a      	strb	r2, [r3, #0]
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40023c00 	.word	0x40023c00

080069bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80069c0:	4b27      	ldr	r3, [pc, #156]	; (8006a60 <FLASH_SetErrorCode+0xa4>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d008      	beq.n	80069de <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80069cc:	4b25      	ldr	r3, [pc, #148]	; (8006a64 <FLASH_SetErrorCode+0xa8>)
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	f043 0310 	orr.w	r3, r3, #16
 80069d4:	4a23      	ldr	r2, [pc, #140]	; (8006a64 <FLASH_SetErrorCode+0xa8>)
 80069d6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80069d8:	4b21      	ldr	r3, [pc, #132]	; (8006a60 <FLASH_SetErrorCode+0xa4>)
 80069da:	2210      	movs	r2, #16
 80069dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80069de:	4b20      	ldr	r3, [pc, #128]	; (8006a60 <FLASH_SetErrorCode+0xa4>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d008      	beq.n	80069fc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80069ea:	4b1e      	ldr	r3, [pc, #120]	; (8006a64 <FLASH_SetErrorCode+0xa8>)
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f043 0308 	orr.w	r3, r3, #8
 80069f2:	4a1c      	ldr	r2, [pc, #112]	; (8006a64 <FLASH_SetErrorCode+0xa8>)
 80069f4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80069f6:	4b1a      	ldr	r3, [pc, #104]	; (8006a60 <FLASH_SetErrorCode+0xa4>)
 80069f8:	2220      	movs	r2, #32
 80069fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80069fc:	4b18      	ldr	r3, [pc, #96]	; (8006a60 <FLASH_SetErrorCode+0xa4>)
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d008      	beq.n	8006a1a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006a08:	4b16      	ldr	r3, [pc, #88]	; (8006a64 <FLASH_SetErrorCode+0xa8>)
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	f043 0304 	orr.w	r3, r3, #4
 8006a10:	4a14      	ldr	r2, [pc, #80]	; (8006a64 <FLASH_SetErrorCode+0xa8>)
 8006a12:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006a14:	4b12      	ldr	r3, [pc, #72]	; (8006a60 <FLASH_SetErrorCode+0xa4>)
 8006a16:	2240      	movs	r2, #64	; 0x40
 8006a18:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006a1a:	4b11      	ldr	r3, [pc, #68]	; (8006a60 <FLASH_SetErrorCode+0xa4>)
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d008      	beq.n	8006a38 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006a26:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <FLASH_SetErrorCode+0xa8>)
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f043 0302 	orr.w	r3, r3, #2
 8006a2e:	4a0d      	ldr	r2, [pc, #52]	; (8006a64 <FLASH_SetErrorCode+0xa8>)
 8006a30:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006a32:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <FLASH_SetErrorCode+0xa4>)
 8006a34:	2280      	movs	r2, #128	; 0x80
 8006a36:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006a38:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <FLASH_SetErrorCode+0xa4>)
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d008      	beq.n	8006a56 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006a44:	4b07      	ldr	r3, [pc, #28]	; (8006a64 <FLASH_SetErrorCode+0xa8>)
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	f043 0320 	orr.w	r3, r3, #32
 8006a4c:	4a05      	ldr	r2, [pc, #20]	; (8006a64 <FLASH_SetErrorCode+0xa8>)
 8006a4e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006a50:	4b03      	ldr	r3, [pc, #12]	; (8006a60 <FLASH_SetErrorCode+0xa4>)
 8006a52:	2202      	movs	r2, #2
 8006a54:	60da      	str	r2, [r3, #12]
  }
}
 8006a56:	bf00      	nop
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	40023c00 	.word	0x40023c00
 8006a64:	2000083c 	.word	0x2000083c

08006a68 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	e010      	b.n	8006aa6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d103      	bne.n	8006a92 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	e009      	b.n	8006aa6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d103      	bne.n	8006aa0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	e002      	b.n	8006aa6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006aa0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006aa4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006aa6:	4b13      	ldr	r3, [pc, #76]	; (8006af4 <FLASH_Erase_Sector+0x8c>)
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	4a12      	ldr	r2, [pc, #72]	; (8006af4 <FLASH_Erase_Sector+0x8c>)
 8006aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006ab2:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <FLASH_Erase_Sector+0x8c>)
 8006ab4:	691a      	ldr	r2, [r3, #16]
 8006ab6:	490f      	ldr	r1, [pc, #60]	; (8006af4 <FLASH_Erase_Sector+0x8c>)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006abe:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <FLASH_Erase_Sector+0x8c>)
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	4a0c      	ldr	r2, [pc, #48]	; (8006af4 <FLASH_Erase_Sector+0x8c>)
 8006ac4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006ac8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006aca:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <FLASH_Erase_Sector+0x8c>)
 8006acc:	691a      	ldr	r2, [r3, #16]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	00db      	lsls	r3, r3, #3
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	4a07      	ldr	r2, [pc, #28]	; (8006af4 <FLASH_Erase_Sector+0x8c>)
 8006ad6:	f043 0302 	orr.w	r3, r3, #2
 8006ada:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006adc:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <FLASH_Erase_Sector+0x8c>)
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	4a04      	ldr	r2, [pc, #16]	; (8006af4 <FLASH_Erase_Sector+0x8c>)
 8006ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae6:	6113      	str	r3, [r2, #16]
}
 8006ae8:	bf00      	nop
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	40023c00 	.word	0x40023c00

08006af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b089      	sub	sp, #36	; 0x24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
 8006b12:	e16b      	b.n	8006dec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006b14:	2201      	movs	r2, #1
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4013      	ands	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	f040 815a 	bne.w	8006de6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f003 0303 	and.w	r3, r3, #3
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d005      	beq.n	8006b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d130      	bne.n	8006bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	2203      	movs	r2, #3
 8006b56:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5a:	43db      	mvns	r3, r3
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b80:	2201      	movs	r2, #1
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	fa02 f303 	lsl.w	r3, r2, r3
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	091b      	lsrs	r3, r3, #4
 8006b96:	f003 0201 	and.w	r2, r3, #1
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f003 0303 	and.w	r3, r3, #3
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d017      	beq.n	8006be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	2203      	movs	r2, #3
 8006bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc8:	43db      	mvns	r3, r3
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f003 0303 	and.w	r3, r3, #3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d123      	bne.n	8006c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	08da      	lsrs	r2, r3, #3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3208      	adds	r2, #8
 8006bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	220f      	movs	r2, #15
 8006c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c10:	43db      	mvns	r3, r3
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	4013      	ands	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	fa02 f303 	lsl.w	r3, r2, r3
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	08da      	lsrs	r2, r3, #3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3208      	adds	r2, #8
 8006c36:	69b9      	ldr	r1, [r7, #24]
 8006c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	2203      	movs	r2, #3
 8006c48:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4c:	43db      	mvns	r3, r3
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	4013      	ands	r3, r2
 8006c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f003 0203 	and.w	r2, r3, #3
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	fa02 f303 	lsl.w	r3, r2, r3
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 80b4 	beq.w	8006de6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	4b60      	ldr	r3, [pc, #384]	; (8006e04 <HAL_GPIO_Init+0x30c>)
 8006c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c86:	4a5f      	ldr	r2, [pc, #380]	; (8006e04 <HAL_GPIO_Init+0x30c>)
 8006c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8006c8e:	4b5d      	ldr	r3, [pc, #372]	; (8006e04 <HAL_GPIO_Init+0x30c>)
 8006c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c9a:	4a5b      	ldr	r2, [pc, #364]	; (8006e08 <HAL_GPIO_Init+0x310>)
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	089b      	lsrs	r3, r3, #2
 8006ca0:	3302      	adds	r3, #2
 8006ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	220f      	movs	r2, #15
 8006cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb6:	43db      	mvns	r3, r3
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a52      	ldr	r2, [pc, #328]	; (8006e0c <HAL_GPIO_Init+0x314>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d02b      	beq.n	8006d1e <HAL_GPIO_Init+0x226>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a51      	ldr	r2, [pc, #324]	; (8006e10 <HAL_GPIO_Init+0x318>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d025      	beq.n	8006d1a <HAL_GPIO_Init+0x222>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a50      	ldr	r2, [pc, #320]	; (8006e14 <HAL_GPIO_Init+0x31c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d01f      	beq.n	8006d16 <HAL_GPIO_Init+0x21e>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a4f      	ldr	r2, [pc, #316]	; (8006e18 <HAL_GPIO_Init+0x320>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d019      	beq.n	8006d12 <HAL_GPIO_Init+0x21a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a4e      	ldr	r2, [pc, #312]	; (8006e1c <HAL_GPIO_Init+0x324>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d013      	beq.n	8006d0e <HAL_GPIO_Init+0x216>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a4d      	ldr	r2, [pc, #308]	; (8006e20 <HAL_GPIO_Init+0x328>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d00d      	beq.n	8006d0a <HAL_GPIO_Init+0x212>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a4c      	ldr	r2, [pc, #304]	; (8006e24 <HAL_GPIO_Init+0x32c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d007      	beq.n	8006d06 <HAL_GPIO_Init+0x20e>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a4b      	ldr	r2, [pc, #300]	; (8006e28 <HAL_GPIO_Init+0x330>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d101      	bne.n	8006d02 <HAL_GPIO_Init+0x20a>
 8006cfe:	2307      	movs	r3, #7
 8006d00:	e00e      	b.n	8006d20 <HAL_GPIO_Init+0x228>
 8006d02:	2308      	movs	r3, #8
 8006d04:	e00c      	b.n	8006d20 <HAL_GPIO_Init+0x228>
 8006d06:	2306      	movs	r3, #6
 8006d08:	e00a      	b.n	8006d20 <HAL_GPIO_Init+0x228>
 8006d0a:	2305      	movs	r3, #5
 8006d0c:	e008      	b.n	8006d20 <HAL_GPIO_Init+0x228>
 8006d0e:	2304      	movs	r3, #4
 8006d10:	e006      	b.n	8006d20 <HAL_GPIO_Init+0x228>
 8006d12:	2303      	movs	r3, #3
 8006d14:	e004      	b.n	8006d20 <HAL_GPIO_Init+0x228>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e002      	b.n	8006d20 <HAL_GPIO_Init+0x228>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e000      	b.n	8006d20 <HAL_GPIO_Init+0x228>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	f002 0203 	and.w	r2, r2, #3
 8006d26:	0092      	lsls	r2, r2, #2
 8006d28:	4093      	lsls	r3, r2
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d30:	4935      	ldr	r1, [pc, #212]	; (8006e08 <HAL_GPIO_Init+0x310>)
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	089b      	lsrs	r3, r3, #2
 8006d36:	3302      	adds	r3, #2
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d3e:	4b3b      	ldr	r3, [pc, #236]	; (8006e2c <HAL_GPIO_Init+0x334>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	43db      	mvns	r3, r3
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d62:	4a32      	ldr	r2, [pc, #200]	; (8006e2c <HAL_GPIO_Init+0x334>)
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d68:	4b30      	ldr	r3, [pc, #192]	; (8006e2c <HAL_GPIO_Init+0x334>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	43db      	mvns	r3, r3
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	4013      	ands	r3, r2
 8006d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d8c:	4a27      	ldr	r2, [pc, #156]	; (8006e2c <HAL_GPIO_Init+0x334>)
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006d92:	4b26      	ldr	r3, [pc, #152]	; (8006e2c <HAL_GPIO_Init+0x334>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	43db      	mvns	r3, r3
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006db6:	4a1d      	ldr	r2, [pc, #116]	; (8006e2c <HAL_GPIO_Init+0x334>)
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006dbc:	4b1b      	ldr	r3, [pc, #108]	; (8006e2c <HAL_GPIO_Init+0x334>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	43db      	mvns	r3, r3
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006de0:	4a12      	ldr	r2, [pc, #72]	; (8006e2c <HAL_GPIO_Init+0x334>)
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	3301      	adds	r3, #1
 8006dea:	61fb      	str	r3, [r7, #28]
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	2b0f      	cmp	r3, #15
 8006df0:	f67f ae90 	bls.w	8006b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	3724      	adds	r7, #36	; 0x24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40023800 	.word	0x40023800
 8006e08:	40013800 	.word	0x40013800
 8006e0c:	40020000 	.word	0x40020000
 8006e10:	40020400 	.word	0x40020400
 8006e14:	40020800 	.word	0x40020800
 8006e18:	40020c00 	.word	0x40020c00
 8006e1c:	40021000 	.word	0x40021000
 8006e20:	40021400 	.word	0x40021400
 8006e24:	40021800 	.word	0x40021800
 8006e28:	40021c00 	.word	0x40021c00
 8006e2c:	40013c00 	.word	0x40013c00

08006e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	807b      	strh	r3, [r7, #2]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e40:	787b      	ldrb	r3, [r7, #1]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e46:	887a      	ldrh	r2, [r7, #2]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006e4c:	e003      	b.n	8006e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e4e:	887b      	ldrh	r3, [r7, #2]
 8006e50:	041a      	lsls	r2, r3, #16
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	619a      	str	r2, [r3, #24]
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
	...

08006e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e267      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d075      	beq.n	8006f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e82:	4b88      	ldr	r3, [pc, #544]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 030c 	and.w	r3, r3, #12
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d00c      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e8e:	4b85      	ldr	r3, [pc, #532]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e96:	2b08      	cmp	r3, #8
 8006e98:	d112      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e9a:	4b82      	ldr	r3, [pc, #520]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ea6:	d10b      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ea8:	4b7e      	ldr	r3, [pc, #504]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d05b      	beq.n	8006f6c <HAL_RCC_OscConfig+0x108>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d157      	bne.n	8006f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e242      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec8:	d106      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x74>
 8006eca:	4b76      	ldr	r3, [pc, #472]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a75      	ldr	r2, [pc, #468]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	e01d      	b.n	8006f14 <HAL_RCC_OscConfig+0xb0>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ee0:	d10c      	bne.n	8006efc <HAL_RCC_OscConfig+0x98>
 8006ee2:	4b70      	ldr	r3, [pc, #448]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a6f      	ldr	r2, [pc, #444]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	4b6d      	ldr	r3, [pc, #436]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a6c      	ldr	r2, [pc, #432]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	e00b      	b.n	8006f14 <HAL_RCC_OscConfig+0xb0>
 8006efc:	4b69      	ldr	r3, [pc, #420]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a68      	ldr	r2, [pc, #416]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	4b66      	ldr	r3, [pc, #408]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a65      	ldr	r2, [pc, #404]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d013      	beq.n	8006f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f1c:	f7fe fe84 	bl	8005c28 <HAL_GetTick>
 8006f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f22:	e008      	b.n	8006f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f24:	f7fe fe80 	bl	8005c28 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b64      	cmp	r3, #100	; 0x64
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e207      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f36:	4b5b      	ldr	r3, [pc, #364]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0f0      	beq.n	8006f24 <HAL_RCC_OscConfig+0xc0>
 8006f42:	e014      	b.n	8006f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f44:	f7fe fe70 	bl	8005c28 <HAL_GetTick>
 8006f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f4c:	f7fe fe6c 	bl	8005c28 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b64      	cmp	r3, #100	; 0x64
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e1f3      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f5e:	4b51      	ldr	r3, [pc, #324]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f0      	bne.n	8006f4c <HAL_RCC_OscConfig+0xe8>
 8006f6a:	e000      	b.n	8006f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d063      	beq.n	8007042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f7a:	4b4a      	ldr	r3, [pc, #296]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 030c 	and.w	r3, r3, #12
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00b      	beq.n	8006f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f86:	4b47      	ldr	r3, [pc, #284]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d11c      	bne.n	8006fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f92:	4b44      	ldr	r3, [pc, #272]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d116      	bne.n	8006fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f9e:	4b41      	ldr	r3, [pc, #260]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x152>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d001      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e1c7      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fb6:	4b3b      	ldr	r3, [pc, #236]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	4937      	ldr	r1, [pc, #220]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fca:	e03a      	b.n	8007042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d020      	beq.n	8007016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fd4:	4b34      	ldr	r3, [pc, #208]	; (80070a8 <HAL_RCC_OscConfig+0x244>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fda:	f7fe fe25 	bl	8005c28 <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fe2:	f7fe fe21 	bl	8005c28 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e1a8      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff4:	4b2b      	ldr	r3, [pc, #172]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0f0      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007000:	4b28      	ldr	r3, [pc, #160]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	4925      	ldr	r1, [pc, #148]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8007010:	4313      	orrs	r3, r2
 8007012:	600b      	str	r3, [r1, #0]
 8007014:	e015      	b.n	8007042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007016:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <HAL_RCC_OscConfig+0x244>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701c:	f7fe fe04 	bl	8005c28 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007024:	f7fe fe00 	bl	8005c28 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e187      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007036:	4b1b      	ldr	r3, [pc, #108]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f0      	bne.n	8007024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d036      	beq.n	80070bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d016      	beq.n	8007084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007056:	4b15      	ldr	r3, [pc, #84]	; (80070ac <HAL_RCC_OscConfig+0x248>)
 8007058:	2201      	movs	r2, #1
 800705a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800705c:	f7fe fde4 	bl	8005c28 <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007064:	f7fe fde0 	bl	8005c28 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e167      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007076:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <HAL_RCC_OscConfig+0x240>)
 8007078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0f0      	beq.n	8007064 <HAL_RCC_OscConfig+0x200>
 8007082:	e01b      	b.n	80070bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007084:	4b09      	ldr	r3, [pc, #36]	; (80070ac <HAL_RCC_OscConfig+0x248>)
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800708a:	f7fe fdcd 	bl	8005c28 <HAL_GetTick>
 800708e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007090:	e00e      	b.n	80070b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007092:	f7fe fdc9 	bl	8005c28 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d907      	bls.n	80070b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e150      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
 80070a4:	40023800 	.word	0x40023800
 80070a8:	42470000 	.word	0x42470000
 80070ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070b0:	4b88      	ldr	r3, [pc, #544]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 80070b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1ea      	bne.n	8007092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 8097 	beq.w	80071f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070ca:	2300      	movs	r3, #0
 80070cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070ce:	4b81      	ldr	r3, [pc, #516]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10f      	bne.n	80070fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070da:	2300      	movs	r3, #0
 80070dc:	60bb      	str	r3, [r7, #8]
 80070de:	4b7d      	ldr	r3, [pc, #500]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 80070e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e2:	4a7c      	ldr	r2, [pc, #496]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 80070e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070e8:	6413      	str	r3, [r2, #64]	; 0x40
 80070ea:	4b7a      	ldr	r3, [pc, #488]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070f2:	60bb      	str	r3, [r7, #8]
 80070f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070f6:	2301      	movs	r3, #1
 80070f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070fa:	4b77      	ldr	r3, [pc, #476]	; (80072d8 <HAL_RCC_OscConfig+0x474>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007102:	2b00      	cmp	r3, #0
 8007104:	d118      	bne.n	8007138 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007106:	4b74      	ldr	r3, [pc, #464]	; (80072d8 <HAL_RCC_OscConfig+0x474>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a73      	ldr	r2, [pc, #460]	; (80072d8 <HAL_RCC_OscConfig+0x474>)
 800710c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007112:	f7fe fd89 	bl	8005c28 <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800711a:	f7fe fd85 	bl	8005c28 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e10c      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800712c:	4b6a      	ldr	r3, [pc, #424]	; (80072d8 <HAL_RCC_OscConfig+0x474>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0f0      	beq.n	800711a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d106      	bne.n	800714e <HAL_RCC_OscConfig+0x2ea>
 8007140:	4b64      	ldr	r3, [pc, #400]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007144:	4a63      	ldr	r2, [pc, #396]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	6713      	str	r3, [r2, #112]	; 0x70
 800714c:	e01c      	b.n	8007188 <HAL_RCC_OscConfig+0x324>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	2b05      	cmp	r3, #5
 8007154:	d10c      	bne.n	8007170 <HAL_RCC_OscConfig+0x30c>
 8007156:	4b5f      	ldr	r3, [pc, #380]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715a:	4a5e      	ldr	r2, [pc, #376]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 800715c:	f043 0304 	orr.w	r3, r3, #4
 8007160:	6713      	str	r3, [r2, #112]	; 0x70
 8007162:	4b5c      	ldr	r3, [pc, #368]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007166:	4a5b      	ldr	r2, [pc, #364]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007168:	f043 0301 	orr.w	r3, r3, #1
 800716c:	6713      	str	r3, [r2, #112]	; 0x70
 800716e:	e00b      	b.n	8007188 <HAL_RCC_OscConfig+0x324>
 8007170:	4b58      	ldr	r3, [pc, #352]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007174:	4a57      	ldr	r2, [pc, #348]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007176:	f023 0301 	bic.w	r3, r3, #1
 800717a:	6713      	str	r3, [r2, #112]	; 0x70
 800717c:	4b55      	ldr	r3, [pc, #340]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 800717e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007180:	4a54      	ldr	r2, [pc, #336]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007182:	f023 0304 	bic.w	r3, r3, #4
 8007186:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d015      	beq.n	80071bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007190:	f7fe fd4a 	bl	8005c28 <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007196:	e00a      	b.n	80071ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007198:	f7fe fd46 	bl	8005c28 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d901      	bls.n	80071ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e0cb      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ae:	4b49      	ldr	r3, [pc, #292]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 80071b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0ee      	beq.n	8007198 <HAL_RCC_OscConfig+0x334>
 80071ba:	e014      	b.n	80071e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071bc:	f7fe fd34 	bl	8005c28 <HAL_GetTick>
 80071c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071c2:	e00a      	b.n	80071da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071c4:	f7fe fd30 	bl	8005c28 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e0b5      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071da:	4b3e      	ldr	r3, [pc, #248]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 80071dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1ee      	bne.n	80071c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d105      	bne.n	80071f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071ec:	4b39      	ldr	r3, [pc, #228]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 80071ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f0:	4a38      	ldr	r2, [pc, #224]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 80071f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80a1 	beq.w	8007344 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007202:	4b34      	ldr	r3, [pc, #208]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f003 030c 	and.w	r3, r3, #12
 800720a:	2b08      	cmp	r3, #8
 800720c:	d05c      	beq.n	80072c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d141      	bne.n	800729a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007216:	4b31      	ldr	r3, [pc, #196]	; (80072dc <HAL_RCC_OscConfig+0x478>)
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800721c:	f7fe fd04 	bl	8005c28 <HAL_GetTick>
 8007220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007222:	e008      	b.n	8007236 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007224:	f7fe fd00 	bl	8005c28 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e087      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007236:	4b27      	ldr	r3, [pc, #156]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1f0      	bne.n	8007224 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69da      	ldr	r2, [r3, #28]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	019b      	lsls	r3, r3, #6
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	085b      	lsrs	r3, r3, #1
 800725a:	3b01      	subs	r3, #1
 800725c:	041b      	lsls	r3, r3, #16
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	061b      	lsls	r3, r3, #24
 8007266:	491b      	ldr	r1, [pc, #108]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 8007268:	4313      	orrs	r3, r2
 800726a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800726c:	4b1b      	ldr	r3, [pc, #108]	; (80072dc <HAL_RCC_OscConfig+0x478>)
 800726e:	2201      	movs	r2, #1
 8007270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007272:	f7fe fcd9 	bl	8005c28 <HAL_GetTick>
 8007276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007278:	e008      	b.n	800728c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800727a:	f7fe fcd5 	bl	8005c28 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	d901      	bls.n	800728c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e05c      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800728c:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0f0      	beq.n	800727a <HAL_RCC_OscConfig+0x416>
 8007298:	e054      	b.n	8007344 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800729a:	4b10      	ldr	r3, [pc, #64]	; (80072dc <HAL_RCC_OscConfig+0x478>)
 800729c:	2200      	movs	r2, #0
 800729e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072a0:	f7fe fcc2 	bl	8005c28 <HAL_GetTick>
 80072a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072a6:	e008      	b.n	80072ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072a8:	f7fe fcbe 	bl	8005c28 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e045      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072ba:	4b06      	ldr	r3, [pc, #24]	; (80072d4 <HAL_RCC_OscConfig+0x470>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1f0      	bne.n	80072a8 <HAL_RCC_OscConfig+0x444>
 80072c6:	e03d      	b.n	8007344 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d107      	bne.n	80072e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e038      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
 80072d4:	40023800 	.word	0x40023800
 80072d8:	40007000 	.word	0x40007000
 80072dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072e0:	4b1b      	ldr	r3, [pc, #108]	; (8007350 <HAL_RCC_OscConfig+0x4ec>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d028      	beq.n	8007340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d121      	bne.n	8007340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007306:	429a      	cmp	r2, r3
 8007308:	d11a      	bne.n	8007340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007310:	4013      	ands	r3, r2
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007318:	4293      	cmp	r3, r2
 800731a:	d111      	bne.n	8007340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007326:	085b      	lsrs	r3, r3, #1
 8007328:	3b01      	subs	r3, #1
 800732a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800732c:	429a      	cmp	r2, r3
 800732e:	d107      	bne.n	8007340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800733c:	429a      	cmp	r2, r3
 800733e:	d001      	beq.n	8007344 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e000      	b.n	8007346 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	40023800 	.word	0x40023800

08007354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e0cc      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007368:	4b68      	ldr	r3, [pc, #416]	; (800750c <HAL_RCC_ClockConfig+0x1b8>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	429a      	cmp	r2, r3
 8007374:	d90c      	bls.n	8007390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007376:	4b65      	ldr	r3, [pc, #404]	; (800750c <HAL_RCC_ClockConfig+0x1b8>)
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800737e:	4b63      	ldr	r3, [pc, #396]	; (800750c <HAL_RCC_ClockConfig+0x1b8>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	429a      	cmp	r2, r3
 800738a:	d001      	beq.n	8007390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e0b8      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d020      	beq.n	80073de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d005      	beq.n	80073b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073a8:	4b59      	ldr	r3, [pc, #356]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	4a58      	ldr	r2, [pc, #352]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80073b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073c0:	4b53      	ldr	r3, [pc, #332]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	4a52      	ldr	r2, [pc, #328]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073cc:	4b50      	ldr	r3, [pc, #320]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	494d      	ldr	r1, [pc, #308]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d044      	beq.n	8007474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d107      	bne.n	8007402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073f2:	4b47      	ldr	r3, [pc, #284]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d119      	bne.n	8007432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e07f      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2b02      	cmp	r3, #2
 8007408:	d003      	beq.n	8007412 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800740e:	2b03      	cmp	r3, #3
 8007410:	d107      	bne.n	8007422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007412:	4b3f      	ldr	r3, [pc, #252]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e06f      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007422:	4b3b      	ldr	r3, [pc, #236]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e067      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007432:	4b37      	ldr	r3, [pc, #220]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f023 0203 	bic.w	r2, r3, #3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	4934      	ldr	r1, [pc, #208]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007440:	4313      	orrs	r3, r2
 8007442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007444:	f7fe fbf0 	bl	8005c28 <HAL_GetTick>
 8007448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800744a:	e00a      	b.n	8007462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800744c:	f7fe fbec 	bl	8005c28 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	f241 3288 	movw	r2, #5000	; 0x1388
 800745a:	4293      	cmp	r3, r2
 800745c:	d901      	bls.n	8007462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e04f      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007462:	4b2b      	ldr	r3, [pc, #172]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f003 020c 	and.w	r2, r3, #12
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	429a      	cmp	r2, r3
 8007472:	d1eb      	bne.n	800744c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007474:	4b25      	ldr	r3, [pc, #148]	; (800750c <HAL_RCC_ClockConfig+0x1b8>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0307 	and.w	r3, r3, #7
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	429a      	cmp	r2, r3
 8007480:	d20c      	bcs.n	800749c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007482:	4b22      	ldr	r3, [pc, #136]	; (800750c <HAL_RCC_ClockConfig+0x1b8>)
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800748a:	4b20      	ldr	r3, [pc, #128]	; (800750c <HAL_RCC_ClockConfig+0x1b8>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	429a      	cmp	r2, r3
 8007496:	d001      	beq.n	800749c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e032      	b.n	8007502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d008      	beq.n	80074ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074a8:	4b19      	ldr	r3, [pc, #100]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	4916      	ldr	r1, [pc, #88]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0308 	and.w	r3, r3, #8
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d009      	beq.n	80074da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074c6:	4b12      	ldr	r3, [pc, #72]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	00db      	lsls	r3, r3, #3
 80074d4:	490e      	ldr	r1, [pc, #56]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074da:	f000 f821 	bl	8007520 <HAL_RCC_GetSysClockFreq>
 80074de:	4602      	mov	r2, r0
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <HAL_RCC_ClockConfig+0x1bc>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	091b      	lsrs	r3, r3, #4
 80074e6:	f003 030f 	and.w	r3, r3, #15
 80074ea:	490a      	ldr	r1, [pc, #40]	; (8007514 <HAL_RCC_ClockConfig+0x1c0>)
 80074ec:	5ccb      	ldrb	r3, [r1, r3]
 80074ee:	fa22 f303 	lsr.w	r3, r2, r3
 80074f2:	4a09      	ldr	r2, [pc, #36]	; (8007518 <HAL_RCC_ClockConfig+0x1c4>)
 80074f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074f6:	4b09      	ldr	r3, [pc, #36]	; (800751c <HAL_RCC_ClockConfig+0x1c8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fb50 	bl	8005ba0 <HAL_InitTick>

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	40023c00 	.word	0x40023c00
 8007510:	40023800 	.word	0x40023800
 8007514:	0800ee14 	.word	0x0800ee14
 8007518:	20000060 	.word	0x20000060
 800751c:	20000078 	.word	0x20000078

08007520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007524:	b094      	sub	sp, #80	; 0x50
 8007526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	647b      	str	r3, [r7, #68]	; 0x44
 800752c:	2300      	movs	r3, #0
 800752e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007530:	2300      	movs	r3, #0
 8007532:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007538:	4b79      	ldr	r3, [pc, #484]	; (8007720 <HAL_RCC_GetSysClockFreq+0x200>)
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f003 030c 	and.w	r3, r3, #12
 8007540:	2b08      	cmp	r3, #8
 8007542:	d00d      	beq.n	8007560 <HAL_RCC_GetSysClockFreq+0x40>
 8007544:	2b08      	cmp	r3, #8
 8007546:	f200 80e1 	bhi.w	800770c <HAL_RCC_GetSysClockFreq+0x1ec>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <HAL_RCC_GetSysClockFreq+0x34>
 800754e:	2b04      	cmp	r3, #4
 8007550:	d003      	beq.n	800755a <HAL_RCC_GetSysClockFreq+0x3a>
 8007552:	e0db      	b.n	800770c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007554:	4b73      	ldr	r3, [pc, #460]	; (8007724 <HAL_RCC_GetSysClockFreq+0x204>)
 8007556:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007558:	e0db      	b.n	8007712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800755a:	4b73      	ldr	r3, [pc, #460]	; (8007728 <HAL_RCC_GetSysClockFreq+0x208>)
 800755c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800755e:	e0d8      	b.n	8007712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007560:	4b6f      	ldr	r3, [pc, #444]	; (8007720 <HAL_RCC_GetSysClockFreq+0x200>)
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007568:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800756a:	4b6d      	ldr	r3, [pc, #436]	; (8007720 <HAL_RCC_GetSysClockFreq+0x200>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d063      	beq.n	800763e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007576:	4b6a      	ldr	r3, [pc, #424]	; (8007720 <HAL_RCC_GetSysClockFreq+0x200>)
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	099b      	lsrs	r3, r3, #6
 800757c:	2200      	movs	r2, #0
 800757e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007580:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007588:	633b      	str	r3, [r7, #48]	; 0x30
 800758a:	2300      	movs	r3, #0
 800758c:	637b      	str	r3, [r7, #52]	; 0x34
 800758e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007592:	4622      	mov	r2, r4
 8007594:	462b      	mov	r3, r5
 8007596:	f04f 0000 	mov.w	r0, #0
 800759a:	f04f 0100 	mov.w	r1, #0
 800759e:	0159      	lsls	r1, r3, #5
 80075a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075a4:	0150      	lsls	r0, r2, #5
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4621      	mov	r1, r4
 80075ac:	1a51      	subs	r1, r2, r1
 80075ae:	6139      	str	r1, [r7, #16]
 80075b0:	4629      	mov	r1, r5
 80075b2:	eb63 0301 	sbc.w	r3, r3, r1
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	f04f 0300 	mov.w	r3, #0
 80075c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075c4:	4659      	mov	r1, fp
 80075c6:	018b      	lsls	r3, r1, #6
 80075c8:	4651      	mov	r1, sl
 80075ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80075ce:	4651      	mov	r1, sl
 80075d0:	018a      	lsls	r2, r1, #6
 80075d2:	4651      	mov	r1, sl
 80075d4:	ebb2 0801 	subs.w	r8, r2, r1
 80075d8:	4659      	mov	r1, fp
 80075da:	eb63 0901 	sbc.w	r9, r3, r1
 80075de:	f04f 0200 	mov.w	r2, #0
 80075e2:	f04f 0300 	mov.w	r3, #0
 80075e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075f2:	4690      	mov	r8, r2
 80075f4:	4699      	mov	r9, r3
 80075f6:	4623      	mov	r3, r4
 80075f8:	eb18 0303 	adds.w	r3, r8, r3
 80075fc:	60bb      	str	r3, [r7, #8]
 80075fe:	462b      	mov	r3, r5
 8007600:	eb49 0303 	adc.w	r3, r9, r3
 8007604:	60fb      	str	r3, [r7, #12]
 8007606:	f04f 0200 	mov.w	r2, #0
 800760a:	f04f 0300 	mov.w	r3, #0
 800760e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007612:	4629      	mov	r1, r5
 8007614:	024b      	lsls	r3, r1, #9
 8007616:	4621      	mov	r1, r4
 8007618:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800761c:	4621      	mov	r1, r4
 800761e:	024a      	lsls	r2, r1, #9
 8007620:	4610      	mov	r0, r2
 8007622:	4619      	mov	r1, r3
 8007624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007626:	2200      	movs	r2, #0
 8007628:	62bb      	str	r3, [r7, #40]	; 0x28
 800762a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800762c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007630:	f7f9 fb2a 	bl	8000c88 <__aeabi_uldivmod>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4613      	mov	r3, r2
 800763a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800763c:	e058      	b.n	80076f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800763e:	4b38      	ldr	r3, [pc, #224]	; (8007720 <HAL_RCC_GetSysClockFreq+0x200>)
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	099b      	lsrs	r3, r3, #6
 8007644:	2200      	movs	r2, #0
 8007646:	4618      	mov	r0, r3
 8007648:	4611      	mov	r1, r2
 800764a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800764e:	623b      	str	r3, [r7, #32]
 8007650:	2300      	movs	r3, #0
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
 8007654:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007658:	4642      	mov	r2, r8
 800765a:	464b      	mov	r3, r9
 800765c:	f04f 0000 	mov.w	r0, #0
 8007660:	f04f 0100 	mov.w	r1, #0
 8007664:	0159      	lsls	r1, r3, #5
 8007666:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800766a:	0150      	lsls	r0, r2, #5
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4641      	mov	r1, r8
 8007672:	ebb2 0a01 	subs.w	sl, r2, r1
 8007676:	4649      	mov	r1, r9
 8007678:	eb63 0b01 	sbc.w	fp, r3, r1
 800767c:	f04f 0200 	mov.w	r2, #0
 8007680:	f04f 0300 	mov.w	r3, #0
 8007684:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007688:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800768c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007690:	ebb2 040a 	subs.w	r4, r2, sl
 8007694:	eb63 050b 	sbc.w	r5, r3, fp
 8007698:	f04f 0200 	mov.w	r2, #0
 800769c:	f04f 0300 	mov.w	r3, #0
 80076a0:	00eb      	lsls	r3, r5, #3
 80076a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076a6:	00e2      	lsls	r2, r4, #3
 80076a8:	4614      	mov	r4, r2
 80076aa:	461d      	mov	r5, r3
 80076ac:	4643      	mov	r3, r8
 80076ae:	18e3      	adds	r3, r4, r3
 80076b0:	603b      	str	r3, [r7, #0]
 80076b2:	464b      	mov	r3, r9
 80076b4:	eb45 0303 	adc.w	r3, r5, r3
 80076b8:	607b      	str	r3, [r7, #4]
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80076c6:	4629      	mov	r1, r5
 80076c8:	028b      	lsls	r3, r1, #10
 80076ca:	4621      	mov	r1, r4
 80076cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80076d0:	4621      	mov	r1, r4
 80076d2:	028a      	lsls	r2, r1, #10
 80076d4:	4610      	mov	r0, r2
 80076d6:	4619      	mov	r1, r3
 80076d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076da:	2200      	movs	r2, #0
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	61fa      	str	r2, [r7, #28]
 80076e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076e4:	f7f9 fad0 	bl	8000c88 <__aeabi_uldivmod>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4613      	mov	r3, r2
 80076ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80076f0:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <HAL_RCC_GetSysClockFreq+0x200>)
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	0c1b      	lsrs	r3, r3, #16
 80076f6:	f003 0303 	and.w	r3, r3, #3
 80076fa:	3301      	adds	r3, #1
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007704:	fbb2 f3f3 	udiv	r3, r2, r3
 8007708:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800770a:	e002      	b.n	8007712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800770c:	4b05      	ldr	r3, [pc, #20]	; (8007724 <HAL_RCC_GetSysClockFreq+0x204>)
 800770e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007714:	4618      	mov	r0, r3
 8007716:	3750      	adds	r7, #80	; 0x50
 8007718:	46bd      	mov	sp, r7
 800771a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800771e:	bf00      	nop
 8007720:	40023800 	.word	0x40023800
 8007724:	00f42400 	.word	0x00f42400
 8007728:	007a1200 	.word	0x007a1200

0800772c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007730:	4b03      	ldr	r3, [pc, #12]	; (8007740 <HAL_RCC_GetHCLKFreq+0x14>)
 8007732:	681b      	ldr	r3, [r3, #0]
}
 8007734:	4618      	mov	r0, r3
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	20000060 	.word	0x20000060

08007744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007748:	f7ff fff0 	bl	800772c <HAL_RCC_GetHCLKFreq>
 800774c:	4602      	mov	r2, r0
 800774e:	4b05      	ldr	r3, [pc, #20]	; (8007764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	0a9b      	lsrs	r3, r3, #10
 8007754:	f003 0307 	and.w	r3, r3, #7
 8007758:	4903      	ldr	r1, [pc, #12]	; (8007768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800775a:	5ccb      	ldrb	r3, [r1, r3]
 800775c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007760:	4618      	mov	r0, r3
 8007762:	bd80      	pop	{r7, pc}
 8007764:	40023800 	.word	0x40023800
 8007768:	0800ee24 	.word	0x0800ee24

0800776c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007770:	f7ff ffdc 	bl	800772c <HAL_RCC_GetHCLKFreq>
 8007774:	4602      	mov	r2, r0
 8007776:	4b05      	ldr	r3, [pc, #20]	; (800778c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	0b5b      	lsrs	r3, r3, #13
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	4903      	ldr	r1, [pc, #12]	; (8007790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007782:	5ccb      	ldrb	r3, [r1, r3]
 8007784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007788:	4618      	mov	r0, r3
 800778a:	bd80      	pop	{r7, pc}
 800778c:	40023800 	.word	0x40023800
 8007790:	0800ee24 	.word	0x0800ee24

08007794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e07b      	b.n	800789e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d108      	bne.n	80077c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077b6:	d009      	beq.n	80077cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	61da      	str	r2, [r3, #28]
 80077be:	e005      	b.n	80077cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fb face 	bl	8002d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007802:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800781e:	431a      	orrs	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	431a      	orrs	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	431a      	orrs	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800783c:	431a      	orrs	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007846:	431a      	orrs	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007850:	ea42 0103 	orr.w	r1, r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	0c1b      	lsrs	r3, r3, #16
 800786a:	f003 0104 	and.w	r1, r3, #4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	f003 0210 	and.w	r2, r3, #16
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69da      	ldr	r2, [r3, #28]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800788c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b088      	sub	sp, #32
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	60f8      	str	r0, [r7, #12]
 80078ae:	60b9      	str	r1, [r7, #8]
 80078b0:	603b      	str	r3, [r7, #0]
 80078b2:	4613      	mov	r3, r2
 80078b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d101      	bne.n	80078c8 <HAL_SPI_Transmit+0x22>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e126      	b.n	8007b16 <HAL_SPI_Transmit+0x270>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078d0:	f7fe f9aa 	bl	8005c28 <HAL_GetTick>
 80078d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d002      	beq.n	80078ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80078e6:	2302      	movs	r3, #2
 80078e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078ea:	e10b      	b.n	8007b04 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <HAL_SPI_Transmit+0x52>
 80078f2:	88fb      	ldrh	r3, [r7, #6]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d102      	bne.n	80078fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078fc:	e102      	b.n	8007b04 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2203      	movs	r2, #3
 8007902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	88fa      	ldrh	r2, [r7, #6]
 8007916:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	88fa      	ldrh	r2, [r7, #6]
 800791c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007944:	d10f      	bne.n	8007966 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007954:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007964:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007970:	2b40      	cmp	r3, #64	; 0x40
 8007972:	d007      	beq.n	8007984 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007982:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800798c:	d14b      	bne.n	8007a26 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <HAL_SPI_Transmit+0xf6>
 8007996:	8afb      	ldrh	r3, [r7, #22]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d13e      	bne.n	8007a1a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a0:	881a      	ldrh	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ac:	1c9a      	adds	r2, r3, #2
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	3b01      	subs	r3, #1
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079c0:	e02b      	b.n	8007a1a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d112      	bne.n	80079f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d4:	881a      	ldrh	r2, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e0:	1c9a      	adds	r2, r3, #2
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80079f4:	e011      	b.n	8007a1a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079f6:	f7fe f917 	bl	8005c28 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d803      	bhi.n	8007a0e <HAL_SPI_Transmit+0x168>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0c:	d102      	bne.n	8007a14 <HAL_SPI_Transmit+0x16e>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d102      	bne.n	8007a1a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a18:	e074      	b.n	8007b04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1ce      	bne.n	80079c2 <HAL_SPI_Transmit+0x11c>
 8007a24:	e04c      	b.n	8007ac0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <HAL_SPI_Transmit+0x18e>
 8007a2e:	8afb      	ldrh	r3, [r7, #22]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d140      	bne.n	8007ab6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	330c      	adds	r3, #12
 8007a3e:	7812      	ldrb	r2, [r2, #0]
 8007a40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a5a:	e02c      	b.n	8007ab6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d113      	bne.n	8007a92 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	330c      	adds	r3, #12
 8007a74:	7812      	ldrb	r2, [r2, #0]
 8007a76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a90:	e011      	b.n	8007ab6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a92:	f7fe f8c9 	bl	8005c28 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d803      	bhi.n	8007aaa <HAL_SPI_Transmit+0x204>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa8:	d102      	bne.n	8007ab0 <HAL_SPI_Transmit+0x20a>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d102      	bne.n	8007ab6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ab4:	e026      	b.n	8007b04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1cd      	bne.n	8007a5c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 fbcb 	bl	8008260 <SPI_EndRxTxTransaction>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10a      	bne.n	8007af4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ade:	2300      	movs	r3, #0
 8007ae0:	613b      	str	r3, [r7, #16]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	613b      	str	r3, [r7, #16]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	613b      	str	r3, [r7, #16]
 8007af2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	77fb      	strb	r3, [r7, #31]
 8007b00:	e000      	b.n	8007b04 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007b02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b14:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3720      	adds	r7, #32
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b088      	sub	sp, #32
 8007b22:	af02      	add	r7, sp, #8
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b3a:	d112      	bne.n	8007b62 <HAL_SPI_Receive+0x44>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10e      	bne.n	8007b62 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2204      	movs	r2, #4
 8007b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b4c:	88fa      	ldrh	r2, [r7, #6]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	4613      	mov	r3, r2
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	68b9      	ldr	r1, [r7, #8]
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 f8f1 	bl	8007d40 <HAL_SPI_TransmitReceive>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	e0ea      	b.n	8007d38 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d101      	bne.n	8007b70 <HAL_SPI_Receive+0x52>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	e0e3      	b.n	8007d38 <HAL_SPI_Receive+0x21a>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b78:	f7fe f856 	bl	8005c28 <HAL_GetTick>
 8007b7c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d002      	beq.n	8007b90 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b8e:	e0ca      	b.n	8007d26 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_SPI_Receive+0x7e>
 8007b96:	88fb      	ldrh	r3, [r7, #6]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d102      	bne.n	8007ba2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ba0:	e0c1      	b.n	8007d26 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2204      	movs	r2, #4
 8007ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	88fa      	ldrh	r2, [r7, #6]
 8007bba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	88fa      	ldrh	r2, [r7, #6]
 8007bc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be8:	d10f      	bne.n	8007c0a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bf8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c08:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c14:	2b40      	cmp	r3, #64	; 0x40
 8007c16:	d007      	beq.n	8007c28 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d162      	bne.n	8007cf6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007c30:	e02e      	b.n	8007c90 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d115      	bne.n	8007c6c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f103 020c 	add.w	r2, r3, #12
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	7812      	ldrb	r2, [r2, #0]
 8007c4e:	b2d2      	uxtb	r2, r2
 8007c50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	3b01      	subs	r3, #1
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c6a:	e011      	b.n	8007c90 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c6c:	f7fd ffdc 	bl	8005c28 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d803      	bhi.n	8007c84 <HAL_SPI_Receive+0x166>
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c82:	d102      	bne.n	8007c8a <HAL_SPI_Receive+0x16c>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d102      	bne.n	8007c90 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c8e:	e04a      	b.n	8007d26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1cb      	bne.n	8007c32 <HAL_SPI_Receive+0x114>
 8007c9a:	e031      	b.n	8007d00 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d113      	bne.n	8007cd2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb4:	b292      	uxth	r2, r2
 8007cb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbc:	1c9a      	adds	r2, r3, #2
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cd0:	e011      	b.n	8007cf6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cd2:	f7fd ffa9 	bl	8005c28 <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d803      	bhi.n	8007cea <HAL_SPI_Receive+0x1cc>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce8:	d102      	bne.n	8007cf0 <HAL_SPI_Receive+0x1d2>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d102      	bne.n	8007cf6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007cf4:	e017      	b.n	8007d26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1cd      	bne.n	8007c9c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 fa45 	bl	8008194 <SPI_EndRxTransaction>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2220      	movs	r2, #32
 8007d14:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	75fb      	strb	r3, [r7, #23]
 8007d22:	e000      	b.n	8007d26 <HAL_SPI_Receive+0x208>
  }

error :
 8007d24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08c      	sub	sp, #48	; 0x30
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d101      	bne.n	8007d66 <HAL_SPI_TransmitReceive+0x26>
 8007d62:	2302      	movs	r3, #2
 8007d64:	e18a      	b.n	800807c <HAL_SPI_TransmitReceive+0x33c>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d6e:	f7fd ff5b 	bl	8005c28 <HAL_GetTick>
 8007d72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d84:	887b      	ldrh	r3, [r7, #2]
 8007d86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d00f      	beq.n	8007db0 <HAL_SPI_TransmitReceive+0x70>
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d96:	d107      	bne.n	8007da8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d103      	bne.n	8007da8 <HAL_SPI_TransmitReceive+0x68>
 8007da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d003      	beq.n	8007db0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007da8:	2302      	movs	r3, #2
 8007daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007dae:	e15b      	b.n	8008068 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d005      	beq.n	8007dc2 <HAL_SPI_TransmitReceive+0x82>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <HAL_SPI_TransmitReceive+0x82>
 8007dbc:	887b      	ldrh	r3, [r7, #2]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d103      	bne.n	8007dca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007dc8:	e14e      	b.n	8008068 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d003      	beq.n	8007dde <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2205      	movs	r2, #5
 8007dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	887a      	ldrh	r2, [r7, #2]
 8007dee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	887a      	ldrh	r2, [r7, #2]
 8007df4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	887a      	ldrh	r2, [r7, #2]
 8007e00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	887a      	ldrh	r2, [r7, #2]
 8007e06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1e:	2b40      	cmp	r3, #64	; 0x40
 8007e20:	d007      	beq.n	8007e32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e3a:	d178      	bne.n	8007f2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <HAL_SPI_TransmitReceive+0x10a>
 8007e44:	8b7b      	ldrh	r3, [r7, #26]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d166      	bne.n	8007f18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4e:	881a      	ldrh	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5a:	1c9a      	adds	r2, r3, #2
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	3b01      	subs	r3, #1
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e6e:	e053      	b.n	8007f18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d11b      	bne.n	8007eb6 <HAL_SPI_TransmitReceive+0x176>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d016      	beq.n	8007eb6 <HAL_SPI_TransmitReceive+0x176>
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d113      	bne.n	8007eb6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e92:	881a      	ldrh	r2, [r3, #0]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9e:	1c9a      	adds	r2, r3, #2
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d119      	bne.n	8007ef8 <HAL_SPI_TransmitReceive+0x1b8>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d014      	beq.n	8007ef8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed8:	b292      	uxth	r2, r2
 8007eda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee0:	1c9a      	adds	r2, r3, #2
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	3b01      	subs	r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ef8:	f7fd fe96 	bl	8005c28 <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d807      	bhi.n	8007f18 <HAL_SPI_TransmitReceive+0x1d8>
 8007f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0e:	d003      	beq.n	8007f18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f16:	e0a7      	b.n	8008068 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1a6      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x130>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1a1      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x130>
 8007f2c:	e07c      	b.n	8008028 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d002      	beq.n	8007f3c <HAL_SPI_TransmitReceive+0x1fc>
 8007f36:	8b7b      	ldrh	r3, [r7, #26]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d16b      	bne.n	8008014 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	330c      	adds	r3, #12
 8007f46:	7812      	ldrb	r2, [r2, #0]
 8007f48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f62:	e057      	b.n	8008014 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d11c      	bne.n	8007fac <HAL_SPI_TransmitReceive+0x26c>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d017      	beq.n	8007fac <HAL_SPI_TransmitReceive+0x26c>
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d114      	bne.n	8007fac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	330c      	adds	r3, #12
 8007f8c:	7812      	ldrb	r2, [r2, #0]
 8007f8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f94:	1c5a      	adds	r2, r3, #1
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d119      	bne.n	8007fee <HAL_SPI_TransmitReceive+0x2ae>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d014      	beq.n	8007fee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fea:	2301      	movs	r3, #1
 8007fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007fee:	f7fd fe1b 	bl	8005c28 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d803      	bhi.n	8008006 <HAL_SPI_TransmitReceive+0x2c6>
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008004:	d102      	bne.n	800800c <HAL_SPI_TransmitReceive+0x2cc>
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	2b00      	cmp	r3, #0
 800800a:	d103      	bne.n	8008014 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008012:	e029      	b.n	8008068 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008018:	b29b      	uxth	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1a2      	bne.n	8007f64 <HAL_SPI_TransmitReceive+0x224>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008022:	b29b      	uxth	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	d19d      	bne.n	8007f64 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 f917 	bl	8008260 <SPI_EndRxTxTransaction>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d006      	beq.n	8008046 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2220      	movs	r2, #32
 8008042:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008044:	e010      	b.n	8008068 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10b      	bne.n	8008066 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800804e:	2300      	movs	r3, #0
 8008050:	617b      	str	r3, [r7, #20]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	617b      	str	r3, [r7, #20]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	617b      	str	r3, [r7, #20]
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	e000      	b.n	8008068 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008066:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008078:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800807c:	4618      	mov	r0, r3
 800807e:	3730      	adds	r7, #48	; 0x30
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	603b      	str	r3, [r7, #0]
 8008090:	4613      	mov	r3, r2
 8008092:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008094:	f7fd fdc8 	bl	8005c28 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809c:	1a9b      	subs	r3, r3, r2
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	4413      	add	r3, r2
 80080a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080a4:	f7fd fdc0 	bl	8005c28 <HAL_GetTick>
 80080a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080aa:	4b39      	ldr	r3, [pc, #228]	; (8008190 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	015b      	lsls	r3, r3, #5
 80080b0:	0d1b      	lsrs	r3, r3, #20
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	fb02 f303 	mul.w	r3, r2, r3
 80080b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080ba:	e054      	b.n	8008166 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c2:	d050      	beq.n	8008166 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080c4:	f7fd fdb0 	bl	8005c28 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	69fa      	ldr	r2, [r7, #28]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d902      	bls.n	80080da <SPI_WaitFlagStateUntilTimeout+0x56>
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d13d      	bne.n	8008156 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080f2:	d111      	bne.n	8008118 <SPI_WaitFlagStateUntilTimeout+0x94>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080fc:	d004      	beq.n	8008108 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008106:	d107      	bne.n	8008118 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008116:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008120:	d10f      	bne.n	8008142 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008140:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e017      	b.n	8008186 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	3b01      	subs	r3, #1
 8008164:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4013      	ands	r3, r2
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	429a      	cmp	r2, r3
 8008174:	bf0c      	ite	eq
 8008176:	2301      	moveq	r3, #1
 8008178:	2300      	movne	r3, #0
 800817a:	b2db      	uxtb	r3, r3
 800817c:	461a      	mov	r2, r3
 800817e:	79fb      	ldrb	r3, [r7, #7]
 8008180:	429a      	cmp	r2, r3
 8008182:	d19b      	bne.n	80080bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3720      	adds	r7, #32
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20000060 	.word	0x20000060

08008194 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af02      	add	r7, sp, #8
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081a8:	d111      	bne.n	80081ce <SPI_EndRxTransaction+0x3a>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081b2:	d004      	beq.n	80081be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081bc:	d107      	bne.n	80081ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081d6:	d12a      	bne.n	800822e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081e0:	d012      	beq.n	8008208 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2200      	movs	r2, #0
 80081ea:	2180      	movs	r1, #128	; 0x80
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f7ff ff49 	bl	8008084 <SPI_WaitFlagStateUntilTimeout>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d02d      	beq.n	8008254 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fc:	f043 0220 	orr.w	r2, r3, #32
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e026      	b.n	8008256 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2200      	movs	r2, #0
 8008210:	2101      	movs	r1, #1
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f7ff ff36 	bl	8008084 <SPI_WaitFlagStateUntilTimeout>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d01a      	beq.n	8008254 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008222:	f043 0220 	orr.w	r2, r3, #32
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e013      	b.n	8008256 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2200      	movs	r2, #0
 8008236:	2101      	movs	r1, #1
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f7ff ff23 	bl	8008084 <SPI_WaitFlagStateUntilTimeout>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d007      	beq.n	8008254 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008248:	f043 0220 	orr.w	r2, r3, #32
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008250:	2303      	movs	r3, #3
 8008252:	e000      	b.n	8008256 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b088      	sub	sp, #32
 8008264:	af02      	add	r7, sp, #8
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800826c:	4b1b      	ldr	r3, [pc, #108]	; (80082dc <SPI_EndRxTxTransaction+0x7c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a1b      	ldr	r2, [pc, #108]	; (80082e0 <SPI_EndRxTxTransaction+0x80>)
 8008272:	fba2 2303 	umull	r2, r3, r2, r3
 8008276:	0d5b      	lsrs	r3, r3, #21
 8008278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800827c:	fb02 f303 	mul.w	r3, r2, r3
 8008280:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800828a:	d112      	bne.n	80082b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2200      	movs	r2, #0
 8008294:	2180      	movs	r1, #128	; 0x80
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f7ff fef4 	bl	8008084 <SPI_WaitFlagStateUntilTimeout>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d016      	beq.n	80082d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a6:	f043 0220 	orr.w	r2, r3, #32
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e00f      	b.n	80082d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00a      	beq.n	80082ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c8:	2b80      	cmp	r3, #128	; 0x80
 80082ca:	d0f2      	beq.n	80082b2 <SPI_EndRxTxTransaction+0x52>
 80082cc:	e000      	b.n	80082d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80082ce:	bf00      	nop
  }

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	20000060 	.word	0x20000060
 80082e0:	165e9f81 	.word	0x165e9f81

080082e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e041      	b.n	800837a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d106      	bne.n	8008310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7fa ff62 	bl	80031d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3304      	adds	r3, #4
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f000 f95e 	bl	80085e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b01      	cmp	r3, #1
 8008396:	d001      	beq.n	800839c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e046      	b.n	800842a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a23      	ldr	r2, [pc, #140]	; (8008438 <HAL_TIM_Base_Start+0xb4>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d022      	beq.n	80083f4 <HAL_TIM_Base_Start+0x70>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083b6:	d01d      	beq.n	80083f4 <HAL_TIM_Base_Start+0x70>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a1f      	ldr	r2, [pc, #124]	; (800843c <HAL_TIM_Base_Start+0xb8>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d018      	beq.n	80083f4 <HAL_TIM_Base_Start+0x70>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a1e      	ldr	r2, [pc, #120]	; (8008440 <HAL_TIM_Base_Start+0xbc>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d013      	beq.n	80083f4 <HAL_TIM_Base_Start+0x70>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a1c      	ldr	r2, [pc, #112]	; (8008444 <HAL_TIM_Base_Start+0xc0>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d00e      	beq.n	80083f4 <HAL_TIM_Base_Start+0x70>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a1b      	ldr	r2, [pc, #108]	; (8008448 <HAL_TIM_Base_Start+0xc4>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d009      	beq.n	80083f4 <HAL_TIM_Base_Start+0x70>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a19      	ldr	r2, [pc, #100]	; (800844c <HAL_TIM_Base_Start+0xc8>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d004      	beq.n	80083f4 <HAL_TIM_Base_Start+0x70>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a18      	ldr	r2, [pc, #96]	; (8008450 <HAL_TIM_Base_Start+0xcc>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d111      	bne.n	8008418 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f003 0307 	and.w	r3, r3, #7
 80083fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2b06      	cmp	r3, #6
 8008404:	d010      	beq.n	8008428 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f042 0201 	orr.w	r2, r2, #1
 8008414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008416:	e007      	b.n	8008428 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f042 0201 	orr.w	r2, r2, #1
 8008426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	40010000 	.word	0x40010000
 800843c:	40000400 	.word	0x40000400
 8008440:	40000800 	.word	0x40000800
 8008444:	40000c00 	.word	0x40000c00
 8008448:	40010400 	.word	0x40010400
 800844c:	40014000 	.word	0x40014000
 8008450:	40001800 	.word	0x40001800

08008454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008468:	2b01      	cmp	r3, #1
 800846a:	d101      	bne.n	8008470 <HAL_TIM_ConfigClockSource+0x1c>
 800846c:	2302      	movs	r3, #2
 800846e:	e0b4      	b.n	80085da <HAL_TIM_ConfigClockSource+0x186>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800848e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a8:	d03e      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0xd4>
 80084aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ae:	f200 8087 	bhi.w	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b6:	f000 8086 	beq.w	80085c6 <HAL_TIM_ConfigClockSource+0x172>
 80084ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084be:	d87f      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084c0:	2b70      	cmp	r3, #112	; 0x70
 80084c2:	d01a      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0xa6>
 80084c4:	2b70      	cmp	r3, #112	; 0x70
 80084c6:	d87b      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084c8:	2b60      	cmp	r3, #96	; 0x60
 80084ca:	d050      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x11a>
 80084cc:	2b60      	cmp	r3, #96	; 0x60
 80084ce:	d877      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084d0:	2b50      	cmp	r3, #80	; 0x50
 80084d2:	d03c      	beq.n	800854e <HAL_TIM_ConfigClockSource+0xfa>
 80084d4:	2b50      	cmp	r3, #80	; 0x50
 80084d6:	d873      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084d8:	2b40      	cmp	r3, #64	; 0x40
 80084da:	d058      	beq.n	800858e <HAL_TIM_ConfigClockSource+0x13a>
 80084dc:	2b40      	cmp	r3, #64	; 0x40
 80084de:	d86f      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084e0:	2b30      	cmp	r3, #48	; 0x30
 80084e2:	d064      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x15a>
 80084e4:	2b30      	cmp	r3, #48	; 0x30
 80084e6:	d86b      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	d060      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x15a>
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d867      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d05c      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x15a>
 80084f4:	2b10      	cmp	r3, #16
 80084f6:	d05a      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x15a>
 80084f8:	e062      	b.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6818      	ldr	r0, [r3, #0]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	6899      	ldr	r1, [r3, #8]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f000 f985 	bl	8008818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800851c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	609a      	str	r2, [r3, #8]
      break;
 8008526:	e04f      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6818      	ldr	r0, [r3, #0]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	6899      	ldr	r1, [r3, #8]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f000 f96e 	bl	8008818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800854a:	609a      	str	r2, [r3, #8]
      break;
 800854c:	e03c      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	6859      	ldr	r1, [r3, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	461a      	mov	r2, r3
 800855c:	f000 f8e2 	bl	8008724 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2150      	movs	r1, #80	; 0x50
 8008566:	4618      	mov	r0, r3
 8008568:	f000 f93b 	bl	80087e2 <TIM_ITRx_SetConfig>
      break;
 800856c:	e02c      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	6859      	ldr	r1, [r3, #4]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	461a      	mov	r2, r3
 800857c:	f000 f901 	bl	8008782 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2160      	movs	r1, #96	; 0x60
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f92b 	bl	80087e2 <TIM_ITRx_SetConfig>
      break;
 800858c:	e01c      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	6859      	ldr	r1, [r3, #4]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	461a      	mov	r2, r3
 800859c:	f000 f8c2 	bl	8008724 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2140      	movs	r1, #64	; 0x40
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 f91b 	bl	80087e2 <TIM_ITRx_SetConfig>
      break;
 80085ac:	e00c      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4619      	mov	r1, r3
 80085b8:	4610      	mov	r0, r2
 80085ba:	f000 f912 	bl	80087e2 <TIM_ITRx_SetConfig>
      break;
 80085be:	e003      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	73fb      	strb	r3, [r7, #15]
      break;
 80085c4:	e000      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
	...

080085e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a40      	ldr	r2, [pc, #256]	; (80086f8 <TIM_Base_SetConfig+0x114>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d013      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008602:	d00f      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a3d      	ldr	r2, [pc, #244]	; (80086fc <TIM_Base_SetConfig+0x118>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d00b      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a3c      	ldr	r2, [pc, #240]	; (8008700 <TIM_Base_SetConfig+0x11c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d007      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a3b      	ldr	r2, [pc, #236]	; (8008704 <TIM_Base_SetConfig+0x120>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d003      	beq.n	8008624 <TIM_Base_SetConfig+0x40>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a3a      	ldr	r2, [pc, #232]	; (8008708 <TIM_Base_SetConfig+0x124>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d108      	bne.n	8008636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	4313      	orrs	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a2f      	ldr	r2, [pc, #188]	; (80086f8 <TIM_Base_SetConfig+0x114>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d02b      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008644:	d027      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a2c      	ldr	r2, [pc, #176]	; (80086fc <TIM_Base_SetConfig+0x118>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d023      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a2b      	ldr	r2, [pc, #172]	; (8008700 <TIM_Base_SetConfig+0x11c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d01f      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a2a      	ldr	r2, [pc, #168]	; (8008704 <TIM_Base_SetConfig+0x120>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d01b      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a29      	ldr	r2, [pc, #164]	; (8008708 <TIM_Base_SetConfig+0x124>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d017      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a28      	ldr	r2, [pc, #160]	; (800870c <TIM_Base_SetConfig+0x128>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d013      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a27      	ldr	r2, [pc, #156]	; (8008710 <TIM_Base_SetConfig+0x12c>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d00f      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a26      	ldr	r2, [pc, #152]	; (8008714 <TIM_Base_SetConfig+0x130>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d00b      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a25      	ldr	r2, [pc, #148]	; (8008718 <TIM_Base_SetConfig+0x134>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d007      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a24      	ldr	r2, [pc, #144]	; (800871c <TIM_Base_SetConfig+0x138>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d003      	beq.n	8008696 <TIM_Base_SetConfig+0xb2>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a23      	ldr	r2, [pc, #140]	; (8008720 <TIM_Base_SetConfig+0x13c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d108      	bne.n	80086a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800869c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a0a      	ldr	r2, [pc, #40]	; (80086f8 <TIM_Base_SetConfig+0x114>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d003      	beq.n	80086dc <TIM_Base_SetConfig+0xf8>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a0c      	ldr	r2, [pc, #48]	; (8008708 <TIM_Base_SetConfig+0x124>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d103      	bne.n	80086e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	691a      	ldr	r2, [r3, #16]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	615a      	str	r2, [r3, #20]
}
 80086ea:	bf00      	nop
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	40010000 	.word	0x40010000
 80086fc:	40000400 	.word	0x40000400
 8008700:	40000800 	.word	0x40000800
 8008704:	40000c00 	.word	0x40000c00
 8008708:	40010400 	.word	0x40010400
 800870c:	40014000 	.word	0x40014000
 8008710:	40014400 	.word	0x40014400
 8008714:	40014800 	.word	0x40014800
 8008718:	40001800 	.word	0x40001800
 800871c:	40001c00 	.word	0x40001c00
 8008720:	40002000 	.word	0x40002000

08008724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	f023 0201 	bic.w	r2, r3, #1
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800874e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	4313      	orrs	r3, r2
 8008758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f023 030a 	bic.w	r3, r3, #10
 8008760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	4313      	orrs	r3, r2
 8008768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	621a      	str	r2, [r3, #32]
}
 8008776:	bf00      	nop
 8008778:	371c      	adds	r7, #28
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008782:	b480      	push	{r7}
 8008784:	b087      	sub	sp, #28
 8008786:	af00      	add	r7, sp, #0
 8008788:	60f8      	str	r0, [r7, #12]
 800878a:	60b9      	str	r1, [r7, #8]
 800878c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	f023 0210 	bic.w	r2, r3, #16
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a1b      	ldr	r3, [r3, #32]
 80087a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	031b      	lsls	r3, r3, #12
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	011b      	lsls	r3, r3, #4
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	621a      	str	r2, [r3, #32]
}
 80087d6:	bf00      	nop
 80087d8:	371c      	adds	r7, #28
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b085      	sub	sp, #20
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4313      	orrs	r3, r2
 8008800:	f043 0307 	orr.w	r3, r3, #7
 8008804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	609a      	str	r2, [r3, #8]
}
 800880c:	bf00      	nop
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
 8008824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	021a      	lsls	r2, r3, #8
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	431a      	orrs	r2, r3
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	4313      	orrs	r3, r2
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	4313      	orrs	r3, r2
 8008844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	609a      	str	r2, [r3, #8]
}
 800884c:	bf00      	nop
 800884e:	371c      	adds	r7, #28
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008868:	2b01      	cmp	r3, #1
 800886a:	d101      	bne.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800886c:	2302      	movs	r3, #2
 800886e:	e05a      	b.n	8008926 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	4313      	orrs	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a21      	ldr	r2, [pc, #132]	; (8008934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d022      	beq.n	80088fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088bc:	d01d      	beq.n	80088fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a1d      	ldr	r2, [pc, #116]	; (8008938 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d018      	beq.n	80088fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1b      	ldr	r2, [pc, #108]	; (800893c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d013      	beq.n	80088fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a1a      	ldr	r2, [pc, #104]	; (8008940 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d00e      	beq.n	80088fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a18      	ldr	r2, [pc, #96]	; (8008944 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d009      	beq.n	80088fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a17      	ldr	r2, [pc, #92]	; (8008948 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d004      	beq.n	80088fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a15      	ldr	r2, [pc, #84]	; (800894c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d10c      	bne.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	4313      	orrs	r3, r2
 800890a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	40010000 	.word	0x40010000
 8008938:	40000400 	.word	0x40000400
 800893c:	40000800 	.word	0x40000800
 8008940:	40000c00 	.word	0x40000c00
 8008944:	40010400 	.word	0x40010400
 8008948:	40014000 	.word	0x40014000
 800894c:	40001800 	.word	0x40001800

08008950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e03f      	b.n	80089e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d106      	bne.n	800897c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7fa fcb6 	bl	80032e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2224      	movs	r2, #36	; 0x24
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 f865 	bl	8009a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	691a      	ldr	r2, [r3, #16]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	695a      	ldr	r2, [r3, #20]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68da      	ldr	r2, [r3, #12]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2220      	movs	r2, #32
 80089dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b08a      	sub	sp, #40	; 0x28
 80089ee:	af02      	add	r7, sp, #8
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	60b9      	str	r1, [r7, #8]
 80089f4:	603b      	str	r3, [r7, #0]
 80089f6:	4613      	mov	r3, r2
 80089f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	d17c      	bne.n	8008b04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <HAL_UART_Transmit+0x2c>
 8008a10:	88fb      	ldrh	r3, [r7, #6]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e075      	b.n	8008b06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d101      	bne.n	8008a28 <HAL_UART_Transmit+0x3e>
 8008a24:	2302      	movs	r3, #2
 8008a26:	e06e      	b.n	8008b06 <HAL_UART_Transmit+0x11c>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2221      	movs	r2, #33	; 0x21
 8008a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a3e:	f7fd f8f3 	bl	8005c28 <HAL_GetTick>
 8008a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	88fa      	ldrh	r2, [r7, #6]
 8008a48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	88fa      	ldrh	r2, [r7, #6]
 8008a4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a58:	d108      	bne.n	8008a6c <HAL_UART_Transmit+0x82>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d104      	bne.n	8008a6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	61bb      	str	r3, [r7, #24]
 8008a6a:	e003      	b.n	8008a74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a70:	2300      	movs	r3, #0
 8008a72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008a7c:	e02a      	b.n	8008ad4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	2200      	movs	r2, #0
 8008a86:	2180      	movs	r1, #128	; 0x80
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 fd05 	bl	8009498 <UART_WaitOnFlagUntilTimeout>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008a94:	2303      	movs	r3, #3
 8008a96:	e036      	b.n	8008b06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10b      	bne.n	8008ab6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	3302      	adds	r3, #2
 8008ab2:	61bb      	str	r3, [r7, #24]
 8008ab4:	e007      	b.n	8008ac6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	781a      	ldrb	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	3b01      	subs	r3, #1
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1cf      	bne.n	8008a7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2140      	movs	r1, #64	; 0x40
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 fcd5 	bl	8009498 <UART_WaitOnFlagUntilTimeout>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e006      	b.n	8008b06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2220      	movs	r2, #32
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	e000      	b.n	8008b06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008b04:	2302      	movs	r3, #2
  }
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3720      	adds	r7, #32
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b08c      	sub	sp, #48	; 0x30
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b20      	cmp	r3, #32
 8008b26:	d152      	bne.n	8008bce <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008b2e:	88fb      	ldrh	r3, [r7, #6]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e04b      	b.n	8008bd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d101      	bne.n	8008b46 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008b42:	2302      	movs	r3, #2
 8008b44:	e044      	b.n	8008bd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2201      	movs	r2, #1
 8008b52:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008b54:	88fb      	ldrh	r3, [r7, #6]
 8008b56:	461a      	mov	r2, r3
 8008b58:	68b9      	ldr	r1, [r7, #8]
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f000 fd0a 	bl	8009574 <UART_Start_Receive_DMA>
 8008b60:	4603      	mov	r3, r0
 8008b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008b66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d12c      	bne.n	8008bc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d125      	bne.n	8008bc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b76:	2300      	movs	r3, #0
 8008b78:	613b      	str	r3, [r7, #16]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	613b      	str	r3, [r7, #16]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	613b      	str	r3, [r7, #16]
 8008b8a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	330c      	adds	r3, #12
 8008b92:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	e853 3f00 	ldrex	r3, [r3]
 8008b9a:	617b      	str	r3, [r7, #20]
   return(result);
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	f043 0310 	orr.w	r3, r3, #16
 8008ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	330c      	adds	r3, #12
 8008baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bac:	627a      	str	r2, [r7, #36]	; 0x24
 8008bae:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb0:	6a39      	ldr	r1, [r7, #32]
 8008bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb4:	e841 2300 	strex	r3, r2, [r1]
 8008bb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1e5      	bne.n	8008b8c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008bc0:	e002      	b.n	8008bc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bcc:	e000      	b.n	8008bd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008bce:	2302      	movs	r3, #2
  }
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3730      	adds	r7, #48	; 0x30
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b09a      	sub	sp, #104	; 0x68
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	330c      	adds	r3, #12
 8008be6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bea:	e853 3f00 	ldrex	r3, [r3]
 8008bee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bf6:	667b      	str	r3, [r7, #100]	; 0x64
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	330c      	adds	r3, #12
 8008bfe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c00:	657a      	str	r2, [r7, #84]	; 0x54
 8008c02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c08:	e841 2300 	strex	r3, r2, [r1]
 8008c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e5      	bne.n	8008be0 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3314      	adds	r3, #20
 8008c1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c26:	f023 0301 	bic.w	r3, r3, #1
 8008c2a:	663b      	str	r3, [r7, #96]	; 0x60
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	3314      	adds	r3, #20
 8008c32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c34:	643a      	str	r2, [r7, #64]	; 0x40
 8008c36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e5      	bne.n	8008c14 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d119      	bne.n	8008c84 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	330c      	adds	r3, #12
 8008c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	e853 3f00 	ldrex	r3, [r3]
 8008c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	f023 0310 	bic.w	r3, r3, #16
 8008c66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	330c      	adds	r3, #12
 8008c6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c78:	e841 2300 	strex	r3, r2, [r1]
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e5      	bne.n	8008c50 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8e:	2b40      	cmp	r3, #64	; 0x40
 8008c90:	d13f      	bne.n	8008d12 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3314      	adds	r3, #20
 8008c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ca8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3314      	adds	r3, #20
 8008cb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cb2:	61ba      	str	r2, [r7, #24]
 8008cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb6:	6979      	ldr	r1, [r7, #20]
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e5      	bne.n	8008c92 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d013      	beq.n	8008cf6 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd2:	4a19      	ldr	r2, [pc, #100]	; (8008d38 <HAL_UART_AbortReceive_IT+0x160>)
 8008cd4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fd fa76 	bl	80061cc <HAL_DMA_Abort_IT>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d022      	beq.n	8008d2c <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	4798      	blx	r3
 8008cf4:	e01a      	b.n	8008d2c <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2220      	movs	r2, #32
 8008d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fac2 	bl	8009294 <HAL_UART_AbortReceiveCpltCallback>
 8008d10:	e00c      	b.n	8008d2c <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2220      	movs	r2, #32
 8008d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fab4 	bl	8009294 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3768      	adds	r7, #104	; 0x68
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	080097ef 	.word	0x080097ef

08008d3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b0ba      	sub	sp, #232	; 0xe8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d72:	f003 030f 	and.w	r3, r3, #15
 8008d76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10f      	bne.n	8008da2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d009      	beq.n	8008da2 <HAL_UART_IRQHandler+0x66>
 8008d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d92:	f003 0320 	and.w	r3, r3, #32
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fda7 	bl	80098ee <UART_Receive_IT>
      return;
 8008da0:	e256      	b.n	8009250 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 80de 	beq.w	8008f68 <HAL_UART_IRQHandler+0x22c>
 8008dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d106      	bne.n	8008dc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 80d1 	beq.w	8008f68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00b      	beq.n	8008dea <HAL_UART_IRQHandler+0xae>
 8008dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d005      	beq.n	8008dea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	f043 0201 	orr.w	r2, r3, #1
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dee:	f003 0304 	and.w	r3, r3, #4
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00b      	beq.n	8008e0e <HAL_UART_IRQHandler+0xd2>
 8008df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d005      	beq.n	8008e0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	f043 0202 	orr.w	r2, r3, #2
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e12:	f003 0302 	and.w	r3, r3, #2
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00b      	beq.n	8008e32 <HAL_UART_IRQHandler+0xf6>
 8008e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d005      	beq.n	8008e32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2a:	f043 0204 	orr.w	r2, r3, #4
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e36:	f003 0308 	and.w	r3, r3, #8
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d011      	beq.n	8008e62 <HAL_UART_IRQHandler+0x126>
 8008e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e42:	f003 0320 	and.w	r3, r3, #32
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d105      	bne.n	8008e56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	f043 0208 	orr.w	r2, r3, #8
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 81ed 	beq.w	8009246 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d008      	beq.n	8008e8a <HAL_UART_IRQHandler+0x14e>
 8008e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e7c:	f003 0320 	and.w	r3, r3, #32
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fd32 	bl	80098ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e94:	2b40      	cmp	r3, #64	; 0x40
 8008e96:	bf0c      	ite	eq
 8008e98:	2301      	moveq	r3, #1
 8008e9a:	2300      	movne	r3, #0
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea6:	f003 0308 	and.w	r3, r3, #8
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d103      	bne.n	8008eb6 <HAL_UART_IRQHandler+0x17a>
 8008eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d04f      	beq.n	8008f56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fc22 	bl	8009700 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec6:	2b40      	cmp	r3, #64	; 0x40
 8008ec8:	d141      	bne.n	8008f4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3314      	adds	r3, #20
 8008ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ed8:	e853 3f00 	ldrex	r3, [r3]
 8008edc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3314      	adds	r3, #20
 8008ef2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ef6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1d9      	bne.n	8008eca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d013      	beq.n	8008f46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f22:	4a7d      	ldr	r2, [pc, #500]	; (8009118 <HAL_UART_IRQHandler+0x3dc>)
 8008f24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fd f94e 	bl	80061cc <HAL_DMA_Abort_IT>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d016      	beq.n	8008f64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f40:	4610      	mov	r0, r2
 8008f42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f44:	e00e      	b.n	8008f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7f8 fa16 	bl	8001378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f4c:	e00a      	b.n	8008f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7f8 fa12 	bl	8001378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f54:	e006      	b.n	8008f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7f8 fa0e 	bl	8001378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008f62:	e170      	b.n	8009246 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f64:	bf00      	nop
    return;
 8008f66:	e16e      	b.n	8009246 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	f040 814a 	bne.w	8009206 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f76:	f003 0310 	and.w	r3, r3, #16
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 8143 	beq.w	8009206 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f84:	f003 0310 	and.w	r3, r3, #16
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 813c 	beq.w	8009206 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60bb      	str	r3, [r7, #8]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	60bb      	str	r3, [r7, #8]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	60bb      	str	r3, [r7, #8]
 8008fa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fae:	2b40      	cmp	r3, #64	; 0x40
 8008fb0:	f040 80b4 	bne.w	800911c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 8140 	beq.w	800924a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	f080 8139 	bcs.w	800924a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fea:	f000 8088 	beq.w	80090fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	330c      	adds	r3, #12
 8008ff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800900c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	330c      	adds	r3, #12
 8009016:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800901a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800901e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009026:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009032:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1d9      	bne.n	8008fee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3314      	adds	r3, #20
 8009040:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009044:	e853 3f00 	ldrex	r3, [r3]
 8009048:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800904a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800904c:	f023 0301 	bic.w	r3, r3, #1
 8009050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3314      	adds	r3, #20
 800905a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800905e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009062:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009064:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009066:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e1      	bne.n	800903a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3314      	adds	r3, #20
 800907c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800908c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3314      	adds	r3, #20
 8009096:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800909a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800909c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80090a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80090a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e3      	bne.n	8009076 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2220      	movs	r2, #32
 80090b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	330c      	adds	r3, #12
 80090c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c6:	e853 3f00 	ldrex	r3, [r3]
 80090ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ce:	f023 0310 	bic.w	r3, r3, #16
 80090d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	330c      	adds	r3, #12
 80090dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80090e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80090e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e3      	bne.n	80090bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fc fff7 	bl	80060ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009106:	b29b      	uxth	r3, r3
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	b29b      	uxth	r3, r3
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7f8 f956 	bl	80013c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009114:	e099      	b.n	800924a <HAL_UART_IRQHandler+0x50e>
 8009116:	bf00      	nop
 8009118:	080097c7 	.word	0x080097c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009124:	b29b      	uxth	r3, r3
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009130:	b29b      	uxth	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 808b 	beq.w	800924e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 8086 	beq.w	800924e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	330c      	adds	r3, #12
 8009148:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009158:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	330c      	adds	r3, #12
 8009162:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009166:	647a      	str	r2, [r7, #68]	; 0x44
 8009168:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800916c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e3      	bne.n	8009142 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3314      	adds	r3, #20
 8009180:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	e853 3f00 	ldrex	r3, [r3]
 8009188:	623b      	str	r3, [r7, #32]
   return(result);
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	f023 0301 	bic.w	r3, r3, #1
 8009190:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	3314      	adds	r3, #20
 800919a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800919e:	633a      	str	r2, [r7, #48]	; 0x30
 80091a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091a6:	e841 2300 	strex	r3, r2, [r1]
 80091aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1e3      	bne.n	800917a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2220      	movs	r2, #32
 80091b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	330c      	adds	r3, #12
 80091c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 0310 	bic.w	r3, r3, #16
 80091d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	330c      	adds	r3, #12
 80091e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80091e4:	61fa      	str	r2, [r7, #28]
 80091e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e8:	69b9      	ldr	r1, [r7, #24]
 80091ea:	69fa      	ldr	r2, [r7, #28]
 80091ec:	e841 2300 	strex	r3, r2, [r1]
 80091f0:	617b      	str	r3, [r7, #20]
   return(result);
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e3      	bne.n	80091c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7f8 f8de 	bl	80013c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009204:	e023      	b.n	800924e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800920a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920e:	2b00      	cmp	r3, #0
 8009210:	d009      	beq.n	8009226 <HAL_UART_IRQHandler+0x4ea>
 8009212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 fafd 	bl	800981e <UART_Transmit_IT>
    return;
 8009224:	e014      	b.n	8009250 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800922a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00e      	beq.n	8009250 <HAL_UART_IRQHandler+0x514>
 8009232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923a:	2b00      	cmp	r3, #0
 800923c:	d008      	beq.n	8009250 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fb3d 	bl	80098be <UART_EndTransmit_IT>
    return;
 8009244:	e004      	b.n	8009250 <HAL_UART_IRQHandler+0x514>
    return;
 8009246:	bf00      	nop
 8009248:	e002      	b.n	8009250 <HAL_UART_IRQHandler+0x514>
      return;
 800924a:	bf00      	nop
 800924c:	e000      	b.n	8009250 <HAL_UART_IRQHandler+0x514>
      return;
 800924e:	bf00      	nop
  }
}
 8009250:	37e8      	adds	r7, #232	; 0xe8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop

08009258 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b09c      	sub	sp, #112	; 0x70
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d172      	bne.n	80093aa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80092c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092c6:	2200      	movs	r2, #0
 80092c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	330c      	adds	r3, #12
 80092d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80092e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	330c      	adds	r3, #12
 80092e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80092ec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e5      	bne.n	80092ca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3314      	adds	r3, #20
 8009304:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800930e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009310:	f023 0301 	bic.w	r3, r3, #1
 8009314:	667b      	str	r3, [r7, #100]	; 0x64
 8009316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3314      	adds	r3, #20
 800931c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800931e:	647a      	str	r2, [r7, #68]	; 0x44
 8009320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800932c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e5      	bne.n	80092fe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3314      	adds	r3, #20
 8009338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	e853 3f00 	ldrex	r3, [r3]
 8009340:	623b      	str	r3, [r7, #32]
   return(result);
 8009342:	6a3b      	ldr	r3, [r7, #32]
 8009344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009348:	663b      	str	r3, [r7, #96]	; 0x60
 800934a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3314      	adds	r3, #20
 8009350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009352:	633a      	str	r2, [r7, #48]	; 0x30
 8009354:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e5      	bne.n	8009332 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009368:	2220      	movs	r2, #32
 800936a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800936e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009372:	2b01      	cmp	r3, #1
 8009374:	d119      	bne.n	80093aa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	330c      	adds	r3, #12
 800937c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	e853 3f00 	ldrex	r3, [r3]
 8009384:	60fb      	str	r3, [r7, #12]
   return(result);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f023 0310 	bic.w	r3, r3, #16
 800938c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800938e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	330c      	adds	r3, #12
 8009394:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009396:	61fa      	str	r2, [r7, #28]
 8009398:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939a:	69b9      	ldr	r1, [r7, #24]
 800939c:	69fa      	ldr	r2, [r7, #28]
 800939e:	e841 2300 	strex	r3, r2, [r1]
 80093a2:	617b      	str	r3, [r7, #20]
   return(result);
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1e5      	bne.n	8009376 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d106      	bne.n	80093c0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093b6:	4619      	mov	r1, r3
 80093b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093ba:	f7f8 f801 	bl	80013c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093be:	e002      	b.n	80093c6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80093c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093c2:	f7ff ff53 	bl	800926c <HAL_UART_RxCpltCallback>
}
 80093c6:	bf00      	nop
 80093c8:	3770      	adds	r7, #112	; 0x70
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b084      	sub	sp, #16
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093da:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d108      	bne.n	80093f6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093e8:	085b      	lsrs	r3, r3, #1
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	4619      	mov	r1, r3
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f7f7 ffe6 	bl	80013c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093f4:	e002      	b.n	80093fc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f7ff ff42 	bl	8009280 <HAL_UART_RxHalfCpltCallback>
}
 80093fc:	bf00      	nop
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800940c:	2300      	movs	r3, #0
 800940e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009414:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009420:	2b80      	cmp	r3, #128	; 0x80
 8009422:	bf0c      	ite	eq
 8009424:	2301      	moveq	r3, #1
 8009426:	2300      	movne	r3, #0
 8009428:	b2db      	uxtb	r3, r3
 800942a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b21      	cmp	r3, #33	; 0x21
 8009436:	d108      	bne.n	800944a <UART_DMAError+0x46>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d005      	beq.n	800944a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2200      	movs	r2, #0
 8009442:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009444:	68b8      	ldr	r0, [r7, #8]
 8009446:	f000 f933 	bl	80096b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	695b      	ldr	r3, [r3, #20]
 8009450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009454:	2b40      	cmp	r3, #64	; 0x40
 8009456:	bf0c      	ite	eq
 8009458:	2301      	moveq	r3, #1
 800945a:	2300      	movne	r3, #0
 800945c:	b2db      	uxtb	r3, r3
 800945e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b22      	cmp	r3, #34	; 0x22
 800946a:	d108      	bne.n	800947e <UART_DMAError+0x7a>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d005      	beq.n	800947e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2200      	movs	r2, #0
 8009476:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009478:	68b8      	ldr	r0, [r7, #8]
 800947a:	f000 f941 	bl	8009700 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009482:	f043 0210 	orr.w	r2, r3, #16
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800948a:	68b8      	ldr	r0, [r7, #8]
 800948c:	f7f7 ff74 	bl	8001378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009490:	bf00      	nop
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b090      	sub	sp, #64	; 0x40
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	4613      	mov	r3, r2
 80094a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094a8:	e050      	b.n	800954c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b0:	d04c      	beq.n	800954c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80094b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d007      	beq.n	80094c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80094b8:	f7fc fbb6 	bl	8005c28 <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d241      	bcs.n	800954c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	330c      	adds	r3, #12
 80094ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d2:	e853 3f00 	ldrex	r3, [r3]
 80094d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	330c      	adds	r3, #12
 80094e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094e8:	637a      	str	r2, [r7, #52]	; 0x34
 80094ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e5      	bne.n	80094c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3314      	adds	r3, #20
 8009502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	e853 3f00 	ldrex	r3, [r3]
 800950a:	613b      	str	r3, [r7, #16]
   return(result);
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	f023 0301 	bic.w	r3, r3, #1
 8009512:	63bb      	str	r3, [r7, #56]	; 0x38
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3314      	adds	r3, #20
 800951a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800951c:	623a      	str	r2, [r7, #32]
 800951e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009520:	69f9      	ldr	r1, [r7, #28]
 8009522:	6a3a      	ldr	r2, [r7, #32]
 8009524:	e841 2300 	strex	r3, r2, [r1]
 8009528:	61bb      	str	r3, [r7, #24]
   return(result);
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e5      	bne.n	80094fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2220      	movs	r2, #32
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2220      	movs	r2, #32
 800953c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e00f      	b.n	800956c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	4013      	ands	r3, r2
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	429a      	cmp	r2, r3
 800955a:	bf0c      	ite	eq
 800955c:	2301      	moveq	r3, #1
 800955e:	2300      	movne	r3, #0
 8009560:	b2db      	uxtb	r3, r3
 8009562:	461a      	mov	r2, r3
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	429a      	cmp	r2, r3
 8009568:	d09f      	beq.n	80094aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3740      	adds	r7, #64	; 0x40
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b098      	sub	sp, #96	; 0x60
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	4613      	mov	r3, r2
 8009580:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	88fa      	ldrh	r2, [r7, #6]
 800958c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2222      	movs	r2, #34	; 0x22
 8009598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a0:	4a40      	ldr	r2, [pc, #256]	; (80096a4 <UART_Start_Receive_DMA+0x130>)
 80095a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a8:	4a3f      	ldr	r2, [pc, #252]	; (80096a8 <UART_Start_Receive_DMA+0x134>)
 80095aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b0:	4a3e      	ldr	r2, [pc, #248]	; (80096ac <UART_Start_Receive_DMA+0x138>)
 80095b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b8:	2200      	movs	r2, #0
 80095ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80095bc:	f107 0308 	add.w	r3, r7, #8
 80095c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3304      	adds	r3, #4
 80095cc:	4619      	mov	r1, r3
 80095ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	f7fc fd32 	bl	800603c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80095d8:	2300      	movs	r3, #0
 80095da:	613b      	str	r3, [r7, #16]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	613b      	str	r3, [r7, #16]
 80095ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d019      	beq.n	8009632 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	330c      	adds	r3, #12
 8009604:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800960e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009614:	65bb      	str	r3, [r7, #88]	; 0x58
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	330c      	adds	r3, #12
 800961c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800961e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009620:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800962c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e5      	bne.n	80095fe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3314      	adds	r3, #20
 8009638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963c:	e853 3f00 	ldrex	r3, [r3]
 8009640:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009644:	f043 0301 	orr.w	r3, r3, #1
 8009648:	657b      	str	r3, [r7, #84]	; 0x54
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	3314      	adds	r3, #20
 8009650:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009652:	63ba      	str	r2, [r7, #56]	; 0x38
 8009654:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009656:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800965a:	e841 2300 	strex	r3, r2, [r1]
 800965e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1e5      	bne.n	8009632 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3314      	adds	r3, #20
 800966c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	e853 3f00 	ldrex	r3, [r3]
 8009674:	617b      	str	r3, [r7, #20]
   return(result);
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800967c:	653b      	str	r3, [r7, #80]	; 0x50
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3314      	adds	r3, #20
 8009684:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009686:	627a      	str	r2, [r7, #36]	; 0x24
 8009688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968a:	6a39      	ldr	r1, [r7, #32]
 800968c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800968e:	e841 2300 	strex	r3, r2, [r1]
 8009692:	61fb      	str	r3, [r7, #28]
   return(result);
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1e5      	bne.n	8009666 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3760      	adds	r7, #96	; 0x60
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	080092a9 	.word	0x080092a9
 80096a8:	080093cf 	.word	0x080093cf
 80096ac:	08009405 	.word	0x08009405

080096b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b089      	sub	sp, #36	; 0x24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	330c      	adds	r3, #12
 80096be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80096ce:	61fb      	str	r3, [r7, #28]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	330c      	adds	r3, #12
 80096d6:	69fa      	ldr	r2, [r7, #28]
 80096d8:	61ba      	str	r2, [r7, #24]
 80096da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6979      	ldr	r1, [r7, #20]
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	613b      	str	r3, [r7, #16]
   return(result);
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e5      	bne.n	80096b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2220      	movs	r2, #32
 80096f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80096f4:	bf00      	nop
 80096f6:	3724      	adds	r7, #36	; 0x24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009700:	b480      	push	{r7}
 8009702:	b095      	sub	sp, #84	; 0x54
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	330c      	adds	r3, #12
 800970e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009712:	e853 3f00 	ldrex	r3, [r3]
 8009716:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800971e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	330c      	adds	r3, #12
 8009726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009728:	643a      	str	r2, [r7, #64]	; 0x40
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800972e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009730:	e841 2300 	strex	r3, r2, [r1]
 8009734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1e5      	bne.n	8009708 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3314      	adds	r3, #20
 8009742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	e853 3f00 	ldrex	r3, [r3]
 800974a:	61fb      	str	r3, [r7, #28]
   return(result);
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	f023 0301 	bic.w	r3, r3, #1
 8009752:	64bb      	str	r3, [r7, #72]	; 0x48
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3314      	adds	r3, #20
 800975a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800975c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800975e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e5      	bne.n	800973c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009774:	2b01      	cmp	r3, #1
 8009776:	d119      	bne.n	80097ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	330c      	adds	r3, #12
 800977e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	e853 3f00 	ldrex	r3, [r3]
 8009786:	60bb      	str	r3, [r7, #8]
   return(result);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f023 0310 	bic.w	r3, r3, #16
 800978e:	647b      	str	r3, [r7, #68]	; 0x44
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	330c      	adds	r3, #12
 8009796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009798:	61ba      	str	r2, [r7, #24]
 800979a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979c:	6979      	ldr	r1, [r7, #20]
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	e841 2300 	strex	r3, r2, [r1]
 80097a4:	613b      	str	r3, [r7, #16]
   return(result);
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1e5      	bne.n	8009778 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2220      	movs	r2, #32
 80097b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80097ba:	bf00      	nop
 80097bc:	3754      	adds	r7, #84	; 0x54
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f7f7 fdc9 	bl	8001378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097e6:	bf00      	nop
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fa:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2220      	movs	r2, #32
 8009806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f7ff fd3f 	bl	8009294 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009816:	bf00      	nop
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800981e:	b480      	push	{r7}
 8009820:	b085      	sub	sp, #20
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b21      	cmp	r3, #33	; 0x21
 8009830:	d13e      	bne.n	80098b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800983a:	d114      	bne.n	8009866 <UART_Transmit_IT+0x48>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d110      	bne.n	8009866 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009858:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	1c9a      	adds	r2, r3, #2
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	621a      	str	r2, [r3, #32]
 8009864:	e008      	b.n	8009878 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	1c59      	adds	r1, r3, #1
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6211      	str	r1, [r2, #32]
 8009870:	781a      	ldrb	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800987c:	b29b      	uxth	r3, r3
 800987e:	3b01      	subs	r3, #1
 8009880:	b29b      	uxth	r3, r3
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	4619      	mov	r1, r3
 8009886:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10f      	bne.n	80098ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68da      	ldr	r2, [r3, #12]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800989a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68da      	ldr	r2, [r3, #12]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	e000      	b.n	80098b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80098b0:	2302      	movs	r3, #2
  }
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b082      	sub	sp, #8
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2220      	movs	r2, #32
 80098da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff fcba 	bl	8009258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b08c      	sub	sp, #48	; 0x30
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b22      	cmp	r3, #34	; 0x22
 8009900:	f040 80ab 	bne.w	8009a5a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800990c:	d117      	bne.n	800993e <UART_Receive_IT+0x50>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d113      	bne.n	800993e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009916:	2300      	movs	r3, #0
 8009918:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	b29b      	uxth	r3, r3
 8009928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992c:	b29a      	uxth	r2, r3
 800992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009930:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009936:	1c9a      	adds	r2, r3, #2
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	629a      	str	r2, [r3, #40]	; 0x28
 800993c:	e026      	b.n	800998c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009942:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009944:	2300      	movs	r3, #0
 8009946:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009950:	d007      	beq.n	8009962 <UART_Receive_IT+0x74>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <UART_Receive_IT+0x82>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d106      	bne.n	8009970 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	b2da      	uxtb	r2, r3
 800996a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996c:	701a      	strb	r2, [r3, #0]
 800996e:	e008      	b.n	8009982 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	b2db      	uxtb	r3, r3
 8009978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800997c:	b2da      	uxtb	r2, r3
 800997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009980:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009986:	1c5a      	adds	r2, r3, #1
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009990:	b29b      	uxth	r3, r3
 8009992:	3b01      	subs	r3, #1
 8009994:	b29b      	uxth	r3, r3
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	4619      	mov	r1, r3
 800999a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800999c:	2b00      	cmp	r3, #0
 800999e:	d15a      	bne.n	8009a56 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0220 	bic.w	r2, r2, #32
 80099ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68da      	ldr	r2, [r3, #12]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	695a      	ldr	r2, [r3, #20]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f022 0201 	bic.w	r2, r2, #1
 80099ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d135      	bne.n	8009a4c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	330c      	adds	r3, #12
 80099ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	613b      	str	r3, [r7, #16]
   return(result);
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f023 0310 	bic.w	r3, r3, #16
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	330c      	adds	r3, #12
 8009a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a06:	623a      	str	r2, [r7, #32]
 8009a08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0a:	69f9      	ldr	r1, [r7, #28]
 8009a0c:	6a3a      	ldr	r2, [r7, #32]
 8009a0e:	e841 2300 	strex	r3, r2, [r1]
 8009a12:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1e5      	bne.n	80099e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0310 	and.w	r3, r3, #16
 8009a24:	2b10      	cmp	r3, #16
 8009a26:	d10a      	bne.n	8009a3e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a28:	2300      	movs	r3, #0
 8009a2a:	60fb      	str	r3, [r7, #12]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7f7 fcbb 	bl	80013c0 <HAL_UARTEx_RxEventCallback>
 8009a4a:	e002      	b.n	8009a52 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7ff fc0d 	bl	800926c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	e002      	b.n	8009a5c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	e000      	b.n	8009a5c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009a5a:	2302      	movs	r3, #2
  }
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3730      	adds	r7, #48	; 0x30
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a68:	b0c0      	sub	sp, #256	; 0x100
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a80:	68d9      	ldr	r1, [r3, #12]
 8009a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	ea40 0301 	orr.w	r3, r0, r1
 8009a8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009abc:	f021 010c 	bic.w	r1, r1, #12
 8009ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009aca:	430b      	orrs	r3, r1
 8009acc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ade:	6999      	ldr	r1, [r3, #24]
 8009ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	ea40 0301 	orr.w	r3, r0, r1
 8009aea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	4b8f      	ldr	r3, [pc, #572]	; (8009d30 <UART_SetConfig+0x2cc>)
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d005      	beq.n	8009b04 <UART_SetConfig+0xa0>
 8009af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	4b8d      	ldr	r3, [pc, #564]	; (8009d34 <UART_SetConfig+0x2d0>)
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d104      	bne.n	8009b0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b04:	f7fd fe32 	bl	800776c <HAL_RCC_GetPCLK2Freq>
 8009b08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009b0c:	e003      	b.n	8009b16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b0e:	f7fd fe19 	bl	8007744 <HAL_RCC_GetPCLK1Freq>
 8009b12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b1a:	69db      	ldr	r3, [r3, #28]
 8009b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b20:	f040 810c 	bne.w	8009d3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009b32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009b36:	4622      	mov	r2, r4
 8009b38:	462b      	mov	r3, r5
 8009b3a:	1891      	adds	r1, r2, r2
 8009b3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8009b3e:	415b      	adcs	r3, r3
 8009b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009b46:	4621      	mov	r1, r4
 8009b48:	eb12 0801 	adds.w	r8, r2, r1
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	eb43 0901 	adc.w	r9, r3, r1
 8009b52:	f04f 0200 	mov.w	r2, #0
 8009b56:	f04f 0300 	mov.w	r3, #0
 8009b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b66:	4690      	mov	r8, r2
 8009b68:	4699      	mov	r9, r3
 8009b6a:	4623      	mov	r3, r4
 8009b6c:	eb18 0303 	adds.w	r3, r8, r3
 8009b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b74:	462b      	mov	r3, r5
 8009b76:	eb49 0303 	adc.w	r3, r9, r3
 8009b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009b8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009b8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009b92:	460b      	mov	r3, r1
 8009b94:	18db      	adds	r3, r3, r3
 8009b96:	653b      	str	r3, [r7, #80]	; 0x50
 8009b98:	4613      	mov	r3, r2
 8009b9a:	eb42 0303 	adc.w	r3, r2, r3
 8009b9e:	657b      	str	r3, [r7, #84]	; 0x54
 8009ba0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009ba4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009ba8:	f7f7 f86e 	bl	8000c88 <__aeabi_uldivmod>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4b61      	ldr	r3, [pc, #388]	; (8009d38 <UART_SetConfig+0x2d4>)
 8009bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8009bb6:	095b      	lsrs	r3, r3, #5
 8009bb8:	011c      	lsls	r4, r3, #4
 8009bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009bc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009bc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009bcc:	4642      	mov	r2, r8
 8009bce:	464b      	mov	r3, r9
 8009bd0:	1891      	adds	r1, r2, r2
 8009bd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8009bd4:	415b      	adcs	r3, r3
 8009bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009bdc:	4641      	mov	r1, r8
 8009bde:	eb12 0a01 	adds.w	sl, r2, r1
 8009be2:	4649      	mov	r1, r9
 8009be4:	eb43 0b01 	adc.w	fp, r3, r1
 8009be8:	f04f 0200 	mov.w	r2, #0
 8009bec:	f04f 0300 	mov.w	r3, #0
 8009bf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009bf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009bf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009bfc:	4692      	mov	sl, r2
 8009bfe:	469b      	mov	fp, r3
 8009c00:	4643      	mov	r3, r8
 8009c02:	eb1a 0303 	adds.w	r3, sl, r3
 8009c06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c0a:	464b      	mov	r3, r9
 8009c0c:	eb4b 0303 	adc.w	r3, fp, r3
 8009c10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009c24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	18db      	adds	r3, r3, r3
 8009c2c:	643b      	str	r3, [r7, #64]	; 0x40
 8009c2e:	4613      	mov	r3, r2
 8009c30:	eb42 0303 	adc.w	r3, r2, r3
 8009c34:	647b      	str	r3, [r7, #68]	; 0x44
 8009c36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009c3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009c3e:	f7f7 f823 	bl	8000c88 <__aeabi_uldivmod>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4611      	mov	r1, r2
 8009c48:	4b3b      	ldr	r3, [pc, #236]	; (8009d38 <UART_SetConfig+0x2d4>)
 8009c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8009c4e:	095b      	lsrs	r3, r3, #5
 8009c50:	2264      	movs	r2, #100	; 0x64
 8009c52:	fb02 f303 	mul.w	r3, r2, r3
 8009c56:	1acb      	subs	r3, r1, r3
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009c5e:	4b36      	ldr	r3, [pc, #216]	; (8009d38 <UART_SetConfig+0x2d4>)
 8009c60:	fba3 2302 	umull	r2, r3, r3, r2
 8009c64:	095b      	lsrs	r3, r3, #5
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c6c:	441c      	add	r4, r3
 8009c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c72:	2200      	movs	r2, #0
 8009c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009c7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009c80:	4642      	mov	r2, r8
 8009c82:	464b      	mov	r3, r9
 8009c84:	1891      	adds	r1, r2, r2
 8009c86:	63b9      	str	r1, [r7, #56]	; 0x38
 8009c88:	415b      	adcs	r3, r3
 8009c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009c90:	4641      	mov	r1, r8
 8009c92:	1851      	adds	r1, r2, r1
 8009c94:	6339      	str	r1, [r7, #48]	; 0x30
 8009c96:	4649      	mov	r1, r9
 8009c98:	414b      	adcs	r3, r1
 8009c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c9c:	f04f 0200 	mov.w	r2, #0
 8009ca0:	f04f 0300 	mov.w	r3, #0
 8009ca4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009ca8:	4659      	mov	r1, fp
 8009caa:	00cb      	lsls	r3, r1, #3
 8009cac:	4651      	mov	r1, sl
 8009cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cb2:	4651      	mov	r1, sl
 8009cb4:	00ca      	lsls	r2, r1, #3
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4603      	mov	r3, r0
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	189b      	adds	r3, r3, r2
 8009cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009cc4:	464b      	mov	r3, r9
 8009cc6:	460a      	mov	r2, r1
 8009cc8:	eb42 0303 	adc.w	r3, r2, r3
 8009ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009cdc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009ce0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	18db      	adds	r3, r3, r3
 8009ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cea:	4613      	mov	r3, r2
 8009cec:	eb42 0303 	adc.w	r3, r2, r3
 8009cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009cfa:	f7f6 ffc5 	bl	8000c88 <__aeabi_uldivmod>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	4b0d      	ldr	r3, [pc, #52]	; (8009d38 <UART_SetConfig+0x2d4>)
 8009d04:	fba3 1302 	umull	r1, r3, r3, r2
 8009d08:	095b      	lsrs	r3, r3, #5
 8009d0a:	2164      	movs	r1, #100	; 0x64
 8009d0c:	fb01 f303 	mul.w	r3, r1, r3
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	00db      	lsls	r3, r3, #3
 8009d14:	3332      	adds	r3, #50	; 0x32
 8009d16:	4a08      	ldr	r2, [pc, #32]	; (8009d38 <UART_SetConfig+0x2d4>)
 8009d18:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1c:	095b      	lsrs	r3, r3, #5
 8009d1e:	f003 0207 	and.w	r2, r3, #7
 8009d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4422      	add	r2, r4
 8009d2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009d2c:	e105      	b.n	8009f3a <UART_SetConfig+0x4d6>
 8009d2e:	bf00      	nop
 8009d30:	40011000 	.word	0x40011000
 8009d34:	40011400 	.word	0x40011400
 8009d38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d40:	2200      	movs	r2, #0
 8009d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009d46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009d4e:	4642      	mov	r2, r8
 8009d50:	464b      	mov	r3, r9
 8009d52:	1891      	adds	r1, r2, r2
 8009d54:	6239      	str	r1, [r7, #32]
 8009d56:	415b      	adcs	r3, r3
 8009d58:	627b      	str	r3, [r7, #36]	; 0x24
 8009d5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d5e:	4641      	mov	r1, r8
 8009d60:	1854      	adds	r4, r2, r1
 8009d62:	4649      	mov	r1, r9
 8009d64:	eb43 0501 	adc.w	r5, r3, r1
 8009d68:	f04f 0200 	mov.w	r2, #0
 8009d6c:	f04f 0300 	mov.w	r3, #0
 8009d70:	00eb      	lsls	r3, r5, #3
 8009d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d76:	00e2      	lsls	r2, r4, #3
 8009d78:	4614      	mov	r4, r2
 8009d7a:	461d      	mov	r5, r3
 8009d7c:	4643      	mov	r3, r8
 8009d7e:	18e3      	adds	r3, r4, r3
 8009d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d84:	464b      	mov	r3, r9
 8009d86:	eb45 0303 	adc.w	r3, r5, r3
 8009d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009d9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009d9e:	f04f 0200 	mov.w	r2, #0
 8009da2:	f04f 0300 	mov.w	r3, #0
 8009da6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009daa:	4629      	mov	r1, r5
 8009dac:	008b      	lsls	r3, r1, #2
 8009dae:	4621      	mov	r1, r4
 8009db0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009db4:	4621      	mov	r1, r4
 8009db6:	008a      	lsls	r2, r1, #2
 8009db8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009dbc:	f7f6 ff64 	bl	8000c88 <__aeabi_uldivmod>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	4b60      	ldr	r3, [pc, #384]	; (8009f48 <UART_SetConfig+0x4e4>)
 8009dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8009dca:	095b      	lsrs	r3, r3, #5
 8009dcc:	011c      	lsls	r4, r3, #4
 8009dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009dd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ddc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009de0:	4642      	mov	r2, r8
 8009de2:	464b      	mov	r3, r9
 8009de4:	1891      	adds	r1, r2, r2
 8009de6:	61b9      	str	r1, [r7, #24]
 8009de8:	415b      	adcs	r3, r3
 8009dea:	61fb      	str	r3, [r7, #28]
 8009dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009df0:	4641      	mov	r1, r8
 8009df2:	1851      	adds	r1, r2, r1
 8009df4:	6139      	str	r1, [r7, #16]
 8009df6:	4649      	mov	r1, r9
 8009df8:	414b      	adcs	r3, r1
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	f04f 0200 	mov.w	r2, #0
 8009e00:	f04f 0300 	mov.w	r3, #0
 8009e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e08:	4659      	mov	r1, fp
 8009e0a:	00cb      	lsls	r3, r1, #3
 8009e0c:	4651      	mov	r1, sl
 8009e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e12:	4651      	mov	r1, sl
 8009e14:	00ca      	lsls	r2, r1, #3
 8009e16:	4610      	mov	r0, r2
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	189b      	adds	r3, r3, r2
 8009e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e24:	464b      	mov	r3, r9
 8009e26:	460a      	mov	r2, r1
 8009e28:	eb42 0303 	adc.w	r3, r2, r3
 8009e2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009e3c:	f04f 0200 	mov.w	r2, #0
 8009e40:	f04f 0300 	mov.w	r3, #0
 8009e44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009e48:	4649      	mov	r1, r9
 8009e4a:	008b      	lsls	r3, r1, #2
 8009e4c:	4641      	mov	r1, r8
 8009e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e52:	4641      	mov	r1, r8
 8009e54:	008a      	lsls	r2, r1, #2
 8009e56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009e5a:	f7f6 ff15 	bl	8000c88 <__aeabi_uldivmod>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	4b39      	ldr	r3, [pc, #228]	; (8009f48 <UART_SetConfig+0x4e4>)
 8009e64:	fba3 1302 	umull	r1, r3, r3, r2
 8009e68:	095b      	lsrs	r3, r3, #5
 8009e6a:	2164      	movs	r1, #100	; 0x64
 8009e6c:	fb01 f303 	mul.w	r3, r1, r3
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	011b      	lsls	r3, r3, #4
 8009e74:	3332      	adds	r3, #50	; 0x32
 8009e76:	4a34      	ldr	r2, [pc, #208]	; (8009f48 <UART_SetConfig+0x4e4>)
 8009e78:	fba2 2303 	umull	r2, r3, r2, r3
 8009e7c:	095b      	lsrs	r3, r3, #5
 8009e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e82:	441c      	add	r4, r3
 8009e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e88:	2200      	movs	r2, #0
 8009e8a:	673b      	str	r3, [r7, #112]	; 0x70
 8009e8c:	677a      	str	r2, [r7, #116]	; 0x74
 8009e8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009e92:	4642      	mov	r2, r8
 8009e94:	464b      	mov	r3, r9
 8009e96:	1891      	adds	r1, r2, r2
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	415b      	adcs	r3, r3
 8009e9c:	60fb      	str	r3, [r7, #12]
 8009e9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ea2:	4641      	mov	r1, r8
 8009ea4:	1851      	adds	r1, r2, r1
 8009ea6:	6039      	str	r1, [r7, #0]
 8009ea8:	4649      	mov	r1, r9
 8009eaa:	414b      	adcs	r3, r1
 8009eac:	607b      	str	r3, [r7, #4]
 8009eae:	f04f 0200 	mov.w	r2, #0
 8009eb2:	f04f 0300 	mov.w	r3, #0
 8009eb6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009eba:	4659      	mov	r1, fp
 8009ebc:	00cb      	lsls	r3, r1, #3
 8009ebe:	4651      	mov	r1, sl
 8009ec0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ec4:	4651      	mov	r1, sl
 8009ec6:	00ca      	lsls	r2, r1, #3
 8009ec8:	4610      	mov	r0, r2
 8009eca:	4619      	mov	r1, r3
 8009ecc:	4603      	mov	r3, r0
 8009ece:	4642      	mov	r2, r8
 8009ed0:	189b      	adds	r3, r3, r2
 8009ed2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ed4:	464b      	mov	r3, r9
 8009ed6:	460a      	mov	r2, r1
 8009ed8:	eb42 0303 	adc.w	r3, r2, r3
 8009edc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	663b      	str	r3, [r7, #96]	; 0x60
 8009ee8:	667a      	str	r2, [r7, #100]	; 0x64
 8009eea:	f04f 0200 	mov.w	r2, #0
 8009eee:	f04f 0300 	mov.w	r3, #0
 8009ef2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	008b      	lsls	r3, r1, #2
 8009efa:	4641      	mov	r1, r8
 8009efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f00:	4641      	mov	r1, r8
 8009f02:	008a      	lsls	r2, r1, #2
 8009f04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009f08:	f7f6 febe 	bl	8000c88 <__aeabi_uldivmod>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4b0d      	ldr	r3, [pc, #52]	; (8009f48 <UART_SetConfig+0x4e4>)
 8009f12:	fba3 1302 	umull	r1, r3, r3, r2
 8009f16:	095b      	lsrs	r3, r3, #5
 8009f18:	2164      	movs	r1, #100	; 0x64
 8009f1a:	fb01 f303 	mul.w	r3, r1, r3
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	011b      	lsls	r3, r3, #4
 8009f22:	3332      	adds	r3, #50	; 0x32
 8009f24:	4a08      	ldr	r2, [pc, #32]	; (8009f48 <UART_SetConfig+0x4e4>)
 8009f26:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2a:	095b      	lsrs	r3, r3, #5
 8009f2c:	f003 020f 	and.w	r2, r3, #15
 8009f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4422      	add	r2, r4
 8009f38:	609a      	str	r2, [r3, #8]
}
 8009f3a:	bf00      	nop
 8009f3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009f40:	46bd      	mov	sp, r7
 8009f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f46:	bf00      	nop
 8009f48:	51eb851f 	.word	0x51eb851f

08009f4c <calloc>:
 8009f4c:	4b02      	ldr	r3, [pc, #8]	; (8009f58 <calloc+0xc>)
 8009f4e:	460a      	mov	r2, r1
 8009f50:	4601      	mov	r1, r0
 8009f52:	6818      	ldr	r0, [r3, #0]
 8009f54:	f000 b862 	b.w	800a01c <_calloc_r>
 8009f58:	20000080 	.word	0x20000080

08009f5c <__errno>:
 8009f5c:	4b01      	ldr	r3, [pc, #4]	; (8009f64 <__errno+0x8>)
 8009f5e:	6818      	ldr	r0, [r3, #0]
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	20000080 	.word	0x20000080

08009f68 <__libc_init_array>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	4d0d      	ldr	r5, [pc, #52]	; (8009fa0 <__libc_init_array+0x38>)
 8009f6c:	4c0d      	ldr	r4, [pc, #52]	; (8009fa4 <__libc_init_array+0x3c>)
 8009f6e:	1b64      	subs	r4, r4, r5
 8009f70:	10a4      	asrs	r4, r4, #2
 8009f72:	2600      	movs	r6, #0
 8009f74:	42a6      	cmp	r6, r4
 8009f76:	d109      	bne.n	8009f8c <__libc_init_array+0x24>
 8009f78:	4d0b      	ldr	r5, [pc, #44]	; (8009fa8 <__libc_init_array+0x40>)
 8009f7a:	4c0c      	ldr	r4, [pc, #48]	; (8009fac <__libc_init_array+0x44>)
 8009f7c:	f004 fe4e 	bl	800ec1c <_init>
 8009f80:	1b64      	subs	r4, r4, r5
 8009f82:	10a4      	asrs	r4, r4, #2
 8009f84:	2600      	movs	r6, #0
 8009f86:	42a6      	cmp	r6, r4
 8009f88:	d105      	bne.n	8009f96 <__libc_init_array+0x2e>
 8009f8a:	bd70      	pop	{r4, r5, r6, pc}
 8009f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f90:	4798      	blx	r3
 8009f92:	3601      	adds	r6, #1
 8009f94:	e7ee      	b.n	8009f74 <__libc_init_array+0xc>
 8009f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f9a:	4798      	blx	r3
 8009f9c:	3601      	adds	r6, #1
 8009f9e:	e7f2      	b.n	8009f86 <__libc_init_array+0x1e>
 8009fa0:	0800f344 	.word	0x0800f344
 8009fa4:	0800f344 	.word	0x0800f344
 8009fa8:	0800f344 	.word	0x0800f344
 8009fac:	0800f348 	.word	0x0800f348

08009fb0 <malloc>:
 8009fb0:	4b02      	ldr	r3, [pc, #8]	; (8009fbc <malloc+0xc>)
 8009fb2:	4601      	mov	r1, r0
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	f000 b8b3 	b.w	800a120 <_malloc_r>
 8009fba:	bf00      	nop
 8009fbc:	20000080 	.word	0x20000080

08009fc0 <free>:
 8009fc0:	4b02      	ldr	r3, [pc, #8]	; (8009fcc <free+0xc>)
 8009fc2:	4601      	mov	r1, r0
 8009fc4:	6818      	ldr	r0, [r3, #0]
 8009fc6:	f000 b83f 	b.w	800a048 <_free_r>
 8009fca:	bf00      	nop
 8009fcc:	20000080 	.word	0x20000080

08009fd0 <memcmp>:
 8009fd0:	b510      	push	{r4, lr}
 8009fd2:	3901      	subs	r1, #1
 8009fd4:	4402      	add	r2, r0
 8009fd6:	4290      	cmp	r0, r2
 8009fd8:	d101      	bne.n	8009fde <memcmp+0xe>
 8009fda:	2000      	movs	r0, #0
 8009fdc:	e005      	b.n	8009fea <memcmp+0x1a>
 8009fde:	7803      	ldrb	r3, [r0, #0]
 8009fe0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009fe4:	42a3      	cmp	r3, r4
 8009fe6:	d001      	beq.n	8009fec <memcmp+0x1c>
 8009fe8:	1b18      	subs	r0, r3, r4
 8009fea:	bd10      	pop	{r4, pc}
 8009fec:	3001      	adds	r0, #1
 8009fee:	e7f2      	b.n	8009fd6 <memcmp+0x6>

08009ff0 <memcpy>:
 8009ff0:	440a      	add	r2, r1
 8009ff2:	4291      	cmp	r1, r2
 8009ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ff8:	d100      	bne.n	8009ffc <memcpy+0xc>
 8009ffa:	4770      	bx	lr
 8009ffc:	b510      	push	{r4, lr}
 8009ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a002:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a006:	4291      	cmp	r1, r2
 800a008:	d1f9      	bne.n	8009ffe <memcpy+0xe>
 800a00a:	bd10      	pop	{r4, pc}

0800a00c <memset>:
 800a00c:	4402      	add	r2, r0
 800a00e:	4603      	mov	r3, r0
 800a010:	4293      	cmp	r3, r2
 800a012:	d100      	bne.n	800a016 <memset+0xa>
 800a014:	4770      	bx	lr
 800a016:	f803 1b01 	strb.w	r1, [r3], #1
 800a01a:	e7f9      	b.n	800a010 <memset+0x4>

0800a01c <_calloc_r>:
 800a01c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a01e:	fba1 2402 	umull	r2, r4, r1, r2
 800a022:	b94c      	cbnz	r4, 800a038 <_calloc_r+0x1c>
 800a024:	4611      	mov	r1, r2
 800a026:	9201      	str	r2, [sp, #4]
 800a028:	f000 f87a 	bl	800a120 <_malloc_r>
 800a02c:	9a01      	ldr	r2, [sp, #4]
 800a02e:	4605      	mov	r5, r0
 800a030:	b930      	cbnz	r0, 800a040 <_calloc_r+0x24>
 800a032:	4628      	mov	r0, r5
 800a034:	b003      	add	sp, #12
 800a036:	bd30      	pop	{r4, r5, pc}
 800a038:	220c      	movs	r2, #12
 800a03a:	6002      	str	r2, [r0, #0]
 800a03c:	2500      	movs	r5, #0
 800a03e:	e7f8      	b.n	800a032 <_calloc_r+0x16>
 800a040:	4621      	mov	r1, r4
 800a042:	f7ff ffe3 	bl	800a00c <memset>
 800a046:	e7f4      	b.n	800a032 <_calloc_r+0x16>

0800a048 <_free_r>:
 800a048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a04a:	2900      	cmp	r1, #0
 800a04c:	d044      	beq.n	800a0d8 <_free_r+0x90>
 800a04e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a052:	9001      	str	r0, [sp, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	f1a1 0404 	sub.w	r4, r1, #4
 800a05a:	bfb8      	it	lt
 800a05c:	18e4      	addlt	r4, r4, r3
 800a05e:	f003 f957 	bl	800d310 <__malloc_lock>
 800a062:	4a1e      	ldr	r2, [pc, #120]	; (800a0dc <_free_r+0x94>)
 800a064:	9801      	ldr	r0, [sp, #4]
 800a066:	6813      	ldr	r3, [r2, #0]
 800a068:	b933      	cbnz	r3, 800a078 <_free_r+0x30>
 800a06a:	6063      	str	r3, [r4, #4]
 800a06c:	6014      	str	r4, [r2, #0]
 800a06e:	b003      	add	sp, #12
 800a070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a074:	f003 b952 	b.w	800d31c <__malloc_unlock>
 800a078:	42a3      	cmp	r3, r4
 800a07a:	d908      	bls.n	800a08e <_free_r+0x46>
 800a07c:	6825      	ldr	r5, [r4, #0]
 800a07e:	1961      	adds	r1, r4, r5
 800a080:	428b      	cmp	r3, r1
 800a082:	bf01      	itttt	eq
 800a084:	6819      	ldreq	r1, [r3, #0]
 800a086:	685b      	ldreq	r3, [r3, #4]
 800a088:	1949      	addeq	r1, r1, r5
 800a08a:	6021      	streq	r1, [r4, #0]
 800a08c:	e7ed      	b.n	800a06a <_free_r+0x22>
 800a08e:	461a      	mov	r2, r3
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	b10b      	cbz	r3, 800a098 <_free_r+0x50>
 800a094:	42a3      	cmp	r3, r4
 800a096:	d9fa      	bls.n	800a08e <_free_r+0x46>
 800a098:	6811      	ldr	r1, [r2, #0]
 800a09a:	1855      	adds	r5, r2, r1
 800a09c:	42a5      	cmp	r5, r4
 800a09e:	d10b      	bne.n	800a0b8 <_free_r+0x70>
 800a0a0:	6824      	ldr	r4, [r4, #0]
 800a0a2:	4421      	add	r1, r4
 800a0a4:	1854      	adds	r4, r2, r1
 800a0a6:	42a3      	cmp	r3, r4
 800a0a8:	6011      	str	r1, [r2, #0]
 800a0aa:	d1e0      	bne.n	800a06e <_free_r+0x26>
 800a0ac:	681c      	ldr	r4, [r3, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	6053      	str	r3, [r2, #4]
 800a0b2:	4421      	add	r1, r4
 800a0b4:	6011      	str	r1, [r2, #0]
 800a0b6:	e7da      	b.n	800a06e <_free_r+0x26>
 800a0b8:	d902      	bls.n	800a0c0 <_free_r+0x78>
 800a0ba:	230c      	movs	r3, #12
 800a0bc:	6003      	str	r3, [r0, #0]
 800a0be:	e7d6      	b.n	800a06e <_free_r+0x26>
 800a0c0:	6825      	ldr	r5, [r4, #0]
 800a0c2:	1961      	adds	r1, r4, r5
 800a0c4:	428b      	cmp	r3, r1
 800a0c6:	bf04      	itt	eq
 800a0c8:	6819      	ldreq	r1, [r3, #0]
 800a0ca:	685b      	ldreq	r3, [r3, #4]
 800a0cc:	6063      	str	r3, [r4, #4]
 800a0ce:	bf04      	itt	eq
 800a0d0:	1949      	addeq	r1, r1, r5
 800a0d2:	6021      	streq	r1, [r4, #0]
 800a0d4:	6054      	str	r4, [r2, #4]
 800a0d6:	e7ca      	b.n	800a06e <_free_r+0x26>
 800a0d8:	b003      	add	sp, #12
 800a0da:	bd30      	pop	{r4, r5, pc}
 800a0dc:	2000085c 	.word	0x2000085c

0800a0e0 <sbrk_aligned>:
 800a0e0:	b570      	push	{r4, r5, r6, lr}
 800a0e2:	4e0e      	ldr	r6, [pc, #56]	; (800a11c <sbrk_aligned+0x3c>)
 800a0e4:	460c      	mov	r4, r1
 800a0e6:	6831      	ldr	r1, [r6, #0]
 800a0e8:	4605      	mov	r5, r0
 800a0ea:	b911      	cbnz	r1, 800a0f2 <sbrk_aligned+0x12>
 800a0ec:	f000 ff1e 	bl	800af2c <_sbrk_r>
 800a0f0:	6030      	str	r0, [r6, #0]
 800a0f2:	4621      	mov	r1, r4
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f000 ff19 	bl	800af2c <_sbrk_r>
 800a0fa:	1c43      	adds	r3, r0, #1
 800a0fc:	d00a      	beq.n	800a114 <sbrk_aligned+0x34>
 800a0fe:	1cc4      	adds	r4, r0, #3
 800a100:	f024 0403 	bic.w	r4, r4, #3
 800a104:	42a0      	cmp	r0, r4
 800a106:	d007      	beq.n	800a118 <sbrk_aligned+0x38>
 800a108:	1a21      	subs	r1, r4, r0
 800a10a:	4628      	mov	r0, r5
 800a10c:	f000 ff0e 	bl	800af2c <_sbrk_r>
 800a110:	3001      	adds	r0, #1
 800a112:	d101      	bne.n	800a118 <sbrk_aligned+0x38>
 800a114:	f04f 34ff 	mov.w	r4, #4294967295
 800a118:	4620      	mov	r0, r4
 800a11a:	bd70      	pop	{r4, r5, r6, pc}
 800a11c:	20000860 	.word	0x20000860

0800a120 <_malloc_r>:
 800a120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a124:	1ccd      	adds	r5, r1, #3
 800a126:	f025 0503 	bic.w	r5, r5, #3
 800a12a:	3508      	adds	r5, #8
 800a12c:	2d0c      	cmp	r5, #12
 800a12e:	bf38      	it	cc
 800a130:	250c      	movcc	r5, #12
 800a132:	2d00      	cmp	r5, #0
 800a134:	4607      	mov	r7, r0
 800a136:	db01      	blt.n	800a13c <_malloc_r+0x1c>
 800a138:	42a9      	cmp	r1, r5
 800a13a:	d905      	bls.n	800a148 <_malloc_r+0x28>
 800a13c:	230c      	movs	r3, #12
 800a13e:	603b      	str	r3, [r7, #0]
 800a140:	2600      	movs	r6, #0
 800a142:	4630      	mov	r0, r6
 800a144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a148:	4e2e      	ldr	r6, [pc, #184]	; (800a204 <_malloc_r+0xe4>)
 800a14a:	f003 f8e1 	bl	800d310 <__malloc_lock>
 800a14e:	6833      	ldr	r3, [r6, #0]
 800a150:	461c      	mov	r4, r3
 800a152:	bb34      	cbnz	r4, 800a1a2 <_malloc_r+0x82>
 800a154:	4629      	mov	r1, r5
 800a156:	4638      	mov	r0, r7
 800a158:	f7ff ffc2 	bl	800a0e0 <sbrk_aligned>
 800a15c:	1c43      	adds	r3, r0, #1
 800a15e:	4604      	mov	r4, r0
 800a160:	d14d      	bne.n	800a1fe <_malloc_r+0xde>
 800a162:	6834      	ldr	r4, [r6, #0]
 800a164:	4626      	mov	r6, r4
 800a166:	2e00      	cmp	r6, #0
 800a168:	d140      	bne.n	800a1ec <_malloc_r+0xcc>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	4631      	mov	r1, r6
 800a16e:	4638      	mov	r0, r7
 800a170:	eb04 0803 	add.w	r8, r4, r3
 800a174:	f000 feda 	bl	800af2c <_sbrk_r>
 800a178:	4580      	cmp	r8, r0
 800a17a:	d13a      	bne.n	800a1f2 <_malloc_r+0xd2>
 800a17c:	6821      	ldr	r1, [r4, #0]
 800a17e:	3503      	adds	r5, #3
 800a180:	1a6d      	subs	r5, r5, r1
 800a182:	f025 0503 	bic.w	r5, r5, #3
 800a186:	3508      	adds	r5, #8
 800a188:	2d0c      	cmp	r5, #12
 800a18a:	bf38      	it	cc
 800a18c:	250c      	movcc	r5, #12
 800a18e:	4629      	mov	r1, r5
 800a190:	4638      	mov	r0, r7
 800a192:	f7ff ffa5 	bl	800a0e0 <sbrk_aligned>
 800a196:	3001      	adds	r0, #1
 800a198:	d02b      	beq.n	800a1f2 <_malloc_r+0xd2>
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	442b      	add	r3, r5
 800a19e:	6023      	str	r3, [r4, #0]
 800a1a0:	e00e      	b.n	800a1c0 <_malloc_r+0xa0>
 800a1a2:	6822      	ldr	r2, [r4, #0]
 800a1a4:	1b52      	subs	r2, r2, r5
 800a1a6:	d41e      	bmi.n	800a1e6 <_malloc_r+0xc6>
 800a1a8:	2a0b      	cmp	r2, #11
 800a1aa:	d916      	bls.n	800a1da <_malloc_r+0xba>
 800a1ac:	1961      	adds	r1, r4, r5
 800a1ae:	42a3      	cmp	r3, r4
 800a1b0:	6025      	str	r5, [r4, #0]
 800a1b2:	bf18      	it	ne
 800a1b4:	6059      	strne	r1, [r3, #4]
 800a1b6:	6863      	ldr	r3, [r4, #4]
 800a1b8:	bf08      	it	eq
 800a1ba:	6031      	streq	r1, [r6, #0]
 800a1bc:	5162      	str	r2, [r4, r5]
 800a1be:	604b      	str	r3, [r1, #4]
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	f104 060b 	add.w	r6, r4, #11
 800a1c6:	f003 f8a9 	bl	800d31c <__malloc_unlock>
 800a1ca:	f026 0607 	bic.w	r6, r6, #7
 800a1ce:	1d23      	adds	r3, r4, #4
 800a1d0:	1af2      	subs	r2, r6, r3
 800a1d2:	d0b6      	beq.n	800a142 <_malloc_r+0x22>
 800a1d4:	1b9b      	subs	r3, r3, r6
 800a1d6:	50a3      	str	r3, [r4, r2]
 800a1d8:	e7b3      	b.n	800a142 <_malloc_r+0x22>
 800a1da:	6862      	ldr	r2, [r4, #4]
 800a1dc:	42a3      	cmp	r3, r4
 800a1de:	bf0c      	ite	eq
 800a1e0:	6032      	streq	r2, [r6, #0]
 800a1e2:	605a      	strne	r2, [r3, #4]
 800a1e4:	e7ec      	b.n	800a1c0 <_malloc_r+0xa0>
 800a1e6:	4623      	mov	r3, r4
 800a1e8:	6864      	ldr	r4, [r4, #4]
 800a1ea:	e7b2      	b.n	800a152 <_malloc_r+0x32>
 800a1ec:	4634      	mov	r4, r6
 800a1ee:	6876      	ldr	r6, [r6, #4]
 800a1f0:	e7b9      	b.n	800a166 <_malloc_r+0x46>
 800a1f2:	230c      	movs	r3, #12
 800a1f4:	603b      	str	r3, [r7, #0]
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	f003 f890 	bl	800d31c <__malloc_unlock>
 800a1fc:	e7a1      	b.n	800a142 <_malloc_r+0x22>
 800a1fe:	6025      	str	r5, [r4, #0]
 800a200:	e7de      	b.n	800a1c0 <_malloc_r+0xa0>
 800a202:	bf00      	nop
 800a204:	2000085c 	.word	0x2000085c

0800a208 <__cvt>:
 800a208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a20c:	ec55 4b10 	vmov	r4, r5, d0
 800a210:	2d00      	cmp	r5, #0
 800a212:	460e      	mov	r6, r1
 800a214:	4619      	mov	r1, r3
 800a216:	462b      	mov	r3, r5
 800a218:	bfbb      	ittet	lt
 800a21a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a21e:	461d      	movlt	r5, r3
 800a220:	2300      	movge	r3, #0
 800a222:	232d      	movlt	r3, #45	; 0x2d
 800a224:	700b      	strb	r3, [r1, #0]
 800a226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a228:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a22c:	4691      	mov	r9, r2
 800a22e:	f023 0820 	bic.w	r8, r3, #32
 800a232:	bfbc      	itt	lt
 800a234:	4622      	movlt	r2, r4
 800a236:	4614      	movlt	r4, r2
 800a238:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a23c:	d005      	beq.n	800a24a <__cvt+0x42>
 800a23e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a242:	d100      	bne.n	800a246 <__cvt+0x3e>
 800a244:	3601      	adds	r6, #1
 800a246:	2102      	movs	r1, #2
 800a248:	e000      	b.n	800a24c <__cvt+0x44>
 800a24a:	2103      	movs	r1, #3
 800a24c:	ab03      	add	r3, sp, #12
 800a24e:	9301      	str	r3, [sp, #4]
 800a250:	ab02      	add	r3, sp, #8
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	ec45 4b10 	vmov	d0, r4, r5
 800a258:	4653      	mov	r3, sl
 800a25a:	4632      	mov	r2, r6
 800a25c:	f001 fdec 	bl	800be38 <_dtoa_r>
 800a260:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a264:	4607      	mov	r7, r0
 800a266:	d102      	bne.n	800a26e <__cvt+0x66>
 800a268:	f019 0f01 	tst.w	r9, #1
 800a26c:	d022      	beq.n	800a2b4 <__cvt+0xac>
 800a26e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a272:	eb07 0906 	add.w	r9, r7, r6
 800a276:	d110      	bne.n	800a29a <__cvt+0x92>
 800a278:	783b      	ldrb	r3, [r7, #0]
 800a27a:	2b30      	cmp	r3, #48	; 0x30
 800a27c:	d10a      	bne.n	800a294 <__cvt+0x8c>
 800a27e:	2200      	movs	r2, #0
 800a280:	2300      	movs	r3, #0
 800a282:	4620      	mov	r0, r4
 800a284:	4629      	mov	r1, r5
 800a286:	f7f6 fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a28a:	b918      	cbnz	r0, 800a294 <__cvt+0x8c>
 800a28c:	f1c6 0601 	rsb	r6, r6, #1
 800a290:	f8ca 6000 	str.w	r6, [sl]
 800a294:	f8da 3000 	ldr.w	r3, [sl]
 800a298:	4499      	add	r9, r3
 800a29a:	2200      	movs	r2, #0
 800a29c:	2300      	movs	r3, #0
 800a29e:	4620      	mov	r0, r4
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	f7f6 fc11 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2a6:	b108      	cbz	r0, 800a2ac <__cvt+0xa4>
 800a2a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2ac:	2230      	movs	r2, #48	; 0x30
 800a2ae:	9b03      	ldr	r3, [sp, #12]
 800a2b0:	454b      	cmp	r3, r9
 800a2b2:	d307      	bcc.n	800a2c4 <__cvt+0xbc>
 800a2b4:	9b03      	ldr	r3, [sp, #12]
 800a2b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2b8:	1bdb      	subs	r3, r3, r7
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	6013      	str	r3, [r2, #0]
 800a2be:	b004      	add	sp, #16
 800a2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c4:	1c59      	adds	r1, r3, #1
 800a2c6:	9103      	str	r1, [sp, #12]
 800a2c8:	701a      	strb	r2, [r3, #0]
 800a2ca:	e7f0      	b.n	800a2ae <__cvt+0xa6>

0800a2cc <__exponent>:
 800a2cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2900      	cmp	r1, #0
 800a2d2:	bfb8      	it	lt
 800a2d4:	4249      	neglt	r1, r1
 800a2d6:	f803 2b02 	strb.w	r2, [r3], #2
 800a2da:	bfb4      	ite	lt
 800a2dc:	222d      	movlt	r2, #45	; 0x2d
 800a2de:	222b      	movge	r2, #43	; 0x2b
 800a2e0:	2909      	cmp	r1, #9
 800a2e2:	7042      	strb	r2, [r0, #1]
 800a2e4:	dd2a      	ble.n	800a33c <__exponent+0x70>
 800a2e6:	f10d 0407 	add.w	r4, sp, #7
 800a2ea:	46a4      	mov	ip, r4
 800a2ec:	270a      	movs	r7, #10
 800a2ee:	46a6      	mov	lr, r4
 800a2f0:	460a      	mov	r2, r1
 800a2f2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a2f6:	fb07 1516 	mls	r5, r7, r6, r1
 800a2fa:	3530      	adds	r5, #48	; 0x30
 800a2fc:	2a63      	cmp	r2, #99	; 0x63
 800a2fe:	f104 34ff 	add.w	r4, r4, #4294967295
 800a302:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a306:	4631      	mov	r1, r6
 800a308:	dcf1      	bgt.n	800a2ee <__exponent+0x22>
 800a30a:	3130      	adds	r1, #48	; 0x30
 800a30c:	f1ae 0502 	sub.w	r5, lr, #2
 800a310:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a314:	1c44      	adds	r4, r0, #1
 800a316:	4629      	mov	r1, r5
 800a318:	4561      	cmp	r1, ip
 800a31a:	d30a      	bcc.n	800a332 <__exponent+0x66>
 800a31c:	f10d 0209 	add.w	r2, sp, #9
 800a320:	eba2 020e 	sub.w	r2, r2, lr
 800a324:	4565      	cmp	r5, ip
 800a326:	bf88      	it	hi
 800a328:	2200      	movhi	r2, #0
 800a32a:	4413      	add	r3, r2
 800a32c:	1a18      	subs	r0, r3, r0
 800a32e:	b003      	add	sp, #12
 800a330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a332:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a336:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a33a:	e7ed      	b.n	800a318 <__exponent+0x4c>
 800a33c:	2330      	movs	r3, #48	; 0x30
 800a33e:	3130      	adds	r1, #48	; 0x30
 800a340:	7083      	strb	r3, [r0, #2]
 800a342:	70c1      	strb	r1, [r0, #3]
 800a344:	1d03      	adds	r3, r0, #4
 800a346:	e7f1      	b.n	800a32c <__exponent+0x60>

0800a348 <_printf_float>:
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	ed2d 8b02 	vpush	{d8}
 800a350:	b08d      	sub	sp, #52	; 0x34
 800a352:	460c      	mov	r4, r1
 800a354:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a358:	4616      	mov	r6, r2
 800a35a:	461f      	mov	r7, r3
 800a35c:	4605      	mov	r5, r0
 800a35e:	f002 ffbd 	bl	800d2dc <_localeconv_r>
 800a362:	f8d0 a000 	ldr.w	sl, [r0]
 800a366:	4650      	mov	r0, sl
 800a368:	f7f5 ff32 	bl	80001d0 <strlen>
 800a36c:	2300      	movs	r3, #0
 800a36e:	930a      	str	r3, [sp, #40]	; 0x28
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	9305      	str	r3, [sp, #20]
 800a374:	f8d8 3000 	ldr.w	r3, [r8]
 800a378:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a37c:	3307      	adds	r3, #7
 800a37e:	f023 0307 	bic.w	r3, r3, #7
 800a382:	f103 0208 	add.w	r2, r3, #8
 800a386:	f8c8 2000 	str.w	r2, [r8]
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a392:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a396:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a39a:	9307      	str	r3, [sp, #28]
 800a39c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a3a0:	ee08 0a10 	vmov	s16, r0
 800a3a4:	4b9f      	ldr	r3, [pc, #636]	; (800a624 <_printf_float+0x2dc>)
 800a3a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ae:	f7f6 fbbd 	bl	8000b2c <__aeabi_dcmpun>
 800a3b2:	bb88      	cbnz	r0, 800a418 <_printf_float+0xd0>
 800a3b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3b8:	4b9a      	ldr	r3, [pc, #616]	; (800a624 <_printf_float+0x2dc>)
 800a3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a3be:	f7f6 fb97 	bl	8000af0 <__aeabi_dcmple>
 800a3c2:	bb48      	cbnz	r0, 800a418 <_printf_float+0xd0>
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	f7f6 fb86 	bl	8000adc <__aeabi_dcmplt>
 800a3d0:	b110      	cbz	r0, 800a3d8 <_printf_float+0x90>
 800a3d2:	232d      	movs	r3, #45	; 0x2d
 800a3d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3d8:	4b93      	ldr	r3, [pc, #588]	; (800a628 <_printf_float+0x2e0>)
 800a3da:	4894      	ldr	r0, [pc, #592]	; (800a62c <_printf_float+0x2e4>)
 800a3dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a3e0:	bf94      	ite	ls
 800a3e2:	4698      	movls	r8, r3
 800a3e4:	4680      	movhi	r8, r0
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	6123      	str	r3, [r4, #16]
 800a3ea:	9b05      	ldr	r3, [sp, #20]
 800a3ec:	f023 0204 	bic.w	r2, r3, #4
 800a3f0:	6022      	str	r2, [r4, #0]
 800a3f2:	f04f 0900 	mov.w	r9, #0
 800a3f6:	9700      	str	r7, [sp, #0]
 800a3f8:	4633      	mov	r3, r6
 800a3fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3fc:	4621      	mov	r1, r4
 800a3fe:	4628      	mov	r0, r5
 800a400:	f000 f9d8 	bl	800a7b4 <_printf_common>
 800a404:	3001      	adds	r0, #1
 800a406:	f040 8090 	bne.w	800a52a <_printf_float+0x1e2>
 800a40a:	f04f 30ff 	mov.w	r0, #4294967295
 800a40e:	b00d      	add	sp, #52	; 0x34
 800a410:	ecbd 8b02 	vpop	{d8}
 800a414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a418:	4642      	mov	r2, r8
 800a41a:	464b      	mov	r3, r9
 800a41c:	4640      	mov	r0, r8
 800a41e:	4649      	mov	r1, r9
 800a420:	f7f6 fb84 	bl	8000b2c <__aeabi_dcmpun>
 800a424:	b140      	cbz	r0, 800a438 <_printf_float+0xf0>
 800a426:	464b      	mov	r3, r9
 800a428:	2b00      	cmp	r3, #0
 800a42a:	bfbc      	itt	lt
 800a42c:	232d      	movlt	r3, #45	; 0x2d
 800a42e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a432:	487f      	ldr	r0, [pc, #508]	; (800a630 <_printf_float+0x2e8>)
 800a434:	4b7f      	ldr	r3, [pc, #508]	; (800a634 <_printf_float+0x2ec>)
 800a436:	e7d1      	b.n	800a3dc <_printf_float+0x94>
 800a438:	6863      	ldr	r3, [r4, #4]
 800a43a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a43e:	9206      	str	r2, [sp, #24]
 800a440:	1c5a      	adds	r2, r3, #1
 800a442:	d13f      	bne.n	800a4c4 <_printf_float+0x17c>
 800a444:	2306      	movs	r3, #6
 800a446:	6063      	str	r3, [r4, #4]
 800a448:	9b05      	ldr	r3, [sp, #20]
 800a44a:	6861      	ldr	r1, [r4, #4]
 800a44c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a450:	2300      	movs	r3, #0
 800a452:	9303      	str	r3, [sp, #12]
 800a454:	ab0a      	add	r3, sp, #40	; 0x28
 800a456:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a45a:	ab09      	add	r3, sp, #36	; 0x24
 800a45c:	ec49 8b10 	vmov	d0, r8, r9
 800a460:	9300      	str	r3, [sp, #0]
 800a462:	6022      	str	r2, [r4, #0]
 800a464:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a468:	4628      	mov	r0, r5
 800a46a:	f7ff fecd 	bl	800a208 <__cvt>
 800a46e:	9b06      	ldr	r3, [sp, #24]
 800a470:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a472:	2b47      	cmp	r3, #71	; 0x47
 800a474:	4680      	mov	r8, r0
 800a476:	d108      	bne.n	800a48a <_printf_float+0x142>
 800a478:	1cc8      	adds	r0, r1, #3
 800a47a:	db02      	blt.n	800a482 <_printf_float+0x13a>
 800a47c:	6863      	ldr	r3, [r4, #4]
 800a47e:	4299      	cmp	r1, r3
 800a480:	dd41      	ble.n	800a506 <_printf_float+0x1be>
 800a482:	f1ab 0b02 	sub.w	fp, fp, #2
 800a486:	fa5f fb8b 	uxtb.w	fp, fp
 800a48a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a48e:	d820      	bhi.n	800a4d2 <_printf_float+0x18a>
 800a490:	3901      	subs	r1, #1
 800a492:	465a      	mov	r2, fp
 800a494:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a498:	9109      	str	r1, [sp, #36]	; 0x24
 800a49a:	f7ff ff17 	bl	800a2cc <__exponent>
 800a49e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4a0:	1813      	adds	r3, r2, r0
 800a4a2:	2a01      	cmp	r2, #1
 800a4a4:	4681      	mov	r9, r0
 800a4a6:	6123      	str	r3, [r4, #16]
 800a4a8:	dc02      	bgt.n	800a4b0 <_printf_float+0x168>
 800a4aa:	6822      	ldr	r2, [r4, #0]
 800a4ac:	07d2      	lsls	r2, r2, #31
 800a4ae:	d501      	bpl.n	800a4b4 <_printf_float+0x16c>
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	6123      	str	r3, [r4, #16]
 800a4b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d09c      	beq.n	800a3f6 <_printf_float+0xae>
 800a4bc:	232d      	movs	r3, #45	; 0x2d
 800a4be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4c2:	e798      	b.n	800a3f6 <_printf_float+0xae>
 800a4c4:	9a06      	ldr	r2, [sp, #24]
 800a4c6:	2a47      	cmp	r2, #71	; 0x47
 800a4c8:	d1be      	bne.n	800a448 <_printf_float+0x100>
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1bc      	bne.n	800a448 <_printf_float+0x100>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e7b9      	b.n	800a446 <_printf_float+0xfe>
 800a4d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a4d6:	d118      	bne.n	800a50a <_printf_float+0x1c2>
 800a4d8:	2900      	cmp	r1, #0
 800a4da:	6863      	ldr	r3, [r4, #4]
 800a4dc:	dd0b      	ble.n	800a4f6 <_printf_float+0x1ae>
 800a4de:	6121      	str	r1, [r4, #16]
 800a4e0:	b913      	cbnz	r3, 800a4e8 <_printf_float+0x1a0>
 800a4e2:	6822      	ldr	r2, [r4, #0]
 800a4e4:	07d0      	lsls	r0, r2, #31
 800a4e6:	d502      	bpl.n	800a4ee <_printf_float+0x1a6>
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	440b      	add	r3, r1
 800a4ec:	6123      	str	r3, [r4, #16]
 800a4ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800a4f0:	f04f 0900 	mov.w	r9, #0
 800a4f4:	e7de      	b.n	800a4b4 <_printf_float+0x16c>
 800a4f6:	b913      	cbnz	r3, 800a4fe <_printf_float+0x1b6>
 800a4f8:	6822      	ldr	r2, [r4, #0]
 800a4fa:	07d2      	lsls	r2, r2, #31
 800a4fc:	d501      	bpl.n	800a502 <_printf_float+0x1ba>
 800a4fe:	3302      	adds	r3, #2
 800a500:	e7f4      	b.n	800a4ec <_printf_float+0x1a4>
 800a502:	2301      	movs	r3, #1
 800a504:	e7f2      	b.n	800a4ec <_printf_float+0x1a4>
 800a506:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a50a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a50c:	4299      	cmp	r1, r3
 800a50e:	db05      	blt.n	800a51c <_printf_float+0x1d4>
 800a510:	6823      	ldr	r3, [r4, #0]
 800a512:	6121      	str	r1, [r4, #16]
 800a514:	07d8      	lsls	r0, r3, #31
 800a516:	d5ea      	bpl.n	800a4ee <_printf_float+0x1a6>
 800a518:	1c4b      	adds	r3, r1, #1
 800a51a:	e7e7      	b.n	800a4ec <_printf_float+0x1a4>
 800a51c:	2900      	cmp	r1, #0
 800a51e:	bfd4      	ite	le
 800a520:	f1c1 0202 	rsble	r2, r1, #2
 800a524:	2201      	movgt	r2, #1
 800a526:	4413      	add	r3, r2
 800a528:	e7e0      	b.n	800a4ec <_printf_float+0x1a4>
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	055a      	lsls	r2, r3, #21
 800a52e:	d407      	bmi.n	800a540 <_printf_float+0x1f8>
 800a530:	6923      	ldr	r3, [r4, #16]
 800a532:	4642      	mov	r2, r8
 800a534:	4631      	mov	r1, r6
 800a536:	4628      	mov	r0, r5
 800a538:	47b8      	blx	r7
 800a53a:	3001      	adds	r0, #1
 800a53c:	d12c      	bne.n	800a598 <_printf_float+0x250>
 800a53e:	e764      	b.n	800a40a <_printf_float+0xc2>
 800a540:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a544:	f240 80e0 	bls.w	800a708 <_printf_float+0x3c0>
 800a548:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a54c:	2200      	movs	r2, #0
 800a54e:	2300      	movs	r3, #0
 800a550:	f7f6 faba 	bl	8000ac8 <__aeabi_dcmpeq>
 800a554:	2800      	cmp	r0, #0
 800a556:	d034      	beq.n	800a5c2 <_printf_float+0x27a>
 800a558:	4a37      	ldr	r2, [pc, #220]	; (800a638 <_printf_float+0x2f0>)
 800a55a:	2301      	movs	r3, #1
 800a55c:	4631      	mov	r1, r6
 800a55e:	4628      	mov	r0, r5
 800a560:	47b8      	blx	r7
 800a562:	3001      	adds	r0, #1
 800a564:	f43f af51 	beq.w	800a40a <_printf_float+0xc2>
 800a568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a56c:	429a      	cmp	r2, r3
 800a56e:	db02      	blt.n	800a576 <_printf_float+0x22e>
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	07d8      	lsls	r0, r3, #31
 800a574:	d510      	bpl.n	800a598 <_printf_float+0x250>
 800a576:	ee18 3a10 	vmov	r3, s16
 800a57a:	4652      	mov	r2, sl
 800a57c:	4631      	mov	r1, r6
 800a57e:	4628      	mov	r0, r5
 800a580:	47b8      	blx	r7
 800a582:	3001      	adds	r0, #1
 800a584:	f43f af41 	beq.w	800a40a <_printf_float+0xc2>
 800a588:	f04f 0800 	mov.w	r8, #0
 800a58c:	f104 091a 	add.w	r9, r4, #26
 800a590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a592:	3b01      	subs	r3, #1
 800a594:	4543      	cmp	r3, r8
 800a596:	dc09      	bgt.n	800a5ac <_printf_float+0x264>
 800a598:	6823      	ldr	r3, [r4, #0]
 800a59a:	079b      	lsls	r3, r3, #30
 800a59c:	f100 8105 	bmi.w	800a7aa <_printf_float+0x462>
 800a5a0:	68e0      	ldr	r0, [r4, #12]
 800a5a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5a4:	4298      	cmp	r0, r3
 800a5a6:	bfb8      	it	lt
 800a5a8:	4618      	movlt	r0, r3
 800a5aa:	e730      	b.n	800a40e <_printf_float+0xc6>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	464a      	mov	r2, r9
 800a5b0:	4631      	mov	r1, r6
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	47b8      	blx	r7
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	f43f af27 	beq.w	800a40a <_printf_float+0xc2>
 800a5bc:	f108 0801 	add.w	r8, r8, #1
 800a5c0:	e7e6      	b.n	800a590 <_printf_float+0x248>
 800a5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	dc39      	bgt.n	800a63c <_printf_float+0x2f4>
 800a5c8:	4a1b      	ldr	r2, [pc, #108]	; (800a638 <_printf_float+0x2f0>)
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	4631      	mov	r1, r6
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	47b8      	blx	r7
 800a5d2:	3001      	adds	r0, #1
 800a5d4:	f43f af19 	beq.w	800a40a <_printf_float+0xc2>
 800a5d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	d102      	bne.n	800a5e6 <_printf_float+0x29e>
 800a5e0:	6823      	ldr	r3, [r4, #0]
 800a5e2:	07d9      	lsls	r1, r3, #31
 800a5e4:	d5d8      	bpl.n	800a598 <_printf_float+0x250>
 800a5e6:	ee18 3a10 	vmov	r3, s16
 800a5ea:	4652      	mov	r2, sl
 800a5ec:	4631      	mov	r1, r6
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	47b8      	blx	r7
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	f43f af09 	beq.w	800a40a <_printf_float+0xc2>
 800a5f8:	f04f 0900 	mov.w	r9, #0
 800a5fc:	f104 0a1a 	add.w	sl, r4, #26
 800a600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a602:	425b      	negs	r3, r3
 800a604:	454b      	cmp	r3, r9
 800a606:	dc01      	bgt.n	800a60c <_printf_float+0x2c4>
 800a608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a60a:	e792      	b.n	800a532 <_printf_float+0x1ea>
 800a60c:	2301      	movs	r3, #1
 800a60e:	4652      	mov	r2, sl
 800a610:	4631      	mov	r1, r6
 800a612:	4628      	mov	r0, r5
 800a614:	47b8      	blx	r7
 800a616:	3001      	adds	r0, #1
 800a618:	f43f aef7 	beq.w	800a40a <_printf_float+0xc2>
 800a61c:	f109 0901 	add.w	r9, r9, #1
 800a620:	e7ee      	b.n	800a600 <_printf_float+0x2b8>
 800a622:	bf00      	nop
 800a624:	7fefffff 	.word	0x7fefffff
 800a628:	0800ee90 	.word	0x0800ee90
 800a62c:	0800ee94 	.word	0x0800ee94
 800a630:	0800ee9c 	.word	0x0800ee9c
 800a634:	0800ee98 	.word	0x0800ee98
 800a638:	0800eea0 	.word	0x0800eea0
 800a63c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a63e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a640:	429a      	cmp	r2, r3
 800a642:	bfa8      	it	ge
 800a644:	461a      	movge	r2, r3
 800a646:	2a00      	cmp	r2, #0
 800a648:	4691      	mov	r9, r2
 800a64a:	dc37      	bgt.n	800a6bc <_printf_float+0x374>
 800a64c:	f04f 0b00 	mov.w	fp, #0
 800a650:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a654:	f104 021a 	add.w	r2, r4, #26
 800a658:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a65a:	9305      	str	r3, [sp, #20]
 800a65c:	eba3 0309 	sub.w	r3, r3, r9
 800a660:	455b      	cmp	r3, fp
 800a662:	dc33      	bgt.n	800a6cc <_printf_float+0x384>
 800a664:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a668:	429a      	cmp	r2, r3
 800a66a:	db3b      	blt.n	800a6e4 <_printf_float+0x39c>
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	07da      	lsls	r2, r3, #31
 800a670:	d438      	bmi.n	800a6e4 <_printf_float+0x39c>
 800a672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a674:	9a05      	ldr	r2, [sp, #20]
 800a676:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a678:	1a9a      	subs	r2, r3, r2
 800a67a:	eba3 0901 	sub.w	r9, r3, r1
 800a67e:	4591      	cmp	r9, r2
 800a680:	bfa8      	it	ge
 800a682:	4691      	movge	r9, r2
 800a684:	f1b9 0f00 	cmp.w	r9, #0
 800a688:	dc35      	bgt.n	800a6f6 <_printf_float+0x3ae>
 800a68a:	f04f 0800 	mov.w	r8, #0
 800a68e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a692:	f104 0a1a 	add.w	sl, r4, #26
 800a696:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a69a:	1a9b      	subs	r3, r3, r2
 800a69c:	eba3 0309 	sub.w	r3, r3, r9
 800a6a0:	4543      	cmp	r3, r8
 800a6a2:	f77f af79 	ble.w	800a598 <_printf_float+0x250>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	4652      	mov	r2, sl
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	47b8      	blx	r7
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	f43f aeaa 	beq.w	800a40a <_printf_float+0xc2>
 800a6b6:	f108 0801 	add.w	r8, r8, #1
 800a6ba:	e7ec      	b.n	800a696 <_printf_float+0x34e>
 800a6bc:	4613      	mov	r3, r2
 800a6be:	4631      	mov	r1, r6
 800a6c0:	4642      	mov	r2, r8
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	47b8      	blx	r7
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	d1c0      	bne.n	800a64c <_printf_float+0x304>
 800a6ca:	e69e      	b.n	800a40a <_printf_float+0xc2>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	4631      	mov	r1, r6
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	9205      	str	r2, [sp, #20]
 800a6d4:	47b8      	blx	r7
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	f43f ae97 	beq.w	800a40a <_printf_float+0xc2>
 800a6dc:	9a05      	ldr	r2, [sp, #20]
 800a6de:	f10b 0b01 	add.w	fp, fp, #1
 800a6e2:	e7b9      	b.n	800a658 <_printf_float+0x310>
 800a6e4:	ee18 3a10 	vmov	r3, s16
 800a6e8:	4652      	mov	r2, sl
 800a6ea:	4631      	mov	r1, r6
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	47b8      	blx	r7
 800a6f0:	3001      	adds	r0, #1
 800a6f2:	d1be      	bne.n	800a672 <_printf_float+0x32a>
 800a6f4:	e689      	b.n	800a40a <_printf_float+0xc2>
 800a6f6:	9a05      	ldr	r2, [sp, #20]
 800a6f8:	464b      	mov	r3, r9
 800a6fa:	4442      	add	r2, r8
 800a6fc:	4631      	mov	r1, r6
 800a6fe:	4628      	mov	r0, r5
 800a700:	47b8      	blx	r7
 800a702:	3001      	adds	r0, #1
 800a704:	d1c1      	bne.n	800a68a <_printf_float+0x342>
 800a706:	e680      	b.n	800a40a <_printf_float+0xc2>
 800a708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a70a:	2a01      	cmp	r2, #1
 800a70c:	dc01      	bgt.n	800a712 <_printf_float+0x3ca>
 800a70e:	07db      	lsls	r3, r3, #31
 800a710:	d538      	bpl.n	800a784 <_printf_float+0x43c>
 800a712:	2301      	movs	r3, #1
 800a714:	4642      	mov	r2, r8
 800a716:	4631      	mov	r1, r6
 800a718:	4628      	mov	r0, r5
 800a71a:	47b8      	blx	r7
 800a71c:	3001      	adds	r0, #1
 800a71e:	f43f ae74 	beq.w	800a40a <_printf_float+0xc2>
 800a722:	ee18 3a10 	vmov	r3, s16
 800a726:	4652      	mov	r2, sl
 800a728:	4631      	mov	r1, r6
 800a72a:	4628      	mov	r0, r5
 800a72c:	47b8      	blx	r7
 800a72e:	3001      	adds	r0, #1
 800a730:	f43f ae6b 	beq.w	800a40a <_printf_float+0xc2>
 800a734:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a738:	2200      	movs	r2, #0
 800a73a:	2300      	movs	r3, #0
 800a73c:	f7f6 f9c4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a740:	b9d8      	cbnz	r0, 800a77a <_printf_float+0x432>
 800a742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a744:	f108 0201 	add.w	r2, r8, #1
 800a748:	3b01      	subs	r3, #1
 800a74a:	4631      	mov	r1, r6
 800a74c:	4628      	mov	r0, r5
 800a74e:	47b8      	blx	r7
 800a750:	3001      	adds	r0, #1
 800a752:	d10e      	bne.n	800a772 <_printf_float+0x42a>
 800a754:	e659      	b.n	800a40a <_printf_float+0xc2>
 800a756:	2301      	movs	r3, #1
 800a758:	4652      	mov	r2, sl
 800a75a:	4631      	mov	r1, r6
 800a75c:	4628      	mov	r0, r5
 800a75e:	47b8      	blx	r7
 800a760:	3001      	adds	r0, #1
 800a762:	f43f ae52 	beq.w	800a40a <_printf_float+0xc2>
 800a766:	f108 0801 	add.w	r8, r8, #1
 800a76a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a76c:	3b01      	subs	r3, #1
 800a76e:	4543      	cmp	r3, r8
 800a770:	dcf1      	bgt.n	800a756 <_printf_float+0x40e>
 800a772:	464b      	mov	r3, r9
 800a774:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a778:	e6dc      	b.n	800a534 <_printf_float+0x1ec>
 800a77a:	f04f 0800 	mov.w	r8, #0
 800a77e:	f104 0a1a 	add.w	sl, r4, #26
 800a782:	e7f2      	b.n	800a76a <_printf_float+0x422>
 800a784:	2301      	movs	r3, #1
 800a786:	4642      	mov	r2, r8
 800a788:	e7df      	b.n	800a74a <_printf_float+0x402>
 800a78a:	2301      	movs	r3, #1
 800a78c:	464a      	mov	r2, r9
 800a78e:	4631      	mov	r1, r6
 800a790:	4628      	mov	r0, r5
 800a792:	47b8      	blx	r7
 800a794:	3001      	adds	r0, #1
 800a796:	f43f ae38 	beq.w	800a40a <_printf_float+0xc2>
 800a79a:	f108 0801 	add.w	r8, r8, #1
 800a79e:	68e3      	ldr	r3, [r4, #12]
 800a7a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7a2:	1a5b      	subs	r3, r3, r1
 800a7a4:	4543      	cmp	r3, r8
 800a7a6:	dcf0      	bgt.n	800a78a <_printf_float+0x442>
 800a7a8:	e6fa      	b.n	800a5a0 <_printf_float+0x258>
 800a7aa:	f04f 0800 	mov.w	r8, #0
 800a7ae:	f104 0919 	add.w	r9, r4, #25
 800a7b2:	e7f4      	b.n	800a79e <_printf_float+0x456>

0800a7b4 <_printf_common>:
 800a7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b8:	4616      	mov	r6, r2
 800a7ba:	4699      	mov	r9, r3
 800a7bc:	688a      	ldr	r2, [r1, #8]
 800a7be:	690b      	ldr	r3, [r1, #16]
 800a7c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	bfb8      	it	lt
 800a7c8:	4613      	movlt	r3, r2
 800a7ca:	6033      	str	r3, [r6, #0]
 800a7cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	b10a      	cbz	r2, 800a7da <_printf_common+0x26>
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	6033      	str	r3, [r6, #0]
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	0699      	lsls	r1, r3, #26
 800a7de:	bf42      	ittt	mi
 800a7e0:	6833      	ldrmi	r3, [r6, #0]
 800a7e2:	3302      	addmi	r3, #2
 800a7e4:	6033      	strmi	r3, [r6, #0]
 800a7e6:	6825      	ldr	r5, [r4, #0]
 800a7e8:	f015 0506 	ands.w	r5, r5, #6
 800a7ec:	d106      	bne.n	800a7fc <_printf_common+0x48>
 800a7ee:	f104 0a19 	add.w	sl, r4, #25
 800a7f2:	68e3      	ldr	r3, [r4, #12]
 800a7f4:	6832      	ldr	r2, [r6, #0]
 800a7f6:	1a9b      	subs	r3, r3, r2
 800a7f8:	42ab      	cmp	r3, r5
 800a7fa:	dc26      	bgt.n	800a84a <_printf_common+0x96>
 800a7fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a800:	1e13      	subs	r3, r2, #0
 800a802:	6822      	ldr	r2, [r4, #0]
 800a804:	bf18      	it	ne
 800a806:	2301      	movne	r3, #1
 800a808:	0692      	lsls	r2, r2, #26
 800a80a:	d42b      	bmi.n	800a864 <_printf_common+0xb0>
 800a80c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a810:	4649      	mov	r1, r9
 800a812:	4638      	mov	r0, r7
 800a814:	47c0      	blx	r8
 800a816:	3001      	adds	r0, #1
 800a818:	d01e      	beq.n	800a858 <_printf_common+0xa4>
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	68e5      	ldr	r5, [r4, #12]
 800a81e:	6832      	ldr	r2, [r6, #0]
 800a820:	f003 0306 	and.w	r3, r3, #6
 800a824:	2b04      	cmp	r3, #4
 800a826:	bf08      	it	eq
 800a828:	1aad      	subeq	r5, r5, r2
 800a82a:	68a3      	ldr	r3, [r4, #8]
 800a82c:	6922      	ldr	r2, [r4, #16]
 800a82e:	bf0c      	ite	eq
 800a830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a834:	2500      	movne	r5, #0
 800a836:	4293      	cmp	r3, r2
 800a838:	bfc4      	itt	gt
 800a83a:	1a9b      	subgt	r3, r3, r2
 800a83c:	18ed      	addgt	r5, r5, r3
 800a83e:	2600      	movs	r6, #0
 800a840:	341a      	adds	r4, #26
 800a842:	42b5      	cmp	r5, r6
 800a844:	d11a      	bne.n	800a87c <_printf_common+0xc8>
 800a846:	2000      	movs	r0, #0
 800a848:	e008      	b.n	800a85c <_printf_common+0xa8>
 800a84a:	2301      	movs	r3, #1
 800a84c:	4652      	mov	r2, sl
 800a84e:	4649      	mov	r1, r9
 800a850:	4638      	mov	r0, r7
 800a852:	47c0      	blx	r8
 800a854:	3001      	adds	r0, #1
 800a856:	d103      	bne.n	800a860 <_printf_common+0xac>
 800a858:	f04f 30ff 	mov.w	r0, #4294967295
 800a85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a860:	3501      	adds	r5, #1
 800a862:	e7c6      	b.n	800a7f2 <_printf_common+0x3e>
 800a864:	18e1      	adds	r1, r4, r3
 800a866:	1c5a      	adds	r2, r3, #1
 800a868:	2030      	movs	r0, #48	; 0x30
 800a86a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a86e:	4422      	add	r2, r4
 800a870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a878:	3302      	adds	r3, #2
 800a87a:	e7c7      	b.n	800a80c <_printf_common+0x58>
 800a87c:	2301      	movs	r3, #1
 800a87e:	4622      	mov	r2, r4
 800a880:	4649      	mov	r1, r9
 800a882:	4638      	mov	r0, r7
 800a884:	47c0      	blx	r8
 800a886:	3001      	adds	r0, #1
 800a888:	d0e6      	beq.n	800a858 <_printf_common+0xa4>
 800a88a:	3601      	adds	r6, #1
 800a88c:	e7d9      	b.n	800a842 <_printf_common+0x8e>
	...

0800a890 <_printf_i>:
 800a890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a894:	7e0f      	ldrb	r7, [r1, #24]
 800a896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a898:	2f78      	cmp	r7, #120	; 0x78
 800a89a:	4691      	mov	r9, r2
 800a89c:	4680      	mov	r8, r0
 800a89e:	460c      	mov	r4, r1
 800a8a0:	469a      	mov	sl, r3
 800a8a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8a6:	d807      	bhi.n	800a8b8 <_printf_i+0x28>
 800a8a8:	2f62      	cmp	r7, #98	; 0x62
 800a8aa:	d80a      	bhi.n	800a8c2 <_printf_i+0x32>
 800a8ac:	2f00      	cmp	r7, #0
 800a8ae:	f000 80d8 	beq.w	800aa62 <_printf_i+0x1d2>
 800a8b2:	2f58      	cmp	r7, #88	; 0x58
 800a8b4:	f000 80a3 	beq.w	800a9fe <_printf_i+0x16e>
 800a8b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8c0:	e03a      	b.n	800a938 <_printf_i+0xa8>
 800a8c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8c6:	2b15      	cmp	r3, #21
 800a8c8:	d8f6      	bhi.n	800a8b8 <_printf_i+0x28>
 800a8ca:	a101      	add	r1, pc, #4	; (adr r1, 800a8d0 <_printf_i+0x40>)
 800a8cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8d0:	0800a929 	.word	0x0800a929
 800a8d4:	0800a93d 	.word	0x0800a93d
 800a8d8:	0800a8b9 	.word	0x0800a8b9
 800a8dc:	0800a8b9 	.word	0x0800a8b9
 800a8e0:	0800a8b9 	.word	0x0800a8b9
 800a8e4:	0800a8b9 	.word	0x0800a8b9
 800a8e8:	0800a93d 	.word	0x0800a93d
 800a8ec:	0800a8b9 	.word	0x0800a8b9
 800a8f0:	0800a8b9 	.word	0x0800a8b9
 800a8f4:	0800a8b9 	.word	0x0800a8b9
 800a8f8:	0800a8b9 	.word	0x0800a8b9
 800a8fc:	0800aa49 	.word	0x0800aa49
 800a900:	0800a96d 	.word	0x0800a96d
 800a904:	0800aa2b 	.word	0x0800aa2b
 800a908:	0800a8b9 	.word	0x0800a8b9
 800a90c:	0800a8b9 	.word	0x0800a8b9
 800a910:	0800aa6b 	.word	0x0800aa6b
 800a914:	0800a8b9 	.word	0x0800a8b9
 800a918:	0800a96d 	.word	0x0800a96d
 800a91c:	0800a8b9 	.word	0x0800a8b9
 800a920:	0800a8b9 	.word	0x0800a8b9
 800a924:	0800aa33 	.word	0x0800aa33
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	1d1a      	adds	r2, r3, #4
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	602a      	str	r2, [r5, #0]
 800a930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a938:	2301      	movs	r3, #1
 800a93a:	e0a3      	b.n	800aa84 <_printf_i+0x1f4>
 800a93c:	6820      	ldr	r0, [r4, #0]
 800a93e:	6829      	ldr	r1, [r5, #0]
 800a940:	0606      	lsls	r6, r0, #24
 800a942:	f101 0304 	add.w	r3, r1, #4
 800a946:	d50a      	bpl.n	800a95e <_printf_i+0xce>
 800a948:	680e      	ldr	r6, [r1, #0]
 800a94a:	602b      	str	r3, [r5, #0]
 800a94c:	2e00      	cmp	r6, #0
 800a94e:	da03      	bge.n	800a958 <_printf_i+0xc8>
 800a950:	232d      	movs	r3, #45	; 0x2d
 800a952:	4276      	negs	r6, r6
 800a954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a958:	485e      	ldr	r0, [pc, #376]	; (800aad4 <_printf_i+0x244>)
 800a95a:	230a      	movs	r3, #10
 800a95c:	e019      	b.n	800a992 <_printf_i+0x102>
 800a95e:	680e      	ldr	r6, [r1, #0]
 800a960:	602b      	str	r3, [r5, #0]
 800a962:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a966:	bf18      	it	ne
 800a968:	b236      	sxthne	r6, r6
 800a96a:	e7ef      	b.n	800a94c <_printf_i+0xbc>
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	6820      	ldr	r0, [r4, #0]
 800a970:	1d19      	adds	r1, r3, #4
 800a972:	6029      	str	r1, [r5, #0]
 800a974:	0601      	lsls	r1, r0, #24
 800a976:	d501      	bpl.n	800a97c <_printf_i+0xec>
 800a978:	681e      	ldr	r6, [r3, #0]
 800a97a:	e002      	b.n	800a982 <_printf_i+0xf2>
 800a97c:	0646      	lsls	r6, r0, #25
 800a97e:	d5fb      	bpl.n	800a978 <_printf_i+0xe8>
 800a980:	881e      	ldrh	r6, [r3, #0]
 800a982:	4854      	ldr	r0, [pc, #336]	; (800aad4 <_printf_i+0x244>)
 800a984:	2f6f      	cmp	r7, #111	; 0x6f
 800a986:	bf0c      	ite	eq
 800a988:	2308      	moveq	r3, #8
 800a98a:	230a      	movne	r3, #10
 800a98c:	2100      	movs	r1, #0
 800a98e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a992:	6865      	ldr	r5, [r4, #4]
 800a994:	60a5      	str	r5, [r4, #8]
 800a996:	2d00      	cmp	r5, #0
 800a998:	bfa2      	ittt	ge
 800a99a:	6821      	ldrge	r1, [r4, #0]
 800a99c:	f021 0104 	bicge.w	r1, r1, #4
 800a9a0:	6021      	strge	r1, [r4, #0]
 800a9a2:	b90e      	cbnz	r6, 800a9a8 <_printf_i+0x118>
 800a9a4:	2d00      	cmp	r5, #0
 800a9a6:	d04d      	beq.n	800aa44 <_printf_i+0x1b4>
 800a9a8:	4615      	mov	r5, r2
 800a9aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9ae:	fb03 6711 	mls	r7, r3, r1, r6
 800a9b2:	5dc7      	ldrb	r7, [r0, r7]
 800a9b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9b8:	4637      	mov	r7, r6
 800a9ba:	42bb      	cmp	r3, r7
 800a9bc:	460e      	mov	r6, r1
 800a9be:	d9f4      	bls.n	800a9aa <_printf_i+0x11a>
 800a9c0:	2b08      	cmp	r3, #8
 800a9c2:	d10b      	bne.n	800a9dc <_printf_i+0x14c>
 800a9c4:	6823      	ldr	r3, [r4, #0]
 800a9c6:	07de      	lsls	r6, r3, #31
 800a9c8:	d508      	bpl.n	800a9dc <_printf_i+0x14c>
 800a9ca:	6923      	ldr	r3, [r4, #16]
 800a9cc:	6861      	ldr	r1, [r4, #4]
 800a9ce:	4299      	cmp	r1, r3
 800a9d0:	bfde      	ittt	le
 800a9d2:	2330      	movle	r3, #48	; 0x30
 800a9d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9dc:	1b52      	subs	r2, r2, r5
 800a9de:	6122      	str	r2, [r4, #16]
 800a9e0:	f8cd a000 	str.w	sl, [sp]
 800a9e4:	464b      	mov	r3, r9
 800a9e6:	aa03      	add	r2, sp, #12
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	4640      	mov	r0, r8
 800a9ec:	f7ff fee2 	bl	800a7b4 <_printf_common>
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	d14c      	bne.n	800aa8e <_printf_i+0x1fe>
 800a9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f8:	b004      	add	sp, #16
 800a9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9fe:	4835      	ldr	r0, [pc, #212]	; (800aad4 <_printf_i+0x244>)
 800aa00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa04:	6829      	ldr	r1, [r5, #0]
 800aa06:	6823      	ldr	r3, [r4, #0]
 800aa08:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa0c:	6029      	str	r1, [r5, #0]
 800aa0e:	061d      	lsls	r5, r3, #24
 800aa10:	d514      	bpl.n	800aa3c <_printf_i+0x1ac>
 800aa12:	07df      	lsls	r7, r3, #31
 800aa14:	bf44      	itt	mi
 800aa16:	f043 0320 	orrmi.w	r3, r3, #32
 800aa1a:	6023      	strmi	r3, [r4, #0]
 800aa1c:	b91e      	cbnz	r6, 800aa26 <_printf_i+0x196>
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	f023 0320 	bic.w	r3, r3, #32
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	2310      	movs	r3, #16
 800aa28:	e7b0      	b.n	800a98c <_printf_i+0xfc>
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	f043 0320 	orr.w	r3, r3, #32
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	2378      	movs	r3, #120	; 0x78
 800aa34:	4828      	ldr	r0, [pc, #160]	; (800aad8 <_printf_i+0x248>)
 800aa36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa3a:	e7e3      	b.n	800aa04 <_printf_i+0x174>
 800aa3c:	0659      	lsls	r1, r3, #25
 800aa3e:	bf48      	it	mi
 800aa40:	b2b6      	uxthmi	r6, r6
 800aa42:	e7e6      	b.n	800aa12 <_printf_i+0x182>
 800aa44:	4615      	mov	r5, r2
 800aa46:	e7bb      	b.n	800a9c0 <_printf_i+0x130>
 800aa48:	682b      	ldr	r3, [r5, #0]
 800aa4a:	6826      	ldr	r6, [r4, #0]
 800aa4c:	6961      	ldr	r1, [r4, #20]
 800aa4e:	1d18      	adds	r0, r3, #4
 800aa50:	6028      	str	r0, [r5, #0]
 800aa52:	0635      	lsls	r5, r6, #24
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	d501      	bpl.n	800aa5c <_printf_i+0x1cc>
 800aa58:	6019      	str	r1, [r3, #0]
 800aa5a:	e002      	b.n	800aa62 <_printf_i+0x1d2>
 800aa5c:	0670      	lsls	r0, r6, #25
 800aa5e:	d5fb      	bpl.n	800aa58 <_printf_i+0x1c8>
 800aa60:	8019      	strh	r1, [r3, #0]
 800aa62:	2300      	movs	r3, #0
 800aa64:	6123      	str	r3, [r4, #16]
 800aa66:	4615      	mov	r5, r2
 800aa68:	e7ba      	b.n	800a9e0 <_printf_i+0x150>
 800aa6a:	682b      	ldr	r3, [r5, #0]
 800aa6c:	1d1a      	adds	r2, r3, #4
 800aa6e:	602a      	str	r2, [r5, #0]
 800aa70:	681d      	ldr	r5, [r3, #0]
 800aa72:	6862      	ldr	r2, [r4, #4]
 800aa74:	2100      	movs	r1, #0
 800aa76:	4628      	mov	r0, r5
 800aa78:	f7f5 fbb2 	bl	80001e0 <memchr>
 800aa7c:	b108      	cbz	r0, 800aa82 <_printf_i+0x1f2>
 800aa7e:	1b40      	subs	r0, r0, r5
 800aa80:	6060      	str	r0, [r4, #4]
 800aa82:	6863      	ldr	r3, [r4, #4]
 800aa84:	6123      	str	r3, [r4, #16]
 800aa86:	2300      	movs	r3, #0
 800aa88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa8c:	e7a8      	b.n	800a9e0 <_printf_i+0x150>
 800aa8e:	6923      	ldr	r3, [r4, #16]
 800aa90:	462a      	mov	r2, r5
 800aa92:	4649      	mov	r1, r9
 800aa94:	4640      	mov	r0, r8
 800aa96:	47d0      	blx	sl
 800aa98:	3001      	adds	r0, #1
 800aa9a:	d0ab      	beq.n	800a9f4 <_printf_i+0x164>
 800aa9c:	6823      	ldr	r3, [r4, #0]
 800aa9e:	079b      	lsls	r3, r3, #30
 800aaa0:	d413      	bmi.n	800aaca <_printf_i+0x23a>
 800aaa2:	68e0      	ldr	r0, [r4, #12]
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	4298      	cmp	r0, r3
 800aaa8:	bfb8      	it	lt
 800aaaa:	4618      	movlt	r0, r3
 800aaac:	e7a4      	b.n	800a9f8 <_printf_i+0x168>
 800aaae:	2301      	movs	r3, #1
 800aab0:	4632      	mov	r2, r6
 800aab2:	4649      	mov	r1, r9
 800aab4:	4640      	mov	r0, r8
 800aab6:	47d0      	blx	sl
 800aab8:	3001      	adds	r0, #1
 800aaba:	d09b      	beq.n	800a9f4 <_printf_i+0x164>
 800aabc:	3501      	adds	r5, #1
 800aabe:	68e3      	ldr	r3, [r4, #12]
 800aac0:	9903      	ldr	r1, [sp, #12]
 800aac2:	1a5b      	subs	r3, r3, r1
 800aac4:	42ab      	cmp	r3, r5
 800aac6:	dcf2      	bgt.n	800aaae <_printf_i+0x21e>
 800aac8:	e7eb      	b.n	800aaa2 <_printf_i+0x212>
 800aaca:	2500      	movs	r5, #0
 800aacc:	f104 0619 	add.w	r6, r4, #25
 800aad0:	e7f5      	b.n	800aabe <_printf_i+0x22e>
 800aad2:	bf00      	nop
 800aad4:	0800eea2 	.word	0x0800eea2
 800aad8:	0800eeb3 	.word	0x0800eeb3

0800aadc <_scanf_float>:
 800aadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae0:	b087      	sub	sp, #28
 800aae2:	4617      	mov	r7, r2
 800aae4:	9303      	str	r3, [sp, #12]
 800aae6:	688b      	ldr	r3, [r1, #8]
 800aae8:	1e5a      	subs	r2, r3, #1
 800aaea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aaee:	bf83      	ittte	hi
 800aaf0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aaf4:	195b      	addhi	r3, r3, r5
 800aaf6:	9302      	strhi	r3, [sp, #8]
 800aaf8:	2300      	movls	r3, #0
 800aafa:	bf86      	itte	hi
 800aafc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ab00:	608b      	strhi	r3, [r1, #8]
 800ab02:	9302      	strls	r3, [sp, #8]
 800ab04:	680b      	ldr	r3, [r1, #0]
 800ab06:	468b      	mov	fp, r1
 800ab08:	2500      	movs	r5, #0
 800ab0a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ab0e:	f84b 3b1c 	str.w	r3, [fp], #28
 800ab12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ab16:	4680      	mov	r8, r0
 800ab18:	460c      	mov	r4, r1
 800ab1a:	465e      	mov	r6, fp
 800ab1c:	46aa      	mov	sl, r5
 800ab1e:	46a9      	mov	r9, r5
 800ab20:	9501      	str	r5, [sp, #4]
 800ab22:	68a2      	ldr	r2, [r4, #8]
 800ab24:	b152      	cbz	r2, 800ab3c <_scanf_float+0x60>
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	2b4e      	cmp	r3, #78	; 0x4e
 800ab2c:	d864      	bhi.n	800abf8 <_scanf_float+0x11c>
 800ab2e:	2b40      	cmp	r3, #64	; 0x40
 800ab30:	d83c      	bhi.n	800abac <_scanf_float+0xd0>
 800ab32:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ab36:	b2c8      	uxtb	r0, r1
 800ab38:	280e      	cmp	r0, #14
 800ab3a:	d93a      	bls.n	800abb2 <_scanf_float+0xd6>
 800ab3c:	f1b9 0f00 	cmp.w	r9, #0
 800ab40:	d003      	beq.n	800ab4a <_scanf_float+0x6e>
 800ab42:	6823      	ldr	r3, [r4, #0]
 800ab44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab4e:	f1ba 0f01 	cmp.w	sl, #1
 800ab52:	f200 8113 	bhi.w	800ad7c <_scanf_float+0x2a0>
 800ab56:	455e      	cmp	r6, fp
 800ab58:	f200 8105 	bhi.w	800ad66 <_scanf_float+0x28a>
 800ab5c:	2501      	movs	r5, #1
 800ab5e:	4628      	mov	r0, r5
 800ab60:	b007      	add	sp, #28
 800ab62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab66:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ab6a:	2a0d      	cmp	r2, #13
 800ab6c:	d8e6      	bhi.n	800ab3c <_scanf_float+0x60>
 800ab6e:	a101      	add	r1, pc, #4	; (adr r1, 800ab74 <_scanf_float+0x98>)
 800ab70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ab74:	0800acb3 	.word	0x0800acb3
 800ab78:	0800ab3d 	.word	0x0800ab3d
 800ab7c:	0800ab3d 	.word	0x0800ab3d
 800ab80:	0800ab3d 	.word	0x0800ab3d
 800ab84:	0800ad13 	.word	0x0800ad13
 800ab88:	0800aceb 	.word	0x0800aceb
 800ab8c:	0800ab3d 	.word	0x0800ab3d
 800ab90:	0800ab3d 	.word	0x0800ab3d
 800ab94:	0800acc1 	.word	0x0800acc1
 800ab98:	0800ab3d 	.word	0x0800ab3d
 800ab9c:	0800ab3d 	.word	0x0800ab3d
 800aba0:	0800ab3d 	.word	0x0800ab3d
 800aba4:	0800ab3d 	.word	0x0800ab3d
 800aba8:	0800ac79 	.word	0x0800ac79
 800abac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800abb0:	e7db      	b.n	800ab6a <_scanf_float+0x8e>
 800abb2:	290e      	cmp	r1, #14
 800abb4:	d8c2      	bhi.n	800ab3c <_scanf_float+0x60>
 800abb6:	a001      	add	r0, pc, #4	; (adr r0, 800abbc <_scanf_float+0xe0>)
 800abb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800abbc:	0800ac6b 	.word	0x0800ac6b
 800abc0:	0800ab3d 	.word	0x0800ab3d
 800abc4:	0800ac6b 	.word	0x0800ac6b
 800abc8:	0800acff 	.word	0x0800acff
 800abcc:	0800ab3d 	.word	0x0800ab3d
 800abd0:	0800ac19 	.word	0x0800ac19
 800abd4:	0800ac55 	.word	0x0800ac55
 800abd8:	0800ac55 	.word	0x0800ac55
 800abdc:	0800ac55 	.word	0x0800ac55
 800abe0:	0800ac55 	.word	0x0800ac55
 800abe4:	0800ac55 	.word	0x0800ac55
 800abe8:	0800ac55 	.word	0x0800ac55
 800abec:	0800ac55 	.word	0x0800ac55
 800abf0:	0800ac55 	.word	0x0800ac55
 800abf4:	0800ac55 	.word	0x0800ac55
 800abf8:	2b6e      	cmp	r3, #110	; 0x6e
 800abfa:	d809      	bhi.n	800ac10 <_scanf_float+0x134>
 800abfc:	2b60      	cmp	r3, #96	; 0x60
 800abfe:	d8b2      	bhi.n	800ab66 <_scanf_float+0x8a>
 800ac00:	2b54      	cmp	r3, #84	; 0x54
 800ac02:	d077      	beq.n	800acf4 <_scanf_float+0x218>
 800ac04:	2b59      	cmp	r3, #89	; 0x59
 800ac06:	d199      	bne.n	800ab3c <_scanf_float+0x60>
 800ac08:	2d07      	cmp	r5, #7
 800ac0a:	d197      	bne.n	800ab3c <_scanf_float+0x60>
 800ac0c:	2508      	movs	r5, #8
 800ac0e:	e029      	b.n	800ac64 <_scanf_float+0x188>
 800ac10:	2b74      	cmp	r3, #116	; 0x74
 800ac12:	d06f      	beq.n	800acf4 <_scanf_float+0x218>
 800ac14:	2b79      	cmp	r3, #121	; 0x79
 800ac16:	e7f6      	b.n	800ac06 <_scanf_float+0x12a>
 800ac18:	6821      	ldr	r1, [r4, #0]
 800ac1a:	05c8      	lsls	r0, r1, #23
 800ac1c:	d51a      	bpl.n	800ac54 <_scanf_float+0x178>
 800ac1e:	9b02      	ldr	r3, [sp, #8]
 800ac20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ac24:	6021      	str	r1, [r4, #0]
 800ac26:	f109 0901 	add.w	r9, r9, #1
 800ac2a:	b11b      	cbz	r3, 800ac34 <_scanf_float+0x158>
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	3201      	adds	r2, #1
 800ac30:	9302      	str	r3, [sp, #8]
 800ac32:	60a2      	str	r2, [r4, #8]
 800ac34:	68a3      	ldr	r3, [r4, #8]
 800ac36:	3b01      	subs	r3, #1
 800ac38:	60a3      	str	r3, [r4, #8]
 800ac3a:	6923      	ldr	r3, [r4, #16]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	6123      	str	r3, [r4, #16]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	3b01      	subs	r3, #1
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	607b      	str	r3, [r7, #4]
 800ac48:	f340 8084 	ble.w	800ad54 <_scanf_float+0x278>
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	603b      	str	r3, [r7, #0]
 800ac52:	e766      	b.n	800ab22 <_scanf_float+0x46>
 800ac54:	eb1a 0f05 	cmn.w	sl, r5
 800ac58:	f47f af70 	bne.w	800ab3c <_scanf_float+0x60>
 800ac5c:	6822      	ldr	r2, [r4, #0]
 800ac5e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ac62:	6022      	str	r2, [r4, #0]
 800ac64:	f806 3b01 	strb.w	r3, [r6], #1
 800ac68:	e7e4      	b.n	800ac34 <_scanf_float+0x158>
 800ac6a:	6822      	ldr	r2, [r4, #0]
 800ac6c:	0610      	lsls	r0, r2, #24
 800ac6e:	f57f af65 	bpl.w	800ab3c <_scanf_float+0x60>
 800ac72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac76:	e7f4      	b.n	800ac62 <_scanf_float+0x186>
 800ac78:	f1ba 0f00 	cmp.w	sl, #0
 800ac7c:	d10e      	bne.n	800ac9c <_scanf_float+0x1c0>
 800ac7e:	f1b9 0f00 	cmp.w	r9, #0
 800ac82:	d10e      	bne.n	800aca2 <_scanf_float+0x1c6>
 800ac84:	6822      	ldr	r2, [r4, #0]
 800ac86:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ac8a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ac8e:	d108      	bne.n	800aca2 <_scanf_float+0x1c6>
 800ac90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac94:	6022      	str	r2, [r4, #0]
 800ac96:	f04f 0a01 	mov.w	sl, #1
 800ac9a:	e7e3      	b.n	800ac64 <_scanf_float+0x188>
 800ac9c:	f1ba 0f02 	cmp.w	sl, #2
 800aca0:	d055      	beq.n	800ad4e <_scanf_float+0x272>
 800aca2:	2d01      	cmp	r5, #1
 800aca4:	d002      	beq.n	800acac <_scanf_float+0x1d0>
 800aca6:	2d04      	cmp	r5, #4
 800aca8:	f47f af48 	bne.w	800ab3c <_scanf_float+0x60>
 800acac:	3501      	adds	r5, #1
 800acae:	b2ed      	uxtb	r5, r5
 800acb0:	e7d8      	b.n	800ac64 <_scanf_float+0x188>
 800acb2:	f1ba 0f01 	cmp.w	sl, #1
 800acb6:	f47f af41 	bne.w	800ab3c <_scanf_float+0x60>
 800acba:	f04f 0a02 	mov.w	sl, #2
 800acbe:	e7d1      	b.n	800ac64 <_scanf_float+0x188>
 800acc0:	b97d      	cbnz	r5, 800ace2 <_scanf_float+0x206>
 800acc2:	f1b9 0f00 	cmp.w	r9, #0
 800acc6:	f47f af3c 	bne.w	800ab42 <_scanf_float+0x66>
 800acca:	6822      	ldr	r2, [r4, #0]
 800accc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800acd0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800acd4:	f47f af39 	bne.w	800ab4a <_scanf_float+0x6e>
 800acd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800acdc:	6022      	str	r2, [r4, #0]
 800acde:	2501      	movs	r5, #1
 800ace0:	e7c0      	b.n	800ac64 <_scanf_float+0x188>
 800ace2:	2d03      	cmp	r5, #3
 800ace4:	d0e2      	beq.n	800acac <_scanf_float+0x1d0>
 800ace6:	2d05      	cmp	r5, #5
 800ace8:	e7de      	b.n	800aca8 <_scanf_float+0x1cc>
 800acea:	2d02      	cmp	r5, #2
 800acec:	f47f af26 	bne.w	800ab3c <_scanf_float+0x60>
 800acf0:	2503      	movs	r5, #3
 800acf2:	e7b7      	b.n	800ac64 <_scanf_float+0x188>
 800acf4:	2d06      	cmp	r5, #6
 800acf6:	f47f af21 	bne.w	800ab3c <_scanf_float+0x60>
 800acfa:	2507      	movs	r5, #7
 800acfc:	e7b2      	b.n	800ac64 <_scanf_float+0x188>
 800acfe:	6822      	ldr	r2, [r4, #0]
 800ad00:	0591      	lsls	r1, r2, #22
 800ad02:	f57f af1b 	bpl.w	800ab3c <_scanf_float+0x60>
 800ad06:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ad0a:	6022      	str	r2, [r4, #0]
 800ad0c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ad10:	e7a8      	b.n	800ac64 <_scanf_float+0x188>
 800ad12:	6822      	ldr	r2, [r4, #0]
 800ad14:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ad18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ad1c:	d006      	beq.n	800ad2c <_scanf_float+0x250>
 800ad1e:	0550      	lsls	r0, r2, #21
 800ad20:	f57f af0c 	bpl.w	800ab3c <_scanf_float+0x60>
 800ad24:	f1b9 0f00 	cmp.w	r9, #0
 800ad28:	f43f af0f 	beq.w	800ab4a <_scanf_float+0x6e>
 800ad2c:	0591      	lsls	r1, r2, #22
 800ad2e:	bf58      	it	pl
 800ad30:	9901      	ldrpl	r1, [sp, #4]
 800ad32:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad36:	bf58      	it	pl
 800ad38:	eba9 0101 	subpl.w	r1, r9, r1
 800ad3c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ad40:	bf58      	it	pl
 800ad42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ad46:	6022      	str	r2, [r4, #0]
 800ad48:	f04f 0900 	mov.w	r9, #0
 800ad4c:	e78a      	b.n	800ac64 <_scanf_float+0x188>
 800ad4e:	f04f 0a03 	mov.w	sl, #3
 800ad52:	e787      	b.n	800ac64 <_scanf_float+0x188>
 800ad54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ad58:	4639      	mov	r1, r7
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	4798      	blx	r3
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	f43f aedf 	beq.w	800ab22 <_scanf_float+0x46>
 800ad64:	e6ea      	b.n	800ab3c <_scanf_float+0x60>
 800ad66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad6e:	463a      	mov	r2, r7
 800ad70:	4640      	mov	r0, r8
 800ad72:	4798      	blx	r3
 800ad74:	6923      	ldr	r3, [r4, #16]
 800ad76:	3b01      	subs	r3, #1
 800ad78:	6123      	str	r3, [r4, #16]
 800ad7a:	e6ec      	b.n	800ab56 <_scanf_float+0x7a>
 800ad7c:	1e6b      	subs	r3, r5, #1
 800ad7e:	2b06      	cmp	r3, #6
 800ad80:	d825      	bhi.n	800adce <_scanf_float+0x2f2>
 800ad82:	2d02      	cmp	r5, #2
 800ad84:	d836      	bhi.n	800adf4 <_scanf_float+0x318>
 800ad86:	455e      	cmp	r6, fp
 800ad88:	f67f aee8 	bls.w	800ab5c <_scanf_float+0x80>
 800ad8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad94:	463a      	mov	r2, r7
 800ad96:	4640      	mov	r0, r8
 800ad98:	4798      	blx	r3
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	6123      	str	r3, [r4, #16]
 800ada0:	e7f1      	b.n	800ad86 <_scanf_float+0x2aa>
 800ada2:	9802      	ldr	r0, [sp, #8]
 800ada4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ada8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800adac:	9002      	str	r0, [sp, #8]
 800adae:	463a      	mov	r2, r7
 800adb0:	4640      	mov	r0, r8
 800adb2:	4798      	blx	r3
 800adb4:	6923      	ldr	r3, [r4, #16]
 800adb6:	3b01      	subs	r3, #1
 800adb8:	6123      	str	r3, [r4, #16]
 800adba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adbe:	fa5f fa8a 	uxtb.w	sl, sl
 800adc2:	f1ba 0f02 	cmp.w	sl, #2
 800adc6:	d1ec      	bne.n	800ada2 <_scanf_float+0x2c6>
 800adc8:	3d03      	subs	r5, #3
 800adca:	b2ed      	uxtb	r5, r5
 800adcc:	1b76      	subs	r6, r6, r5
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	05da      	lsls	r2, r3, #23
 800add2:	d52f      	bpl.n	800ae34 <_scanf_float+0x358>
 800add4:	055b      	lsls	r3, r3, #21
 800add6:	d510      	bpl.n	800adfa <_scanf_float+0x31e>
 800add8:	455e      	cmp	r6, fp
 800adda:	f67f aebf 	bls.w	800ab5c <_scanf_float+0x80>
 800adde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ade2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ade6:	463a      	mov	r2, r7
 800ade8:	4640      	mov	r0, r8
 800adea:	4798      	blx	r3
 800adec:	6923      	ldr	r3, [r4, #16]
 800adee:	3b01      	subs	r3, #1
 800adf0:	6123      	str	r3, [r4, #16]
 800adf2:	e7f1      	b.n	800add8 <_scanf_float+0x2fc>
 800adf4:	46aa      	mov	sl, r5
 800adf6:	9602      	str	r6, [sp, #8]
 800adf8:	e7df      	b.n	800adba <_scanf_float+0x2de>
 800adfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800adfe:	6923      	ldr	r3, [r4, #16]
 800ae00:	2965      	cmp	r1, #101	; 0x65
 800ae02:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae06:	f106 35ff 	add.w	r5, r6, #4294967295
 800ae0a:	6123      	str	r3, [r4, #16]
 800ae0c:	d00c      	beq.n	800ae28 <_scanf_float+0x34c>
 800ae0e:	2945      	cmp	r1, #69	; 0x45
 800ae10:	d00a      	beq.n	800ae28 <_scanf_float+0x34c>
 800ae12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae16:	463a      	mov	r2, r7
 800ae18:	4640      	mov	r0, r8
 800ae1a:	4798      	blx	r3
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ae22:	3b01      	subs	r3, #1
 800ae24:	1eb5      	subs	r5, r6, #2
 800ae26:	6123      	str	r3, [r4, #16]
 800ae28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae2c:	463a      	mov	r2, r7
 800ae2e:	4640      	mov	r0, r8
 800ae30:	4798      	blx	r3
 800ae32:	462e      	mov	r6, r5
 800ae34:	6825      	ldr	r5, [r4, #0]
 800ae36:	f015 0510 	ands.w	r5, r5, #16
 800ae3a:	d159      	bne.n	800aef0 <_scanf_float+0x414>
 800ae3c:	7035      	strb	r5, [r6, #0]
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ae44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae48:	d11b      	bne.n	800ae82 <_scanf_float+0x3a6>
 800ae4a:	9b01      	ldr	r3, [sp, #4]
 800ae4c:	454b      	cmp	r3, r9
 800ae4e:	eba3 0209 	sub.w	r2, r3, r9
 800ae52:	d123      	bne.n	800ae9c <_scanf_float+0x3c0>
 800ae54:	2200      	movs	r2, #0
 800ae56:	4659      	mov	r1, fp
 800ae58:	4640      	mov	r0, r8
 800ae5a:	f000 fed7 	bl	800bc0c <_strtod_r>
 800ae5e:	6822      	ldr	r2, [r4, #0]
 800ae60:	9b03      	ldr	r3, [sp, #12]
 800ae62:	f012 0f02 	tst.w	r2, #2
 800ae66:	ec57 6b10 	vmov	r6, r7, d0
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	d021      	beq.n	800aeb2 <_scanf_float+0x3d6>
 800ae6e:	9903      	ldr	r1, [sp, #12]
 800ae70:	1d1a      	adds	r2, r3, #4
 800ae72:	600a      	str	r2, [r1, #0]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	e9c3 6700 	strd	r6, r7, [r3]
 800ae7a:	68e3      	ldr	r3, [r4, #12]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	60e3      	str	r3, [r4, #12]
 800ae80:	e66d      	b.n	800ab5e <_scanf_float+0x82>
 800ae82:	9b04      	ldr	r3, [sp, #16]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d0e5      	beq.n	800ae54 <_scanf_float+0x378>
 800ae88:	9905      	ldr	r1, [sp, #20]
 800ae8a:	230a      	movs	r3, #10
 800ae8c:	462a      	mov	r2, r5
 800ae8e:	3101      	adds	r1, #1
 800ae90:	4640      	mov	r0, r8
 800ae92:	f000 ff43 	bl	800bd1c <_strtol_r>
 800ae96:	9b04      	ldr	r3, [sp, #16]
 800ae98:	9e05      	ldr	r6, [sp, #20]
 800ae9a:	1ac2      	subs	r2, r0, r3
 800ae9c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800aea0:	429e      	cmp	r6, r3
 800aea2:	bf28      	it	cs
 800aea4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800aea8:	4912      	ldr	r1, [pc, #72]	; (800aef4 <_scanf_float+0x418>)
 800aeaa:	4630      	mov	r0, r6
 800aeac:	f000 f854 	bl	800af58 <siprintf>
 800aeb0:	e7d0      	b.n	800ae54 <_scanf_float+0x378>
 800aeb2:	9903      	ldr	r1, [sp, #12]
 800aeb4:	f012 0f04 	tst.w	r2, #4
 800aeb8:	f103 0204 	add.w	r2, r3, #4
 800aebc:	600a      	str	r2, [r1, #0]
 800aebe:	d1d9      	bne.n	800ae74 <_scanf_float+0x398>
 800aec0:	f8d3 8000 	ldr.w	r8, [r3]
 800aec4:	ee10 2a10 	vmov	r2, s0
 800aec8:	ee10 0a10 	vmov	r0, s0
 800aecc:	463b      	mov	r3, r7
 800aece:	4639      	mov	r1, r7
 800aed0:	f7f5 fe2c 	bl	8000b2c <__aeabi_dcmpun>
 800aed4:	b128      	cbz	r0, 800aee2 <_scanf_float+0x406>
 800aed6:	4808      	ldr	r0, [pc, #32]	; (800aef8 <_scanf_float+0x41c>)
 800aed8:	f000 f838 	bl	800af4c <nanf>
 800aedc:	ed88 0a00 	vstr	s0, [r8]
 800aee0:	e7cb      	b.n	800ae7a <_scanf_float+0x39e>
 800aee2:	4630      	mov	r0, r6
 800aee4:	4639      	mov	r1, r7
 800aee6:	f7f5 fe7f 	bl	8000be8 <__aeabi_d2f>
 800aeea:	f8c8 0000 	str.w	r0, [r8]
 800aeee:	e7c4      	b.n	800ae7a <_scanf_float+0x39e>
 800aef0:	2500      	movs	r5, #0
 800aef2:	e634      	b.n	800ab5e <_scanf_float+0x82>
 800aef4:	0800eec4 	.word	0x0800eec4
 800aef8:	0800f338 	.word	0x0800f338

0800aefc <iprintf>:
 800aefc:	b40f      	push	{r0, r1, r2, r3}
 800aefe:	4b0a      	ldr	r3, [pc, #40]	; (800af28 <iprintf+0x2c>)
 800af00:	b513      	push	{r0, r1, r4, lr}
 800af02:	681c      	ldr	r4, [r3, #0]
 800af04:	b124      	cbz	r4, 800af10 <iprintf+0x14>
 800af06:	69a3      	ldr	r3, [r4, #24]
 800af08:	b913      	cbnz	r3, 800af10 <iprintf+0x14>
 800af0a:	4620      	mov	r0, r4
 800af0c:	f001 fdda 	bl	800cac4 <__sinit>
 800af10:	ab05      	add	r3, sp, #20
 800af12:	9a04      	ldr	r2, [sp, #16]
 800af14:	68a1      	ldr	r1, [r4, #8]
 800af16:	9301      	str	r3, [sp, #4]
 800af18:	4620      	mov	r0, r4
 800af1a:	f003 f84b 	bl	800dfb4 <_vfiprintf_r>
 800af1e:	b002      	add	sp, #8
 800af20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af24:	b004      	add	sp, #16
 800af26:	4770      	bx	lr
 800af28:	20000080 	.word	0x20000080

0800af2c <_sbrk_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d06      	ldr	r5, [pc, #24]	; (800af48 <_sbrk_r+0x1c>)
 800af30:	2300      	movs	r3, #0
 800af32:	4604      	mov	r4, r0
 800af34:	4608      	mov	r0, r1
 800af36:	602b      	str	r3, [r5, #0]
 800af38:	f7f8 f864 	bl	8003004 <_sbrk>
 800af3c:	1c43      	adds	r3, r0, #1
 800af3e:	d102      	bne.n	800af46 <_sbrk_r+0x1a>
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	b103      	cbz	r3, 800af46 <_sbrk_r+0x1a>
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	20000868 	.word	0x20000868

0800af4c <nanf>:
 800af4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af54 <nanf+0x8>
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	7fc00000 	.word	0x7fc00000

0800af58 <siprintf>:
 800af58:	b40e      	push	{r1, r2, r3}
 800af5a:	b500      	push	{lr}
 800af5c:	b09c      	sub	sp, #112	; 0x70
 800af5e:	ab1d      	add	r3, sp, #116	; 0x74
 800af60:	9002      	str	r0, [sp, #8]
 800af62:	9006      	str	r0, [sp, #24]
 800af64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af68:	4809      	ldr	r0, [pc, #36]	; (800af90 <siprintf+0x38>)
 800af6a:	9107      	str	r1, [sp, #28]
 800af6c:	9104      	str	r1, [sp, #16]
 800af6e:	4909      	ldr	r1, [pc, #36]	; (800af94 <siprintf+0x3c>)
 800af70:	f853 2b04 	ldr.w	r2, [r3], #4
 800af74:	9105      	str	r1, [sp, #20]
 800af76:	6800      	ldr	r0, [r0, #0]
 800af78:	9301      	str	r3, [sp, #4]
 800af7a:	a902      	add	r1, sp, #8
 800af7c:	f002 fef0 	bl	800dd60 <_svfiprintf_r>
 800af80:	9b02      	ldr	r3, [sp, #8]
 800af82:	2200      	movs	r2, #0
 800af84:	701a      	strb	r2, [r3, #0]
 800af86:	b01c      	add	sp, #112	; 0x70
 800af88:	f85d eb04 	ldr.w	lr, [sp], #4
 800af8c:	b003      	add	sp, #12
 800af8e:	4770      	bx	lr
 800af90:	20000080 	.word	0x20000080
 800af94:	ffff0208 	.word	0xffff0208

0800af98 <strstr>:
 800af98:	780a      	ldrb	r2, [r1, #0]
 800af9a:	b570      	push	{r4, r5, r6, lr}
 800af9c:	b96a      	cbnz	r2, 800afba <strstr+0x22>
 800af9e:	bd70      	pop	{r4, r5, r6, pc}
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d109      	bne.n	800afb8 <strstr+0x20>
 800afa4:	460c      	mov	r4, r1
 800afa6:	4605      	mov	r5, r0
 800afa8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800afac:	2b00      	cmp	r3, #0
 800afae:	d0f6      	beq.n	800af9e <strstr+0x6>
 800afb0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800afb4:	429e      	cmp	r6, r3
 800afb6:	d0f7      	beq.n	800afa8 <strstr+0x10>
 800afb8:	3001      	adds	r0, #1
 800afba:	7803      	ldrb	r3, [r0, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1ef      	bne.n	800afa0 <strstr+0x8>
 800afc0:	4618      	mov	r0, r3
 800afc2:	e7ec      	b.n	800af9e <strstr+0x6>

0800afc4 <sulp>:
 800afc4:	b570      	push	{r4, r5, r6, lr}
 800afc6:	4604      	mov	r4, r0
 800afc8:	460d      	mov	r5, r1
 800afca:	ec45 4b10 	vmov	d0, r4, r5
 800afce:	4616      	mov	r6, r2
 800afd0:	f002 fd1c 	bl	800da0c <__ulp>
 800afd4:	ec51 0b10 	vmov	r0, r1, d0
 800afd8:	b17e      	cbz	r6, 800affa <sulp+0x36>
 800afda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800afde:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	dd09      	ble.n	800affa <sulp+0x36>
 800afe6:	051b      	lsls	r3, r3, #20
 800afe8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800afec:	2400      	movs	r4, #0
 800afee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aff2:	4622      	mov	r2, r4
 800aff4:	462b      	mov	r3, r5
 800aff6:	f7f5 faff 	bl	80005f8 <__aeabi_dmul>
 800affa:	bd70      	pop	{r4, r5, r6, pc}
 800affc:	0000      	movs	r0, r0
	...

0800b000 <_strtod_l>:
 800b000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b004:	ed2d 8b02 	vpush	{d8}
 800b008:	b09d      	sub	sp, #116	; 0x74
 800b00a:	461f      	mov	r7, r3
 800b00c:	2300      	movs	r3, #0
 800b00e:	9318      	str	r3, [sp, #96]	; 0x60
 800b010:	4ba2      	ldr	r3, [pc, #648]	; (800b29c <_strtod_l+0x29c>)
 800b012:	9213      	str	r2, [sp, #76]	; 0x4c
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	9305      	str	r3, [sp, #20]
 800b018:	4604      	mov	r4, r0
 800b01a:	4618      	mov	r0, r3
 800b01c:	4688      	mov	r8, r1
 800b01e:	f7f5 f8d7 	bl	80001d0 <strlen>
 800b022:	f04f 0a00 	mov.w	sl, #0
 800b026:	4605      	mov	r5, r0
 800b028:	f04f 0b00 	mov.w	fp, #0
 800b02c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b030:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b032:	781a      	ldrb	r2, [r3, #0]
 800b034:	2a2b      	cmp	r2, #43	; 0x2b
 800b036:	d04e      	beq.n	800b0d6 <_strtod_l+0xd6>
 800b038:	d83b      	bhi.n	800b0b2 <_strtod_l+0xb2>
 800b03a:	2a0d      	cmp	r2, #13
 800b03c:	d834      	bhi.n	800b0a8 <_strtod_l+0xa8>
 800b03e:	2a08      	cmp	r2, #8
 800b040:	d834      	bhi.n	800b0ac <_strtod_l+0xac>
 800b042:	2a00      	cmp	r2, #0
 800b044:	d03e      	beq.n	800b0c4 <_strtod_l+0xc4>
 800b046:	2300      	movs	r3, #0
 800b048:	930a      	str	r3, [sp, #40]	; 0x28
 800b04a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b04c:	7833      	ldrb	r3, [r6, #0]
 800b04e:	2b30      	cmp	r3, #48	; 0x30
 800b050:	f040 80b0 	bne.w	800b1b4 <_strtod_l+0x1b4>
 800b054:	7873      	ldrb	r3, [r6, #1]
 800b056:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b05a:	2b58      	cmp	r3, #88	; 0x58
 800b05c:	d168      	bne.n	800b130 <_strtod_l+0x130>
 800b05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b060:	9301      	str	r3, [sp, #4]
 800b062:	ab18      	add	r3, sp, #96	; 0x60
 800b064:	9702      	str	r7, [sp, #8]
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	4a8d      	ldr	r2, [pc, #564]	; (800b2a0 <_strtod_l+0x2a0>)
 800b06a:	ab19      	add	r3, sp, #100	; 0x64
 800b06c:	a917      	add	r1, sp, #92	; 0x5c
 800b06e:	4620      	mov	r0, r4
 800b070:	f001 fe2c 	bl	800cccc <__gethex>
 800b074:	f010 0707 	ands.w	r7, r0, #7
 800b078:	4605      	mov	r5, r0
 800b07a:	d005      	beq.n	800b088 <_strtod_l+0x88>
 800b07c:	2f06      	cmp	r7, #6
 800b07e:	d12c      	bne.n	800b0da <_strtod_l+0xda>
 800b080:	3601      	adds	r6, #1
 800b082:	2300      	movs	r3, #0
 800b084:	9617      	str	r6, [sp, #92]	; 0x5c
 800b086:	930a      	str	r3, [sp, #40]	; 0x28
 800b088:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f040 8590 	bne.w	800bbb0 <_strtod_l+0xbb0>
 800b090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b092:	b1eb      	cbz	r3, 800b0d0 <_strtod_l+0xd0>
 800b094:	4652      	mov	r2, sl
 800b096:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b09a:	ec43 2b10 	vmov	d0, r2, r3
 800b09e:	b01d      	add	sp, #116	; 0x74
 800b0a0:	ecbd 8b02 	vpop	{d8}
 800b0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a8:	2a20      	cmp	r2, #32
 800b0aa:	d1cc      	bne.n	800b046 <_strtod_l+0x46>
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	9317      	str	r3, [sp, #92]	; 0x5c
 800b0b0:	e7be      	b.n	800b030 <_strtod_l+0x30>
 800b0b2:	2a2d      	cmp	r2, #45	; 0x2d
 800b0b4:	d1c7      	bne.n	800b046 <_strtod_l+0x46>
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	920a      	str	r2, [sp, #40]	; 0x28
 800b0ba:	1c5a      	adds	r2, r3, #1
 800b0bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800b0be:	785b      	ldrb	r3, [r3, #1]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1c2      	bne.n	800b04a <_strtod_l+0x4a>
 800b0c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b0c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f040 856e 	bne.w	800bbac <_strtod_l+0xbac>
 800b0d0:	4652      	mov	r2, sl
 800b0d2:	465b      	mov	r3, fp
 800b0d4:	e7e1      	b.n	800b09a <_strtod_l+0x9a>
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	e7ee      	b.n	800b0b8 <_strtod_l+0xb8>
 800b0da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b0dc:	b13a      	cbz	r2, 800b0ee <_strtod_l+0xee>
 800b0de:	2135      	movs	r1, #53	; 0x35
 800b0e0:	a81a      	add	r0, sp, #104	; 0x68
 800b0e2:	f002 fd9e 	bl	800dc22 <__copybits>
 800b0e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f002 f95d 	bl	800d3a8 <_Bfree>
 800b0ee:	3f01      	subs	r7, #1
 800b0f0:	2f04      	cmp	r7, #4
 800b0f2:	d806      	bhi.n	800b102 <_strtod_l+0x102>
 800b0f4:	e8df f007 	tbb	[pc, r7]
 800b0f8:	1714030a 	.word	0x1714030a
 800b0fc:	0a          	.byte	0x0a
 800b0fd:	00          	.byte	0x00
 800b0fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b102:	0728      	lsls	r0, r5, #28
 800b104:	d5c0      	bpl.n	800b088 <_strtod_l+0x88>
 800b106:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b10a:	e7bd      	b.n	800b088 <_strtod_l+0x88>
 800b10c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b110:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b112:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b116:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b11a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b11e:	e7f0      	b.n	800b102 <_strtod_l+0x102>
 800b120:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b2a4 <_strtod_l+0x2a4>
 800b124:	e7ed      	b.n	800b102 <_strtod_l+0x102>
 800b126:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b12a:	f04f 3aff 	mov.w	sl, #4294967295
 800b12e:	e7e8      	b.n	800b102 <_strtod_l+0x102>
 800b130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b132:	1c5a      	adds	r2, r3, #1
 800b134:	9217      	str	r2, [sp, #92]	; 0x5c
 800b136:	785b      	ldrb	r3, [r3, #1]
 800b138:	2b30      	cmp	r3, #48	; 0x30
 800b13a:	d0f9      	beq.n	800b130 <_strtod_l+0x130>
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d0a3      	beq.n	800b088 <_strtod_l+0x88>
 800b140:	2301      	movs	r3, #1
 800b142:	f04f 0900 	mov.w	r9, #0
 800b146:	9304      	str	r3, [sp, #16]
 800b148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b14a:	9308      	str	r3, [sp, #32]
 800b14c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b150:	464f      	mov	r7, r9
 800b152:	220a      	movs	r2, #10
 800b154:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b156:	7806      	ldrb	r6, [r0, #0]
 800b158:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b15c:	b2d9      	uxtb	r1, r3
 800b15e:	2909      	cmp	r1, #9
 800b160:	d92a      	bls.n	800b1b8 <_strtod_l+0x1b8>
 800b162:	9905      	ldr	r1, [sp, #20]
 800b164:	462a      	mov	r2, r5
 800b166:	f003 f8a2 	bl	800e2ae <strncmp>
 800b16a:	b398      	cbz	r0, 800b1d4 <_strtod_l+0x1d4>
 800b16c:	2000      	movs	r0, #0
 800b16e:	4632      	mov	r2, r6
 800b170:	463d      	mov	r5, r7
 800b172:	9005      	str	r0, [sp, #20]
 800b174:	4603      	mov	r3, r0
 800b176:	2a65      	cmp	r2, #101	; 0x65
 800b178:	d001      	beq.n	800b17e <_strtod_l+0x17e>
 800b17a:	2a45      	cmp	r2, #69	; 0x45
 800b17c:	d118      	bne.n	800b1b0 <_strtod_l+0x1b0>
 800b17e:	b91d      	cbnz	r5, 800b188 <_strtod_l+0x188>
 800b180:	9a04      	ldr	r2, [sp, #16]
 800b182:	4302      	orrs	r2, r0
 800b184:	d09e      	beq.n	800b0c4 <_strtod_l+0xc4>
 800b186:	2500      	movs	r5, #0
 800b188:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b18c:	f108 0201 	add.w	r2, r8, #1
 800b190:	9217      	str	r2, [sp, #92]	; 0x5c
 800b192:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b196:	2a2b      	cmp	r2, #43	; 0x2b
 800b198:	d075      	beq.n	800b286 <_strtod_l+0x286>
 800b19a:	2a2d      	cmp	r2, #45	; 0x2d
 800b19c:	d07b      	beq.n	800b296 <_strtod_l+0x296>
 800b19e:	f04f 0c00 	mov.w	ip, #0
 800b1a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b1a6:	2909      	cmp	r1, #9
 800b1a8:	f240 8082 	bls.w	800b2b0 <_strtod_l+0x2b0>
 800b1ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b1b0:	2600      	movs	r6, #0
 800b1b2:	e09d      	b.n	800b2f0 <_strtod_l+0x2f0>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	e7c4      	b.n	800b142 <_strtod_l+0x142>
 800b1b8:	2f08      	cmp	r7, #8
 800b1ba:	bfd8      	it	le
 800b1bc:	9907      	ldrle	r1, [sp, #28]
 800b1be:	f100 0001 	add.w	r0, r0, #1
 800b1c2:	bfda      	itte	le
 800b1c4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b1c8:	9307      	strle	r3, [sp, #28]
 800b1ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b1ce:	3701      	adds	r7, #1
 800b1d0:	9017      	str	r0, [sp, #92]	; 0x5c
 800b1d2:	e7bf      	b.n	800b154 <_strtod_l+0x154>
 800b1d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1d6:	195a      	adds	r2, r3, r5
 800b1d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b1da:	5d5a      	ldrb	r2, [r3, r5]
 800b1dc:	2f00      	cmp	r7, #0
 800b1de:	d037      	beq.n	800b250 <_strtod_l+0x250>
 800b1e0:	9005      	str	r0, [sp, #20]
 800b1e2:	463d      	mov	r5, r7
 800b1e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b1e8:	2b09      	cmp	r3, #9
 800b1ea:	d912      	bls.n	800b212 <_strtod_l+0x212>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	e7c2      	b.n	800b176 <_strtod_l+0x176>
 800b1f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1f2:	1c5a      	adds	r2, r3, #1
 800b1f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b1f6:	785a      	ldrb	r2, [r3, #1]
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	2a30      	cmp	r2, #48	; 0x30
 800b1fc:	d0f8      	beq.n	800b1f0 <_strtod_l+0x1f0>
 800b1fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b202:	2b08      	cmp	r3, #8
 800b204:	f200 84d9 	bhi.w	800bbba <_strtod_l+0xbba>
 800b208:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b20a:	9005      	str	r0, [sp, #20]
 800b20c:	2000      	movs	r0, #0
 800b20e:	9308      	str	r3, [sp, #32]
 800b210:	4605      	mov	r5, r0
 800b212:	3a30      	subs	r2, #48	; 0x30
 800b214:	f100 0301 	add.w	r3, r0, #1
 800b218:	d014      	beq.n	800b244 <_strtod_l+0x244>
 800b21a:	9905      	ldr	r1, [sp, #20]
 800b21c:	4419      	add	r1, r3
 800b21e:	9105      	str	r1, [sp, #20]
 800b220:	462b      	mov	r3, r5
 800b222:	eb00 0e05 	add.w	lr, r0, r5
 800b226:	210a      	movs	r1, #10
 800b228:	4573      	cmp	r3, lr
 800b22a:	d113      	bne.n	800b254 <_strtod_l+0x254>
 800b22c:	182b      	adds	r3, r5, r0
 800b22e:	2b08      	cmp	r3, #8
 800b230:	f105 0501 	add.w	r5, r5, #1
 800b234:	4405      	add	r5, r0
 800b236:	dc1c      	bgt.n	800b272 <_strtod_l+0x272>
 800b238:	9907      	ldr	r1, [sp, #28]
 800b23a:	230a      	movs	r3, #10
 800b23c:	fb03 2301 	mla	r3, r3, r1, r2
 800b240:	9307      	str	r3, [sp, #28]
 800b242:	2300      	movs	r3, #0
 800b244:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b246:	1c51      	adds	r1, r2, #1
 800b248:	9117      	str	r1, [sp, #92]	; 0x5c
 800b24a:	7852      	ldrb	r2, [r2, #1]
 800b24c:	4618      	mov	r0, r3
 800b24e:	e7c9      	b.n	800b1e4 <_strtod_l+0x1e4>
 800b250:	4638      	mov	r0, r7
 800b252:	e7d2      	b.n	800b1fa <_strtod_l+0x1fa>
 800b254:	2b08      	cmp	r3, #8
 800b256:	dc04      	bgt.n	800b262 <_strtod_l+0x262>
 800b258:	9e07      	ldr	r6, [sp, #28]
 800b25a:	434e      	muls	r6, r1
 800b25c:	9607      	str	r6, [sp, #28]
 800b25e:	3301      	adds	r3, #1
 800b260:	e7e2      	b.n	800b228 <_strtod_l+0x228>
 800b262:	f103 0c01 	add.w	ip, r3, #1
 800b266:	f1bc 0f10 	cmp.w	ip, #16
 800b26a:	bfd8      	it	le
 800b26c:	fb01 f909 	mulle.w	r9, r1, r9
 800b270:	e7f5      	b.n	800b25e <_strtod_l+0x25e>
 800b272:	2d10      	cmp	r5, #16
 800b274:	bfdc      	itt	le
 800b276:	230a      	movle	r3, #10
 800b278:	fb03 2909 	mlale	r9, r3, r9, r2
 800b27c:	e7e1      	b.n	800b242 <_strtod_l+0x242>
 800b27e:	2300      	movs	r3, #0
 800b280:	9305      	str	r3, [sp, #20]
 800b282:	2301      	movs	r3, #1
 800b284:	e77c      	b.n	800b180 <_strtod_l+0x180>
 800b286:	f04f 0c00 	mov.w	ip, #0
 800b28a:	f108 0202 	add.w	r2, r8, #2
 800b28e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b290:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b294:	e785      	b.n	800b1a2 <_strtod_l+0x1a2>
 800b296:	f04f 0c01 	mov.w	ip, #1
 800b29a:	e7f6      	b.n	800b28a <_strtod_l+0x28a>
 800b29c:	0800f17c 	.word	0x0800f17c
 800b2a0:	0800eecc 	.word	0x0800eecc
 800b2a4:	7ff00000 	.word	0x7ff00000
 800b2a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b2aa:	1c51      	adds	r1, r2, #1
 800b2ac:	9117      	str	r1, [sp, #92]	; 0x5c
 800b2ae:	7852      	ldrb	r2, [r2, #1]
 800b2b0:	2a30      	cmp	r2, #48	; 0x30
 800b2b2:	d0f9      	beq.n	800b2a8 <_strtod_l+0x2a8>
 800b2b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b2b8:	2908      	cmp	r1, #8
 800b2ba:	f63f af79 	bhi.w	800b1b0 <_strtod_l+0x1b0>
 800b2be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b2c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b2c4:	9206      	str	r2, [sp, #24]
 800b2c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b2c8:	1c51      	adds	r1, r2, #1
 800b2ca:	9117      	str	r1, [sp, #92]	; 0x5c
 800b2cc:	7852      	ldrb	r2, [r2, #1]
 800b2ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b2d2:	2e09      	cmp	r6, #9
 800b2d4:	d937      	bls.n	800b346 <_strtod_l+0x346>
 800b2d6:	9e06      	ldr	r6, [sp, #24]
 800b2d8:	1b89      	subs	r1, r1, r6
 800b2da:	2908      	cmp	r1, #8
 800b2dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b2e0:	dc02      	bgt.n	800b2e8 <_strtod_l+0x2e8>
 800b2e2:	4576      	cmp	r6, lr
 800b2e4:	bfa8      	it	ge
 800b2e6:	4676      	movge	r6, lr
 800b2e8:	f1bc 0f00 	cmp.w	ip, #0
 800b2ec:	d000      	beq.n	800b2f0 <_strtod_l+0x2f0>
 800b2ee:	4276      	negs	r6, r6
 800b2f0:	2d00      	cmp	r5, #0
 800b2f2:	d14d      	bne.n	800b390 <_strtod_l+0x390>
 800b2f4:	9904      	ldr	r1, [sp, #16]
 800b2f6:	4301      	orrs	r1, r0
 800b2f8:	f47f aec6 	bne.w	800b088 <_strtod_l+0x88>
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f47f aee1 	bne.w	800b0c4 <_strtod_l+0xc4>
 800b302:	2a69      	cmp	r2, #105	; 0x69
 800b304:	d027      	beq.n	800b356 <_strtod_l+0x356>
 800b306:	dc24      	bgt.n	800b352 <_strtod_l+0x352>
 800b308:	2a49      	cmp	r2, #73	; 0x49
 800b30a:	d024      	beq.n	800b356 <_strtod_l+0x356>
 800b30c:	2a4e      	cmp	r2, #78	; 0x4e
 800b30e:	f47f aed9 	bne.w	800b0c4 <_strtod_l+0xc4>
 800b312:	499f      	ldr	r1, [pc, #636]	; (800b590 <_strtod_l+0x590>)
 800b314:	a817      	add	r0, sp, #92	; 0x5c
 800b316:	f001 ff31 	bl	800d17c <__match>
 800b31a:	2800      	cmp	r0, #0
 800b31c:	f43f aed2 	beq.w	800b0c4 <_strtod_l+0xc4>
 800b320:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	2b28      	cmp	r3, #40	; 0x28
 800b326:	d12d      	bne.n	800b384 <_strtod_l+0x384>
 800b328:	499a      	ldr	r1, [pc, #616]	; (800b594 <_strtod_l+0x594>)
 800b32a:	aa1a      	add	r2, sp, #104	; 0x68
 800b32c:	a817      	add	r0, sp, #92	; 0x5c
 800b32e:	f001 ff39 	bl	800d1a4 <__hexnan>
 800b332:	2805      	cmp	r0, #5
 800b334:	d126      	bne.n	800b384 <_strtod_l+0x384>
 800b336:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b338:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b33c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b340:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b344:	e6a0      	b.n	800b088 <_strtod_l+0x88>
 800b346:	210a      	movs	r1, #10
 800b348:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b34c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b350:	e7b9      	b.n	800b2c6 <_strtod_l+0x2c6>
 800b352:	2a6e      	cmp	r2, #110	; 0x6e
 800b354:	e7db      	b.n	800b30e <_strtod_l+0x30e>
 800b356:	4990      	ldr	r1, [pc, #576]	; (800b598 <_strtod_l+0x598>)
 800b358:	a817      	add	r0, sp, #92	; 0x5c
 800b35a:	f001 ff0f 	bl	800d17c <__match>
 800b35e:	2800      	cmp	r0, #0
 800b360:	f43f aeb0 	beq.w	800b0c4 <_strtod_l+0xc4>
 800b364:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b366:	498d      	ldr	r1, [pc, #564]	; (800b59c <_strtod_l+0x59c>)
 800b368:	3b01      	subs	r3, #1
 800b36a:	a817      	add	r0, sp, #92	; 0x5c
 800b36c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b36e:	f001 ff05 	bl	800d17c <__match>
 800b372:	b910      	cbnz	r0, 800b37a <_strtod_l+0x37a>
 800b374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b376:	3301      	adds	r3, #1
 800b378:	9317      	str	r3, [sp, #92]	; 0x5c
 800b37a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b5ac <_strtod_l+0x5ac>
 800b37e:	f04f 0a00 	mov.w	sl, #0
 800b382:	e681      	b.n	800b088 <_strtod_l+0x88>
 800b384:	4886      	ldr	r0, [pc, #536]	; (800b5a0 <_strtod_l+0x5a0>)
 800b386:	f002 ff47 	bl	800e218 <nan>
 800b38a:	ec5b ab10 	vmov	sl, fp, d0
 800b38e:	e67b      	b.n	800b088 <_strtod_l+0x88>
 800b390:	9b05      	ldr	r3, [sp, #20]
 800b392:	9807      	ldr	r0, [sp, #28]
 800b394:	1af3      	subs	r3, r6, r3
 800b396:	2f00      	cmp	r7, #0
 800b398:	bf08      	it	eq
 800b39a:	462f      	moveq	r7, r5
 800b39c:	2d10      	cmp	r5, #16
 800b39e:	9306      	str	r3, [sp, #24]
 800b3a0:	46a8      	mov	r8, r5
 800b3a2:	bfa8      	it	ge
 800b3a4:	f04f 0810 	movge.w	r8, #16
 800b3a8:	f7f5 f8ac 	bl	8000504 <__aeabi_ui2d>
 800b3ac:	2d09      	cmp	r5, #9
 800b3ae:	4682      	mov	sl, r0
 800b3b0:	468b      	mov	fp, r1
 800b3b2:	dd13      	ble.n	800b3dc <_strtod_l+0x3dc>
 800b3b4:	4b7b      	ldr	r3, [pc, #492]	; (800b5a4 <_strtod_l+0x5a4>)
 800b3b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b3ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b3be:	f7f5 f91b 	bl	80005f8 <__aeabi_dmul>
 800b3c2:	4682      	mov	sl, r0
 800b3c4:	4648      	mov	r0, r9
 800b3c6:	468b      	mov	fp, r1
 800b3c8:	f7f5 f89c 	bl	8000504 <__aeabi_ui2d>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	4650      	mov	r0, sl
 800b3d2:	4659      	mov	r1, fp
 800b3d4:	f7f4 ff5a 	bl	800028c <__adddf3>
 800b3d8:	4682      	mov	sl, r0
 800b3da:	468b      	mov	fp, r1
 800b3dc:	2d0f      	cmp	r5, #15
 800b3de:	dc38      	bgt.n	800b452 <_strtod_l+0x452>
 800b3e0:	9b06      	ldr	r3, [sp, #24]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f43f ae50 	beq.w	800b088 <_strtod_l+0x88>
 800b3e8:	dd24      	ble.n	800b434 <_strtod_l+0x434>
 800b3ea:	2b16      	cmp	r3, #22
 800b3ec:	dc0b      	bgt.n	800b406 <_strtod_l+0x406>
 800b3ee:	496d      	ldr	r1, [pc, #436]	; (800b5a4 <_strtod_l+0x5a4>)
 800b3f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b3f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3f8:	4652      	mov	r2, sl
 800b3fa:	465b      	mov	r3, fp
 800b3fc:	f7f5 f8fc 	bl	80005f8 <__aeabi_dmul>
 800b400:	4682      	mov	sl, r0
 800b402:	468b      	mov	fp, r1
 800b404:	e640      	b.n	800b088 <_strtod_l+0x88>
 800b406:	9a06      	ldr	r2, [sp, #24]
 800b408:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b40c:	4293      	cmp	r3, r2
 800b40e:	db20      	blt.n	800b452 <_strtod_l+0x452>
 800b410:	4c64      	ldr	r4, [pc, #400]	; (800b5a4 <_strtod_l+0x5a4>)
 800b412:	f1c5 050f 	rsb	r5, r5, #15
 800b416:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b41a:	4652      	mov	r2, sl
 800b41c:	465b      	mov	r3, fp
 800b41e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b422:	f7f5 f8e9 	bl	80005f8 <__aeabi_dmul>
 800b426:	9b06      	ldr	r3, [sp, #24]
 800b428:	1b5d      	subs	r5, r3, r5
 800b42a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b42e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b432:	e7e3      	b.n	800b3fc <_strtod_l+0x3fc>
 800b434:	9b06      	ldr	r3, [sp, #24]
 800b436:	3316      	adds	r3, #22
 800b438:	db0b      	blt.n	800b452 <_strtod_l+0x452>
 800b43a:	9b05      	ldr	r3, [sp, #20]
 800b43c:	1b9e      	subs	r6, r3, r6
 800b43e:	4b59      	ldr	r3, [pc, #356]	; (800b5a4 <_strtod_l+0x5a4>)
 800b440:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b444:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b448:	4650      	mov	r0, sl
 800b44a:	4659      	mov	r1, fp
 800b44c:	f7f5 f9fe 	bl	800084c <__aeabi_ddiv>
 800b450:	e7d6      	b.n	800b400 <_strtod_l+0x400>
 800b452:	9b06      	ldr	r3, [sp, #24]
 800b454:	eba5 0808 	sub.w	r8, r5, r8
 800b458:	4498      	add	r8, r3
 800b45a:	f1b8 0f00 	cmp.w	r8, #0
 800b45e:	dd74      	ble.n	800b54a <_strtod_l+0x54a>
 800b460:	f018 030f 	ands.w	r3, r8, #15
 800b464:	d00a      	beq.n	800b47c <_strtod_l+0x47c>
 800b466:	494f      	ldr	r1, [pc, #316]	; (800b5a4 <_strtod_l+0x5a4>)
 800b468:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b46c:	4652      	mov	r2, sl
 800b46e:	465b      	mov	r3, fp
 800b470:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b474:	f7f5 f8c0 	bl	80005f8 <__aeabi_dmul>
 800b478:	4682      	mov	sl, r0
 800b47a:	468b      	mov	fp, r1
 800b47c:	f038 080f 	bics.w	r8, r8, #15
 800b480:	d04f      	beq.n	800b522 <_strtod_l+0x522>
 800b482:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b486:	dd22      	ble.n	800b4ce <_strtod_l+0x4ce>
 800b488:	2500      	movs	r5, #0
 800b48a:	462e      	mov	r6, r5
 800b48c:	9507      	str	r5, [sp, #28]
 800b48e:	9505      	str	r5, [sp, #20]
 800b490:	2322      	movs	r3, #34	; 0x22
 800b492:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b5ac <_strtod_l+0x5ac>
 800b496:	6023      	str	r3, [r4, #0]
 800b498:	f04f 0a00 	mov.w	sl, #0
 800b49c:	9b07      	ldr	r3, [sp, #28]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f43f adf2 	beq.w	800b088 <_strtod_l+0x88>
 800b4a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f001 ff7e 	bl	800d3a8 <_Bfree>
 800b4ac:	9905      	ldr	r1, [sp, #20]
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f001 ff7a 	bl	800d3a8 <_Bfree>
 800b4b4:	4631      	mov	r1, r6
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f001 ff76 	bl	800d3a8 <_Bfree>
 800b4bc:	9907      	ldr	r1, [sp, #28]
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f001 ff72 	bl	800d3a8 <_Bfree>
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f001 ff6e 	bl	800d3a8 <_Bfree>
 800b4cc:	e5dc      	b.n	800b088 <_strtod_l+0x88>
 800b4ce:	4b36      	ldr	r3, [pc, #216]	; (800b5a8 <_strtod_l+0x5a8>)
 800b4d0:	9304      	str	r3, [sp, #16]
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b4d8:	4650      	mov	r0, sl
 800b4da:	4659      	mov	r1, fp
 800b4dc:	4699      	mov	r9, r3
 800b4de:	f1b8 0f01 	cmp.w	r8, #1
 800b4e2:	dc21      	bgt.n	800b528 <_strtod_l+0x528>
 800b4e4:	b10b      	cbz	r3, 800b4ea <_strtod_l+0x4ea>
 800b4e6:	4682      	mov	sl, r0
 800b4e8:	468b      	mov	fp, r1
 800b4ea:	4b2f      	ldr	r3, [pc, #188]	; (800b5a8 <_strtod_l+0x5a8>)
 800b4ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b4f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b4f4:	4652      	mov	r2, sl
 800b4f6:	465b      	mov	r3, fp
 800b4f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b4fc:	f7f5 f87c 	bl	80005f8 <__aeabi_dmul>
 800b500:	4b2a      	ldr	r3, [pc, #168]	; (800b5ac <_strtod_l+0x5ac>)
 800b502:	460a      	mov	r2, r1
 800b504:	400b      	ands	r3, r1
 800b506:	492a      	ldr	r1, [pc, #168]	; (800b5b0 <_strtod_l+0x5b0>)
 800b508:	428b      	cmp	r3, r1
 800b50a:	4682      	mov	sl, r0
 800b50c:	d8bc      	bhi.n	800b488 <_strtod_l+0x488>
 800b50e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b512:	428b      	cmp	r3, r1
 800b514:	bf86      	itte	hi
 800b516:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b5b4 <_strtod_l+0x5b4>
 800b51a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b51e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b522:	2300      	movs	r3, #0
 800b524:	9304      	str	r3, [sp, #16]
 800b526:	e084      	b.n	800b632 <_strtod_l+0x632>
 800b528:	f018 0f01 	tst.w	r8, #1
 800b52c:	d005      	beq.n	800b53a <_strtod_l+0x53a>
 800b52e:	9b04      	ldr	r3, [sp, #16]
 800b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b534:	f7f5 f860 	bl	80005f8 <__aeabi_dmul>
 800b538:	2301      	movs	r3, #1
 800b53a:	9a04      	ldr	r2, [sp, #16]
 800b53c:	3208      	adds	r2, #8
 800b53e:	f109 0901 	add.w	r9, r9, #1
 800b542:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b546:	9204      	str	r2, [sp, #16]
 800b548:	e7c9      	b.n	800b4de <_strtod_l+0x4de>
 800b54a:	d0ea      	beq.n	800b522 <_strtod_l+0x522>
 800b54c:	f1c8 0800 	rsb	r8, r8, #0
 800b550:	f018 020f 	ands.w	r2, r8, #15
 800b554:	d00a      	beq.n	800b56c <_strtod_l+0x56c>
 800b556:	4b13      	ldr	r3, [pc, #76]	; (800b5a4 <_strtod_l+0x5a4>)
 800b558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b55c:	4650      	mov	r0, sl
 800b55e:	4659      	mov	r1, fp
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	f7f5 f972 	bl	800084c <__aeabi_ddiv>
 800b568:	4682      	mov	sl, r0
 800b56a:	468b      	mov	fp, r1
 800b56c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b570:	d0d7      	beq.n	800b522 <_strtod_l+0x522>
 800b572:	f1b8 0f1f 	cmp.w	r8, #31
 800b576:	dd1f      	ble.n	800b5b8 <_strtod_l+0x5b8>
 800b578:	2500      	movs	r5, #0
 800b57a:	462e      	mov	r6, r5
 800b57c:	9507      	str	r5, [sp, #28]
 800b57e:	9505      	str	r5, [sp, #20]
 800b580:	2322      	movs	r3, #34	; 0x22
 800b582:	f04f 0a00 	mov.w	sl, #0
 800b586:	f04f 0b00 	mov.w	fp, #0
 800b58a:	6023      	str	r3, [r4, #0]
 800b58c:	e786      	b.n	800b49c <_strtod_l+0x49c>
 800b58e:	bf00      	nop
 800b590:	0800ee9d 	.word	0x0800ee9d
 800b594:	0800eee0 	.word	0x0800eee0
 800b598:	0800ee95 	.word	0x0800ee95
 800b59c:	0800f024 	.word	0x0800f024
 800b5a0:	0800f338 	.word	0x0800f338
 800b5a4:	0800f218 	.word	0x0800f218
 800b5a8:	0800f1f0 	.word	0x0800f1f0
 800b5ac:	7ff00000 	.word	0x7ff00000
 800b5b0:	7ca00000 	.word	0x7ca00000
 800b5b4:	7fefffff 	.word	0x7fefffff
 800b5b8:	f018 0310 	ands.w	r3, r8, #16
 800b5bc:	bf18      	it	ne
 800b5be:	236a      	movne	r3, #106	; 0x6a
 800b5c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b970 <_strtod_l+0x970>
 800b5c4:	9304      	str	r3, [sp, #16]
 800b5c6:	4650      	mov	r0, sl
 800b5c8:	4659      	mov	r1, fp
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	f018 0f01 	tst.w	r8, #1
 800b5d0:	d004      	beq.n	800b5dc <_strtod_l+0x5dc>
 800b5d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b5d6:	f7f5 f80f 	bl	80005f8 <__aeabi_dmul>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b5e0:	f109 0908 	add.w	r9, r9, #8
 800b5e4:	d1f2      	bne.n	800b5cc <_strtod_l+0x5cc>
 800b5e6:	b10b      	cbz	r3, 800b5ec <_strtod_l+0x5ec>
 800b5e8:	4682      	mov	sl, r0
 800b5ea:	468b      	mov	fp, r1
 800b5ec:	9b04      	ldr	r3, [sp, #16]
 800b5ee:	b1c3      	cbz	r3, 800b622 <_strtod_l+0x622>
 800b5f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b5f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	4659      	mov	r1, fp
 800b5fc:	dd11      	ble.n	800b622 <_strtod_l+0x622>
 800b5fe:	2b1f      	cmp	r3, #31
 800b600:	f340 8124 	ble.w	800b84c <_strtod_l+0x84c>
 800b604:	2b34      	cmp	r3, #52	; 0x34
 800b606:	bfde      	ittt	le
 800b608:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b60c:	f04f 33ff 	movle.w	r3, #4294967295
 800b610:	fa03 f202 	lslle.w	r2, r3, r2
 800b614:	f04f 0a00 	mov.w	sl, #0
 800b618:	bfcc      	ite	gt
 800b61a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b61e:	ea02 0b01 	andle.w	fp, r2, r1
 800b622:	2200      	movs	r2, #0
 800b624:	2300      	movs	r3, #0
 800b626:	4650      	mov	r0, sl
 800b628:	4659      	mov	r1, fp
 800b62a:	f7f5 fa4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b62e:	2800      	cmp	r0, #0
 800b630:	d1a2      	bne.n	800b578 <_strtod_l+0x578>
 800b632:	9b07      	ldr	r3, [sp, #28]
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	9908      	ldr	r1, [sp, #32]
 800b638:	462b      	mov	r3, r5
 800b63a:	463a      	mov	r2, r7
 800b63c:	4620      	mov	r0, r4
 800b63e:	f001 ff1b 	bl	800d478 <__s2b>
 800b642:	9007      	str	r0, [sp, #28]
 800b644:	2800      	cmp	r0, #0
 800b646:	f43f af1f 	beq.w	800b488 <_strtod_l+0x488>
 800b64a:	9b05      	ldr	r3, [sp, #20]
 800b64c:	1b9e      	subs	r6, r3, r6
 800b64e:	9b06      	ldr	r3, [sp, #24]
 800b650:	2b00      	cmp	r3, #0
 800b652:	bfb4      	ite	lt
 800b654:	4633      	movlt	r3, r6
 800b656:	2300      	movge	r3, #0
 800b658:	930c      	str	r3, [sp, #48]	; 0x30
 800b65a:	9b06      	ldr	r3, [sp, #24]
 800b65c:	2500      	movs	r5, #0
 800b65e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b662:	9312      	str	r3, [sp, #72]	; 0x48
 800b664:	462e      	mov	r6, r5
 800b666:	9b07      	ldr	r3, [sp, #28]
 800b668:	4620      	mov	r0, r4
 800b66a:	6859      	ldr	r1, [r3, #4]
 800b66c:	f001 fe5c 	bl	800d328 <_Balloc>
 800b670:	9005      	str	r0, [sp, #20]
 800b672:	2800      	cmp	r0, #0
 800b674:	f43f af0c 	beq.w	800b490 <_strtod_l+0x490>
 800b678:	9b07      	ldr	r3, [sp, #28]
 800b67a:	691a      	ldr	r2, [r3, #16]
 800b67c:	3202      	adds	r2, #2
 800b67e:	f103 010c 	add.w	r1, r3, #12
 800b682:	0092      	lsls	r2, r2, #2
 800b684:	300c      	adds	r0, #12
 800b686:	f7fe fcb3 	bl	8009ff0 <memcpy>
 800b68a:	ec4b ab10 	vmov	d0, sl, fp
 800b68e:	aa1a      	add	r2, sp, #104	; 0x68
 800b690:	a919      	add	r1, sp, #100	; 0x64
 800b692:	4620      	mov	r0, r4
 800b694:	f002 fa36 	bl	800db04 <__d2b>
 800b698:	ec4b ab18 	vmov	d8, sl, fp
 800b69c:	9018      	str	r0, [sp, #96]	; 0x60
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	f43f aef6 	beq.w	800b490 <_strtod_l+0x490>
 800b6a4:	2101      	movs	r1, #1
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f001 ff80 	bl	800d5ac <__i2b>
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	f43f aeee 	beq.w	800b490 <_strtod_l+0x490>
 800b6b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b6b6:	9904      	ldr	r1, [sp, #16]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	bfab      	itete	ge
 800b6bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b6be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b6c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b6c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b6c6:	bfac      	ite	ge
 800b6c8:	eb03 0902 	addge.w	r9, r3, r2
 800b6cc:	1ad7      	sublt	r7, r2, r3
 800b6ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b6d0:	eba3 0801 	sub.w	r8, r3, r1
 800b6d4:	4490      	add	r8, r2
 800b6d6:	4ba1      	ldr	r3, [pc, #644]	; (800b95c <_strtod_l+0x95c>)
 800b6d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6dc:	4598      	cmp	r8, r3
 800b6de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b6e2:	f280 80c7 	bge.w	800b874 <_strtod_l+0x874>
 800b6e6:	eba3 0308 	sub.w	r3, r3, r8
 800b6ea:	2b1f      	cmp	r3, #31
 800b6ec:	eba2 0203 	sub.w	r2, r2, r3
 800b6f0:	f04f 0101 	mov.w	r1, #1
 800b6f4:	f300 80b1 	bgt.w	800b85a <_strtod_l+0x85a>
 800b6f8:	fa01 f303 	lsl.w	r3, r1, r3
 800b6fc:	930d      	str	r3, [sp, #52]	; 0x34
 800b6fe:	2300      	movs	r3, #0
 800b700:	9308      	str	r3, [sp, #32]
 800b702:	eb09 0802 	add.w	r8, r9, r2
 800b706:	9b04      	ldr	r3, [sp, #16]
 800b708:	45c1      	cmp	r9, r8
 800b70a:	4417      	add	r7, r2
 800b70c:	441f      	add	r7, r3
 800b70e:	464b      	mov	r3, r9
 800b710:	bfa8      	it	ge
 800b712:	4643      	movge	r3, r8
 800b714:	42bb      	cmp	r3, r7
 800b716:	bfa8      	it	ge
 800b718:	463b      	movge	r3, r7
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	bfc2      	ittt	gt
 800b71e:	eba8 0803 	subgt.w	r8, r8, r3
 800b722:	1aff      	subgt	r7, r7, r3
 800b724:	eba9 0903 	subgt.w	r9, r9, r3
 800b728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	dd17      	ble.n	800b75e <_strtod_l+0x75e>
 800b72e:	4631      	mov	r1, r6
 800b730:	461a      	mov	r2, r3
 800b732:	4620      	mov	r0, r4
 800b734:	f001 fffa 	bl	800d72c <__pow5mult>
 800b738:	4606      	mov	r6, r0
 800b73a:	2800      	cmp	r0, #0
 800b73c:	f43f aea8 	beq.w	800b490 <_strtod_l+0x490>
 800b740:	4601      	mov	r1, r0
 800b742:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b744:	4620      	mov	r0, r4
 800b746:	f001 ff47 	bl	800d5d8 <__multiply>
 800b74a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b74c:	2800      	cmp	r0, #0
 800b74e:	f43f ae9f 	beq.w	800b490 <_strtod_l+0x490>
 800b752:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b754:	4620      	mov	r0, r4
 800b756:	f001 fe27 	bl	800d3a8 <_Bfree>
 800b75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b75c:	9318      	str	r3, [sp, #96]	; 0x60
 800b75e:	f1b8 0f00 	cmp.w	r8, #0
 800b762:	f300 808c 	bgt.w	800b87e <_strtod_l+0x87e>
 800b766:	9b06      	ldr	r3, [sp, #24]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	dd08      	ble.n	800b77e <_strtod_l+0x77e>
 800b76c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b76e:	9905      	ldr	r1, [sp, #20]
 800b770:	4620      	mov	r0, r4
 800b772:	f001 ffdb 	bl	800d72c <__pow5mult>
 800b776:	9005      	str	r0, [sp, #20]
 800b778:	2800      	cmp	r0, #0
 800b77a:	f43f ae89 	beq.w	800b490 <_strtod_l+0x490>
 800b77e:	2f00      	cmp	r7, #0
 800b780:	dd08      	ble.n	800b794 <_strtod_l+0x794>
 800b782:	9905      	ldr	r1, [sp, #20]
 800b784:	463a      	mov	r2, r7
 800b786:	4620      	mov	r0, r4
 800b788:	f002 f82a 	bl	800d7e0 <__lshift>
 800b78c:	9005      	str	r0, [sp, #20]
 800b78e:	2800      	cmp	r0, #0
 800b790:	f43f ae7e 	beq.w	800b490 <_strtod_l+0x490>
 800b794:	f1b9 0f00 	cmp.w	r9, #0
 800b798:	dd08      	ble.n	800b7ac <_strtod_l+0x7ac>
 800b79a:	4631      	mov	r1, r6
 800b79c:	464a      	mov	r2, r9
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f002 f81e 	bl	800d7e0 <__lshift>
 800b7a4:	4606      	mov	r6, r0
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	f43f ae72 	beq.w	800b490 <_strtod_l+0x490>
 800b7ac:	9a05      	ldr	r2, [sp, #20]
 800b7ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f002 f8a1 	bl	800d8f8 <__mdiff>
 800b7b6:	4605      	mov	r5, r0
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	f43f ae69 	beq.w	800b490 <_strtod_l+0x490>
 800b7be:	68c3      	ldr	r3, [r0, #12]
 800b7c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	60c3      	str	r3, [r0, #12]
 800b7c6:	4631      	mov	r1, r6
 800b7c8:	f002 f87a 	bl	800d8c0 <__mcmp>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	da60      	bge.n	800b892 <_strtod_l+0x892>
 800b7d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7d2:	ea53 030a 	orrs.w	r3, r3, sl
 800b7d6:	f040 8082 	bne.w	800b8de <_strtod_l+0x8de>
 800b7da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d17d      	bne.n	800b8de <_strtod_l+0x8de>
 800b7e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b7e6:	0d1b      	lsrs	r3, r3, #20
 800b7e8:	051b      	lsls	r3, r3, #20
 800b7ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b7ee:	d976      	bls.n	800b8de <_strtod_l+0x8de>
 800b7f0:	696b      	ldr	r3, [r5, #20]
 800b7f2:	b913      	cbnz	r3, 800b7fa <_strtod_l+0x7fa>
 800b7f4:	692b      	ldr	r3, [r5, #16]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	dd71      	ble.n	800b8de <_strtod_l+0x8de>
 800b7fa:	4629      	mov	r1, r5
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	4620      	mov	r0, r4
 800b800:	f001 ffee 	bl	800d7e0 <__lshift>
 800b804:	4631      	mov	r1, r6
 800b806:	4605      	mov	r5, r0
 800b808:	f002 f85a 	bl	800d8c0 <__mcmp>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	dd66      	ble.n	800b8de <_strtod_l+0x8de>
 800b810:	9904      	ldr	r1, [sp, #16]
 800b812:	4a53      	ldr	r2, [pc, #332]	; (800b960 <_strtod_l+0x960>)
 800b814:	465b      	mov	r3, fp
 800b816:	2900      	cmp	r1, #0
 800b818:	f000 8081 	beq.w	800b91e <_strtod_l+0x91e>
 800b81c:	ea02 010b 	and.w	r1, r2, fp
 800b820:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b824:	dc7b      	bgt.n	800b91e <_strtod_l+0x91e>
 800b826:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b82a:	f77f aea9 	ble.w	800b580 <_strtod_l+0x580>
 800b82e:	4b4d      	ldr	r3, [pc, #308]	; (800b964 <_strtod_l+0x964>)
 800b830:	4650      	mov	r0, sl
 800b832:	4659      	mov	r1, fp
 800b834:	2200      	movs	r2, #0
 800b836:	f7f4 fedf 	bl	80005f8 <__aeabi_dmul>
 800b83a:	460b      	mov	r3, r1
 800b83c:	4303      	orrs	r3, r0
 800b83e:	bf08      	it	eq
 800b840:	2322      	moveq	r3, #34	; 0x22
 800b842:	4682      	mov	sl, r0
 800b844:	468b      	mov	fp, r1
 800b846:	bf08      	it	eq
 800b848:	6023      	streq	r3, [r4, #0]
 800b84a:	e62b      	b.n	800b4a4 <_strtod_l+0x4a4>
 800b84c:	f04f 32ff 	mov.w	r2, #4294967295
 800b850:	fa02 f303 	lsl.w	r3, r2, r3
 800b854:	ea03 0a0a 	and.w	sl, r3, sl
 800b858:	e6e3      	b.n	800b622 <_strtod_l+0x622>
 800b85a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b85e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b862:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b866:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b86a:	fa01 f308 	lsl.w	r3, r1, r8
 800b86e:	9308      	str	r3, [sp, #32]
 800b870:	910d      	str	r1, [sp, #52]	; 0x34
 800b872:	e746      	b.n	800b702 <_strtod_l+0x702>
 800b874:	2300      	movs	r3, #0
 800b876:	9308      	str	r3, [sp, #32]
 800b878:	2301      	movs	r3, #1
 800b87a:	930d      	str	r3, [sp, #52]	; 0x34
 800b87c:	e741      	b.n	800b702 <_strtod_l+0x702>
 800b87e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b880:	4642      	mov	r2, r8
 800b882:	4620      	mov	r0, r4
 800b884:	f001 ffac 	bl	800d7e0 <__lshift>
 800b888:	9018      	str	r0, [sp, #96]	; 0x60
 800b88a:	2800      	cmp	r0, #0
 800b88c:	f47f af6b 	bne.w	800b766 <_strtod_l+0x766>
 800b890:	e5fe      	b.n	800b490 <_strtod_l+0x490>
 800b892:	465f      	mov	r7, fp
 800b894:	d16e      	bne.n	800b974 <_strtod_l+0x974>
 800b896:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b898:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b89c:	b342      	cbz	r2, 800b8f0 <_strtod_l+0x8f0>
 800b89e:	4a32      	ldr	r2, [pc, #200]	; (800b968 <_strtod_l+0x968>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d128      	bne.n	800b8f6 <_strtod_l+0x8f6>
 800b8a4:	9b04      	ldr	r3, [sp, #16]
 800b8a6:	4651      	mov	r1, sl
 800b8a8:	b1eb      	cbz	r3, 800b8e6 <_strtod_l+0x8e6>
 800b8aa:	4b2d      	ldr	r3, [pc, #180]	; (800b960 <_strtod_l+0x960>)
 800b8ac:	403b      	ands	r3, r7
 800b8ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b6:	d819      	bhi.n	800b8ec <_strtod_l+0x8ec>
 800b8b8:	0d1b      	lsrs	r3, r3, #20
 800b8ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b8be:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c2:	4299      	cmp	r1, r3
 800b8c4:	d117      	bne.n	800b8f6 <_strtod_l+0x8f6>
 800b8c6:	4b29      	ldr	r3, [pc, #164]	; (800b96c <_strtod_l+0x96c>)
 800b8c8:	429f      	cmp	r7, r3
 800b8ca:	d102      	bne.n	800b8d2 <_strtod_l+0x8d2>
 800b8cc:	3101      	adds	r1, #1
 800b8ce:	f43f addf 	beq.w	800b490 <_strtod_l+0x490>
 800b8d2:	4b23      	ldr	r3, [pc, #140]	; (800b960 <_strtod_l+0x960>)
 800b8d4:	403b      	ands	r3, r7
 800b8d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b8da:	f04f 0a00 	mov.w	sl, #0
 800b8de:	9b04      	ldr	r3, [sp, #16]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1a4      	bne.n	800b82e <_strtod_l+0x82e>
 800b8e4:	e5de      	b.n	800b4a4 <_strtod_l+0x4a4>
 800b8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ea:	e7ea      	b.n	800b8c2 <_strtod_l+0x8c2>
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	e7e8      	b.n	800b8c2 <_strtod_l+0x8c2>
 800b8f0:	ea53 030a 	orrs.w	r3, r3, sl
 800b8f4:	d08c      	beq.n	800b810 <_strtod_l+0x810>
 800b8f6:	9b08      	ldr	r3, [sp, #32]
 800b8f8:	b1db      	cbz	r3, 800b932 <_strtod_l+0x932>
 800b8fa:	423b      	tst	r3, r7
 800b8fc:	d0ef      	beq.n	800b8de <_strtod_l+0x8de>
 800b8fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b900:	9a04      	ldr	r2, [sp, #16]
 800b902:	4650      	mov	r0, sl
 800b904:	4659      	mov	r1, fp
 800b906:	b1c3      	cbz	r3, 800b93a <_strtod_l+0x93a>
 800b908:	f7ff fb5c 	bl	800afc4 <sulp>
 800b90c:	4602      	mov	r2, r0
 800b90e:	460b      	mov	r3, r1
 800b910:	ec51 0b18 	vmov	r0, r1, d8
 800b914:	f7f4 fcba 	bl	800028c <__adddf3>
 800b918:	4682      	mov	sl, r0
 800b91a:	468b      	mov	fp, r1
 800b91c:	e7df      	b.n	800b8de <_strtod_l+0x8de>
 800b91e:	4013      	ands	r3, r2
 800b920:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b924:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b928:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b92c:	f04f 3aff 	mov.w	sl, #4294967295
 800b930:	e7d5      	b.n	800b8de <_strtod_l+0x8de>
 800b932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b934:	ea13 0f0a 	tst.w	r3, sl
 800b938:	e7e0      	b.n	800b8fc <_strtod_l+0x8fc>
 800b93a:	f7ff fb43 	bl	800afc4 <sulp>
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	ec51 0b18 	vmov	r0, r1, d8
 800b946:	f7f4 fc9f 	bl	8000288 <__aeabi_dsub>
 800b94a:	2200      	movs	r2, #0
 800b94c:	2300      	movs	r3, #0
 800b94e:	4682      	mov	sl, r0
 800b950:	468b      	mov	fp, r1
 800b952:	f7f5 f8b9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b956:	2800      	cmp	r0, #0
 800b958:	d0c1      	beq.n	800b8de <_strtod_l+0x8de>
 800b95a:	e611      	b.n	800b580 <_strtod_l+0x580>
 800b95c:	fffffc02 	.word	0xfffffc02
 800b960:	7ff00000 	.word	0x7ff00000
 800b964:	39500000 	.word	0x39500000
 800b968:	000fffff 	.word	0x000fffff
 800b96c:	7fefffff 	.word	0x7fefffff
 800b970:	0800eef8 	.word	0x0800eef8
 800b974:	4631      	mov	r1, r6
 800b976:	4628      	mov	r0, r5
 800b978:	f002 f920 	bl	800dbbc <__ratio>
 800b97c:	ec59 8b10 	vmov	r8, r9, d0
 800b980:	ee10 0a10 	vmov	r0, s0
 800b984:	2200      	movs	r2, #0
 800b986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b98a:	4649      	mov	r1, r9
 800b98c:	f7f5 f8b0 	bl	8000af0 <__aeabi_dcmple>
 800b990:	2800      	cmp	r0, #0
 800b992:	d07a      	beq.n	800ba8a <_strtod_l+0xa8a>
 800b994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b996:	2b00      	cmp	r3, #0
 800b998:	d04a      	beq.n	800ba30 <_strtod_l+0xa30>
 800b99a:	4b95      	ldr	r3, [pc, #596]	; (800bbf0 <_strtod_l+0xbf0>)
 800b99c:	2200      	movs	r2, #0
 800b99e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b9a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bbf0 <_strtod_l+0xbf0>
 800b9a6:	f04f 0800 	mov.w	r8, #0
 800b9aa:	4b92      	ldr	r3, [pc, #584]	; (800bbf4 <_strtod_l+0xbf4>)
 800b9ac:	403b      	ands	r3, r7
 800b9ae:	930d      	str	r3, [sp, #52]	; 0x34
 800b9b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9b2:	4b91      	ldr	r3, [pc, #580]	; (800bbf8 <_strtod_l+0xbf8>)
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	f040 80b0 	bne.w	800bb1a <_strtod_l+0xb1a>
 800b9ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9be:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b9c2:	ec4b ab10 	vmov	d0, sl, fp
 800b9c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b9ca:	f002 f81f 	bl	800da0c <__ulp>
 800b9ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9d2:	ec53 2b10 	vmov	r2, r3, d0
 800b9d6:	f7f4 fe0f 	bl	80005f8 <__aeabi_dmul>
 800b9da:	4652      	mov	r2, sl
 800b9dc:	465b      	mov	r3, fp
 800b9de:	f7f4 fc55 	bl	800028c <__adddf3>
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4983      	ldr	r1, [pc, #524]	; (800bbf4 <_strtod_l+0xbf4>)
 800b9e6:	4a85      	ldr	r2, [pc, #532]	; (800bbfc <_strtod_l+0xbfc>)
 800b9e8:	4019      	ands	r1, r3
 800b9ea:	4291      	cmp	r1, r2
 800b9ec:	4682      	mov	sl, r0
 800b9ee:	d960      	bls.n	800bab2 <_strtod_l+0xab2>
 800b9f0:	ee18 3a90 	vmov	r3, s17
 800b9f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d104      	bne.n	800ba06 <_strtod_l+0xa06>
 800b9fc:	ee18 3a10 	vmov	r3, s16
 800ba00:	3301      	adds	r3, #1
 800ba02:	f43f ad45 	beq.w	800b490 <_strtod_l+0x490>
 800ba06:	f8df b200 	ldr.w	fp, [pc, #512]	; 800bc08 <_strtod_l+0xc08>
 800ba0a:	f04f 3aff 	mov.w	sl, #4294967295
 800ba0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba10:	4620      	mov	r0, r4
 800ba12:	f001 fcc9 	bl	800d3a8 <_Bfree>
 800ba16:	9905      	ldr	r1, [sp, #20]
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f001 fcc5 	bl	800d3a8 <_Bfree>
 800ba1e:	4631      	mov	r1, r6
 800ba20:	4620      	mov	r0, r4
 800ba22:	f001 fcc1 	bl	800d3a8 <_Bfree>
 800ba26:	4629      	mov	r1, r5
 800ba28:	4620      	mov	r0, r4
 800ba2a:	f001 fcbd 	bl	800d3a8 <_Bfree>
 800ba2e:	e61a      	b.n	800b666 <_strtod_l+0x666>
 800ba30:	f1ba 0f00 	cmp.w	sl, #0
 800ba34:	d11b      	bne.n	800ba6e <_strtod_l+0xa6e>
 800ba36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba3a:	b9f3      	cbnz	r3, 800ba7a <_strtod_l+0xa7a>
 800ba3c:	4b6c      	ldr	r3, [pc, #432]	; (800bbf0 <_strtod_l+0xbf0>)
 800ba3e:	2200      	movs	r2, #0
 800ba40:	4640      	mov	r0, r8
 800ba42:	4649      	mov	r1, r9
 800ba44:	f7f5 f84a 	bl	8000adc <__aeabi_dcmplt>
 800ba48:	b9d0      	cbnz	r0, 800ba80 <_strtod_l+0xa80>
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	4649      	mov	r1, r9
 800ba4e:	4b6c      	ldr	r3, [pc, #432]	; (800bc00 <_strtod_l+0xc00>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	f7f4 fdd1 	bl	80005f8 <__aeabi_dmul>
 800ba56:	4680      	mov	r8, r0
 800ba58:	4689      	mov	r9, r1
 800ba5a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ba5e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ba62:	9315      	str	r3, [sp, #84]	; 0x54
 800ba64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ba68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ba6c:	e79d      	b.n	800b9aa <_strtod_l+0x9aa>
 800ba6e:	f1ba 0f01 	cmp.w	sl, #1
 800ba72:	d102      	bne.n	800ba7a <_strtod_l+0xa7a>
 800ba74:	2f00      	cmp	r7, #0
 800ba76:	f43f ad83 	beq.w	800b580 <_strtod_l+0x580>
 800ba7a:	4b62      	ldr	r3, [pc, #392]	; (800bc04 <_strtod_l+0xc04>)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	e78e      	b.n	800b99e <_strtod_l+0x99e>
 800ba80:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800bc00 <_strtod_l+0xc00>
 800ba84:	f04f 0800 	mov.w	r8, #0
 800ba88:	e7e7      	b.n	800ba5a <_strtod_l+0xa5a>
 800ba8a:	4b5d      	ldr	r3, [pc, #372]	; (800bc00 <_strtod_l+0xc00>)
 800ba8c:	4640      	mov	r0, r8
 800ba8e:	4649      	mov	r1, r9
 800ba90:	2200      	movs	r2, #0
 800ba92:	f7f4 fdb1 	bl	80005f8 <__aeabi_dmul>
 800ba96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba98:	4680      	mov	r8, r0
 800ba9a:	4689      	mov	r9, r1
 800ba9c:	b933      	cbnz	r3, 800baac <_strtod_l+0xaac>
 800ba9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800baa2:	900e      	str	r0, [sp, #56]	; 0x38
 800baa4:	930f      	str	r3, [sp, #60]	; 0x3c
 800baa6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800baaa:	e7dd      	b.n	800ba68 <_strtod_l+0xa68>
 800baac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bab0:	e7f9      	b.n	800baa6 <_strtod_l+0xaa6>
 800bab2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bab6:	9b04      	ldr	r3, [sp, #16]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1a8      	bne.n	800ba0e <_strtod_l+0xa0e>
 800babc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bac0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bac2:	0d1b      	lsrs	r3, r3, #20
 800bac4:	051b      	lsls	r3, r3, #20
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d1a1      	bne.n	800ba0e <_strtod_l+0xa0e>
 800baca:	4640      	mov	r0, r8
 800bacc:	4649      	mov	r1, r9
 800bace:	f7f5 f8f3 	bl	8000cb8 <__aeabi_d2lz>
 800bad2:	f7f4 fd63 	bl	800059c <__aeabi_l2d>
 800bad6:	4602      	mov	r2, r0
 800bad8:	460b      	mov	r3, r1
 800bada:	4640      	mov	r0, r8
 800badc:	4649      	mov	r1, r9
 800bade:	f7f4 fbd3 	bl	8000288 <__aeabi_dsub>
 800bae2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bae4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bae8:	ea43 030a 	orr.w	r3, r3, sl
 800baec:	4313      	orrs	r3, r2
 800baee:	4680      	mov	r8, r0
 800baf0:	4689      	mov	r9, r1
 800baf2:	d055      	beq.n	800bba0 <_strtod_l+0xba0>
 800baf4:	a336      	add	r3, pc, #216	; (adr r3, 800bbd0 <_strtod_l+0xbd0>)
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	f7f4 ffef 	bl	8000adc <__aeabi_dcmplt>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	f47f acd0 	bne.w	800b4a4 <_strtod_l+0x4a4>
 800bb04:	a334      	add	r3, pc, #208	; (adr r3, 800bbd8 <_strtod_l+0xbd8>)
 800bb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	f7f5 f803 	bl	8000b18 <__aeabi_dcmpgt>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	f43f af7b 	beq.w	800ba0e <_strtod_l+0xa0e>
 800bb18:	e4c4      	b.n	800b4a4 <_strtod_l+0x4a4>
 800bb1a:	9b04      	ldr	r3, [sp, #16]
 800bb1c:	b333      	cbz	r3, 800bb6c <_strtod_l+0xb6c>
 800bb1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb20:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bb24:	d822      	bhi.n	800bb6c <_strtod_l+0xb6c>
 800bb26:	a32e      	add	r3, pc, #184	; (adr r3, 800bbe0 <_strtod_l+0xbe0>)
 800bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	4649      	mov	r1, r9
 800bb30:	f7f4 ffde 	bl	8000af0 <__aeabi_dcmple>
 800bb34:	b1a0      	cbz	r0, 800bb60 <_strtod_l+0xb60>
 800bb36:	4649      	mov	r1, r9
 800bb38:	4640      	mov	r0, r8
 800bb3a:	f7f5 f835 	bl	8000ba8 <__aeabi_d2uiz>
 800bb3e:	2801      	cmp	r0, #1
 800bb40:	bf38      	it	cc
 800bb42:	2001      	movcc	r0, #1
 800bb44:	f7f4 fcde 	bl	8000504 <__aeabi_ui2d>
 800bb48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb4a:	4680      	mov	r8, r0
 800bb4c:	4689      	mov	r9, r1
 800bb4e:	bb23      	cbnz	r3, 800bb9a <_strtod_l+0xb9a>
 800bb50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb54:	9010      	str	r0, [sp, #64]	; 0x40
 800bb56:	9311      	str	r3, [sp, #68]	; 0x44
 800bb58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bb60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb64:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bb68:	1a9b      	subs	r3, r3, r2
 800bb6a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb70:	eeb0 0a48 	vmov.f32	s0, s16
 800bb74:	eef0 0a68 	vmov.f32	s1, s17
 800bb78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb7c:	f001 ff46 	bl	800da0c <__ulp>
 800bb80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb84:	ec53 2b10 	vmov	r2, r3, d0
 800bb88:	f7f4 fd36 	bl	80005f8 <__aeabi_dmul>
 800bb8c:	ec53 2b18 	vmov	r2, r3, d8
 800bb90:	f7f4 fb7c 	bl	800028c <__adddf3>
 800bb94:	4682      	mov	sl, r0
 800bb96:	468b      	mov	fp, r1
 800bb98:	e78d      	b.n	800bab6 <_strtod_l+0xab6>
 800bb9a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800bb9e:	e7db      	b.n	800bb58 <_strtod_l+0xb58>
 800bba0:	a311      	add	r3, pc, #68	; (adr r3, 800bbe8 <_strtod_l+0xbe8>)
 800bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba6:	f7f4 ff99 	bl	8000adc <__aeabi_dcmplt>
 800bbaa:	e7b2      	b.n	800bb12 <_strtod_l+0xb12>
 800bbac:	2300      	movs	r3, #0
 800bbae:	930a      	str	r3, [sp, #40]	; 0x28
 800bbb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bbb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	f7ff ba6b 	b.w	800b090 <_strtod_l+0x90>
 800bbba:	2a65      	cmp	r2, #101	; 0x65
 800bbbc:	f43f ab5f 	beq.w	800b27e <_strtod_l+0x27e>
 800bbc0:	2a45      	cmp	r2, #69	; 0x45
 800bbc2:	f43f ab5c 	beq.w	800b27e <_strtod_l+0x27e>
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	f7ff bb94 	b.w	800b2f4 <_strtod_l+0x2f4>
 800bbcc:	f3af 8000 	nop.w
 800bbd0:	94a03595 	.word	0x94a03595
 800bbd4:	3fdfffff 	.word	0x3fdfffff
 800bbd8:	35afe535 	.word	0x35afe535
 800bbdc:	3fe00000 	.word	0x3fe00000
 800bbe0:	ffc00000 	.word	0xffc00000
 800bbe4:	41dfffff 	.word	0x41dfffff
 800bbe8:	94a03595 	.word	0x94a03595
 800bbec:	3fcfffff 	.word	0x3fcfffff
 800bbf0:	3ff00000 	.word	0x3ff00000
 800bbf4:	7ff00000 	.word	0x7ff00000
 800bbf8:	7fe00000 	.word	0x7fe00000
 800bbfc:	7c9fffff 	.word	0x7c9fffff
 800bc00:	3fe00000 	.word	0x3fe00000
 800bc04:	bff00000 	.word	0xbff00000
 800bc08:	7fefffff 	.word	0x7fefffff

0800bc0c <_strtod_r>:
 800bc0c:	4b01      	ldr	r3, [pc, #4]	; (800bc14 <_strtod_r+0x8>)
 800bc0e:	f7ff b9f7 	b.w	800b000 <_strtod_l>
 800bc12:	bf00      	nop
 800bc14:	200000e8 	.word	0x200000e8

0800bc18 <_strtol_l.constprop.0>:
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc1e:	d001      	beq.n	800bc24 <_strtol_l.constprop.0+0xc>
 800bc20:	2b24      	cmp	r3, #36	; 0x24
 800bc22:	d906      	bls.n	800bc32 <_strtol_l.constprop.0+0x1a>
 800bc24:	f7fe f99a 	bl	8009f5c <__errno>
 800bc28:	2316      	movs	r3, #22
 800bc2a:	6003      	str	r3, [r0, #0]
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bd18 <_strtol_l.constprop.0+0x100>
 800bc36:	460d      	mov	r5, r1
 800bc38:	462e      	mov	r6, r5
 800bc3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc3e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bc42:	f017 0708 	ands.w	r7, r7, #8
 800bc46:	d1f7      	bne.n	800bc38 <_strtol_l.constprop.0+0x20>
 800bc48:	2c2d      	cmp	r4, #45	; 0x2d
 800bc4a:	d132      	bne.n	800bcb2 <_strtol_l.constprop.0+0x9a>
 800bc4c:	782c      	ldrb	r4, [r5, #0]
 800bc4e:	2701      	movs	r7, #1
 800bc50:	1cb5      	adds	r5, r6, #2
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d05b      	beq.n	800bd0e <_strtol_l.constprop.0+0xf6>
 800bc56:	2b10      	cmp	r3, #16
 800bc58:	d109      	bne.n	800bc6e <_strtol_l.constprop.0+0x56>
 800bc5a:	2c30      	cmp	r4, #48	; 0x30
 800bc5c:	d107      	bne.n	800bc6e <_strtol_l.constprop.0+0x56>
 800bc5e:	782c      	ldrb	r4, [r5, #0]
 800bc60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bc64:	2c58      	cmp	r4, #88	; 0x58
 800bc66:	d14d      	bne.n	800bd04 <_strtol_l.constprop.0+0xec>
 800bc68:	786c      	ldrb	r4, [r5, #1]
 800bc6a:	2310      	movs	r3, #16
 800bc6c:	3502      	adds	r5, #2
 800bc6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bc72:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc76:	f04f 0c00 	mov.w	ip, #0
 800bc7a:	fbb8 f9f3 	udiv	r9, r8, r3
 800bc7e:	4666      	mov	r6, ip
 800bc80:	fb03 8a19 	mls	sl, r3, r9, r8
 800bc84:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bc88:	f1be 0f09 	cmp.w	lr, #9
 800bc8c:	d816      	bhi.n	800bcbc <_strtol_l.constprop.0+0xa4>
 800bc8e:	4674      	mov	r4, lr
 800bc90:	42a3      	cmp	r3, r4
 800bc92:	dd24      	ble.n	800bcde <_strtol_l.constprop.0+0xc6>
 800bc94:	f1bc 0f00 	cmp.w	ip, #0
 800bc98:	db1e      	blt.n	800bcd8 <_strtol_l.constprop.0+0xc0>
 800bc9a:	45b1      	cmp	r9, r6
 800bc9c:	d31c      	bcc.n	800bcd8 <_strtol_l.constprop.0+0xc0>
 800bc9e:	d101      	bne.n	800bca4 <_strtol_l.constprop.0+0x8c>
 800bca0:	45a2      	cmp	sl, r4
 800bca2:	db19      	blt.n	800bcd8 <_strtol_l.constprop.0+0xc0>
 800bca4:	fb06 4603 	mla	r6, r6, r3, r4
 800bca8:	f04f 0c01 	mov.w	ip, #1
 800bcac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bcb0:	e7e8      	b.n	800bc84 <_strtol_l.constprop.0+0x6c>
 800bcb2:	2c2b      	cmp	r4, #43	; 0x2b
 800bcb4:	bf04      	itt	eq
 800bcb6:	782c      	ldrbeq	r4, [r5, #0]
 800bcb8:	1cb5      	addeq	r5, r6, #2
 800bcba:	e7ca      	b.n	800bc52 <_strtol_l.constprop.0+0x3a>
 800bcbc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bcc0:	f1be 0f19 	cmp.w	lr, #25
 800bcc4:	d801      	bhi.n	800bcca <_strtol_l.constprop.0+0xb2>
 800bcc6:	3c37      	subs	r4, #55	; 0x37
 800bcc8:	e7e2      	b.n	800bc90 <_strtol_l.constprop.0+0x78>
 800bcca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bcce:	f1be 0f19 	cmp.w	lr, #25
 800bcd2:	d804      	bhi.n	800bcde <_strtol_l.constprop.0+0xc6>
 800bcd4:	3c57      	subs	r4, #87	; 0x57
 800bcd6:	e7db      	b.n	800bc90 <_strtol_l.constprop.0+0x78>
 800bcd8:	f04f 3cff 	mov.w	ip, #4294967295
 800bcdc:	e7e6      	b.n	800bcac <_strtol_l.constprop.0+0x94>
 800bcde:	f1bc 0f00 	cmp.w	ip, #0
 800bce2:	da05      	bge.n	800bcf0 <_strtol_l.constprop.0+0xd8>
 800bce4:	2322      	movs	r3, #34	; 0x22
 800bce6:	6003      	str	r3, [r0, #0]
 800bce8:	4646      	mov	r6, r8
 800bcea:	b942      	cbnz	r2, 800bcfe <_strtol_l.constprop.0+0xe6>
 800bcec:	4630      	mov	r0, r6
 800bcee:	e79e      	b.n	800bc2e <_strtol_l.constprop.0+0x16>
 800bcf0:	b107      	cbz	r7, 800bcf4 <_strtol_l.constprop.0+0xdc>
 800bcf2:	4276      	negs	r6, r6
 800bcf4:	2a00      	cmp	r2, #0
 800bcf6:	d0f9      	beq.n	800bcec <_strtol_l.constprop.0+0xd4>
 800bcf8:	f1bc 0f00 	cmp.w	ip, #0
 800bcfc:	d000      	beq.n	800bd00 <_strtol_l.constprop.0+0xe8>
 800bcfe:	1e69      	subs	r1, r5, #1
 800bd00:	6011      	str	r1, [r2, #0]
 800bd02:	e7f3      	b.n	800bcec <_strtol_l.constprop.0+0xd4>
 800bd04:	2430      	movs	r4, #48	; 0x30
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1b1      	bne.n	800bc6e <_strtol_l.constprop.0+0x56>
 800bd0a:	2308      	movs	r3, #8
 800bd0c:	e7af      	b.n	800bc6e <_strtol_l.constprop.0+0x56>
 800bd0e:	2c30      	cmp	r4, #48	; 0x30
 800bd10:	d0a5      	beq.n	800bc5e <_strtol_l.constprop.0+0x46>
 800bd12:	230a      	movs	r3, #10
 800bd14:	e7ab      	b.n	800bc6e <_strtol_l.constprop.0+0x56>
 800bd16:	bf00      	nop
 800bd18:	0800ef21 	.word	0x0800ef21

0800bd1c <_strtol_r>:
 800bd1c:	f7ff bf7c 	b.w	800bc18 <_strtol_l.constprop.0>

0800bd20 <quorem>:
 800bd20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	6903      	ldr	r3, [r0, #16]
 800bd26:	690c      	ldr	r4, [r1, #16]
 800bd28:	42a3      	cmp	r3, r4
 800bd2a:	4607      	mov	r7, r0
 800bd2c:	f2c0 8081 	blt.w	800be32 <quorem+0x112>
 800bd30:	3c01      	subs	r4, #1
 800bd32:	f101 0814 	add.w	r8, r1, #20
 800bd36:	f100 0514 	add.w	r5, r0, #20
 800bd3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd3e:	9301      	str	r3, [sp, #4]
 800bd40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bd50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd54:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd58:	d331      	bcc.n	800bdbe <quorem+0x9e>
 800bd5a:	f04f 0e00 	mov.w	lr, #0
 800bd5e:	4640      	mov	r0, r8
 800bd60:	46ac      	mov	ip, r5
 800bd62:	46f2      	mov	sl, lr
 800bd64:	f850 2b04 	ldr.w	r2, [r0], #4
 800bd68:	b293      	uxth	r3, r2
 800bd6a:	fb06 e303 	mla	r3, r6, r3, lr
 800bd6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	ebaa 0303 	sub.w	r3, sl, r3
 800bd78:	f8dc a000 	ldr.w	sl, [ip]
 800bd7c:	0c12      	lsrs	r2, r2, #16
 800bd7e:	fa13 f38a 	uxtah	r3, r3, sl
 800bd82:	fb06 e202 	mla	r2, r6, r2, lr
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	9b00      	ldr	r3, [sp, #0]
 800bd8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bd8e:	b292      	uxth	r2, r2
 800bd90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bd94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd98:	f8bd 3000 	ldrh.w	r3, [sp]
 800bd9c:	4581      	cmp	r9, r0
 800bd9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bda2:	f84c 3b04 	str.w	r3, [ip], #4
 800bda6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bdaa:	d2db      	bcs.n	800bd64 <quorem+0x44>
 800bdac:	f855 300b 	ldr.w	r3, [r5, fp]
 800bdb0:	b92b      	cbnz	r3, 800bdbe <quorem+0x9e>
 800bdb2:	9b01      	ldr	r3, [sp, #4]
 800bdb4:	3b04      	subs	r3, #4
 800bdb6:	429d      	cmp	r5, r3
 800bdb8:	461a      	mov	r2, r3
 800bdba:	d32e      	bcc.n	800be1a <quorem+0xfa>
 800bdbc:	613c      	str	r4, [r7, #16]
 800bdbe:	4638      	mov	r0, r7
 800bdc0:	f001 fd7e 	bl	800d8c0 <__mcmp>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	db24      	blt.n	800be12 <quorem+0xf2>
 800bdc8:	3601      	adds	r6, #1
 800bdca:	4628      	mov	r0, r5
 800bdcc:	f04f 0c00 	mov.w	ip, #0
 800bdd0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bdd4:	f8d0 e000 	ldr.w	lr, [r0]
 800bdd8:	b293      	uxth	r3, r2
 800bdda:	ebac 0303 	sub.w	r3, ip, r3
 800bdde:	0c12      	lsrs	r2, r2, #16
 800bde0:	fa13 f38e 	uxtah	r3, r3, lr
 800bde4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bde8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdf2:	45c1      	cmp	r9, r8
 800bdf4:	f840 3b04 	str.w	r3, [r0], #4
 800bdf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bdfc:	d2e8      	bcs.n	800bdd0 <quorem+0xb0>
 800bdfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be06:	b922      	cbnz	r2, 800be12 <quorem+0xf2>
 800be08:	3b04      	subs	r3, #4
 800be0a:	429d      	cmp	r5, r3
 800be0c:	461a      	mov	r2, r3
 800be0e:	d30a      	bcc.n	800be26 <quorem+0x106>
 800be10:	613c      	str	r4, [r7, #16]
 800be12:	4630      	mov	r0, r6
 800be14:	b003      	add	sp, #12
 800be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1a:	6812      	ldr	r2, [r2, #0]
 800be1c:	3b04      	subs	r3, #4
 800be1e:	2a00      	cmp	r2, #0
 800be20:	d1cc      	bne.n	800bdbc <quorem+0x9c>
 800be22:	3c01      	subs	r4, #1
 800be24:	e7c7      	b.n	800bdb6 <quorem+0x96>
 800be26:	6812      	ldr	r2, [r2, #0]
 800be28:	3b04      	subs	r3, #4
 800be2a:	2a00      	cmp	r2, #0
 800be2c:	d1f0      	bne.n	800be10 <quorem+0xf0>
 800be2e:	3c01      	subs	r4, #1
 800be30:	e7eb      	b.n	800be0a <quorem+0xea>
 800be32:	2000      	movs	r0, #0
 800be34:	e7ee      	b.n	800be14 <quorem+0xf4>
	...

0800be38 <_dtoa_r>:
 800be38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	ed2d 8b04 	vpush	{d8-d9}
 800be40:	ec57 6b10 	vmov	r6, r7, d0
 800be44:	b093      	sub	sp, #76	; 0x4c
 800be46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800be48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800be4c:	9106      	str	r1, [sp, #24]
 800be4e:	ee10 aa10 	vmov	sl, s0
 800be52:	4604      	mov	r4, r0
 800be54:	9209      	str	r2, [sp, #36]	; 0x24
 800be56:	930c      	str	r3, [sp, #48]	; 0x30
 800be58:	46bb      	mov	fp, r7
 800be5a:	b975      	cbnz	r5, 800be7a <_dtoa_r+0x42>
 800be5c:	2010      	movs	r0, #16
 800be5e:	f7fe f8a7 	bl	8009fb0 <malloc>
 800be62:	4602      	mov	r2, r0
 800be64:	6260      	str	r0, [r4, #36]	; 0x24
 800be66:	b920      	cbnz	r0, 800be72 <_dtoa_r+0x3a>
 800be68:	4ba7      	ldr	r3, [pc, #668]	; (800c108 <_dtoa_r+0x2d0>)
 800be6a:	21ea      	movs	r1, #234	; 0xea
 800be6c:	48a7      	ldr	r0, [pc, #668]	; (800c10c <_dtoa_r+0x2d4>)
 800be6e:	f002 fb13 	bl	800e498 <__assert_func>
 800be72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800be76:	6005      	str	r5, [r0, #0]
 800be78:	60c5      	str	r5, [r0, #12]
 800be7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be7c:	6819      	ldr	r1, [r3, #0]
 800be7e:	b151      	cbz	r1, 800be96 <_dtoa_r+0x5e>
 800be80:	685a      	ldr	r2, [r3, #4]
 800be82:	604a      	str	r2, [r1, #4]
 800be84:	2301      	movs	r3, #1
 800be86:	4093      	lsls	r3, r2
 800be88:	608b      	str	r3, [r1, #8]
 800be8a:	4620      	mov	r0, r4
 800be8c:	f001 fa8c 	bl	800d3a8 <_Bfree>
 800be90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be92:	2200      	movs	r2, #0
 800be94:	601a      	str	r2, [r3, #0]
 800be96:	1e3b      	subs	r3, r7, #0
 800be98:	bfaa      	itet	ge
 800be9a:	2300      	movge	r3, #0
 800be9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bea0:	f8c8 3000 	strge.w	r3, [r8]
 800bea4:	4b9a      	ldr	r3, [pc, #616]	; (800c110 <_dtoa_r+0x2d8>)
 800bea6:	bfbc      	itt	lt
 800bea8:	2201      	movlt	r2, #1
 800beaa:	f8c8 2000 	strlt.w	r2, [r8]
 800beae:	ea33 030b 	bics.w	r3, r3, fp
 800beb2:	d11b      	bne.n	800beec <_dtoa_r+0xb4>
 800beb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800beb6:	f242 730f 	movw	r3, #9999	; 0x270f
 800beba:	6013      	str	r3, [r2, #0]
 800bebc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bec0:	4333      	orrs	r3, r6
 800bec2:	f000 8592 	beq.w	800c9ea <_dtoa_r+0xbb2>
 800bec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bec8:	b963      	cbnz	r3, 800bee4 <_dtoa_r+0xac>
 800beca:	4b92      	ldr	r3, [pc, #584]	; (800c114 <_dtoa_r+0x2dc>)
 800becc:	e022      	b.n	800bf14 <_dtoa_r+0xdc>
 800bece:	4b92      	ldr	r3, [pc, #584]	; (800c118 <_dtoa_r+0x2e0>)
 800bed0:	9301      	str	r3, [sp, #4]
 800bed2:	3308      	adds	r3, #8
 800bed4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bed6:	6013      	str	r3, [r2, #0]
 800bed8:	9801      	ldr	r0, [sp, #4]
 800beda:	b013      	add	sp, #76	; 0x4c
 800bedc:	ecbd 8b04 	vpop	{d8-d9}
 800bee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee4:	4b8b      	ldr	r3, [pc, #556]	; (800c114 <_dtoa_r+0x2dc>)
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	3303      	adds	r3, #3
 800beea:	e7f3      	b.n	800bed4 <_dtoa_r+0x9c>
 800beec:	2200      	movs	r2, #0
 800beee:	2300      	movs	r3, #0
 800bef0:	4650      	mov	r0, sl
 800bef2:	4659      	mov	r1, fp
 800bef4:	f7f4 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 800bef8:	ec4b ab19 	vmov	d9, sl, fp
 800befc:	4680      	mov	r8, r0
 800befe:	b158      	cbz	r0, 800bf18 <_dtoa_r+0xe0>
 800bf00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf02:	2301      	movs	r3, #1
 800bf04:	6013      	str	r3, [r2, #0]
 800bf06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f000 856b 	beq.w	800c9e4 <_dtoa_r+0xbac>
 800bf0e:	4883      	ldr	r0, [pc, #524]	; (800c11c <_dtoa_r+0x2e4>)
 800bf10:	6018      	str	r0, [r3, #0]
 800bf12:	1e43      	subs	r3, r0, #1
 800bf14:	9301      	str	r3, [sp, #4]
 800bf16:	e7df      	b.n	800bed8 <_dtoa_r+0xa0>
 800bf18:	ec4b ab10 	vmov	d0, sl, fp
 800bf1c:	aa10      	add	r2, sp, #64	; 0x40
 800bf1e:	a911      	add	r1, sp, #68	; 0x44
 800bf20:	4620      	mov	r0, r4
 800bf22:	f001 fdef 	bl	800db04 <__d2b>
 800bf26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bf2a:	ee08 0a10 	vmov	s16, r0
 800bf2e:	2d00      	cmp	r5, #0
 800bf30:	f000 8084 	beq.w	800c03c <_dtoa_r+0x204>
 800bf34:	ee19 3a90 	vmov	r3, s19
 800bf38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bf40:	4656      	mov	r6, sl
 800bf42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bf46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bf4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bf4e:	4b74      	ldr	r3, [pc, #464]	; (800c120 <_dtoa_r+0x2e8>)
 800bf50:	2200      	movs	r2, #0
 800bf52:	4630      	mov	r0, r6
 800bf54:	4639      	mov	r1, r7
 800bf56:	f7f4 f997 	bl	8000288 <__aeabi_dsub>
 800bf5a:	a365      	add	r3, pc, #404	; (adr r3, 800c0f0 <_dtoa_r+0x2b8>)
 800bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf60:	f7f4 fb4a 	bl	80005f8 <__aeabi_dmul>
 800bf64:	a364      	add	r3, pc, #400	; (adr r3, 800c0f8 <_dtoa_r+0x2c0>)
 800bf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6a:	f7f4 f98f 	bl	800028c <__adddf3>
 800bf6e:	4606      	mov	r6, r0
 800bf70:	4628      	mov	r0, r5
 800bf72:	460f      	mov	r7, r1
 800bf74:	f7f4 fad6 	bl	8000524 <__aeabi_i2d>
 800bf78:	a361      	add	r3, pc, #388	; (adr r3, 800c100 <_dtoa_r+0x2c8>)
 800bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7e:	f7f4 fb3b 	bl	80005f8 <__aeabi_dmul>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	4630      	mov	r0, r6
 800bf88:	4639      	mov	r1, r7
 800bf8a:	f7f4 f97f 	bl	800028c <__adddf3>
 800bf8e:	4606      	mov	r6, r0
 800bf90:	460f      	mov	r7, r1
 800bf92:	f7f4 fde1 	bl	8000b58 <__aeabi_d2iz>
 800bf96:	2200      	movs	r2, #0
 800bf98:	9000      	str	r0, [sp, #0]
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	4639      	mov	r1, r7
 800bfa0:	f7f4 fd9c 	bl	8000adc <__aeabi_dcmplt>
 800bfa4:	b150      	cbz	r0, 800bfbc <_dtoa_r+0x184>
 800bfa6:	9800      	ldr	r0, [sp, #0]
 800bfa8:	f7f4 fabc 	bl	8000524 <__aeabi_i2d>
 800bfac:	4632      	mov	r2, r6
 800bfae:	463b      	mov	r3, r7
 800bfb0:	f7f4 fd8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfb4:	b910      	cbnz	r0, 800bfbc <_dtoa_r+0x184>
 800bfb6:	9b00      	ldr	r3, [sp, #0]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	9b00      	ldr	r3, [sp, #0]
 800bfbe:	2b16      	cmp	r3, #22
 800bfc0:	d85a      	bhi.n	800c078 <_dtoa_r+0x240>
 800bfc2:	9a00      	ldr	r2, [sp, #0]
 800bfc4:	4b57      	ldr	r3, [pc, #348]	; (800c124 <_dtoa_r+0x2ec>)
 800bfc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfce:	ec51 0b19 	vmov	r0, r1, d9
 800bfd2:	f7f4 fd83 	bl	8000adc <__aeabi_dcmplt>
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	d050      	beq.n	800c07c <_dtoa_r+0x244>
 800bfda:	9b00      	ldr	r3, [sp, #0]
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfe6:	1b5d      	subs	r5, r3, r5
 800bfe8:	1e6b      	subs	r3, r5, #1
 800bfea:	9305      	str	r3, [sp, #20]
 800bfec:	bf45      	ittet	mi
 800bfee:	f1c5 0301 	rsbmi	r3, r5, #1
 800bff2:	9304      	strmi	r3, [sp, #16]
 800bff4:	2300      	movpl	r3, #0
 800bff6:	2300      	movmi	r3, #0
 800bff8:	bf4c      	ite	mi
 800bffa:	9305      	strmi	r3, [sp, #20]
 800bffc:	9304      	strpl	r3, [sp, #16]
 800bffe:	9b00      	ldr	r3, [sp, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	db3d      	blt.n	800c080 <_dtoa_r+0x248>
 800c004:	9b05      	ldr	r3, [sp, #20]
 800c006:	9a00      	ldr	r2, [sp, #0]
 800c008:	920a      	str	r2, [sp, #40]	; 0x28
 800c00a:	4413      	add	r3, r2
 800c00c:	9305      	str	r3, [sp, #20]
 800c00e:	2300      	movs	r3, #0
 800c010:	9307      	str	r3, [sp, #28]
 800c012:	9b06      	ldr	r3, [sp, #24]
 800c014:	2b09      	cmp	r3, #9
 800c016:	f200 8089 	bhi.w	800c12c <_dtoa_r+0x2f4>
 800c01a:	2b05      	cmp	r3, #5
 800c01c:	bfc4      	itt	gt
 800c01e:	3b04      	subgt	r3, #4
 800c020:	9306      	strgt	r3, [sp, #24]
 800c022:	9b06      	ldr	r3, [sp, #24]
 800c024:	f1a3 0302 	sub.w	r3, r3, #2
 800c028:	bfcc      	ite	gt
 800c02a:	2500      	movgt	r5, #0
 800c02c:	2501      	movle	r5, #1
 800c02e:	2b03      	cmp	r3, #3
 800c030:	f200 8087 	bhi.w	800c142 <_dtoa_r+0x30a>
 800c034:	e8df f003 	tbb	[pc, r3]
 800c038:	59383a2d 	.word	0x59383a2d
 800c03c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c040:	441d      	add	r5, r3
 800c042:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c046:	2b20      	cmp	r3, #32
 800c048:	bfc1      	itttt	gt
 800c04a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c04e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c052:	fa0b f303 	lslgt.w	r3, fp, r3
 800c056:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c05a:	bfda      	itte	le
 800c05c:	f1c3 0320 	rsble	r3, r3, #32
 800c060:	fa06 f003 	lslle.w	r0, r6, r3
 800c064:	4318      	orrgt	r0, r3
 800c066:	f7f4 fa4d 	bl	8000504 <__aeabi_ui2d>
 800c06a:	2301      	movs	r3, #1
 800c06c:	4606      	mov	r6, r0
 800c06e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c072:	3d01      	subs	r5, #1
 800c074:	930e      	str	r3, [sp, #56]	; 0x38
 800c076:	e76a      	b.n	800bf4e <_dtoa_r+0x116>
 800c078:	2301      	movs	r3, #1
 800c07a:	e7b2      	b.n	800bfe2 <_dtoa_r+0x1aa>
 800c07c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c07e:	e7b1      	b.n	800bfe4 <_dtoa_r+0x1ac>
 800c080:	9b04      	ldr	r3, [sp, #16]
 800c082:	9a00      	ldr	r2, [sp, #0]
 800c084:	1a9b      	subs	r3, r3, r2
 800c086:	9304      	str	r3, [sp, #16]
 800c088:	4253      	negs	r3, r2
 800c08a:	9307      	str	r3, [sp, #28]
 800c08c:	2300      	movs	r3, #0
 800c08e:	930a      	str	r3, [sp, #40]	; 0x28
 800c090:	e7bf      	b.n	800c012 <_dtoa_r+0x1da>
 800c092:	2300      	movs	r3, #0
 800c094:	9308      	str	r3, [sp, #32]
 800c096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c098:	2b00      	cmp	r3, #0
 800c09a:	dc55      	bgt.n	800c148 <_dtoa_r+0x310>
 800c09c:	2301      	movs	r3, #1
 800c09e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	9209      	str	r2, [sp, #36]	; 0x24
 800c0a6:	e00c      	b.n	800c0c2 <_dtoa_r+0x28a>
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	e7f3      	b.n	800c094 <_dtoa_r+0x25c>
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0b0:	9308      	str	r3, [sp, #32]
 800c0b2:	9b00      	ldr	r3, [sp, #0]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	9302      	str	r3, [sp, #8]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	9303      	str	r3, [sp, #12]
 800c0be:	bfb8      	it	lt
 800c0c0:	2301      	movlt	r3, #1
 800c0c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	6042      	str	r2, [r0, #4]
 800c0c8:	2204      	movs	r2, #4
 800c0ca:	f102 0614 	add.w	r6, r2, #20
 800c0ce:	429e      	cmp	r6, r3
 800c0d0:	6841      	ldr	r1, [r0, #4]
 800c0d2:	d93d      	bls.n	800c150 <_dtoa_r+0x318>
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	f001 f927 	bl	800d328 <_Balloc>
 800c0da:	9001      	str	r0, [sp, #4]
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d13b      	bne.n	800c158 <_dtoa_r+0x320>
 800c0e0:	4b11      	ldr	r3, [pc, #68]	; (800c128 <_dtoa_r+0x2f0>)
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c0e8:	e6c0      	b.n	800be6c <_dtoa_r+0x34>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e7df      	b.n	800c0ae <_dtoa_r+0x276>
 800c0ee:	bf00      	nop
 800c0f0:	636f4361 	.word	0x636f4361
 800c0f4:	3fd287a7 	.word	0x3fd287a7
 800c0f8:	8b60c8b3 	.word	0x8b60c8b3
 800c0fc:	3fc68a28 	.word	0x3fc68a28
 800c100:	509f79fb 	.word	0x509f79fb
 800c104:	3fd34413 	.word	0x3fd34413
 800c108:	0800f02e 	.word	0x0800f02e
 800c10c:	0800f045 	.word	0x0800f045
 800c110:	7ff00000 	.word	0x7ff00000
 800c114:	0800f02a 	.word	0x0800f02a
 800c118:	0800f021 	.word	0x0800f021
 800c11c:	0800eea1 	.word	0x0800eea1
 800c120:	3ff80000 	.word	0x3ff80000
 800c124:	0800f218 	.word	0x0800f218
 800c128:	0800f0a0 	.word	0x0800f0a0
 800c12c:	2501      	movs	r5, #1
 800c12e:	2300      	movs	r3, #0
 800c130:	9306      	str	r3, [sp, #24]
 800c132:	9508      	str	r5, [sp, #32]
 800c134:	f04f 33ff 	mov.w	r3, #4294967295
 800c138:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c13c:	2200      	movs	r2, #0
 800c13e:	2312      	movs	r3, #18
 800c140:	e7b0      	b.n	800c0a4 <_dtoa_r+0x26c>
 800c142:	2301      	movs	r3, #1
 800c144:	9308      	str	r3, [sp, #32]
 800c146:	e7f5      	b.n	800c134 <_dtoa_r+0x2fc>
 800c148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c14a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c14e:	e7b8      	b.n	800c0c2 <_dtoa_r+0x28a>
 800c150:	3101      	adds	r1, #1
 800c152:	6041      	str	r1, [r0, #4]
 800c154:	0052      	lsls	r2, r2, #1
 800c156:	e7b8      	b.n	800c0ca <_dtoa_r+0x292>
 800c158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c15a:	9a01      	ldr	r2, [sp, #4]
 800c15c:	601a      	str	r2, [r3, #0]
 800c15e:	9b03      	ldr	r3, [sp, #12]
 800c160:	2b0e      	cmp	r3, #14
 800c162:	f200 809d 	bhi.w	800c2a0 <_dtoa_r+0x468>
 800c166:	2d00      	cmp	r5, #0
 800c168:	f000 809a 	beq.w	800c2a0 <_dtoa_r+0x468>
 800c16c:	9b00      	ldr	r3, [sp, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	dd32      	ble.n	800c1d8 <_dtoa_r+0x3a0>
 800c172:	4ab7      	ldr	r2, [pc, #732]	; (800c450 <_dtoa_r+0x618>)
 800c174:	f003 030f 	and.w	r3, r3, #15
 800c178:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c17c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c180:	9b00      	ldr	r3, [sp, #0]
 800c182:	05d8      	lsls	r0, r3, #23
 800c184:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c188:	d516      	bpl.n	800c1b8 <_dtoa_r+0x380>
 800c18a:	4bb2      	ldr	r3, [pc, #712]	; (800c454 <_dtoa_r+0x61c>)
 800c18c:	ec51 0b19 	vmov	r0, r1, d9
 800c190:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c194:	f7f4 fb5a 	bl	800084c <__aeabi_ddiv>
 800c198:	f007 070f 	and.w	r7, r7, #15
 800c19c:	4682      	mov	sl, r0
 800c19e:	468b      	mov	fp, r1
 800c1a0:	2503      	movs	r5, #3
 800c1a2:	4eac      	ldr	r6, [pc, #688]	; (800c454 <_dtoa_r+0x61c>)
 800c1a4:	b957      	cbnz	r7, 800c1bc <_dtoa_r+0x384>
 800c1a6:	4642      	mov	r2, r8
 800c1a8:	464b      	mov	r3, r9
 800c1aa:	4650      	mov	r0, sl
 800c1ac:	4659      	mov	r1, fp
 800c1ae:	f7f4 fb4d 	bl	800084c <__aeabi_ddiv>
 800c1b2:	4682      	mov	sl, r0
 800c1b4:	468b      	mov	fp, r1
 800c1b6:	e028      	b.n	800c20a <_dtoa_r+0x3d2>
 800c1b8:	2502      	movs	r5, #2
 800c1ba:	e7f2      	b.n	800c1a2 <_dtoa_r+0x36a>
 800c1bc:	07f9      	lsls	r1, r7, #31
 800c1be:	d508      	bpl.n	800c1d2 <_dtoa_r+0x39a>
 800c1c0:	4640      	mov	r0, r8
 800c1c2:	4649      	mov	r1, r9
 800c1c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c1c8:	f7f4 fa16 	bl	80005f8 <__aeabi_dmul>
 800c1cc:	3501      	adds	r5, #1
 800c1ce:	4680      	mov	r8, r0
 800c1d0:	4689      	mov	r9, r1
 800c1d2:	107f      	asrs	r7, r7, #1
 800c1d4:	3608      	adds	r6, #8
 800c1d6:	e7e5      	b.n	800c1a4 <_dtoa_r+0x36c>
 800c1d8:	f000 809b 	beq.w	800c312 <_dtoa_r+0x4da>
 800c1dc:	9b00      	ldr	r3, [sp, #0]
 800c1de:	4f9d      	ldr	r7, [pc, #628]	; (800c454 <_dtoa_r+0x61c>)
 800c1e0:	425e      	negs	r6, r3
 800c1e2:	4b9b      	ldr	r3, [pc, #620]	; (800c450 <_dtoa_r+0x618>)
 800c1e4:	f006 020f 	and.w	r2, r6, #15
 800c1e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f0:	ec51 0b19 	vmov	r0, r1, d9
 800c1f4:	f7f4 fa00 	bl	80005f8 <__aeabi_dmul>
 800c1f8:	1136      	asrs	r6, r6, #4
 800c1fa:	4682      	mov	sl, r0
 800c1fc:	468b      	mov	fp, r1
 800c1fe:	2300      	movs	r3, #0
 800c200:	2502      	movs	r5, #2
 800c202:	2e00      	cmp	r6, #0
 800c204:	d17a      	bne.n	800c2fc <_dtoa_r+0x4c4>
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1d3      	bne.n	800c1b2 <_dtoa_r+0x37a>
 800c20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 8082 	beq.w	800c316 <_dtoa_r+0x4de>
 800c212:	4b91      	ldr	r3, [pc, #580]	; (800c458 <_dtoa_r+0x620>)
 800c214:	2200      	movs	r2, #0
 800c216:	4650      	mov	r0, sl
 800c218:	4659      	mov	r1, fp
 800c21a:	f7f4 fc5f 	bl	8000adc <__aeabi_dcmplt>
 800c21e:	2800      	cmp	r0, #0
 800c220:	d079      	beq.n	800c316 <_dtoa_r+0x4de>
 800c222:	9b03      	ldr	r3, [sp, #12]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d076      	beq.n	800c316 <_dtoa_r+0x4de>
 800c228:	9b02      	ldr	r3, [sp, #8]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	dd36      	ble.n	800c29c <_dtoa_r+0x464>
 800c22e:	9b00      	ldr	r3, [sp, #0]
 800c230:	4650      	mov	r0, sl
 800c232:	4659      	mov	r1, fp
 800c234:	1e5f      	subs	r7, r3, #1
 800c236:	2200      	movs	r2, #0
 800c238:	4b88      	ldr	r3, [pc, #544]	; (800c45c <_dtoa_r+0x624>)
 800c23a:	f7f4 f9dd 	bl	80005f8 <__aeabi_dmul>
 800c23e:	9e02      	ldr	r6, [sp, #8]
 800c240:	4682      	mov	sl, r0
 800c242:	468b      	mov	fp, r1
 800c244:	3501      	adds	r5, #1
 800c246:	4628      	mov	r0, r5
 800c248:	f7f4 f96c 	bl	8000524 <__aeabi_i2d>
 800c24c:	4652      	mov	r2, sl
 800c24e:	465b      	mov	r3, fp
 800c250:	f7f4 f9d2 	bl	80005f8 <__aeabi_dmul>
 800c254:	4b82      	ldr	r3, [pc, #520]	; (800c460 <_dtoa_r+0x628>)
 800c256:	2200      	movs	r2, #0
 800c258:	f7f4 f818 	bl	800028c <__adddf3>
 800c25c:	46d0      	mov	r8, sl
 800c25e:	46d9      	mov	r9, fp
 800c260:	4682      	mov	sl, r0
 800c262:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c266:	2e00      	cmp	r6, #0
 800c268:	d158      	bne.n	800c31c <_dtoa_r+0x4e4>
 800c26a:	4b7e      	ldr	r3, [pc, #504]	; (800c464 <_dtoa_r+0x62c>)
 800c26c:	2200      	movs	r2, #0
 800c26e:	4640      	mov	r0, r8
 800c270:	4649      	mov	r1, r9
 800c272:	f7f4 f809 	bl	8000288 <__aeabi_dsub>
 800c276:	4652      	mov	r2, sl
 800c278:	465b      	mov	r3, fp
 800c27a:	4680      	mov	r8, r0
 800c27c:	4689      	mov	r9, r1
 800c27e:	f7f4 fc4b 	bl	8000b18 <__aeabi_dcmpgt>
 800c282:	2800      	cmp	r0, #0
 800c284:	f040 8295 	bne.w	800c7b2 <_dtoa_r+0x97a>
 800c288:	4652      	mov	r2, sl
 800c28a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c28e:	4640      	mov	r0, r8
 800c290:	4649      	mov	r1, r9
 800c292:	f7f4 fc23 	bl	8000adc <__aeabi_dcmplt>
 800c296:	2800      	cmp	r0, #0
 800c298:	f040 8289 	bne.w	800c7ae <_dtoa_r+0x976>
 800c29c:	ec5b ab19 	vmov	sl, fp, d9
 800c2a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f2c0 8148 	blt.w	800c538 <_dtoa_r+0x700>
 800c2a8:	9a00      	ldr	r2, [sp, #0]
 800c2aa:	2a0e      	cmp	r2, #14
 800c2ac:	f300 8144 	bgt.w	800c538 <_dtoa_r+0x700>
 800c2b0:	4b67      	ldr	r3, [pc, #412]	; (800c450 <_dtoa_r+0x618>)
 800c2b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f280 80d5 	bge.w	800c46c <_dtoa_r+0x634>
 800c2c2:	9b03      	ldr	r3, [sp, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f300 80d1 	bgt.w	800c46c <_dtoa_r+0x634>
 800c2ca:	f040 826f 	bne.w	800c7ac <_dtoa_r+0x974>
 800c2ce:	4b65      	ldr	r3, [pc, #404]	; (800c464 <_dtoa_r+0x62c>)
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	4640      	mov	r0, r8
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	f7f4 f98f 	bl	80005f8 <__aeabi_dmul>
 800c2da:	4652      	mov	r2, sl
 800c2dc:	465b      	mov	r3, fp
 800c2de:	f7f4 fc11 	bl	8000b04 <__aeabi_dcmpge>
 800c2e2:	9e03      	ldr	r6, [sp, #12]
 800c2e4:	4637      	mov	r7, r6
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	f040 8245 	bne.w	800c776 <_dtoa_r+0x93e>
 800c2ec:	9d01      	ldr	r5, [sp, #4]
 800c2ee:	2331      	movs	r3, #49	; 0x31
 800c2f0:	f805 3b01 	strb.w	r3, [r5], #1
 800c2f4:	9b00      	ldr	r3, [sp, #0]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	e240      	b.n	800c77e <_dtoa_r+0x946>
 800c2fc:	07f2      	lsls	r2, r6, #31
 800c2fe:	d505      	bpl.n	800c30c <_dtoa_r+0x4d4>
 800c300:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c304:	f7f4 f978 	bl	80005f8 <__aeabi_dmul>
 800c308:	3501      	adds	r5, #1
 800c30a:	2301      	movs	r3, #1
 800c30c:	1076      	asrs	r6, r6, #1
 800c30e:	3708      	adds	r7, #8
 800c310:	e777      	b.n	800c202 <_dtoa_r+0x3ca>
 800c312:	2502      	movs	r5, #2
 800c314:	e779      	b.n	800c20a <_dtoa_r+0x3d2>
 800c316:	9f00      	ldr	r7, [sp, #0]
 800c318:	9e03      	ldr	r6, [sp, #12]
 800c31a:	e794      	b.n	800c246 <_dtoa_r+0x40e>
 800c31c:	9901      	ldr	r1, [sp, #4]
 800c31e:	4b4c      	ldr	r3, [pc, #304]	; (800c450 <_dtoa_r+0x618>)
 800c320:	4431      	add	r1, r6
 800c322:	910d      	str	r1, [sp, #52]	; 0x34
 800c324:	9908      	ldr	r1, [sp, #32]
 800c326:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c32a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c32e:	2900      	cmp	r1, #0
 800c330:	d043      	beq.n	800c3ba <_dtoa_r+0x582>
 800c332:	494d      	ldr	r1, [pc, #308]	; (800c468 <_dtoa_r+0x630>)
 800c334:	2000      	movs	r0, #0
 800c336:	f7f4 fa89 	bl	800084c <__aeabi_ddiv>
 800c33a:	4652      	mov	r2, sl
 800c33c:	465b      	mov	r3, fp
 800c33e:	f7f3 ffa3 	bl	8000288 <__aeabi_dsub>
 800c342:	9d01      	ldr	r5, [sp, #4]
 800c344:	4682      	mov	sl, r0
 800c346:	468b      	mov	fp, r1
 800c348:	4649      	mov	r1, r9
 800c34a:	4640      	mov	r0, r8
 800c34c:	f7f4 fc04 	bl	8000b58 <__aeabi_d2iz>
 800c350:	4606      	mov	r6, r0
 800c352:	f7f4 f8e7 	bl	8000524 <__aeabi_i2d>
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	4640      	mov	r0, r8
 800c35c:	4649      	mov	r1, r9
 800c35e:	f7f3 ff93 	bl	8000288 <__aeabi_dsub>
 800c362:	3630      	adds	r6, #48	; 0x30
 800c364:	f805 6b01 	strb.w	r6, [r5], #1
 800c368:	4652      	mov	r2, sl
 800c36a:	465b      	mov	r3, fp
 800c36c:	4680      	mov	r8, r0
 800c36e:	4689      	mov	r9, r1
 800c370:	f7f4 fbb4 	bl	8000adc <__aeabi_dcmplt>
 800c374:	2800      	cmp	r0, #0
 800c376:	d163      	bne.n	800c440 <_dtoa_r+0x608>
 800c378:	4642      	mov	r2, r8
 800c37a:	464b      	mov	r3, r9
 800c37c:	4936      	ldr	r1, [pc, #216]	; (800c458 <_dtoa_r+0x620>)
 800c37e:	2000      	movs	r0, #0
 800c380:	f7f3 ff82 	bl	8000288 <__aeabi_dsub>
 800c384:	4652      	mov	r2, sl
 800c386:	465b      	mov	r3, fp
 800c388:	f7f4 fba8 	bl	8000adc <__aeabi_dcmplt>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	f040 80b5 	bne.w	800c4fc <_dtoa_r+0x6c4>
 800c392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c394:	429d      	cmp	r5, r3
 800c396:	d081      	beq.n	800c29c <_dtoa_r+0x464>
 800c398:	4b30      	ldr	r3, [pc, #192]	; (800c45c <_dtoa_r+0x624>)
 800c39a:	2200      	movs	r2, #0
 800c39c:	4650      	mov	r0, sl
 800c39e:	4659      	mov	r1, fp
 800c3a0:	f7f4 f92a 	bl	80005f8 <__aeabi_dmul>
 800c3a4:	4b2d      	ldr	r3, [pc, #180]	; (800c45c <_dtoa_r+0x624>)
 800c3a6:	4682      	mov	sl, r0
 800c3a8:	468b      	mov	fp, r1
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f7f4 f922 	bl	80005f8 <__aeabi_dmul>
 800c3b4:	4680      	mov	r8, r0
 800c3b6:	4689      	mov	r9, r1
 800c3b8:	e7c6      	b.n	800c348 <_dtoa_r+0x510>
 800c3ba:	4650      	mov	r0, sl
 800c3bc:	4659      	mov	r1, fp
 800c3be:	f7f4 f91b 	bl	80005f8 <__aeabi_dmul>
 800c3c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3c4:	9d01      	ldr	r5, [sp, #4]
 800c3c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3c8:	4682      	mov	sl, r0
 800c3ca:	468b      	mov	fp, r1
 800c3cc:	4649      	mov	r1, r9
 800c3ce:	4640      	mov	r0, r8
 800c3d0:	f7f4 fbc2 	bl	8000b58 <__aeabi_d2iz>
 800c3d4:	4606      	mov	r6, r0
 800c3d6:	f7f4 f8a5 	bl	8000524 <__aeabi_i2d>
 800c3da:	3630      	adds	r6, #48	; 0x30
 800c3dc:	4602      	mov	r2, r0
 800c3de:	460b      	mov	r3, r1
 800c3e0:	4640      	mov	r0, r8
 800c3e2:	4649      	mov	r1, r9
 800c3e4:	f7f3 ff50 	bl	8000288 <__aeabi_dsub>
 800c3e8:	f805 6b01 	strb.w	r6, [r5], #1
 800c3ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3ee:	429d      	cmp	r5, r3
 800c3f0:	4680      	mov	r8, r0
 800c3f2:	4689      	mov	r9, r1
 800c3f4:	f04f 0200 	mov.w	r2, #0
 800c3f8:	d124      	bne.n	800c444 <_dtoa_r+0x60c>
 800c3fa:	4b1b      	ldr	r3, [pc, #108]	; (800c468 <_dtoa_r+0x630>)
 800c3fc:	4650      	mov	r0, sl
 800c3fe:	4659      	mov	r1, fp
 800c400:	f7f3 ff44 	bl	800028c <__adddf3>
 800c404:	4602      	mov	r2, r0
 800c406:	460b      	mov	r3, r1
 800c408:	4640      	mov	r0, r8
 800c40a:	4649      	mov	r1, r9
 800c40c:	f7f4 fb84 	bl	8000b18 <__aeabi_dcmpgt>
 800c410:	2800      	cmp	r0, #0
 800c412:	d173      	bne.n	800c4fc <_dtoa_r+0x6c4>
 800c414:	4652      	mov	r2, sl
 800c416:	465b      	mov	r3, fp
 800c418:	4913      	ldr	r1, [pc, #76]	; (800c468 <_dtoa_r+0x630>)
 800c41a:	2000      	movs	r0, #0
 800c41c:	f7f3 ff34 	bl	8000288 <__aeabi_dsub>
 800c420:	4602      	mov	r2, r0
 800c422:	460b      	mov	r3, r1
 800c424:	4640      	mov	r0, r8
 800c426:	4649      	mov	r1, r9
 800c428:	f7f4 fb58 	bl	8000adc <__aeabi_dcmplt>
 800c42c:	2800      	cmp	r0, #0
 800c42e:	f43f af35 	beq.w	800c29c <_dtoa_r+0x464>
 800c432:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c434:	1e6b      	subs	r3, r5, #1
 800c436:	930f      	str	r3, [sp, #60]	; 0x3c
 800c438:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c43c:	2b30      	cmp	r3, #48	; 0x30
 800c43e:	d0f8      	beq.n	800c432 <_dtoa_r+0x5fa>
 800c440:	9700      	str	r7, [sp, #0]
 800c442:	e049      	b.n	800c4d8 <_dtoa_r+0x6a0>
 800c444:	4b05      	ldr	r3, [pc, #20]	; (800c45c <_dtoa_r+0x624>)
 800c446:	f7f4 f8d7 	bl	80005f8 <__aeabi_dmul>
 800c44a:	4680      	mov	r8, r0
 800c44c:	4689      	mov	r9, r1
 800c44e:	e7bd      	b.n	800c3cc <_dtoa_r+0x594>
 800c450:	0800f218 	.word	0x0800f218
 800c454:	0800f1f0 	.word	0x0800f1f0
 800c458:	3ff00000 	.word	0x3ff00000
 800c45c:	40240000 	.word	0x40240000
 800c460:	401c0000 	.word	0x401c0000
 800c464:	40140000 	.word	0x40140000
 800c468:	3fe00000 	.word	0x3fe00000
 800c46c:	9d01      	ldr	r5, [sp, #4]
 800c46e:	4656      	mov	r6, sl
 800c470:	465f      	mov	r7, fp
 800c472:	4642      	mov	r2, r8
 800c474:	464b      	mov	r3, r9
 800c476:	4630      	mov	r0, r6
 800c478:	4639      	mov	r1, r7
 800c47a:	f7f4 f9e7 	bl	800084c <__aeabi_ddiv>
 800c47e:	f7f4 fb6b 	bl	8000b58 <__aeabi_d2iz>
 800c482:	4682      	mov	sl, r0
 800c484:	f7f4 f84e 	bl	8000524 <__aeabi_i2d>
 800c488:	4642      	mov	r2, r8
 800c48a:	464b      	mov	r3, r9
 800c48c:	f7f4 f8b4 	bl	80005f8 <__aeabi_dmul>
 800c490:	4602      	mov	r2, r0
 800c492:	460b      	mov	r3, r1
 800c494:	4630      	mov	r0, r6
 800c496:	4639      	mov	r1, r7
 800c498:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c49c:	f7f3 fef4 	bl	8000288 <__aeabi_dsub>
 800c4a0:	f805 6b01 	strb.w	r6, [r5], #1
 800c4a4:	9e01      	ldr	r6, [sp, #4]
 800c4a6:	9f03      	ldr	r7, [sp, #12]
 800c4a8:	1bae      	subs	r6, r5, r6
 800c4aa:	42b7      	cmp	r7, r6
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	d135      	bne.n	800c51e <_dtoa_r+0x6e6>
 800c4b2:	f7f3 feeb 	bl	800028c <__adddf3>
 800c4b6:	4642      	mov	r2, r8
 800c4b8:	464b      	mov	r3, r9
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	460f      	mov	r7, r1
 800c4be:	f7f4 fb2b 	bl	8000b18 <__aeabi_dcmpgt>
 800c4c2:	b9d0      	cbnz	r0, 800c4fa <_dtoa_r+0x6c2>
 800c4c4:	4642      	mov	r2, r8
 800c4c6:	464b      	mov	r3, r9
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	4639      	mov	r1, r7
 800c4cc:	f7f4 fafc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4d0:	b110      	cbz	r0, 800c4d8 <_dtoa_r+0x6a0>
 800c4d2:	f01a 0f01 	tst.w	sl, #1
 800c4d6:	d110      	bne.n	800c4fa <_dtoa_r+0x6c2>
 800c4d8:	4620      	mov	r0, r4
 800c4da:	ee18 1a10 	vmov	r1, s16
 800c4de:	f000 ff63 	bl	800d3a8 <_Bfree>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	9800      	ldr	r0, [sp, #0]
 800c4e6:	702b      	strb	r3, [r5, #0]
 800c4e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4ea:	3001      	adds	r0, #1
 800c4ec:	6018      	str	r0, [r3, #0]
 800c4ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	f43f acf1 	beq.w	800bed8 <_dtoa_r+0xa0>
 800c4f6:	601d      	str	r5, [r3, #0]
 800c4f8:	e4ee      	b.n	800bed8 <_dtoa_r+0xa0>
 800c4fa:	9f00      	ldr	r7, [sp, #0]
 800c4fc:	462b      	mov	r3, r5
 800c4fe:	461d      	mov	r5, r3
 800c500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c504:	2a39      	cmp	r2, #57	; 0x39
 800c506:	d106      	bne.n	800c516 <_dtoa_r+0x6de>
 800c508:	9a01      	ldr	r2, [sp, #4]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d1f7      	bne.n	800c4fe <_dtoa_r+0x6c6>
 800c50e:	9901      	ldr	r1, [sp, #4]
 800c510:	2230      	movs	r2, #48	; 0x30
 800c512:	3701      	adds	r7, #1
 800c514:	700a      	strb	r2, [r1, #0]
 800c516:	781a      	ldrb	r2, [r3, #0]
 800c518:	3201      	adds	r2, #1
 800c51a:	701a      	strb	r2, [r3, #0]
 800c51c:	e790      	b.n	800c440 <_dtoa_r+0x608>
 800c51e:	4ba6      	ldr	r3, [pc, #664]	; (800c7b8 <_dtoa_r+0x980>)
 800c520:	2200      	movs	r2, #0
 800c522:	f7f4 f869 	bl	80005f8 <__aeabi_dmul>
 800c526:	2200      	movs	r2, #0
 800c528:	2300      	movs	r3, #0
 800c52a:	4606      	mov	r6, r0
 800c52c:	460f      	mov	r7, r1
 800c52e:	f7f4 facb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c532:	2800      	cmp	r0, #0
 800c534:	d09d      	beq.n	800c472 <_dtoa_r+0x63a>
 800c536:	e7cf      	b.n	800c4d8 <_dtoa_r+0x6a0>
 800c538:	9a08      	ldr	r2, [sp, #32]
 800c53a:	2a00      	cmp	r2, #0
 800c53c:	f000 80d7 	beq.w	800c6ee <_dtoa_r+0x8b6>
 800c540:	9a06      	ldr	r2, [sp, #24]
 800c542:	2a01      	cmp	r2, #1
 800c544:	f300 80ba 	bgt.w	800c6bc <_dtoa_r+0x884>
 800c548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c54a:	2a00      	cmp	r2, #0
 800c54c:	f000 80b2 	beq.w	800c6b4 <_dtoa_r+0x87c>
 800c550:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c554:	9e07      	ldr	r6, [sp, #28]
 800c556:	9d04      	ldr	r5, [sp, #16]
 800c558:	9a04      	ldr	r2, [sp, #16]
 800c55a:	441a      	add	r2, r3
 800c55c:	9204      	str	r2, [sp, #16]
 800c55e:	9a05      	ldr	r2, [sp, #20]
 800c560:	2101      	movs	r1, #1
 800c562:	441a      	add	r2, r3
 800c564:	4620      	mov	r0, r4
 800c566:	9205      	str	r2, [sp, #20]
 800c568:	f001 f820 	bl	800d5ac <__i2b>
 800c56c:	4607      	mov	r7, r0
 800c56e:	2d00      	cmp	r5, #0
 800c570:	dd0c      	ble.n	800c58c <_dtoa_r+0x754>
 800c572:	9b05      	ldr	r3, [sp, #20]
 800c574:	2b00      	cmp	r3, #0
 800c576:	dd09      	ble.n	800c58c <_dtoa_r+0x754>
 800c578:	42ab      	cmp	r3, r5
 800c57a:	9a04      	ldr	r2, [sp, #16]
 800c57c:	bfa8      	it	ge
 800c57e:	462b      	movge	r3, r5
 800c580:	1ad2      	subs	r2, r2, r3
 800c582:	9204      	str	r2, [sp, #16]
 800c584:	9a05      	ldr	r2, [sp, #20]
 800c586:	1aed      	subs	r5, r5, r3
 800c588:	1ad3      	subs	r3, r2, r3
 800c58a:	9305      	str	r3, [sp, #20]
 800c58c:	9b07      	ldr	r3, [sp, #28]
 800c58e:	b31b      	cbz	r3, 800c5d8 <_dtoa_r+0x7a0>
 800c590:	9b08      	ldr	r3, [sp, #32]
 800c592:	2b00      	cmp	r3, #0
 800c594:	f000 80af 	beq.w	800c6f6 <_dtoa_r+0x8be>
 800c598:	2e00      	cmp	r6, #0
 800c59a:	dd13      	ble.n	800c5c4 <_dtoa_r+0x78c>
 800c59c:	4639      	mov	r1, r7
 800c59e:	4632      	mov	r2, r6
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f001 f8c3 	bl	800d72c <__pow5mult>
 800c5a6:	ee18 2a10 	vmov	r2, s16
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	4607      	mov	r7, r0
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f001 f812 	bl	800d5d8 <__multiply>
 800c5b4:	ee18 1a10 	vmov	r1, s16
 800c5b8:	4680      	mov	r8, r0
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f000 fef4 	bl	800d3a8 <_Bfree>
 800c5c0:	ee08 8a10 	vmov	s16, r8
 800c5c4:	9b07      	ldr	r3, [sp, #28]
 800c5c6:	1b9a      	subs	r2, r3, r6
 800c5c8:	d006      	beq.n	800c5d8 <_dtoa_r+0x7a0>
 800c5ca:	ee18 1a10 	vmov	r1, s16
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	f001 f8ac 	bl	800d72c <__pow5mult>
 800c5d4:	ee08 0a10 	vmov	s16, r0
 800c5d8:	2101      	movs	r1, #1
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f000 ffe6 	bl	800d5ac <__i2b>
 800c5e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	4606      	mov	r6, r0
 800c5e6:	f340 8088 	ble.w	800c6fa <_dtoa_r+0x8c2>
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	4601      	mov	r1, r0
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f001 f89c 	bl	800d72c <__pow5mult>
 800c5f4:	9b06      	ldr	r3, [sp, #24]
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	4606      	mov	r6, r0
 800c5fa:	f340 8081 	ble.w	800c700 <_dtoa_r+0x8c8>
 800c5fe:	f04f 0800 	mov.w	r8, #0
 800c602:	6933      	ldr	r3, [r6, #16]
 800c604:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c608:	6918      	ldr	r0, [r3, #16]
 800c60a:	f000 ff7f 	bl	800d50c <__hi0bits>
 800c60e:	f1c0 0020 	rsb	r0, r0, #32
 800c612:	9b05      	ldr	r3, [sp, #20]
 800c614:	4418      	add	r0, r3
 800c616:	f010 001f 	ands.w	r0, r0, #31
 800c61a:	f000 8092 	beq.w	800c742 <_dtoa_r+0x90a>
 800c61e:	f1c0 0320 	rsb	r3, r0, #32
 800c622:	2b04      	cmp	r3, #4
 800c624:	f340 808a 	ble.w	800c73c <_dtoa_r+0x904>
 800c628:	f1c0 001c 	rsb	r0, r0, #28
 800c62c:	9b04      	ldr	r3, [sp, #16]
 800c62e:	4403      	add	r3, r0
 800c630:	9304      	str	r3, [sp, #16]
 800c632:	9b05      	ldr	r3, [sp, #20]
 800c634:	4403      	add	r3, r0
 800c636:	4405      	add	r5, r0
 800c638:	9305      	str	r3, [sp, #20]
 800c63a:	9b04      	ldr	r3, [sp, #16]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	dd07      	ble.n	800c650 <_dtoa_r+0x818>
 800c640:	ee18 1a10 	vmov	r1, s16
 800c644:	461a      	mov	r2, r3
 800c646:	4620      	mov	r0, r4
 800c648:	f001 f8ca 	bl	800d7e0 <__lshift>
 800c64c:	ee08 0a10 	vmov	s16, r0
 800c650:	9b05      	ldr	r3, [sp, #20]
 800c652:	2b00      	cmp	r3, #0
 800c654:	dd05      	ble.n	800c662 <_dtoa_r+0x82a>
 800c656:	4631      	mov	r1, r6
 800c658:	461a      	mov	r2, r3
 800c65a:	4620      	mov	r0, r4
 800c65c:	f001 f8c0 	bl	800d7e0 <__lshift>
 800c660:	4606      	mov	r6, r0
 800c662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c664:	2b00      	cmp	r3, #0
 800c666:	d06e      	beq.n	800c746 <_dtoa_r+0x90e>
 800c668:	ee18 0a10 	vmov	r0, s16
 800c66c:	4631      	mov	r1, r6
 800c66e:	f001 f927 	bl	800d8c0 <__mcmp>
 800c672:	2800      	cmp	r0, #0
 800c674:	da67      	bge.n	800c746 <_dtoa_r+0x90e>
 800c676:	9b00      	ldr	r3, [sp, #0]
 800c678:	3b01      	subs	r3, #1
 800c67a:	ee18 1a10 	vmov	r1, s16
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	220a      	movs	r2, #10
 800c682:	2300      	movs	r3, #0
 800c684:	4620      	mov	r0, r4
 800c686:	f000 feb1 	bl	800d3ec <__multadd>
 800c68a:	9b08      	ldr	r3, [sp, #32]
 800c68c:	ee08 0a10 	vmov	s16, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	f000 81b1 	beq.w	800c9f8 <_dtoa_r+0xbc0>
 800c696:	2300      	movs	r3, #0
 800c698:	4639      	mov	r1, r7
 800c69a:	220a      	movs	r2, #10
 800c69c:	4620      	mov	r0, r4
 800c69e:	f000 fea5 	bl	800d3ec <__multadd>
 800c6a2:	9b02      	ldr	r3, [sp, #8]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	4607      	mov	r7, r0
 800c6a8:	f300 808e 	bgt.w	800c7c8 <_dtoa_r+0x990>
 800c6ac:	9b06      	ldr	r3, [sp, #24]
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	dc51      	bgt.n	800c756 <_dtoa_r+0x91e>
 800c6b2:	e089      	b.n	800c7c8 <_dtoa_r+0x990>
 800c6b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c6ba:	e74b      	b.n	800c554 <_dtoa_r+0x71c>
 800c6bc:	9b03      	ldr	r3, [sp, #12]
 800c6be:	1e5e      	subs	r6, r3, #1
 800c6c0:	9b07      	ldr	r3, [sp, #28]
 800c6c2:	42b3      	cmp	r3, r6
 800c6c4:	bfbf      	itttt	lt
 800c6c6:	9b07      	ldrlt	r3, [sp, #28]
 800c6c8:	9607      	strlt	r6, [sp, #28]
 800c6ca:	1af2      	sublt	r2, r6, r3
 800c6cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c6ce:	bfb6      	itet	lt
 800c6d0:	189b      	addlt	r3, r3, r2
 800c6d2:	1b9e      	subge	r6, r3, r6
 800c6d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c6d6:	9b03      	ldr	r3, [sp, #12]
 800c6d8:	bfb8      	it	lt
 800c6da:	2600      	movlt	r6, #0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	bfb7      	itett	lt
 800c6e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c6e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c6e8:	1a9d      	sublt	r5, r3, r2
 800c6ea:	2300      	movlt	r3, #0
 800c6ec:	e734      	b.n	800c558 <_dtoa_r+0x720>
 800c6ee:	9e07      	ldr	r6, [sp, #28]
 800c6f0:	9d04      	ldr	r5, [sp, #16]
 800c6f2:	9f08      	ldr	r7, [sp, #32]
 800c6f4:	e73b      	b.n	800c56e <_dtoa_r+0x736>
 800c6f6:	9a07      	ldr	r2, [sp, #28]
 800c6f8:	e767      	b.n	800c5ca <_dtoa_r+0x792>
 800c6fa:	9b06      	ldr	r3, [sp, #24]
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	dc18      	bgt.n	800c732 <_dtoa_r+0x8fa>
 800c700:	f1ba 0f00 	cmp.w	sl, #0
 800c704:	d115      	bne.n	800c732 <_dtoa_r+0x8fa>
 800c706:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c70a:	b993      	cbnz	r3, 800c732 <_dtoa_r+0x8fa>
 800c70c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c710:	0d1b      	lsrs	r3, r3, #20
 800c712:	051b      	lsls	r3, r3, #20
 800c714:	b183      	cbz	r3, 800c738 <_dtoa_r+0x900>
 800c716:	9b04      	ldr	r3, [sp, #16]
 800c718:	3301      	adds	r3, #1
 800c71a:	9304      	str	r3, [sp, #16]
 800c71c:	9b05      	ldr	r3, [sp, #20]
 800c71e:	3301      	adds	r3, #1
 800c720:	9305      	str	r3, [sp, #20]
 800c722:	f04f 0801 	mov.w	r8, #1
 800c726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f47f af6a 	bne.w	800c602 <_dtoa_r+0x7ca>
 800c72e:	2001      	movs	r0, #1
 800c730:	e76f      	b.n	800c612 <_dtoa_r+0x7da>
 800c732:	f04f 0800 	mov.w	r8, #0
 800c736:	e7f6      	b.n	800c726 <_dtoa_r+0x8ee>
 800c738:	4698      	mov	r8, r3
 800c73a:	e7f4      	b.n	800c726 <_dtoa_r+0x8ee>
 800c73c:	f43f af7d 	beq.w	800c63a <_dtoa_r+0x802>
 800c740:	4618      	mov	r0, r3
 800c742:	301c      	adds	r0, #28
 800c744:	e772      	b.n	800c62c <_dtoa_r+0x7f4>
 800c746:	9b03      	ldr	r3, [sp, #12]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	dc37      	bgt.n	800c7bc <_dtoa_r+0x984>
 800c74c:	9b06      	ldr	r3, [sp, #24]
 800c74e:	2b02      	cmp	r3, #2
 800c750:	dd34      	ble.n	800c7bc <_dtoa_r+0x984>
 800c752:	9b03      	ldr	r3, [sp, #12]
 800c754:	9302      	str	r3, [sp, #8]
 800c756:	9b02      	ldr	r3, [sp, #8]
 800c758:	b96b      	cbnz	r3, 800c776 <_dtoa_r+0x93e>
 800c75a:	4631      	mov	r1, r6
 800c75c:	2205      	movs	r2, #5
 800c75e:	4620      	mov	r0, r4
 800c760:	f000 fe44 	bl	800d3ec <__multadd>
 800c764:	4601      	mov	r1, r0
 800c766:	4606      	mov	r6, r0
 800c768:	ee18 0a10 	vmov	r0, s16
 800c76c:	f001 f8a8 	bl	800d8c0 <__mcmp>
 800c770:	2800      	cmp	r0, #0
 800c772:	f73f adbb 	bgt.w	800c2ec <_dtoa_r+0x4b4>
 800c776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c778:	9d01      	ldr	r5, [sp, #4]
 800c77a:	43db      	mvns	r3, r3
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	f04f 0800 	mov.w	r8, #0
 800c782:	4631      	mov	r1, r6
 800c784:	4620      	mov	r0, r4
 800c786:	f000 fe0f 	bl	800d3a8 <_Bfree>
 800c78a:	2f00      	cmp	r7, #0
 800c78c:	f43f aea4 	beq.w	800c4d8 <_dtoa_r+0x6a0>
 800c790:	f1b8 0f00 	cmp.w	r8, #0
 800c794:	d005      	beq.n	800c7a2 <_dtoa_r+0x96a>
 800c796:	45b8      	cmp	r8, r7
 800c798:	d003      	beq.n	800c7a2 <_dtoa_r+0x96a>
 800c79a:	4641      	mov	r1, r8
 800c79c:	4620      	mov	r0, r4
 800c79e:	f000 fe03 	bl	800d3a8 <_Bfree>
 800c7a2:	4639      	mov	r1, r7
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	f000 fdff 	bl	800d3a8 <_Bfree>
 800c7aa:	e695      	b.n	800c4d8 <_dtoa_r+0x6a0>
 800c7ac:	2600      	movs	r6, #0
 800c7ae:	4637      	mov	r7, r6
 800c7b0:	e7e1      	b.n	800c776 <_dtoa_r+0x93e>
 800c7b2:	9700      	str	r7, [sp, #0]
 800c7b4:	4637      	mov	r7, r6
 800c7b6:	e599      	b.n	800c2ec <_dtoa_r+0x4b4>
 800c7b8:	40240000 	.word	0x40240000
 800c7bc:	9b08      	ldr	r3, [sp, #32]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f000 80ca 	beq.w	800c958 <_dtoa_r+0xb20>
 800c7c4:	9b03      	ldr	r3, [sp, #12]
 800c7c6:	9302      	str	r3, [sp, #8]
 800c7c8:	2d00      	cmp	r5, #0
 800c7ca:	dd05      	ble.n	800c7d8 <_dtoa_r+0x9a0>
 800c7cc:	4639      	mov	r1, r7
 800c7ce:	462a      	mov	r2, r5
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f001 f805 	bl	800d7e0 <__lshift>
 800c7d6:	4607      	mov	r7, r0
 800c7d8:	f1b8 0f00 	cmp.w	r8, #0
 800c7dc:	d05b      	beq.n	800c896 <_dtoa_r+0xa5e>
 800c7de:	6879      	ldr	r1, [r7, #4]
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f000 fda1 	bl	800d328 <_Balloc>
 800c7e6:	4605      	mov	r5, r0
 800c7e8:	b928      	cbnz	r0, 800c7f6 <_dtoa_r+0x9be>
 800c7ea:	4b87      	ldr	r3, [pc, #540]	; (800ca08 <_dtoa_r+0xbd0>)
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c7f2:	f7ff bb3b 	b.w	800be6c <_dtoa_r+0x34>
 800c7f6:	693a      	ldr	r2, [r7, #16]
 800c7f8:	3202      	adds	r2, #2
 800c7fa:	0092      	lsls	r2, r2, #2
 800c7fc:	f107 010c 	add.w	r1, r7, #12
 800c800:	300c      	adds	r0, #12
 800c802:	f7fd fbf5 	bl	8009ff0 <memcpy>
 800c806:	2201      	movs	r2, #1
 800c808:	4629      	mov	r1, r5
 800c80a:	4620      	mov	r0, r4
 800c80c:	f000 ffe8 	bl	800d7e0 <__lshift>
 800c810:	9b01      	ldr	r3, [sp, #4]
 800c812:	f103 0901 	add.w	r9, r3, #1
 800c816:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c81a:	4413      	add	r3, r2
 800c81c:	9305      	str	r3, [sp, #20]
 800c81e:	f00a 0301 	and.w	r3, sl, #1
 800c822:	46b8      	mov	r8, r7
 800c824:	9304      	str	r3, [sp, #16]
 800c826:	4607      	mov	r7, r0
 800c828:	4631      	mov	r1, r6
 800c82a:	ee18 0a10 	vmov	r0, s16
 800c82e:	f7ff fa77 	bl	800bd20 <quorem>
 800c832:	4641      	mov	r1, r8
 800c834:	9002      	str	r0, [sp, #8]
 800c836:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c83a:	ee18 0a10 	vmov	r0, s16
 800c83e:	f001 f83f 	bl	800d8c0 <__mcmp>
 800c842:	463a      	mov	r2, r7
 800c844:	9003      	str	r0, [sp, #12]
 800c846:	4631      	mov	r1, r6
 800c848:	4620      	mov	r0, r4
 800c84a:	f001 f855 	bl	800d8f8 <__mdiff>
 800c84e:	68c2      	ldr	r2, [r0, #12]
 800c850:	f109 3bff 	add.w	fp, r9, #4294967295
 800c854:	4605      	mov	r5, r0
 800c856:	bb02      	cbnz	r2, 800c89a <_dtoa_r+0xa62>
 800c858:	4601      	mov	r1, r0
 800c85a:	ee18 0a10 	vmov	r0, s16
 800c85e:	f001 f82f 	bl	800d8c0 <__mcmp>
 800c862:	4602      	mov	r2, r0
 800c864:	4629      	mov	r1, r5
 800c866:	4620      	mov	r0, r4
 800c868:	9207      	str	r2, [sp, #28]
 800c86a:	f000 fd9d 	bl	800d3a8 <_Bfree>
 800c86e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c872:	ea43 0102 	orr.w	r1, r3, r2
 800c876:	9b04      	ldr	r3, [sp, #16]
 800c878:	430b      	orrs	r3, r1
 800c87a:	464d      	mov	r5, r9
 800c87c:	d10f      	bne.n	800c89e <_dtoa_r+0xa66>
 800c87e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c882:	d02a      	beq.n	800c8da <_dtoa_r+0xaa2>
 800c884:	9b03      	ldr	r3, [sp, #12]
 800c886:	2b00      	cmp	r3, #0
 800c888:	dd02      	ble.n	800c890 <_dtoa_r+0xa58>
 800c88a:	9b02      	ldr	r3, [sp, #8]
 800c88c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c890:	f88b a000 	strb.w	sl, [fp]
 800c894:	e775      	b.n	800c782 <_dtoa_r+0x94a>
 800c896:	4638      	mov	r0, r7
 800c898:	e7ba      	b.n	800c810 <_dtoa_r+0x9d8>
 800c89a:	2201      	movs	r2, #1
 800c89c:	e7e2      	b.n	800c864 <_dtoa_r+0xa2c>
 800c89e:	9b03      	ldr	r3, [sp, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	db04      	blt.n	800c8ae <_dtoa_r+0xa76>
 800c8a4:	9906      	ldr	r1, [sp, #24]
 800c8a6:	430b      	orrs	r3, r1
 800c8a8:	9904      	ldr	r1, [sp, #16]
 800c8aa:	430b      	orrs	r3, r1
 800c8ac:	d122      	bne.n	800c8f4 <_dtoa_r+0xabc>
 800c8ae:	2a00      	cmp	r2, #0
 800c8b0:	ddee      	ble.n	800c890 <_dtoa_r+0xa58>
 800c8b2:	ee18 1a10 	vmov	r1, s16
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f000 ff91 	bl	800d7e0 <__lshift>
 800c8be:	4631      	mov	r1, r6
 800c8c0:	ee08 0a10 	vmov	s16, r0
 800c8c4:	f000 fffc 	bl	800d8c0 <__mcmp>
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	dc03      	bgt.n	800c8d4 <_dtoa_r+0xa9c>
 800c8cc:	d1e0      	bne.n	800c890 <_dtoa_r+0xa58>
 800c8ce:	f01a 0f01 	tst.w	sl, #1
 800c8d2:	d0dd      	beq.n	800c890 <_dtoa_r+0xa58>
 800c8d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c8d8:	d1d7      	bne.n	800c88a <_dtoa_r+0xa52>
 800c8da:	2339      	movs	r3, #57	; 0x39
 800c8dc:	f88b 3000 	strb.w	r3, [fp]
 800c8e0:	462b      	mov	r3, r5
 800c8e2:	461d      	mov	r5, r3
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c8ea:	2a39      	cmp	r2, #57	; 0x39
 800c8ec:	d071      	beq.n	800c9d2 <_dtoa_r+0xb9a>
 800c8ee:	3201      	adds	r2, #1
 800c8f0:	701a      	strb	r2, [r3, #0]
 800c8f2:	e746      	b.n	800c782 <_dtoa_r+0x94a>
 800c8f4:	2a00      	cmp	r2, #0
 800c8f6:	dd07      	ble.n	800c908 <_dtoa_r+0xad0>
 800c8f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c8fc:	d0ed      	beq.n	800c8da <_dtoa_r+0xaa2>
 800c8fe:	f10a 0301 	add.w	r3, sl, #1
 800c902:	f88b 3000 	strb.w	r3, [fp]
 800c906:	e73c      	b.n	800c782 <_dtoa_r+0x94a>
 800c908:	9b05      	ldr	r3, [sp, #20]
 800c90a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c90e:	4599      	cmp	r9, r3
 800c910:	d047      	beq.n	800c9a2 <_dtoa_r+0xb6a>
 800c912:	ee18 1a10 	vmov	r1, s16
 800c916:	2300      	movs	r3, #0
 800c918:	220a      	movs	r2, #10
 800c91a:	4620      	mov	r0, r4
 800c91c:	f000 fd66 	bl	800d3ec <__multadd>
 800c920:	45b8      	cmp	r8, r7
 800c922:	ee08 0a10 	vmov	s16, r0
 800c926:	f04f 0300 	mov.w	r3, #0
 800c92a:	f04f 020a 	mov.w	r2, #10
 800c92e:	4641      	mov	r1, r8
 800c930:	4620      	mov	r0, r4
 800c932:	d106      	bne.n	800c942 <_dtoa_r+0xb0a>
 800c934:	f000 fd5a 	bl	800d3ec <__multadd>
 800c938:	4680      	mov	r8, r0
 800c93a:	4607      	mov	r7, r0
 800c93c:	f109 0901 	add.w	r9, r9, #1
 800c940:	e772      	b.n	800c828 <_dtoa_r+0x9f0>
 800c942:	f000 fd53 	bl	800d3ec <__multadd>
 800c946:	4639      	mov	r1, r7
 800c948:	4680      	mov	r8, r0
 800c94a:	2300      	movs	r3, #0
 800c94c:	220a      	movs	r2, #10
 800c94e:	4620      	mov	r0, r4
 800c950:	f000 fd4c 	bl	800d3ec <__multadd>
 800c954:	4607      	mov	r7, r0
 800c956:	e7f1      	b.n	800c93c <_dtoa_r+0xb04>
 800c958:	9b03      	ldr	r3, [sp, #12]
 800c95a:	9302      	str	r3, [sp, #8]
 800c95c:	9d01      	ldr	r5, [sp, #4]
 800c95e:	ee18 0a10 	vmov	r0, s16
 800c962:	4631      	mov	r1, r6
 800c964:	f7ff f9dc 	bl	800bd20 <quorem>
 800c968:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c96c:	9b01      	ldr	r3, [sp, #4]
 800c96e:	f805 ab01 	strb.w	sl, [r5], #1
 800c972:	1aea      	subs	r2, r5, r3
 800c974:	9b02      	ldr	r3, [sp, #8]
 800c976:	4293      	cmp	r3, r2
 800c978:	dd09      	ble.n	800c98e <_dtoa_r+0xb56>
 800c97a:	ee18 1a10 	vmov	r1, s16
 800c97e:	2300      	movs	r3, #0
 800c980:	220a      	movs	r2, #10
 800c982:	4620      	mov	r0, r4
 800c984:	f000 fd32 	bl	800d3ec <__multadd>
 800c988:	ee08 0a10 	vmov	s16, r0
 800c98c:	e7e7      	b.n	800c95e <_dtoa_r+0xb26>
 800c98e:	9b02      	ldr	r3, [sp, #8]
 800c990:	2b00      	cmp	r3, #0
 800c992:	bfc8      	it	gt
 800c994:	461d      	movgt	r5, r3
 800c996:	9b01      	ldr	r3, [sp, #4]
 800c998:	bfd8      	it	le
 800c99a:	2501      	movle	r5, #1
 800c99c:	441d      	add	r5, r3
 800c99e:	f04f 0800 	mov.w	r8, #0
 800c9a2:	ee18 1a10 	vmov	r1, s16
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f000 ff19 	bl	800d7e0 <__lshift>
 800c9ae:	4631      	mov	r1, r6
 800c9b0:	ee08 0a10 	vmov	s16, r0
 800c9b4:	f000 ff84 	bl	800d8c0 <__mcmp>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	dc91      	bgt.n	800c8e0 <_dtoa_r+0xaa8>
 800c9bc:	d102      	bne.n	800c9c4 <_dtoa_r+0xb8c>
 800c9be:	f01a 0f01 	tst.w	sl, #1
 800c9c2:	d18d      	bne.n	800c8e0 <_dtoa_r+0xaa8>
 800c9c4:	462b      	mov	r3, r5
 800c9c6:	461d      	mov	r5, r3
 800c9c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9cc:	2a30      	cmp	r2, #48	; 0x30
 800c9ce:	d0fa      	beq.n	800c9c6 <_dtoa_r+0xb8e>
 800c9d0:	e6d7      	b.n	800c782 <_dtoa_r+0x94a>
 800c9d2:	9a01      	ldr	r2, [sp, #4]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d184      	bne.n	800c8e2 <_dtoa_r+0xaaa>
 800c9d8:	9b00      	ldr	r3, [sp, #0]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	2331      	movs	r3, #49	; 0x31
 800c9e0:	7013      	strb	r3, [r2, #0]
 800c9e2:	e6ce      	b.n	800c782 <_dtoa_r+0x94a>
 800c9e4:	4b09      	ldr	r3, [pc, #36]	; (800ca0c <_dtoa_r+0xbd4>)
 800c9e6:	f7ff ba95 	b.w	800bf14 <_dtoa_r+0xdc>
 800c9ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f47f aa6e 	bne.w	800bece <_dtoa_r+0x96>
 800c9f2:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <_dtoa_r+0xbd8>)
 800c9f4:	f7ff ba8e 	b.w	800bf14 <_dtoa_r+0xdc>
 800c9f8:	9b02      	ldr	r3, [sp, #8]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	dcae      	bgt.n	800c95c <_dtoa_r+0xb24>
 800c9fe:	9b06      	ldr	r3, [sp, #24]
 800ca00:	2b02      	cmp	r3, #2
 800ca02:	f73f aea8 	bgt.w	800c756 <_dtoa_r+0x91e>
 800ca06:	e7a9      	b.n	800c95c <_dtoa_r+0xb24>
 800ca08:	0800f0a0 	.word	0x0800f0a0
 800ca0c:	0800eea0 	.word	0x0800eea0
 800ca10:	0800f021 	.word	0x0800f021

0800ca14 <std>:
 800ca14:	2300      	movs	r3, #0
 800ca16:	b510      	push	{r4, lr}
 800ca18:	4604      	mov	r4, r0
 800ca1a:	e9c0 3300 	strd	r3, r3, [r0]
 800ca1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca22:	6083      	str	r3, [r0, #8]
 800ca24:	8181      	strh	r1, [r0, #12]
 800ca26:	6643      	str	r3, [r0, #100]	; 0x64
 800ca28:	81c2      	strh	r2, [r0, #14]
 800ca2a:	6183      	str	r3, [r0, #24]
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	2208      	movs	r2, #8
 800ca30:	305c      	adds	r0, #92	; 0x5c
 800ca32:	f7fd faeb 	bl	800a00c <memset>
 800ca36:	4b05      	ldr	r3, [pc, #20]	; (800ca4c <std+0x38>)
 800ca38:	6263      	str	r3, [r4, #36]	; 0x24
 800ca3a:	4b05      	ldr	r3, [pc, #20]	; (800ca50 <std+0x3c>)
 800ca3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca3e:	4b05      	ldr	r3, [pc, #20]	; (800ca54 <std+0x40>)
 800ca40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca42:	4b05      	ldr	r3, [pc, #20]	; (800ca58 <std+0x44>)
 800ca44:	6224      	str	r4, [r4, #32]
 800ca46:	6323      	str	r3, [r4, #48]	; 0x30
 800ca48:	bd10      	pop	{r4, pc}
 800ca4a:	bf00      	nop
 800ca4c:	0800e229 	.word	0x0800e229
 800ca50:	0800e24b 	.word	0x0800e24b
 800ca54:	0800e283 	.word	0x0800e283
 800ca58:	0800e2a7 	.word	0x0800e2a7

0800ca5c <_cleanup_r>:
 800ca5c:	4901      	ldr	r1, [pc, #4]	; (800ca64 <_cleanup_r+0x8>)
 800ca5e:	f000 b8af 	b.w	800cbc0 <_fwalk_reent>
 800ca62:	bf00      	nop
 800ca64:	0800e601 	.word	0x0800e601

0800ca68 <__sfmoreglue>:
 800ca68:	b570      	push	{r4, r5, r6, lr}
 800ca6a:	2268      	movs	r2, #104	; 0x68
 800ca6c:	1e4d      	subs	r5, r1, #1
 800ca6e:	4355      	muls	r5, r2
 800ca70:	460e      	mov	r6, r1
 800ca72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca76:	f7fd fb53 	bl	800a120 <_malloc_r>
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	b140      	cbz	r0, 800ca90 <__sfmoreglue+0x28>
 800ca7e:	2100      	movs	r1, #0
 800ca80:	e9c0 1600 	strd	r1, r6, [r0]
 800ca84:	300c      	adds	r0, #12
 800ca86:	60a0      	str	r0, [r4, #8]
 800ca88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca8c:	f7fd fabe 	bl	800a00c <memset>
 800ca90:	4620      	mov	r0, r4
 800ca92:	bd70      	pop	{r4, r5, r6, pc}

0800ca94 <__sfp_lock_acquire>:
 800ca94:	4801      	ldr	r0, [pc, #4]	; (800ca9c <__sfp_lock_acquire+0x8>)
 800ca96:	f000 bc26 	b.w	800d2e6 <__retarget_lock_acquire_recursive>
 800ca9a:	bf00      	nop
 800ca9c:	20000865 	.word	0x20000865

0800caa0 <__sfp_lock_release>:
 800caa0:	4801      	ldr	r0, [pc, #4]	; (800caa8 <__sfp_lock_release+0x8>)
 800caa2:	f000 bc21 	b.w	800d2e8 <__retarget_lock_release_recursive>
 800caa6:	bf00      	nop
 800caa8:	20000865 	.word	0x20000865

0800caac <__sinit_lock_acquire>:
 800caac:	4801      	ldr	r0, [pc, #4]	; (800cab4 <__sinit_lock_acquire+0x8>)
 800caae:	f000 bc1a 	b.w	800d2e6 <__retarget_lock_acquire_recursive>
 800cab2:	bf00      	nop
 800cab4:	20000866 	.word	0x20000866

0800cab8 <__sinit_lock_release>:
 800cab8:	4801      	ldr	r0, [pc, #4]	; (800cac0 <__sinit_lock_release+0x8>)
 800caba:	f000 bc15 	b.w	800d2e8 <__retarget_lock_release_recursive>
 800cabe:	bf00      	nop
 800cac0:	20000866 	.word	0x20000866

0800cac4 <__sinit>:
 800cac4:	b510      	push	{r4, lr}
 800cac6:	4604      	mov	r4, r0
 800cac8:	f7ff fff0 	bl	800caac <__sinit_lock_acquire>
 800cacc:	69a3      	ldr	r3, [r4, #24]
 800cace:	b11b      	cbz	r3, 800cad8 <__sinit+0x14>
 800cad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cad4:	f7ff bff0 	b.w	800cab8 <__sinit_lock_release>
 800cad8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cadc:	6523      	str	r3, [r4, #80]	; 0x50
 800cade:	4b13      	ldr	r3, [pc, #76]	; (800cb2c <__sinit+0x68>)
 800cae0:	4a13      	ldr	r2, [pc, #76]	; (800cb30 <__sinit+0x6c>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	62a2      	str	r2, [r4, #40]	; 0x28
 800cae6:	42a3      	cmp	r3, r4
 800cae8:	bf04      	itt	eq
 800caea:	2301      	moveq	r3, #1
 800caec:	61a3      	streq	r3, [r4, #24]
 800caee:	4620      	mov	r0, r4
 800caf0:	f000 f820 	bl	800cb34 <__sfp>
 800caf4:	6060      	str	r0, [r4, #4]
 800caf6:	4620      	mov	r0, r4
 800caf8:	f000 f81c 	bl	800cb34 <__sfp>
 800cafc:	60a0      	str	r0, [r4, #8]
 800cafe:	4620      	mov	r0, r4
 800cb00:	f000 f818 	bl	800cb34 <__sfp>
 800cb04:	2200      	movs	r2, #0
 800cb06:	60e0      	str	r0, [r4, #12]
 800cb08:	2104      	movs	r1, #4
 800cb0a:	6860      	ldr	r0, [r4, #4]
 800cb0c:	f7ff ff82 	bl	800ca14 <std>
 800cb10:	68a0      	ldr	r0, [r4, #8]
 800cb12:	2201      	movs	r2, #1
 800cb14:	2109      	movs	r1, #9
 800cb16:	f7ff ff7d 	bl	800ca14 <std>
 800cb1a:	68e0      	ldr	r0, [r4, #12]
 800cb1c:	2202      	movs	r2, #2
 800cb1e:	2112      	movs	r1, #18
 800cb20:	f7ff ff78 	bl	800ca14 <std>
 800cb24:	2301      	movs	r3, #1
 800cb26:	61a3      	str	r3, [r4, #24]
 800cb28:	e7d2      	b.n	800cad0 <__sinit+0xc>
 800cb2a:	bf00      	nop
 800cb2c:	0800ee8c 	.word	0x0800ee8c
 800cb30:	0800ca5d 	.word	0x0800ca5d

0800cb34 <__sfp>:
 800cb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb36:	4607      	mov	r7, r0
 800cb38:	f7ff ffac 	bl	800ca94 <__sfp_lock_acquire>
 800cb3c:	4b1e      	ldr	r3, [pc, #120]	; (800cbb8 <__sfp+0x84>)
 800cb3e:	681e      	ldr	r6, [r3, #0]
 800cb40:	69b3      	ldr	r3, [r6, #24]
 800cb42:	b913      	cbnz	r3, 800cb4a <__sfp+0x16>
 800cb44:	4630      	mov	r0, r6
 800cb46:	f7ff ffbd 	bl	800cac4 <__sinit>
 800cb4a:	3648      	adds	r6, #72	; 0x48
 800cb4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb50:	3b01      	subs	r3, #1
 800cb52:	d503      	bpl.n	800cb5c <__sfp+0x28>
 800cb54:	6833      	ldr	r3, [r6, #0]
 800cb56:	b30b      	cbz	r3, 800cb9c <__sfp+0x68>
 800cb58:	6836      	ldr	r6, [r6, #0]
 800cb5a:	e7f7      	b.n	800cb4c <__sfp+0x18>
 800cb5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb60:	b9d5      	cbnz	r5, 800cb98 <__sfp+0x64>
 800cb62:	4b16      	ldr	r3, [pc, #88]	; (800cbbc <__sfp+0x88>)
 800cb64:	60e3      	str	r3, [r4, #12]
 800cb66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb6a:	6665      	str	r5, [r4, #100]	; 0x64
 800cb6c:	f000 fbba 	bl	800d2e4 <__retarget_lock_init_recursive>
 800cb70:	f7ff ff96 	bl	800caa0 <__sfp_lock_release>
 800cb74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cb78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cb7c:	6025      	str	r5, [r4, #0]
 800cb7e:	61a5      	str	r5, [r4, #24]
 800cb80:	2208      	movs	r2, #8
 800cb82:	4629      	mov	r1, r5
 800cb84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb88:	f7fd fa40 	bl	800a00c <memset>
 800cb8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb94:	4620      	mov	r0, r4
 800cb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb98:	3468      	adds	r4, #104	; 0x68
 800cb9a:	e7d9      	b.n	800cb50 <__sfp+0x1c>
 800cb9c:	2104      	movs	r1, #4
 800cb9e:	4638      	mov	r0, r7
 800cba0:	f7ff ff62 	bl	800ca68 <__sfmoreglue>
 800cba4:	4604      	mov	r4, r0
 800cba6:	6030      	str	r0, [r6, #0]
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	d1d5      	bne.n	800cb58 <__sfp+0x24>
 800cbac:	f7ff ff78 	bl	800caa0 <__sfp_lock_release>
 800cbb0:	230c      	movs	r3, #12
 800cbb2:	603b      	str	r3, [r7, #0]
 800cbb4:	e7ee      	b.n	800cb94 <__sfp+0x60>
 800cbb6:	bf00      	nop
 800cbb8:	0800ee8c 	.word	0x0800ee8c
 800cbbc:	ffff0001 	.word	0xffff0001

0800cbc0 <_fwalk_reent>:
 800cbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbc4:	4606      	mov	r6, r0
 800cbc6:	4688      	mov	r8, r1
 800cbc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cbcc:	2700      	movs	r7, #0
 800cbce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbd2:	f1b9 0901 	subs.w	r9, r9, #1
 800cbd6:	d505      	bpl.n	800cbe4 <_fwalk_reent+0x24>
 800cbd8:	6824      	ldr	r4, [r4, #0]
 800cbda:	2c00      	cmp	r4, #0
 800cbdc:	d1f7      	bne.n	800cbce <_fwalk_reent+0xe>
 800cbde:	4638      	mov	r0, r7
 800cbe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbe4:	89ab      	ldrh	r3, [r5, #12]
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d907      	bls.n	800cbfa <_fwalk_reent+0x3a>
 800cbea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbee:	3301      	adds	r3, #1
 800cbf0:	d003      	beq.n	800cbfa <_fwalk_reent+0x3a>
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	47c0      	blx	r8
 800cbf8:	4307      	orrs	r7, r0
 800cbfa:	3568      	adds	r5, #104	; 0x68
 800cbfc:	e7e9      	b.n	800cbd2 <_fwalk_reent+0x12>

0800cbfe <rshift>:
 800cbfe:	6903      	ldr	r3, [r0, #16]
 800cc00:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cc04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc08:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cc0c:	f100 0414 	add.w	r4, r0, #20
 800cc10:	dd45      	ble.n	800cc9e <rshift+0xa0>
 800cc12:	f011 011f 	ands.w	r1, r1, #31
 800cc16:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cc1a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cc1e:	d10c      	bne.n	800cc3a <rshift+0x3c>
 800cc20:	f100 0710 	add.w	r7, r0, #16
 800cc24:	4629      	mov	r1, r5
 800cc26:	42b1      	cmp	r1, r6
 800cc28:	d334      	bcc.n	800cc94 <rshift+0x96>
 800cc2a:	1a9b      	subs	r3, r3, r2
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	1eea      	subs	r2, r5, #3
 800cc30:	4296      	cmp	r6, r2
 800cc32:	bf38      	it	cc
 800cc34:	2300      	movcc	r3, #0
 800cc36:	4423      	add	r3, r4
 800cc38:	e015      	b.n	800cc66 <rshift+0x68>
 800cc3a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cc3e:	f1c1 0820 	rsb	r8, r1, #32
 800cc42:	40cf      	lsrs	r7, r1
 800cc44:	f105 0e04 	add.w	lr, r5, #4
 800cc48:	46a1      	mov	r9, r4
 800cc4a:	4576      	cmp	r6, lr
 800cc4c:	46f4      	mov	ip, lr
 800cc4e:	d815      	bhi.n	800cc7c <rshift+0x7e>
 800cc50:	1a9a      	subs	r2, r3, r2
 800cc52:	0092      	lsls	r2, r2, #2
 800cc54:	3a04      	subs	r2, #4
 800cc56:	3501      	adds	r5, #1
 800cc58:	42ae      	cmp	r6, r5
 800cc5a:	bf38      	it	cc
 800cc5c:	2200      	movcc	r2, #0
 800cc5e:	18a3      	adds	r3, r4, r2
 800cc60:	50a7      	str	r7, [r4, r2]
 800cc62:	b107      	cbz	r7, 800cc66 <rshift+0x68>
 800cc64:	3304      	adds	r3, #4
 800cc66:	1b1a      	subs	r2, r3, r4
 800cc68:	42a3      	cmp	r3, r4
 800cc6a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cc6e:	bf08      	it	eq
 800cc70:	2300      	moveq	r3, #0
 800cc72:	6102      	str	r2, [r0, #16]
 800cc74:	bf08      	it	eq
 800cc76:	6143      	streq	r3, [r0, #20]
 800cc78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc7c:	f8dc c000 	ldr.w	ip, [ip]
 800cc80:	fa0c fc08 	lsl.w	ip, ip, r8
 800cc84:	ea4c 0707 	orr.w	r7, ip, r7
 800cc88:	f849 7b04 	str.w	r7, [r9], #4
 800cc8c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cc90:	40cf      	lsrs	r7, r1
 800cc92:	e7da      	b.n	800cc4a <rshift+0x4c>
 800cc94:	f851 cb04 	ldr.w	ip, [r1], #4
 800cc98:	f847 cf04 	str.w	ip, [r7, #4]!
 800cc9c:	e7c3      	b.n	800cc26 <rshift+0x28>
 800cc9e:	4623      	mov	r3, r4
 800cca0:	e7e1      	b.n	800cc66 <rshift+0x68>

0800cca2 <__hexdig_fun>:
 800cca2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cca6:	2b09      	cmp	r3, #9
 800cca8:	d802      	bhi.n	800ccb0 <__hexdig_fun+0xe>
 800ccaa:	3820      	subs	r0, #32
 800ccac:	b2c0      	uxtb	r0, r0
 800ccae:	4770      	bx	lr
 800ccb0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ccb4:	2b05      	cmp	r3, #5
 800ccb6:	d801      	bhi.n	800ccbc <__hexdig_fun+0x1a>
 800ccb8:	3847      	subs	r0, #71	; 0x47
 800ccba:	e7f7      	b.n	800ccac <__hexdig_fun+0xa>
 800ccbc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ccc0:	2b05      	cmp	r3, #5
 800ccc2:	d801      	bhi.n	800ccc8 <__hexdig_fun+0x26>
 800ccc4:	3827      	subs	r0, #39	; 0x27
 800ccc6:	e7f1      	b.n	800ccac <__hexdig_fun+0xa>
 800ccc8:	2000      	movs	r0, #0
 800ccca:	4770      	bx	lr

0800cccc <__gethex>:
 800cccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd0:	ed2d 8b02 	vpush	{d8}
 800ccd4:	b089      	sub	sp, #36	; 0x24
 800ccd6:	ee08 0a10 	vmov	s16, r0
 800ccda:	9304      	str	r3, [sp, #16]
 800ccdc:	4bb4      	ldr	r3, [pc, #720]	; (800cfb0 <__gethex+0x2e4>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	9301      	str	r3, [sp, #4]
 800cce2:	4618      	mov	r0, r3
 800cce4:	468b      	mov	fp, r1
 800cce6:	4690      	mov	r8, r2
 800cce8:	f7f3 fa72 	bl	80001d0 <strlen>
 800ccec:	9b01      	ldr	r3, [sp, #4]
 800ccee:	f8db 2000 	ldr.w	r2, [fp]
 800ccf2:	4403      	add	r3, r0
 800ccf4:	4682      	mov	sl, r0
 800ccf6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ccfa:	9305      	str	r3, [sp, #20]
 800ccfc:	1c93      	adds	r3, r2, #2
 800ccfe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cd02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cd06:	32fe      	adds	r2, #254	; 0xfe
 800cd08:	18d1      	adds	r1, r2, r3
 800cd0a:	461f      	mov	r7, r3
 800cd0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cd10:	9100      	str	r1, [sp, #0]
 800cd12:	2830      	cmp	r0, #48	; 0x30
 800cd14:	d0f8      	beq.n	800cd08 <__gethex+0x3c>
 800cd16:	f7ff ffc4 	bl	800cca2 <__hexdig_fun>
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d13a      	bne.n	800cd96 <__gethex+0xca>
 800cd20:	9901      	ldr	r1, [sp, #4]
 800cd22:	4652      	mov	r2, sl
 800cd24:	4638      	mov	r0, r7
 800cd26:	f001 fac2 	bl	800e2ae <strncmp>
 800cd2a:	4605      	mov	r5, r0
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d168      	bne.n	800ce02 <__gethex+0x136>
 800cd30:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cd34:	eb07 060a 	add.w	r6, r7, sl
 800cd38:	f7ff ffb3 	bl	800cca2 <__hexdig_fun>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	d062      	beq.n	800ce06 <__gethex+0x13a>
 800cd40:	4633      	mov	r3, r6
 800cd42:	7818      	ldrb	r0, [r3, #0]
 800cd44:	2830      	cmp	r0, #48	; 0x30
 800cd46:	461f      	mov	r7, r3
 800cd48:	f103 0301 	add.w	r3, r3, #1
 800cd4c:	d0f9      	beq.n	800cd42 <__gethex+0x76>
 800cd4e:	f7ff ffa8 	bl	800cca2 <__hexdig_fun>
 800cd52:	2301      	movs	r3, #1
 800cd54:	fab0 f480 	clz	r4, r0
 800cd58:	0964      	lsrs	r4, r4, #5
 800cd5a:	4635      	mov	r5, r6
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	463a      	mov	r2, r7
 800cd60:	4616      	mov	r6, r2
 800cd62:	3201      	adds	r2, #1
 800cd64:	7830      	ldrb	r0, [r6, #0]
 800cd66:	f7ff ff9c 	bl	800cca2 <__hexdig_fun>
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d1f8      	bne.n	800cd60 <__gethex+0x94>
 800cd6e:	9901      	ldr	r1, [sp, #4]
 800cd70:	4652      	mov	r2, sl
 800cd72:	4630      	mov	r0, r6
 800cd74:	f001 fa9b 	bl	800e2ae <strncmp>
 800cd78:	b980      	cbnz	r0, 800cd9c <__gethex+0xd0>
 800cd7a:	b94d      	cbnz	r5, 800cd90 <__gethex+0xc4>
 800cd7c:	eb06 050a 	add.w	r5, r6, sl
 800cd80:	462a      	mov	r2, r5
 800cd82:	4616      	mov	r6, r2
 800cd84:	3201      	adds	r2, #1
 800cd86:	7830      	ldrb	r0, [r6, #0]
 800cd88:	f7ff ff8b 	bl	800cca2 <__hexdig_fun>
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d1f8      	bne.n	800cd82 <__gethex+0xb6>
 800cd90:	1bad      	subs	r5, r5, r6
 800cd92:	00ad      	lsls	r5, r5, #2
 800cd94:	e004      	b.n	800cda0 <__gethex+0xd4>
 800cd96:	2400      	movs	r4, #0
 800cd98:	4625      	mov	r5, r4
 800cd9a:	e7e0      	b.n	800cd5e <__gethex+0x92>
 800cd9c:	2d00      	cmp	r5, #0
 800cd9e:	d1f7      	bne.n	800cd90 <__gethex+0xc4>
 800cda0:	7833      	ldrb	r3, [r6, #0]
 800cda2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cda6:	2b50      	cmp	r3, #80	; 0x50
 800cda8:	d13b      	bne.n	800ce22 <__gethex+0x156>
 800cdaa:	7873      	ldrb	r3, [r6, #1]
 800cdac:	2b2b      	cmp	r3, #43	; 0x2b
 800cdae:	d02c      	beq.n	800ce0a <__gethex+0x13e>
 800cdb0:	2b2d      	cmp	r3, #45	; 0x2d
 800cdb2:	d02e      	beq.n	800ce12 <__gethex+0x146>
 800cdb4:	1c71      	adds	r1, r6, #1
 800cdb6:	f04f 0900 	mov.w	r9, #0
 800cdba:	7808      	ldrb	r0, [r1, #0]
 800cdbc:	f7ff ff71 	bl	800cca2 <__hexdig_fun>
 800cdc0:	1e43      	subs	r3, r0, #1
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	2b18      	cmp	r3, #24
 800cdc6:	d82c      	bhi.n	800ce22 <__gethex+0x156>
 800cdc8:	f1a0 0210 	sub.w	r2, r0, #16
 800cdcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cdd0:	f7ff ff67 	bl	800cca2 <__hexdig_fun>
 800cdd4:	1e43      	subs	r3, r0, #1
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	2b18      	cmp	r3, #24
 800cdda:	d91d      	bls.n	800ce18 <__gethex+0x14c>
 800cddc:	f1b9 0f00 	cmp.w	r9, #0
 800cde0:	d000      	beq.n	800cde4 <__gethex+0x118>
 800cde2:	4252      	negs	r2, r2
 800cde4:	4415      	add	r5, r2
 800cde6:	f8cb 1000 	str.w	r1, [fp]
 800cdea:	b1e4      	cbz	r4, 800ce26 <__gethex+0x15a>
 800cdec:	9b00      	ldr	r3, [sp, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	bf14      	ite	ne
 800cdf2:	2700      	movne	r7, #0
 800cdf4:	2706      	moveq	r7, #6
 800cdf6:	4638      	mov	r0, r7
 800cdf8:	b009      	add	sp, #36	; 0x24
 800cdfa:	ecbd 8b02 	vpop	{d8}
 800cdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce02:	463e      	mov	r6, r7
 800ce04:	4625      	mov	r5, r4
 800ce06:	2401      	movs	r4, #1
 800ce08:	e7ca      	b.n	800cda0 <__gethex+0xd4>
 800ce0a:	f04f 0900 	mov.w	r9, #0
 800ce0e:	1cb1      	adds	r1, r6, #2
 800ce10:	e7d3      	b.n	800cdba <__gethex+0xee>
 800ce12:	f04f 0901 	mov.w	r9, #1
 800ce16:	e7fa      	b.n	800ce0e <__gethex+0x142>
 800ce18:	230a      	movs	r3, #10
 800ce1a:	fb03 0202 	mla	r2, r3, r2, r0
 800ce1e:	3a10      	subs	r2, #16
 800ce20:	e7d4      	b.n	800cdcc <__gethex+0x100>
 800ce22:	4631      	mov	r1, r6
 800ce24:	e7df      	b.n	800cde6 <__gethex+0x11a>
 800ce26:	1bf3      	subs	r3, r6, r7
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	4621      	mov	r1, r4
 800ce2c:	2b07      	cmp	r3, #7
 800ce2e:	dc0b      	bgt.n	800ce48 <__gethex+0x17c>
 800ce30:	ee18 0a10 	vmov	r0, s16
 800ce34:	f000 fa78 	bl	800d328 <_Balloc>
 800ce38:	4604      	mov	r4, r0
 800ce3a:	b940      	cbnz	r0, 800ce4e <__gethex+0x182>
 800ce3c:	4b5d      	ldr	r3, [pc, #372]	; (800cfb4 <__gethex+0x2e8>)
 800ce3e:	4602      	mov	r2, r0
 800ce40:	21de      	movs	r1, #222	; 0xde
 800ce42:	485d      	ldr	r0, [pc, #372]	; (800cfb8 <__gethex+0x2ec>)
 800ce44:	f001 fb28 	bl	800e498 <__assert_func>
 800ce48:	3101      	adds	r1, #1
 800ce4a:	105b      	asrs	r3, r3, #1
 800ce4c:	e7ee      	b.n	800ce2c <__gethex+0x160>
 800ce4e:	f100 0914 	add.w	r9, r0, #20
 800ce52:	f04f 0b00 	mov.w	fp, #0
 800ce56:	f1ca 0301 	rsb	r3, sl, #1
 800ce5a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ce5e:	f8cd b000 	str.w	fp, [sp]
 800ce62:	9306      	str	r3, [sp, #24]
 800ce64:	42b7      	cmp	r7, r6
 800ce66:	d340      	bcc.n	800ceea <__gethex+0x21e>
 800ce68:	9802      	ldr	r0, [sp, #8]
 800ce6a:	9b00      	ldr	r3, [sp, #0]
 800ce6c:	f840 3b04 	str.w	r3, [r0], #4
 800ce70:	eba0 0009 	sub.w	r0, r0, r9
 800ce74:	1080      	asrs	r0, r0, #2
 800ce76:	0146      	lsls	r6, r0, #5
 800ce78:	6120      	str	r0, [r4, #16]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 fb46 	bl	800d50c <__hi0bits>
 800ce80:	1a30      	subs	r0, r6, r0
 800ce82:	f8d8 6000 	ldr.w	r6, [r8]
 800ce86:	42b0      	cmp	r0, r6
 800ce88:	dd63      	ble.n	800cf52 <__gethex+0x286>
 800ce8a:	1b87      	subs	r7, r0, r6
 800ce8c:	4639      	mov	r1, r7
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f000 feea 	bl	800dc68 <__any_on>
 800ce94:	4682      	mov	sl, r0
 800ce96:	b1a8      	cbz	r0, 800cec4 <__gethex+0x1f8>
 800ce98:	1e7b      	subs	r3, r7, #1
 800ce9a:	1159      	asrs	r1, r3, #5
 800ce9c:	f003 021f 	and.w	r2, r3, #31
 800cea0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cea4:	f04f 0a01 	mov.w	sl, #1
 800cea8:	fa0a f202 	lsl.w	r2, sl, r2
 800ceac:	420a      	tst	r2, r1
 800ceae:	d009      	beq.n	800cec4 <__gethex+0x1f8>
 800ceb0:	4553      	cmp	r3, sl
 800ceb2:	dd05      	ble.n	800cec0 <__gethex+0x1f4>
 800ceb4:	1eb9      	subs	r1, r7, #2
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f000 fed6 	bl	800dc68 <__any_on>
 800cebc:	2800      	cmp	r0, #0
 800cebe:	d145      	bne.n	800cf4c <__gethex+0x280>
 800cec0:	f04f 0a02 	mov.w	sl, #2
 800cec4:	4639      	mov	r1, r7
 800cec6:	4620      	mov	r0, r4
 800cec8:	f7ff fe99 	bl	800cbfe <rshift>
 800cecc:	443d      	add	r5, r7
 800cece:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ced2:	42ab      	cmp	r3, r5
 800ced4:	da4c      	bge.n	800cf70 <__gethex+0x2a4>
 800ced6:	ee18 0a10 	vmov	r0, s16
 800ceda:	4621      	mov	r1, r4
 800cedc:	f000 fa64 	bl	800d3a8 <_Bfree>
 800cee0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cee2:	2300      	movs	r3, #0
 800cee4:	6013      	str	r3, [r2, #0]
 800cee6:	27a3      	movs	r7, #163	; 0xa3
 800cee8:	e785      	b.n	800cdf6 <__gethex+0x12a>
 800ceea:	1e73      	subs	r3, r6, #1
 800ceec:	9a05      	ldr	r2, [sp, #20]
 800ceee:	9303      	str	r3, [sp, #12]
 800cef0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d019      	beq.n	800cf2c <__gethex+0x260>
 800cef8:	f1bb 0f20 	cmp.w	fp, #32
 800cefc:	d107      	bne.n	800cf0e <__gethex+0x242>
 800cefe:	9b02      	ldr	r3, [sp, #8]
 800cf00:	9a00      	ldr	r2, [sp, #0]
 800cf02:	f843 2b04 	str.w	r2, [r3], #4
 800cf06:	9302      	str	r3, [sp, #8]
 800cf08:	2300      	movs	r3, #0
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	469b      	mov	fp, r3
 800cf0e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cf12:	f7ff fec6 	bl	800cca2 <__hexdig_fun>
 800cf16:	9b00      	ldr	r3, [sp, #0]
 800cf18:	f000 000f 	and.w	r0, r0, #15
 800cf1c:	fa00 f00b 	lsl.w	r0, r0, fp
 800cf20:	4303      	orrs	r3, r0
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	f10b 0b04 	add.w	fp, fp, #4
 800cf28:	9b03      	ldr	r3, [sp, #12]
 800cf2a:	e00d      	b.n	800cf48 <__gethex+0x27c>
 800cf2c:	9b03      	ldr	r3, [sp, #12]
 800cf2e:	9a06      	ldr	r2, [sp, #24]
 800cf30:	4413      	add	r3, r2
 800cf32:	42bb      	cmp	r3, r7
 800cf34:	d3e0      	bcc.n	800cef8 <__gethex+0x22c>
 800cf36:	4618      	mov	r0, r3
 800cf38:	9901      	ldr	r1, [sp, #4]
 800cf3a:	9307      	str	r3, [sp, #28]
 800cf3c:	4652      	mov	r2, sl
 800cf3e:	f001 f9b6 	bl	800e2ae <strncmp>
 800cf42:	9b07      	ldr	r3, [sp, #28]
 800cf44:	2800      	cmp	r0, #0
 800cf46:	d1d7      	bne.n	800cef8 <__gethex+0x22c>
 800cf48:	461e      	mov	r6, r3
 800cf4a:	e78b      	b.n	800ce64 <__gethex+0x198>
 800cf4c:	f04f 0a03 	mov.w	sl, #3
 800cf50:	e7b8      	b.n	800cec4 <__gethex+0x1f8>
 800cf52:	da0a      	bge.n	800cf6a <__gethex+0x29e>
 800cf54:	1a37      	subs	r7, r6, r0
 800cf56:	4621      	mov	r1, r4
 800cf58:	ee18 0a10 	vmov	r0, s16
 800cf5c:	463a      	mov	r2, r7
 800cf5e:	f000 fc3f 	bl	800d7e0 <__lshift>
 800cf62:	1bed      	subs	r5, r5, r7
 800cf64:	4604      	mov	r4, r0
 800cf66:	f100 0914 	add.w	r9, r0, #20
 800cf6a:	f04f 0a00 	mov.w	sl, #0
 800cf6e:	e7ae      	b.n	800cece <__gethex+0x202>
 800cf70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cf74:	42a8      	cmp	r0, r5
 800cf76:	dd72      	ble.n	800d05e <__gethex+0x392>
 800cf78:	1b45      	subs	r5, r0, r5
 800cf7a:	42ae      	cmp	r6, r5
 800cf7c:	dc36      	bgt.n	800cfec <__gethex+0x320>
 800cf7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	d02a      	beq.n	800cfdc <__gethex+0x310>
 800cf86:	2b03      	cmp	r3, #3
 800cf88:	d02c      	beq.n	800cfe4 <__gethex+0x318>
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d11c      	bne.n	800cfc8 <__gethex+0x2fc>
 800cf8e:	42ae      	cmp	r6, r5
 800cf90:	d11a      	bne.n	800cfc8 <__gethex+0x2fc>
 800cf92:	2e01      	cmp	r6, #1
 800cf94:	d112      	bne.n	800cfbc <__gethex+0x2f0>
 800cf96:	9a04      	ldr	r2, [sp, #16]
 800cf98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cf9c:	6013      	str	r3, [r2, #0]
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	6123      	str	r3, [r4, #16]
 800cfa2:	f8c9 3000 	str.w	r3, [r9]
 800cfa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cfa8:	2762      	movs	r7, #98	; 0x62
 800cfaa:	601c      	str	r4, [r3, #0]
 800cfac:	e723      	b.n	800cdf6 <__gethex+0x12a>
 800cfae:	bf00      	nop
 800cfb0:	0800f17c 	.word	0x0800f17c
 800cfb4:	0800f0a0 	.word	0x0800f0a0
 800cfb8:	0800f114 	.word	0x0800f114
 800cfbc:	1e71      	subs	r1, r6, #1
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f000 fe52 	bl	800dc68 <__any_on>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	d1e6      	bne.n	800cf96 <__gethex+0x2ca>
 800cfc8:	ee18 0a10 	vmov	r0, s16
 800cfcc:	4621      	mov	r1, r4
 800cfce:	f000 f9eb 	bl	800d3a8 <_Bfree>
 800cfd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	2750      	movs	r7, #80	; 0x50
 800cfda:	e70c      	b.n	800cdf6 <__gethex+0x12a>
 800cfdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d1f2      	bne.n	800cfc8 <__gethex+0x2fc>
 800cfe2:	e7d8      	b.n	800cf96 <__gethex+0x2ca>
 800cfe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1d5      	bne.n	800cf96 <__gethex+0x2ca>
 800cfea:	e7ed      	b.n	800cfc8 <__gethex+0x2fc>
 800cfec:	1e6f      	subs	r7, r5, #1
 800cfee:	f1ba 0f00 	cmp.w	sl, #0
 800cff2:	d131      	bne.n	800d058 <__gethex+0x38c>
 800cff4:	b127      	cbz	r7, 800d000 <__gethex+0x334>
 800cff6:	4639      	mov	r1, r7
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 fe35 	bl	800dc68 <__any_on>
 800cffe:	4682      	mov	sl, r0
 800d000:	117b      	asrs	r3, r7, #5
 800d002:	2101      	movs	r1, #1
 800d004:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d008:	f007 071f 	and.w	r7, r7, #31
 800d00c:	fa01 f707 	lsl.w	r7, r1, r7
 800d010:	421f      	tst	r7, r3
 800d012:	4629      	mov	r1, r5
 800d014:	4620      	mov	r0, r4
 800d016:	bf18      	it	ne
 800d018:	f04a 0a02 	orrne.w	sl, sl, #2
 800d01c:	1b76      	subs	r6, r6, r5
 800d01e:	f7ff fdee 	bl	800cbfe <rshift>
 800d022:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d026:	2702      	movs	r7, #2
 800d028:	f1ba 0f00 	cmp.w	sl, #0
 800d02c:	d048      	beq.n	800d0c0 <__gethex+0x3f4>
 800d02e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d032:	2b02      	cmp	r3, #2
 800d034:	d015      	beq.n	800d062 <__gethex+0x396>
 800d036:	2b03      	cmp	r3, #3
 800d038:	d017      	beq.n	800d06a <__gethex+0x39e>
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d109      	bne.n	800d052 <__gethex+0x386>
 800d03e:	f01a 0f02 	tst.w	sl, #2
 800d042:	d006      	beq.n	800d052 <__gethex+0x386>
 800d044:	f8d9 0000 	ldr.w	r0, [r9]
 800d048:	ea4a 0a00 	orr.w	sl, sl, r0
 800d04c:	f01a 0f01 	tst.w	sl, #1
 800d050:	d10e      	bne.n	800d070 <__gethex+0x3a4>
 800d052:	f047 0710 	orr.w	r7, r7, #16
 800d056:	e033      	b.n	800d0c0 <__gethex+0x3f4>
 800d058:	f04f 0a01 	mov.w	sl, #1
 800d05c:	e7d0      	b.n	800d000 <__gethex+0x334>
 800d05e:	2701      	movs	r7, #1
 800d060:	e7e2      	b.n	800d028 <__gethex+0x35c>
 800d062:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d064:	f1c3 0301 	rsb	r3, r3, #1
 800d068:	9315      	str	r3, [sp, #84]	; 0x54
 800d06a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d0f0      	beq.n	800d052 <__gethex+0x386>
 800d070:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d074:	f104 0314 	add.w	r3, r4, #20
 800d078:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d07c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d080:	f04f 0c00 	mov.w	ip, #0
 800d084:	4618      	mov	r0, r3
 800d086:	f853 2b04 	ldr.w	r2, [r3], #4
 800d08a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d08e:	d01c      	beq.n	800d0ca <__gethex+0x3fe>
 800d090:	3201      	adds	r2, #1
 800d092:	6002      	str	r2, [r0, #0]
 800d094:	2f02      	cmp	r7, #2
 800d096:	f104 0314 	add.w	r3, r4, #20
 800d09a:	d13f      	bne.n	800d11c <__gethex+0x450>
 800d09c:	f8d8 2000 	ldr.w	r2, [r8]
 800d0a0:	3a01      	subs	r2, #1
 800d0a2:	42b2      	cmp	r2, r6
 800d0a4:	d10a      	bne.n	800d0bc <__gethex+0x3f0>
 800d0a6:	1171      	asrs	r1, r6, #5
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d0ae:	f006 061f 	and.w	r6, r6, #31
 800d0b2:	fa02 f606 	lsl.w	r6, r2, r6
 800d0b6:	421e      	tst	r6, r3
 800d0b8:	bf18      	it	ne
 800d0ba:	4617      	movne	r7, r2
 800d0bc:	f047 0720 	orr.w	r7, r7, #32
 800d0c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d0c2:	601c      	str	r4, [r3, #0]
 800d0c4:	9b04      	ldr	r3, [sp, #16]
 800d0c6:	601d      	str	r5, [r3, #0]
 800d0c8:	e695      	b.n	800cdf6 <__gethex+0x12a>
 800d0ca:	4299      	cmp	r1, r3
 800d0cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800d0d0:	d8d8      	bhi.n	800d084 <__gethex+0x3b8>
 800d0d2:	68a3      	ldr	r3, [r4, #8]
 800d0d4:	459b      	cmp	fp, r3
 800d0d6:	db19      	blt.n	800d10c <__gethex+0x440>
 800d0d8:	6861      	ldr	r1, [r4, #4]
 800d0da:	ee18 0a10 	vmov	r0, s16
 800d0de:	3101      	adds	r1, #1
 800d0e0:	f000 f922 	bl	800d328 <_Balloc>
 800d0e4:	4681      	mov	r9, r0
 800d0e6:	b918      	cbnz	r0, 800d0f0 <__gethex+0x424>
 800d0e8:	4b1a      	ldr	r3, [pc, #104]	; (800d154 <__gethex+0x488>)
 800d0ea:	4602      	mov	r2, r0
 800d0ec:	2184      	movs	r1, #132	; 0x84
 800d0ee:	e6a8      	b.n	800ce42 <__gethex+0x176>
 800d0f0:	6922      	ldr	r2, [r4, #16]
 800d0f2:	3202      	adds	r2, #2
 800d0f4:	f104 010c 	add.w	r1, r4, #12
 800d0f8:	0092      	lsls	r2, r2, #2
 800d0fa:	300c      	adds	r0, #12
 800d0fc:	f7fc ff78 	bl	8009ff0 <memcpy>
 800d100:	4621      	mov	r1, r4
 800d102:	ee18 0a10 	vmov	r0, s16
 800d106:	f000 f94f 	bl	800d3a8 <_Bfree>
 800d10a:	464c      	mov	r4, r9
 800d10c:	6923      	ldr	r3, [r4, #16]
 800d10e:	1c5a      	adds	r2, r3, #1
 800d110:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d114:	6122      	str	r2, [r4, #16]
 800d116:	2201      	movs	r2, #1
 800d118:	615a      	str	r2, [r3, #20]
 800d11a:	e7bb      	b.n	800d094 <__gethex+0x3c8>
 800d11c:	6922      	ldr	r2, [r4, #16]
 800d11e:	455a      	cmp	r2, fp
 800d120:	dd0b      	ble.n	800d13a <__gethex+0x46e>
 800d122:	2101      	movs	r1, #1
 800d124:	4620      	mov	r0, r4
 800d126:	f7ff fd6a 	bl	800cbfe <rshift>
 800d12a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d12e:	3501      	adds	r5, #1
 800d130:	42ab      	cmp	r3, r5
 800d132:	f6ff aed0 	blt.w	800ced6 <__gethex+0x20a>
 800d136:	2701      	movs	r7, #1
 800d138:	e7c0      	b.n	800d0bc <__gethex+0x3f0>
 800d13a:	f016 061f 	ands.w	r6, r6, #31
 800d13e:	d0fa      	beq.n	800d136 <__gethex+0x46a>
 800d140:	4453      	add	r3, sl
 800d142:	f1c6 0620 	rsb	r6, r6, #32
 800d146:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d14a:	f000 f9df 	bl	800d50c <__hi0bits>
 800d14e:	42b0      	cmp	r0, r6
 800d150:	dbe7      	blt.n	800d122 <__gethex+0x456>
 800d152:	e7f0      	b.n	800d136 <__gethex+0x46a>
 800d154:	0800f0a0 	.word	0x0800f0a0

0800d158 <L_shift>:
 800d158:	f1c2 0208 	rsb	r2, r2, #8
 800d15c:	0092      	lsls	r2, r2, #2
 800d15e:	b570      	push	{r4, r5, r6, lr}
 800d160:	f1c2 0620 	rsb	r6, r2, #32
 800d164:	6843      	ldr	r3, [r0, #4]
 800d166:	6804      	ldr	r4, [r0, #0]
 800d168:	fa03 f506 	lsl.w	r5, r3, r6
 800d16c:	432c      	orrs	r4, r5
 800d16e:	40d3      	lsrs	r3, r2
 800d170:	6004      	str	r4, [r0, #0]
 800d172:	f840 3f04 	str.w	r3, [r0, #4]!
 800d176:	4288      	cmp	r0, r1
 800d178:	d3f4      	bcc.n	800d164 <L_shift+0xc>
 800d17a:	bd70      	pop	{r4, r5, r6, pc}

0800d17c <__match>:
 800d17c:	b530      	push	{r4, r5, lr}
 800d17e:	6803      	ldr	r3, [r0, #0]
 800d180:	3301      	adds	r3, #1
 800d182:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d186:	b914      	cbnz	r4, 800d18e <__match+0x12>
 800d188:	6003      	str	r3, [r0, #0]
 800d18a:	2001      	movs	r0, #1
 800d18c:	bd30      	pop	{r4, r5, pc}
 800d18e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d192:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d196:	2d19      	cmp	r5, #25
 800d198:	bf98      	it	ls
 800d19a:	3220      	addls	r2, #32
 800d19c:	42a2      	cmp	r2, r4
 800d19e:	d0f0      	beq.n	800d182 <__match+0x6>
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	e7f3      	b.n	800d18c <__match+0x10>

0800d1a4 <__hexnan>:
 800d1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a8:	680b      	ldr	r3, [r1, #0]
 800d1aa:	115e      	asrs	r6, r3, #5
 800d1ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d1b0:	f013 031f 	ands.w	r3, r3, #31
 800d1b4:	b087      	sub	sp, #28
 800d1b6:	bf18      	it	ne
 800d1b8:	3604      	addne	r6, #4
 800d1ba:	2500      	movs	r5, #0
 800d1bc:	1f37      	subs	r7, r6, #4
 800d1be:	4690      	mov	r8, r2
 800d1c0:	6802      	ldr	r2, [r0, #0]
 800d1c2:	9301      	str	r3, [sp, #4]
 800d1c4:	4682      	mov	sl, r0
 800d1c6:	f846 5c04 	str.w	r5, [r6, #-4]
 800d1ca:	46b9      	mov	r9, r7
 800d1cc:	463c      	mov	r4, r7
 800d1ce:	9502      	str	r5, [sp, #8]
 800d1d0:	46ab      	mov	fp, r5
 800d1d2:	7851      	ldrb	r1, [r2, #1]
 800d1d4:	1c53      	adds	r3, r2, #1
 800d1d6:	9303      	str	r3, [sp, #12]
 800d1d8:	b341      	cbz	r1, 800d22c <__hexnan+0x88>
 800d1da:	4608      	mov	r0, r1
 800d1dc:	9205      	str	r2, [sp, #20]
 800d1de:	9104      	str	r1, [sp, #16]
 800d1e0:	f7ff fd5f 	bl	800cca2 <__hexdig_fun>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d14f      	bne.n	800d288 <__hexnan+0xe4>
 800d1e8:	9904      	ldr	r1, [sp, #16]
 800d1ea:	9a05      	ldr	r2, [sp, #20]
 800d1ec:	2920      	cmp	r1, #32
 800d1ee:	d818      	bhi.n	800d222 <__hexnan+0x7e>
 800d1f0:	9b02      	ldr	r3, [sp, #8]
 800d1f2:	459b      	cmp	fp, r3
 800d1f4:	dd13      	ble.n	800d21e <__hexnan+0x7a>
 800d1f6:	454c      	cmp	r4, r9
 800d1f8:	d206      	bcs.n	800d208 <__hexnan+0x64>
 800d1fa:	2d07      	cmp	r5, #7
 800d1fc:	dc04      	bgt.n	800d208 <__hexnan+0x64>
 800d1fe:	462a      	mov	r2, r5
 800d200:	4649      	mov	r1, r9
 800d202:	4620      	mov	r0, r4
 800d204:	f7ff ffa8 	bl	800d158 <L_shift>
 800d208:	4544      	cmp	r4, r8
 800d20a:	d950      	bls.n	800d2ae <__hexnan+0x10a>
 800d20c:	2300      	movs	r3, #0
 800d20e:	f1a4 0904 	sub.w	r9, r4, #4
 800d212:	f844 3c04 	str.w	r3, [r4, #-4]
 800d216:	f8cd b008 	str.w	fp, [sp, #8]
 800d21a:	464c      	mov	r4, r9
 800d21c:	461d      	mov	r5, r3
 800d21e:	9a03      	ldr	r2, [sp, #12]
 800d220:	e7d7      	b.n	800d1d2 <__hexnan+0x2e>
 800d222:	2929      	cmp	r1, #41	; 0x29
 800d224:	d156      	bne.n	800d2d4 <__hexnan+0x130>
 800d226:	3202      	adds	r2, #2
 800d228:	f8ca 2000 	str.w	r2, [sl]
 800d22c:	f1bb 0f00 	cmp.w	fp, #0
 800d230:	d050      	beq.n	800d2d4 <__hexnan+0x130>
 800d232:	454c      	cmp	r4, r9
 800d234:	d206      	bcs.n	800d244 <__hexnan+0xa0>
 800d236:	2d07      	cmp	r5, #7
 800d238:	dc04      	bgt.n	800d244 <__hexnan+0xa0>
 800d23a:	462a      	mov	r2, r5
 800d23c:	4649      	mov	r1, r9
 800d23e:	4620      	mov	r0, r4
 800d240:	f7ff ff8a 	bl	800d158 <L_shift>
 800d244:	4544      	cmp	r4, r8
 800d246:	d934      	bls.n	800d2b2 <__hexnan+0x10e>
 800d248:	f1a8 0204 	sub.w	r2, r8, #4
 800d24c:	4623      	mov	r3, r4
 800d24e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d252:	f842 1f04 	str.w	r1, [r2, #4]!
 800d256:	429f      	cmp	r7, r3
 800d258:	d2f9      	bcs.n	800d24e <__hexnan+0xaa>
 800d25a:	1b3b      	subs	r3, r7, r4
 800d25c:	f023 0303 	bic.w	r3, r3, #3
 800d260:	3304      	adds	r3, #4
 800d262:	3401      	adds	r4, #1
 800d264:	3e03      	subs	r6, #3
 800d266:	42b4      	cmp	r4, r6
 800d268:	bf88      	it	hi
 800d26a:	2304      	movhi	r3, #4
 800d26c:	4443      	add	r3, r8
 800d26e:	2200      	movs	r2, #0
 800d270:	f843 2b04 	str.w	r2, [r3], #4
 800d274:	429f      	cmp	r7, r3
 800d276:	d2fb      	bcs.n	800d270 <__hexnan+0xcc>
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	b91b      	cbnz	r3, 800d284 <__hexnan+0xe0>
 800d27c:	4547      	cmp	r7, r8
 800d27e:	d127      	bne.n	800d2d0 <__hexnan+0x12c>
 800d280:	2301      	movs	r3, #1
 800d282:	603b      	str	r3, [r7, #0]
 800d284:	2005      	movs	r0, #5
 800d286:	e026      	b.n	800d2d6 <__hexnan+0x132>
 800d288:	3501      	adds	r5, #1
 800d28a:	2d08      	cmp	r5, #8
 800d28c:	f10b 0b01 	add.w	fp, fp, #1
 800d290:	dd06      	ble.n	800d2a0 <__hexnan+0xfc>
 800d292:	4544      	cmp	r4, r8
 800d294:	d9c3      	bls.n	800d21e <__hexnan+0x7a>
 800d296:	2300      	movs	r3, #0
 800d298:	f844 3c04 	str.w	r3, [r4, #-4]
 800d29c:	2501      	movs	r5, #1
 800d29e:	3c04      	subs	r4, #4
 800d2a0:	6822      	ldr	r2, [r4, #0]
 800d2a2:	f000 000f 	and.w	r0, r0, #15
 800d2a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d2aa:	6022      	str	r2, [r4, #0]
 800d2ac:	e7b7      	b.n	800d21e <__hexnan+0x7a>
 800d2ae:	2508      	movs	r5, #8
 800d2b0:	e7b5      	b.n	800d21e <__hexnan+0x7a>
 800d2b2:	9b01      	ldr	r3, [sp, #4]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d0df      	beq.n	800d278 <__hexnan+0xd4>
 800d2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2bc:	f1c3 0320 	rsb	r3, r3, #32
 800d2c0:	fa22 f303 	lsr.w	r3, r2, r3
 800d2c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d2c8:	401a      	ands	r2, r3
 800d2ca:	f846 2c04 	str.w	r2, [r6, #-4]
 800d2ce:	e7d3      	b.n	800d278 <__hexnan+0xd4>
 800d2d0:	3f04      	subs	r7, #4
 800d2d2:	e7d1      	b.n	800d278 <__hexnan+0xd4>
 800d2d4:	2004      	movs	r0, #4
 800d2d6:	b007      	add	sp, #28
 800d2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d2dc <_localeconv_r>:
 800d2dc:	4800      	ldr	r0, [pc, #0]	; (800d2e0 <_localeconv_r+0x4>)
 800d2de:	4770      	bx	lr
 800d2e0:	200001d8 	.word	0x200001d8

0800d2e4 <__retarget_lock_init_recursive>:
 800d2e4:	4770      	bx	lr

0800d2e6 <__retarget_lock_acquire_recursive>:
 800d2e6:	4770      	bx	lr

0800d2e8 <__retarget_lock_release_recursive>:
 800d2e8:	4770      	bx	lr

0800d2ea <__ascii_mbtowc>:
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	b901      	cbnz	r1, 800d2f0 <__ascii_mbtowc+0x6>
 800d2ee:	a901      	add	r1, sp, #4
 800d2f0:	b142      	cbz	r2, 800d304 <__ascii_mbtowc+0x1a>
 800d2f2:	b14b      	cbz	r3, 800d308 <__ascii_mbtowc+0x1e>
 800d2f4:	7813      	ldrb	r3, [r2, #0]
 800d2f6:	600b      	str	r3, [r1, #0]
 800d2f8:	7812      	ldrb	r2, [r2, #0]
 800d2fa:	1e10      	subs	r0, r2, #0
 800d2fc:	bf18      	it	ne
 800d2fe:	2001      	movne	r0, #1
 800d300:	b002      	add	sp, #8
 800d302:	4770      	bx	lr
 800d304:	4610      	mov	r0, r2
 800d306:	e7fb      	b.n	800d300 <__ascii_mbtowc+0x16>
 800d308:	f06f 0001 	mvn.w	r0, #1
 800d30c:	e7f8      	b.n	800d300 <__ascii_mbtowc+0x16>
	...

0800d310 <__malloc_lock>:
 800d310:	4801      	ldr	r0, [pc, #4]	; (800d318 <__malloc_lock+0x8>)
 800d312:	f7ff bfe8 	b.w	800d2e6 <__retarget_lock_acquire_recursive>
 800d316:	bf00      	nop
 800d318:	20000864 	.word	0x20000864

0800d31c <__malloc_unlock>:
 800d31c:	4801      	ldr	r0, [pc, #4]	; (800d324 <__malloc_unlock+0x8>)
 800d31e:	f7ff bfe3 	b.w	800d2e8 <__retarget_lock_release_recursive>
 800d322:	bf00      	nop
 800d324:	20000864 	.word	0x20000864

0800d328 <_Balloc>:
 800d328:	b570      	push	{r4, r5, r6, lr}
 800d32a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d32c:	4604      	mov	r4, r0
 800d32e:	460d      	mov	r5, r1
 800d330:	b976      	cbnz	r6, 800d350 <_Balloc+0x28>
 800d332:	2010      	movs	r0, #16
 800d334:	f7fc fe3c 	bl	8009fb0 <malloc>
 800d338:	4602      	mov	r2, r0
 800d33a:	6260      	str	r0, [r4, #36]	; 0x24
 800d33c:	b920      	cbnz	r0, 800d348 <_Balloc+0x20>
 800d33e:	4b18      	ldr	r3, [pc, #96]	; (800d3a0 <_Balloc+0x78>)
 800d340:	4818      	ldr	r0, [pc, #96]	; (800d3a4 <_Balloc+0x7c>)
 800d342:	2166      	movs	r1, #102	; 0x66
 800d344:	f001 f8a8 	bl	800e498 <__assert_func>
 800d348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d34c:	6006      	str	r6, [r0, #0]
 800d34e:	60c6      	str	r6, [r0, #12]
 800d350:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d352:	68f3      	ldr	r3, [r6, #12]
 800d354:	b183      	cbz	r3, 800d378 <_Balloc+0x50>
 800d356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d35e:	b9b8      	cbnz	r0, 800d390 <_Balloc+0x68>
 800d360:	2101      	movs	r1, #1
 800d362:	fa01 f605 	lsl.w	r6, r1, r5
 800d366:	1d72      	adds	r2, r6, #5
 800d368:	0092      	lsls	r2, r2, #2
 800d36a:	4620      	mov	r0, r4
 800d36c:	f7fc fe56 	bl	800a01c <_calloc_r>
 800d370:	b160      	cbz	r0, 800d38c <_Balloc+0x64>
 800d372:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d376:	e00e      	b.n	800d396 <_Balloc+0x6e>
 800d378:	2221      	movs	r2, #33	; 0x21
 800d37a:	2104      	movs	r1, #4
 800d37c:	4620      	mov	r0, r4
 800d37e:	f7fc fe4d 	bl	800a01c <_calloc_r>
 800d382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d384:	60f0      	str	r0, [r6, #12]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1e4      	bne.n	800d356 <_Balloc+0x2e>
 800d38c:	2000      	movs	r0, #0
 800d38e:	bd70      	pop	{r4, r5, r6, pc}
 800d390:	6802      	ldr	r2, [r0, #0]
 800d392:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d396:	2300      	movs	r3, #0
 800d398:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d39c:	e7f7      	b.n	800d38e <_Balloc+0x66>
 800d39e:	bf00      	nop
 800d3a0:	0800f02e 	.word	0x0800f02e
 800d3a4:	0800f190 	.word	0x0800f190

0800d3a8 <_Bfree>:
 800d3a8:	b570      	push	{r4, r5, r6, lr}
 800d3aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d3ac:	4605      	mov	r5, r0
 800d3ae:	460c      	mov	r4, r1
 800d3b0:	b976      	cbnz	r6, 800d3d0 <_Bfree+0x28>
 800d3b2:	2010      	movs	r0, #16
 800d3b4:	f7fc fdfc 	bl	8009fb0 <malloc>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	6268      	str	r0, [r5, #36]	; 0x24
 800d3bc:	b920      	cbnz	r0, 800d3c8 <_Bfree+0x20>
 800d3be:	4b09      	ldr	r3, [pc, #36]	; (800d3e4 <_Bfree+0x3c>)
 800d3c0:	4809      	ldr	r0, [pc, #36]	; (800d3e8 <_Bfree+0x40>)
 800d3c2:	218a      	movs	r1, #138	; 0x8a
 800d3c4:	f001 f868 	bl	800e498 <__assert_func>
 800d3c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3cc:	6006      	str	r6, [r0, #0]
 800d3ce:	60c6      	str	r6, [r0, #12]
 800d3d0:	b13c      	cbz	r4, 800d3e2 <_Bfree+0x3a>
 800d3d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d3d4:	6862      	ldr	r2, [r4, #4]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3dc:	6021      	str	r1, [r4, #0]
 800d3de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3e2:	bd70      	pop	{r4, r5, r6, pc}
 800d3e4:	0800f02e 	.word	0x0800f02e
 800d3e8:	0800f190 	.word	0x0800f190

0800d3ec <__multadd>:
 800d3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f0:	690d      	ldr	r5, [r1, #16]
 800d3f2:	4607      	mov	r7, r0
 800d3f4:	460c      	mov	r4, r1
 800d3f6:	461e      	mov	r6, r3
 800d3f8:	f101 0c14 	add.w	ip, r1, #20
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	f8dc 3000 	ldr.w	r3, [ip]
 800d402:	b299      	uxth	r1, r3
 800d404:	fb02 6101 	mla	r1, r2, r1, r6
 800d408:	0c1e      	lsrs	r6, r3, #16
 800d40a:	0c0b      	lsrs	r3, r1, #16
 800d40c:	fb02 3306 	mla	r3, r2, r6, r3
 800d410:	b289      	uxth	r1, r1
 800d412:	3001      	adds	r0, #1
 800d414:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d418:	4285      	cmp	r5, r0
 800d41a:	f84c 1b04 	str.w	r1, [ip], #4
 800d41e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d422:	dcec      	bgt.n	800d3fe <__multadd+0x12>
 800d424:	b30e      	cbz	r6, 800d46a <__multadd+0x7e>
 800d426:	68a3      	ldr	r3, [r4, #8]
 800d428:	42ab      	cmp	r3, r5
 800d42a:	dc19      	bgt.n	800d460 <__multadd+0x74>
 800d42c:	6861      	ldr	r1, [r4, #4]
 800d42e:	4638      	mov	r0, r7
 800d430:	3101      	adds	r1, #1
 800d432:	f7ff ff79 	bl	800d328 <_Balloc>
 800d436:	4680      	mov	r8, r0
 800d438:	b928      	cbnz	r0, 800d446 <__multadd+0x5a>
 800d43a:	4602      	mov	r2, r0
 800d43c:	4b0c      	ldr	r3, [pc, #48]	; (800d470 <__multadd+0x84>)
 800d43e:	480d      	ldr	r0, [pc, #52]	; (800d474 <__multadd+0x88>)
 800d440:	21b5      	movs	r1, #181	; 0xb5
 800d442:	f001 f829 	bl	800e498 <__assert_func>
 800d446:	6922      	ldr	r2, [r4, #16]
 800d448:	3202      	adds	r2, #2
 800d44a:	f104 010c 	add.w	r1, r4, #12
 800d44e:	0092      	lsls	r2, r2, #2
 800d450:	300c      	adds	r0, #12
 800d452:	f7fc fdcd 	bl	8009ff0 <memcpy>
 800d456:	4621      	mov	r1, r4
 800d458:	4638      	mov	r0, r7
 800d45a:	f7ff ffa5 	bl	800d3a8 <_Bfree>
 800d45e:	4644      	mov	r4, r8
 800d460:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d464:	3501      	adds	r5, #1
 800d466:	615e      	str	r6, [r3, #20]
 800d468:	6125      	str	r5, [r4, #16]
 800d46a:	4620      	mov	r0, r4
 800d46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d470:	0800f0a0 	.word	0x0800f0a0
 800d474:	0800f190 	.word	0x0800f190

0800d478 <__s2b>:
 800d478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d47c:	460c      	mov	r4, r1
 800d47e:	4615      	mov	r5, r2
 800d480:	461f      	mov	r7, r3
 800d482:	2209      	movs	r2, #9
 800d484:	3308      	adds	r3, #8
 800d486:	4606      	mov	r6, r0
 800d488:	fb93 f3f2 	sdiv	r3, r3, r2
 800d48c:	2100      	movs	r1, #0
 800d48e:	2201      	movs	r2, #1
 800d490:	429a      	cmp	r2, r3
 800d492:	db09      	blt.n	800d4a8 <__s2b+0x30>
 800d494:	4630      	mov	r0, r6
 800d496:	f7ff ff47 	bl	800d328 <_Balloc>
 800d49a:	b940      	cbnz	r0, 800d4ae <__s2b+0x36>
 800d49c:	4602      	mov	r2, r0
 800d49e:	4b19      	ldr	r3, [pc, #100]	; (800d504 <__s2b+0x8c>)
 800d4a0:	4819      	ldr	r0, [pc, #100]	; (800d508 <__s2b+0x90>)
 800d4a2:	21ce      	movs	r1, #206	; 0xce
 800d4a4:	f000 fff8 	bl	800e498 <__assert_func>
 800d4a8:	0052      	lsls	r2, r2, #1
 800d4aa:	3101      	adds	r1, #1
 800d4ac:	e7f0      	b.n	800d490 <__s2b+0x18>
 800d4ae:	9b08      	ldr	r3, [sp, #32]
 800d4b0:	6143      	str	r3, [r0, #20]
 800d4b2:	2d09      	cmp	r5, #9
 800d4b4:	f04f 0301 	mov.w	r3, #1
 800d4b8:	6103      	str	r3, [r0, #16]
 800d4ba:	dd16      	ble.n	800d4ea <__s2b+0x72>
 800d4bc:	f104 0909 	add.w	r9, r4, #9
 800d4c0:	46c8      	mov	r8, r9
 800d4c2:	442c      	add	r4, r5
 800d4c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d4c8:	4601      	mov	r1, r0
 800d4ca:	3b30      	subs	r3, #48	; 0x30
 800d4cc:	220a      	movs	r2, #10
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	f7ff ff8c 	bl	800d3ec <__multadd>
 800d4d4:	45a0      	cmp	r8, r4
 800d4d6:	d1f5      	bne.n	800d4c4 <__s2b+0x4c>
 800d4d8:	f1a5 0408 	sub.w	r4, r5, #8
 800d4dc:	444c      	add	r4, r9
 800d4de:	1b2d      	subs	r5, r5, r4
 800d4e0:	1963      	adds	r3, r4, r5
 800d4e2:	42bb      	cmp	r3, r7
 800d4e4:	db04      	blt.n	800d4f0 <__s2b+0x78>
 800d4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4ea:	340a      	adds	r4, #10
 800d4ec:	2509      	movs	r5, #9
 800d4ee:	e7f6      	b.n	800d4de <__s2b+0x66>
 800d4f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d4f4:	4601      	mov	r1, r0
 800d4f6:	3b30      	subs	r3, #48	; 0x30
 800d4f8:	220a      	movs	r2, #10
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f7ff ff76 	bl	800d3ec <__multadd>
 800d500:	e7ee      	b.n	800d4e0 <__s2b+0x68>
 800d502:	bf00      	nop
 800d504:	0800f0a0 	.word	0x0800f0a0
 800d508:	0800f190 	.word	0x0800f190

0800d50c <__hi0bits>:
 800d50c:	0c03      	lsrs	r3, r0, #16
 800d50e:	041b      	lsls	r3, r3, #16
 800d510:	b9d3      	cbnz	r3, 800d548 <__hi0bits+0x3c>
 800d512:	0400      	lsls	r0, r0, #16
 800d514:	2310      	movs	r3, #16
 800d516:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d51a:	bf04      	itt	eq
 800d51c:	0200      	lsleq	r0, r0, #8
 800d51e:	3308      	addeq	r3, #8
 800d520:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d524:	bf04      	itt	eq
 800d526:	0100      	lsleq	r0, r0, #4
 800d528:	3304      	addeq	r3, #4
 800d52a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d52e:	bf04      	itt	eq
 800d530:	0080      	lsleq	r0, r0, #2
 800d532:	3302      	addeq	r3, #2
 800d534:	2800      	cmp	r0, #0
 800d536:	db05      	blt.n	800d544 <__hi0bits+0x38>
 800d538:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d53c:	f103 0301 	add.w	r3, r3, #1
 800d540:	bf08      	it	eq
 800d542:	2320      	moveq	r3, #32
 800d544:	4618      	mov	r0, r3
 800d546:	4770      	bx	lr
 800d548:	2300      	movs	r3, #0
 800d54a:	e7e4      	b.n	800d516 <__hi0bits+0xa>

0800d54c <__lo0bits>:
 800d54c:	6803      	ldr	r3, [r0, #0]
 800d54e:	f013 0207 	ands.w	r2, r3, #7
 800d552:	4601      	mov	r1, r0
 800d554:	d00b      	beq.n	800d56e <__lo0bits+0x22>
 800d556:	07da      	lsls	r2, r3, #31
 800d558:	d423      	bmi.n	800d5a2 <__lo0bits+0x56>
 800d55a:	0798      	lsls	r0, r3, #30
 800d55c:	bf49      	itett	mi
 800d55e:	085b      	lsrmi	r3, r3, #1
 800d560:	089b      	lsrpl	r3, r3, #2
 800d562:	2001      	movmi	r0, #1
 800d564:	600b      	strmi	r3, [r1, #0]
 800d566:	bf5c      	itt	pl
 800d568:	600b      	strpl	r3, [r1, #0]
 800d56a:	2002      	movpl	r0, #2
 800d56c:	4770      	bx	lr
 800d56e:	b298      	uxth	r0, r3
 800d570:	b9a8      	cbnz	r0, 800d59e <__lo0bits+0x52>
 800d572:	0c1b      	lsrs	r3, r3, #16
 800d574:	2010      	movs	r0, #16
 800d576:	b2da      	uxtb	r2, r3
 800d578:	b90a      	cbnz	r2, 800d57e <__lo0bits+0x32>
 800d57a:	3008      	adds	r0, #8
 800d57c:	0a1b      	lsrs	r3, r3, #8
 800d57e:	071a      	lsls	r2, r3, #28
 800d580:	bf04      	itt	eq
 800d582:	091b      	lsreq	r3, r3, #4
 800d584:	3004      	addeq	r0, #4
 800d586:	079a      	lsls	r2, r3, #30
 800d588:	bf04      	itt	eq
 800d58a:	089b      	lsreq	r3, r3, #2
 800d58c:	3002      	addeq	r0, #2
 800d58e:	07da      	lsls	r2, r3, #31
 800d590:	d403      	bmi.n	800d59a <__lo0bits+0x4e>
 800d592:	085b      	lsrs	r3, r3, #1
 800d594:	f100 0001 	add.w	r0, r0, #1
 800d598:	d005      	beq.n	800d5a6 <__lo0bits+0x5a>
 800d59a:	600b      	str	r3, [r1, #0]
 800d59c:	4770      	bx	lr
 800d59e:	4610      	mov	r0, r2
 800d5a0:	e7e9      	b.n	800d576 <__lo0bits+0x2a>
 800d5a2:	2000      	movs	r0, #0
 800d5a4:	4770      	bx	lr
 800d5a6:	2020      	movs	r0, #32
 800d5a8:	4770      	bx	lr
	...

0800d5ac <__i2b>:
 800d5ac:	b510      	push	{r4, lr}
 800d5ae:	460c      	mov	r4, r1
 800d5b0:	2101      	movs	r1, #1
 800d5b2:	f7ff feb9 	bl	800d328 <_Balloc>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	b928      	cbnz	r0, 800d5c6 <__i2b+0x1a>
 800d5ba:	4b05      	ldr	r3, [pc, #20]	; (800d5d0 <__i2b+0x24>)
 800d5bc:	4805      	ldr	r0, [pc, #20]	; (800d5d4 <__i2b+0x28>)
 800d5be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d5c2:	f000 ff69 	bl	800e498 <__assert_func>
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	6144      	str	r4, [r0, #20]
 800d5ca:	6103      	str	r3, [r0, #16]
 800d5cc:	bd10      	pop	{r4, pc}
 800d5ce:	bf00      	nop
 800d5d0:	0800f0a0 	.word	0x0800f0a0
 800d5d4:	0800f190 	.word	0x0800f190

0800d5d8 <__multiply>:
 800d5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5dc:	4691      	mov	r9, r2
 800d5de:	690a      	ldr	r2, [r1, #16]
 800d5e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	bfb8      	it	lt
 800d5e8:	460b      	movlt	r3, r1
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	bfbc      	itt	lt
 800d5ee:	464c      	movlt	r4, r9
 800d5f0:	4699      	movlt	r9, r3
 800d5f2:	6927      	ldr	r7, [r4, #16]
 800d5f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d5f8:	68a3      	ldr	r3, [r4, #8]
 800d5fa:	6861      	ldr	r1, [r4, #4]
 800d5fc:	eb07 060a 	add.w	r6, r7, sl
 800d600:	42b3      	cmp	r3, r6
 800d602:	b085      	sub	sp, #20
 800d604:	bfb8      	it	lt
 800d606:	3101      	addlt	r1, #1
 800d608:	f7ff fe8e 	bl	800d328 <_Balloc>
 800d60c:	b930      	cbnz	r0, 800d61c <__multiply+0x44>
 800d60e:	4602      	mov	r2, r0
 800d610:	4b44      	ldr	r3, [pc, #272]	; (800d724 <__multiply+0x14c>)
 800d612:	4845      	ldr	r0, [pc, #276]	; (800d728 <__multiply+0x150>)
 800d614:	f240 115d 	movw	r1, #349	; 0x15d
 800d618:	f000 ff3e 	bl	800e498 <__assert_func>
 800d61c:	f100 0514 	add.w	r5, r0, #20
 800d620:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d624:	462b      	mov	r3, r5
 800d626:	2200      	movs	r2, #0
 800d628:	4543      	cmp	r3, r8
 800d62a:	d321      	bcc.n	800d670 <__multiply+0x98>
 800d62c:	f104 0314 	add.w	r3, r4, #20
 800d630:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d634:	f109 0314 	add.w	r3, r9, #20
 800d638:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d63c:	9202      	str	r2, [sp, #8]
 800d63e:	1b3a      	subs	r2, r7, r4
 800d640:	3a15      	subs	r2, #21
 800d642:	f022 0203 	bic.w	r2, r2, #3
 800d646:	3204      	adds	r2, #4
 800d648:	f104 0115 	add.w	r1, r4, #21
 800d64c:	428f      	cmp	r7, r1
 800d64e:	bf38      	it	cc
 800d650:	2204      	movcc	r2, #4
 800d652:	9201      	str	r2, [sp, #4]
 800d654:	9a02      	ldr	r2, [sp, #8]
 800d656:	9303      	str	r3, [sp, #12]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d80c      	bhi.n	800d676 <__multiply+0x9e>
 800d65c:	2e00      	cmp	r6, #0
 800d65e:	dd03      	ble.n	800d668 <__multiply+0x90>
 800d660:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d664:	2b00      	cmp	r3, #0
 800d666:	d05a      	beq.n	800d71e <__multiply+0x146>
 800d668:	6106      	str	r6, [r0, #16]
 800d66a:	b005      	add	sp, #20
 800d66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d670:	f843 2b04 	str.w	r2, [r3], #4
 800d674:	e7d8      	b.n	800d628 <__multiply+0x50>
 800d676:	f8b3 a000 	ldrh.w	sl, [r3]
 800d67a:	f1ba 0f00 	cmp.w	sl, #0
 800d67e:	d024      	beq.n	800d6ca <__multiply+0xf2>
 800d680:	f104 0e14 	add.w	lr, r4, #20
 800d684:	46a9      	mov	r9, r5
 800d686:	f04f 0c00 	mov.w	ip, #0
 800d68a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d68e:	f8d9 1000 	ldr.w	r1, [r9]
 800d692:	fa1f fb82 	uxth.w	fp, r2
 800d696:	b289      	uxth	r1, r1
 800d698:	fb0a 110b 	mla	r1, sl, fp, r1
 800d69c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d6a0:	f8d9 2000 	ldr.w	r2, [r9]
 800d6a4:	4461      	add	r1, ip
 800d6a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6aa:	fb0a c20b 	mla	r2, sl, fp, ip
 800d6ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d6b2:	b289      	uxth	r1, r1
 800d6b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d6b8:	4577      	cmp	r7, lr
 800d6ba:	f849 1b04 	str.w	r1, [r9], #4
 800d6be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6c2:	d8e2      	bhi.n	800d68a <__multiply+0xb2>
 800d6c4:	9a01      	ldr	r2, [sp, #4]
 800d6c6:	f845 c002 	str.w	ip, [r5, r2]
 800d6ca:	9a03      	ldr	r2, [sp, #12]
 800d6cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	f1b9 0f00 	cmp.w	r9, #0
 800d6d6:	d020      	beq.n	800d71a <__multiply+0x142>
 800d6d8:	6829      	ldr	r1, [r5, #0]
 800d6da:	f104 0c14 	add.w	ip, r4, #20
 800d6de:	46ae      	mov	lr, r5
 800d6e0:	f04f 0a00 	mov.w	sl, #0
 800d6e4:	f8bc b000 	ldrh.w	fp, [ip]
 800d6e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d6ec:	fb09 220b 	mla	r2, r9, fp, r2
 800d6f0:	4492      	add	sl, r2
 800d6f2:	b289      	uxth	r1, r1
 800d6f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d6f8:	f84e 1b04 	str.w	r1, [lr], #4
 800d6fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d700:	f8be 1000 	ldrh.w	r1, [lr]
 800d704:	0c12      	lsrs	r2, r2, #16
 800d706:	fb09 1102 	mla	r1, r9, r2, r1
 800d70a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d70e:	4567      	cmp	r7, ip
 800d710:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d714:	d8e6      	bhi.n	800d6e4 <__multiply+0x10c>
 800d716:	9a01      	ldr	r2, [sp, #4]
 800d718:	50a9      	str	r1, [r5, r2]
 800d71a:	3504      	adds	r5, #4
 800d71c:	e79a      	b.n	800d654 <__multiply+0x7c>
 800d71e:	3e01      	subs	r6, #1
 800d720:	e79c      	b.n	800d65c <__multiply+0x84>
 800d722:	bf00      	nop
 800d724:	0800f0a0 	.word	0x0800f0a0
 800d728:	0800f190 	.word	0x0800f190

0800d72c <__pow5mult>:
 800d72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d730:	4615      	mov	r5, r2
 800d732:	f012 0203 	ands.w	r2, r2, #3
 800d736:	4606      	mov	r6, r0
 800d738:	460f      	mov	r7, r1
 800d73a:	d007      	beq.n	800d74c <__pow5mult+0x20>
 800d73c:	4c25      	ldr	r4, [pc, #148]	; (800d7d4 <__pow5mult+0xa8>)
 800d73e:	3a01      	subs	r2, #1
 800d740:	2300      	movs	r3, #0
 800d742:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d746:	f7ff fe51 	bl	800d3ec <__multadd>
 800d74a:	4607      	mov	r7, r0
 800d74c:	10ad      	asrs	r5, r5, #2
 800d74e:	d03d      	beq.n	800d7cc <__pow5mult+0xa0>
 800d750:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d752:	b97c      	cbnz	r4, 800d774 <__pow5mult+0x48>
 800d754:	2010      	movs	r0, #16
 800d756:	f7fc fc2b 	bl	8009fb0 <malloc>
 800d75a:	4602      	mov	r2, r0
 800d75c:	6270      	str	r0, [r6, #36]	; 0x24
 800d75e:	b928      	cbnz	r0, 800d76c <__pow5mult+0x40>
 800d760:	4b1d      	ldr	r3, [pc, #116]	; (800d7d8 <__pow5mult+0xac>)
 800d762:	481e      	ldr	r0, [pc, #120]	; (800d7dc <__pow5mult+0xb0>)
 800d764:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d768:	f000 fe96 	bl	800e498 <__assert_func>
 800d76c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d770:	6004      	str	r4, [r0, #0]
 800d772:	60c4      	str	r4, [r0, #12]
 800d774:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d778:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d77c:	b94c      	cbnz	r4, 800d792 <__pow5mult+0x66>
 800d77e:	f240 2171 	movw	r1, #625	; 0x271
 800d782:	4630      	mov	r0, r6
 800d784:	f7ff ff12 	bl	800d5ac <__i2b>
 800d788:	2300      	movs	r3, #0
 800d78a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d78e:	4604      	mov	r4, r0
 800d790:	6003      	str	r3, [r0, #0]
 800d792:	f04f 0900 	mov.w	r9, #0
 800d796:	07eb      	lsls	r3, r5, #31
 800d798:	d50a      	bpl.n	800d7b0 <__pow5mult+0x84>
 800d79a:	4639      	mov	r1, r7
 800d79c:	4622      	mov	r2, r4
 800d79e:	4630      	mov	r0, r6
 800d7a0:	f7ff ff1a 	bl	800d5d8 <__multiply>
 800d7a4:	4639      	mov	r1, r7
 800d7a6:	4680      	mov	r8, r0
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	f7ff fdfd 	bl	800d3a8 <_Bfree>
 800d7ae:	4647      	mov	r7, r8
 800d7b0:	106d      	asrs	r5, r5, #1
 800d7b2:	d00b      	beq.n	800d7cc <__pow5mult+0xa0>
 800d7b4:	6820      	ldr	r0, [r4, #0]
 800d7b6:	b938      	cbnz	r0, 800d7c8 <__pow5mult+0x9c>
 800d7b8:	4622      	mov	r2, r4
 800d7ba:	4621      	mov	r1, r4
 800d7bc:	4630      	mov	r0, r6
 800d7be:	f7ff ff0b 	bl	800d5d8 <__multiply>
 800d7c2:	6020      	str	r0, [r4, #0]
 800d7c4:	f8c0 9000 	str.w	r9, [r0]
 800d7c8:	4604      	mov	r4, r0
 800d7ca:	e7e4      	b.n	800d796 <__pow5mult+0x6a>
 800d7cc:	4638      	mov	r0, r7
 800d7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7d2:	bf00      	nop
 800d7d4:	0800f2e0 	.word	0x0800f2e0
 800d7d8:	0800f02e 	.word	0x0800f02e
 800d7dc:	0800f190 	.word	0x0800f190

0800d7e0 <__lshift>:
 800d7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e4:	460c      	mov	r4, r1
 800d7e6:	6849      	ldr	r1, [r1, #4]
 800d7e8:	6923      	ldr	r3, [r4, #16]
 800d7ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7ee:	68a3      	ldr	r3, [r4, #8]
 800d7f0:	4607      	mov	r7, r0
 800d7f2:	4691      	mov	r9, r2
 800d7f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7f8:	f108 0601 	add.w	r6, r8, #1
 800d7fc:	42b3      	cmp	r3, r6
 800d7fe:	db0b      	blt.n	800d818 <__lshift+0x38>
 800d800:	4638      	mov	r0, r7
 800d802:	f7ff fd91 	bl	800d328 <_Balloc>
 800d806:	4605      	mov	r5, r0
 800d808:	b948      	cbnz	r0, 800d81e <__lshift+0x3e>
 800d80a:	4602      	mov	r2, r0
 800d80c:	4b2a      	ldr	r3, [pc, #168]	; (800d8b8 <__lshift+0xd8>)
 800d80e:	482b      	ldr	r0, [pc, #172]	; (800d8bc <__lshift+0xdc>)
 800d810:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d814:	f000 fe40 	bl	800e498 <__assert_func>
 800d818:	3101      	adds	r1, #1
 800d81a:	005b      	lsls	r3, r3, #1
 800d81c:	e7ee      	b.n	800d7fc <__lshift+0x1c>
 800d81e:	2300      	movs	r3, #0
 800d820:	f100 0114 	add.w	r1, r0, #20
 800d824:	f100 0210 	add.w	r2, r0, #16
 800d828:	4618      	mov	r0, r3
 800d82a:	4553      	cmp	r3, sl
 800d82c:	db37      	blt.n	800d89e <__lshift+0xbe>
 800d82e:	6920      	ldr	r0, [r4, #16]
 800d830:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d834:	f104 0314 	add.w	r3, r4, #20
 800d838:	f019 091f 	ands.w	r9, r9, #31
 800d83c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d840:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d844:	d02f      	beq.n	800d8a6 <__lshift+0xc6>
 800d846:	f1c9 0e20 	rsb	lr, r9, #32
 800d84a:	468a      	mov	sl, r1
 800d84c:	f04f 0c00 	mov.w	ip, #0
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	fa02 f209 	lsl.w	r2, r2, r9
 800d856:	ea42 020c 	orr.w	r2, r2, ip
 800d85a:	f84a 2b04 	str.w	r2, [sl], #4
 800d85e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d862:	4298      	cmp	r0, r3
 800d864:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d868:	d8f2      	bhi.n	800d850 <__lshift+0x70>
 800d86a:	1b03      	subs	r3, r0, r4
 800d86c:	3b15      	subs	r3, #21
 800d86e:	f023 0303 	bic.w	r3, r3, #3
 800d872:	3304      	adds	r3, #4
 800d874:	f104 0215 	add.w	r2, r4, #21
 800d878:	4290      	cmp	r0, r2
 800d87a:	bf38      	it	cc
 800d87c:	2304      	movcc	r3, #4
 800d87e:	f841 c003 	str.w	ip, [r1, r3]
 800d882:	f1bc 0f00 	cmp.w	ip, #0
 800d886:	d001      	beq.n	800d88c <__lshift+0xac>
 800d888:	f108 0602 	add.w	r6, r8, #2
 800d88c:	3e01      	subs	r6, #1
 800d88e:	4638      	mov	r0, r7
 800d890:	612e      	str	r6, [r5, #16]
 800d892:	4621      	mov	r1, r4
 800d894:	f7ff fd88 	bl	800d3a8 <_Bfree>
 800d898:	4628      	mov	r0, r5
 800d89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d89e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	e7c1      	b.n	800d82a <__lshift+0x4a>
 800d8a6:	3904      	subs	r1, #4
 800d8a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8b0:	4298      	cmp	r0, r3
 800d8b2:	d8f9      	bhi.n	800d8a8 <__lshift+0xc8>
 800d8b4:	e7ea      	b.n	800d88c <__lshift+0xac>
 800d8b6:	bf00      	nop
 800d8b8:	0800f0a0 	.word	0x0800f0a0
 800d8bc:	0800f190 	.word	0x0800f190

0800d8c0 <__mcmp>:
 800d8c0:	b530      	push	{r4, r5, lr}
 800d8c2:	6902      	ldr	r2, [r0, #16]
 800d8c4:	690c      	ldr	r4, [r1, #16]
 800d8c6:	1b12      	subs	r2, r2, r4
 800d8c8:	d10e      	bne.n	800d8e8 <__mcmp+0x28>
 800d8ca:	f100 0314 	add.w	r3, r0, #20
 800d8ce:	3114      	adds	r1, #20
 800d8d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d8d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d8d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d8dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d8e0:	42a5      	cmp	r5, r4
 800d8e2:	d003      	beq.n	800d8ec <__mcmp+0x2c>
 800d8e4:	d305      	bcc.n	800d8f2 <__mcmp+0x32>
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	4610      	mov	r0, r2
 800d8ea:	bd30      	pop	{r4, r5, pc}
 800d8ec:	4283      	cmp	r3, r0
 800d8ee:	d3f3      	bcc.n	800d8d8 <__mcmp+0x18>
 800d8f0:	e7fa      	b.n	800d8e8 <__mcmp+0x28>
 800d8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f6:	e7f7      	b.n	800d8e8 <__mcmp+0x28>

0800d8f8 <__mdiff>:
 800d8f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fc:	460c      	mov	r4, r1
 800d8fe:	4606      	mov	r6, r0
 800d900:	4611      	mov	r1, r2
 800d902:	4620      	mov	r0, r4
 800d904:	4690      	mov	r8, r2
 800d906:	f7ff ffdb 	bl	800d8c0 <__mcmp>
 800d90a:	1e05      	subs	r5, r0, #0
 800d90c:	d110      	bne.n	800d930 <__mdiff+0x38>
 800d90e:	4629      	mov	r1, r5
 800d910:	4630      	mov	r0, r6
 800d912:	f7ff fd09 	bl	800d328 <_Balloc>
 800d916:	b930      	cbnz	r0, 800d926 <__mdiff+0x2e>
 800d918:	4b3a      	ldr	r3, [pc, #232]	; (800da04 <__mdiff+0x10c>)
 800d91a:	4602      	mov	r2, r0
 800d91c:	f240 2132 	movw	r1, #562	; 0x232
 800d920:	4839      	ldr	r0, [pc, #228]	; (800da08 <__mdiff+0x110>)
 800d922:	f000 fdb9 	bl	800e498 <__assert_func>
 800d926:	2301      	movs	r3, #1
 800d928:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d92c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d930:	bfa4      	itt	ge
 800d932:	4643      	movge	r3, r8
 800d934:	46a0      	movge	r8, r4
 800d936:	4630      	mov	r0, r6
 800d938:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d93c:	bfa6      	itte	ge
 800d93e:	461c      	movge	r4, r3
 800d940:	2500      	movge	r5, #0
 800d942:	2501      	movlt	r5, #1
 800d944:	f7ff fcf0 	bl	800d328 <_Balloc>
 800d948:	b920      	cbnz	r0, 800d954 <__mdiff+0x5c>
 800d94a:	4b2e      	ldr	r3, [pc, #184]	; (800da04 <__mdiff+0x10c>)
 800d94c:	4602      	mov	r2, r0
 800d94e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d952:	e7e5      	b.n	800d920 <__mdiff+0x28>
 800d954:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d958:	6926      	ldr	r6, [r4, #16]
 800d95a:	60c5      	str	r5, [r0, #12]
 800d95c:	f104 0914 	add.w	r9, r4, #20
 800d960:	f108 0514 	add.w	r5, r8, #20
 800d964:	f100 0e14 	add.w	lr, r0, #20
 800d968:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d96c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d970:	f108 0210 	add.w	r2, r8, #16
 800d974:	46f2      	mov	sl, lr
 800d976:	2100      	movs	r1, #0
 800d978:	f859 3b04 	ldr.w	r3, [r9], #4
 800d97c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d980:	fa1f f883 	uxth.w	r8, r3
 800d984:	fa11 f18b 	uxtah	r1, r1, fp
 800d988:	0c1b      	lsrs	r3, r3, #16
 800d98a:	eba1 0808 	sub.w	r8, r1, r8
 800d98e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d992:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d996:	fa1f f888 	uxth.w	r8, r8
 800d99a:	1419      	asrs	r1, r3, #16
 800d99c:	454e      	cmp	r6, r9
 800d99e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d9a2:	f84a 3b04 	str.w	r3, [sl], #4
 800d9a6:	d8e7      	bhi.n	800d978 <__mdiff+0x80>
 800d9a8:	1b33      	subs	r3, r6, r4
 800d9aa:	3b15      	subs	r3, #21
 800d9ac:	f023 0303 	bic.w	r3, r3, #3
 800d9b0:	3304      	adds	r3, #4
 800d9b2:	3415      	adds	r4, #21
 800d9b4:	42a6      	cmp	r6, r4
 800d9b6:	bf38      	it	cc
 800d9b8:	2304      	movcc	r3, #4
 800d9ba:	441d      	add	r5, r3
 800d9bc:	4473      	add	r3, lr
 800d9be:	469e      	mov	lr, r3
 800d9c0:	462e      	mov	r6, r5
 800d9c2:	4566      	cmp	r6, ip
 800d9c4:	d30e      	bcc.n	800d9e4 <__mdiff+0xec>
 800d9c6:	f10c 0203 	add.w	r2, ip, #3
 800d9ca:	1b52      	subs	r2, r2, r5
 800d9cc:	f022 0203 	bic.w	r2, r2, #3
 800d9d0:	3d03      	subs	r5, #3
 800d9d2:	45ac      	cmp	ip, r5
 800d9d4:	bf38      	it	cc
 800d9d6:	2200      	movcc	r2, #0
 800d9d8:	441a      	add	r2, r3
 800d9da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d9de:	b17b      	cbz	r3, 800da00 <__mdiff+0x108>
 800d9e0:	6107      	str	r7, [r0, #16]
 800d9e2:	e7a3      	b.n	800d92c <__mdiff+0x34>
 800d9e4:	f856 8b04 	ldr.w	r8, [r6], #4
 800d9e8:	fa11 f288 	uxtah	r2, r1, r8
 800d9ec:	1414      	asrs	r4, r2, #16
 800d9ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d9f2:	b292      	uxth	r2, r2
 800d9f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d9f8:	f84e 2b04 	str.w	r2, [lr], #4
 800d9fc:	1421      	asrs	r1, r4, #16
 800d9fe:	e7e0      	b.n	800d9c2 <__mdiff+0xca>
 800da00:	3f01      	subs	r7, #1
 800da02:	e7ea      	b.n	800d9da <__mdiff+0xe2>
 800da04:	0800f0a0 	.word	0x0800f0a0
 800da08:	0800f190 	.word	0x0800f190

0800da0c <__ulp>:
 800da0c:	b082      	sub	sp, #8
 800da0e:	ed8d 0b00 	vstr	d0, [sp]
 800da12:	9b01      	ldr	r3, [sp, #4]
 800da14:	4912      	ldr	r1, [pc, #72]	; (800da60 <__ulp+0x54>)
 800da16:	4019      	ands	r1, r3
 800da18:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800da1c:	2900      	cmp	r1, #0
 800da1e:	dd05      	ble.n	800da2c <__ulp+0x20>
 800da20:	2200      	movs	r2, #0
 800da22:	460b      	mov	r3, r1
 800da24:	ec43 2b10 	vmov	d0, r2, r3
 800da28:	b002      	add	sp, #8
 800da2a:	4770      	bx	lr
 800da2c:	4249      	negs	r1, r1
 800da2e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800da32:	ea4f 5021 	mov.w	r0, r1, asr #20
 800da36:	f04f 0200 	mov.w	r2, #0
 800da3a:	f04f 0300 	mov.w	r3, #0
 800da3e:	da04      	bge.n	800da4a <__ulp+0x3e>
 800da40:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800da44:	fa41 f300 	asr.w	r3, r1, r0
 800da48:	e7ec      	b.n	800da24 <__ulp+0x18>
 800da4a:	f1a0 0114 	sub.w	r1, r0, #20
 800da4e:	291e      	cmp	r1, #30
 800da50:	bfda      	itte	le
 800da52:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800da56:	fa20 f101 	lsrle.w	r1, r0, r1
 800da5a:	2101      	movgt	r1, #1
 800da5c:	460a      	mov	r2, r1
 800da5e:	e7e1      	b.n	800da24 <__ulp+0x18>
 800da60:	7ff00000 	.word	0x7ff00000

0800da64 <__b2d>:
 800da64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da66:	6905      	ldr	r5, [r0, #16]
 800da68:	f100 0714 	add.w	r7, r0, #20
 800da6c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800da70:	1f2e      	subs	r6, r5, #4
 800da72:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800da76:	4620      	mov	r0, r4
 800da78:	f7ff fd48 	bl	800d50c <__hi0bits>
 800da7c:	f1c0 0320 	rsb	r3, r0, #32
 800da80:	280a      	cmp	r0, #10
 800da82:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800db00 <__b2d+0x9c>
 800da86:	600b      	str	r3, [r1, #0]
 800da88:	dc14      	bgt.n	800dab4 <__b2d+0x50>
 800da8a:	f1c0 0e0b 	rsb	lr, r0, #11
 800da8e:	fa24 f10e 	lsr.w	r1, r4, lr
 800da92:	42b7      	cmp	r7, r6
 800da94:	ea41 030c 	orr.w	r3, r1, ip
 800da98:	bf34      	ite	cc
 800da9a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800da9e:	2100      	movcs	r1, #0
 800daa0:	3015      	adds	r0, #21
 800daa2:	fa04 f000 	lsl.w	r0, r4, r0
 800daa6:	fa21 f10e 	lsr.w	r1, r1, lr
 800daaa:	ea40 0201 	orr.w	r2, r0, r1
 800daae:	ec43 2b10 	vmov	d0, r2, r3
 800dab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dab4:	42b7      	cmp	r7, r6
 800dab6:	bf3a      	itte	cc
 800dab8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dabc:	f1a5 0608 	subcc.w	r6, r5, #8
 800dac0:	2100      	movcs	r1, #0
 800dac2:	380b      	subs	r0, #11
 800dac4:	d017      	beq.n	800daf6 <__b2d+0x92>
 800dac6:	f1c0 0c20 	rsb	ip, r0, #32
 800daca:	fa04 f500 	lsl.w	r5, r4, r0
 800dace:	42be      	cmp	r6, r7
 800dad0:	fa21 f40c 	lsr.w	r4, r1, ip
 800dad4:	ea45 0504 	orr.w	r5, r5, r4
 800dad8:	bf8c      	ite	hi
 800dada:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dade:	2400      	movls	r4, #0
 800dae0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dae4:	fa01 f000 	lsl.w	r0, r1, r0
 800dae8:	fa24 f40c 	lsr.w	r4, r4, ip
 800daec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800daf0:	ea40 0204 	orr.w	r2, r0, r4
 800daf4:	e7db      	b.n	800daae <__b2d+0x4a>
 800daf6:	ea44 030c 	orr.w	r3, r4, ip
 800dafa:	460a      	mov	r2, r1
 800dafc:	e7d7      	b.n	800daae <__b2d+0x4a>
 800dafe:	bf00      	nop
 800db00:	3ff00000 	.word	0x3ff00000

0800db04 <__d2b>:
 800db04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db08:	4689      	mov	r9, r1
 800db0a:	2101      	movs	r1, #1
 800db0c:	ec57 6b10 	vmov	r6, r7, d0
 800db10:	4690      	mov	r8, r2
 800db12:	f7ff fc09 	bl	800d328 <_Balloc>
 800db16:	4604      	mov	r4, r0
 800db18:	b930      	cbnz	r0, 800db28 <__d2b+0x24>
 800db1a:	4602      	mov	r2, r0
 800db1c:	4b25      	ldr	r3, [pc, #148]	; (800dbb4 <__d2b+0xb0>)
 800db1e:	4826      	ldr	r0, [pc, #152]	; (800dbb8 <__d2b+0xb4>)
 800db20:	f240 310a 	movw	r1, #778	; 0x30a
 800db24:	f000 fcb8 	bl	800e498 <__assert_func>
 800db28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800db2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db30:	bb35      	cbnz	r5, 800db80 <__d2b+0x7c>
 800db32:	2e00      	cmp	r6, #0
 800db34:	9301      	str	r3, [sp, #4]
 800db36:	d028      	beq.n	800db8a <__d2b+0x86>
 800db38:	4668      	mov	r0, sp
 800db3a:	9600      	str	r6, [sp, #0]
 800db3c:	f7ff fd06 	bl	800d54c <__lo0bits>
 800db40:	9900      	ldr	r1, [sp, #0]
 800db42:	b300      	cbz	r0, 800db86 <__d2b+0x82>
 800db44:	9a01      	ldr	r2, [sp, #4]
 800db46:	f1c0 0320 	rsb	r3, r0, #32
 800db4a:	fa02 f303 	lsl.w	r3, r2, r3
 800db4e:	430b      	orrs	r3, r1
 800db50:	40c2      	lsrs	r2, r0
 800db52:	6163      	str	r3, [r4, #20]
 800db54:	9201      	str	r2, [sp, #4]
 800db56:	9b01      	ldr	r3, [sp, #4]
 800db58:	61a3      	str	r3, [r4, #24]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	bf14      	ite	ne
 800db5e:	2202      	movne	r2, #2
 800db60:	2201      	moveq	r2, #1
 800db62:	6122      	str	r2, [r4, #16]
 800db64:	b1d5      	cbz	r5, 800db9c <__d2b+0x98>
 800db66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db6a:	4405      	add	r5, r0
 800db6c:	f8c9 5000 	str.w	r5, [r9]
 800db70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db74:	f8c8 0000 	str.w	r0, [r8]
 800db78:	4620      	mov	r0, r4
 800db7a:	b003      	add	sp, #12
 800db7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db84:	e7d5      	b.n	800db32 <__d2b+0x2e>
 800db86:	6161      	str	r1, [r4, #20]
 800db88:	e7e5      	b.n	800db56 <__d2b+0x52>
 800db8a:	a801      	add	r0, sp, #4
 800db8c:	f7ff fcde 	bl	800d54c <__lo0bits>
 800db90:	9b01      	ldr	r3, [sp, #4]
 800db92:	6163      	str	r3, [r4, #20]
 800db94:	2201      	movs	r2, #1
 800db96:	6122      	str	r2, [r4, #16]
 800db98:	3020      	adds	r0, #32
 800db9a:	e7e3      	b.n	800db64 <__d2b+0x60>
 800db9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dba0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dba4:	f8c9 0000 	str.w	r0, [r9]
 800dba8:	6918      	ldr	r0, [r3, #16]
 800dbaa:	f7ff fcaf 	bl	800d50c <__hi0bits>
 800dbae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbb2:	e7df      	b.n	800db74 <__d2b+0x70>
 800dbb4:	0800f0a0 	.word	0x0800f0a0
 800dbb8:	0800f190 	.word	0x0800f190

0800dbbc <__ratio>:
 800dbbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc0:	4688      	mov	r8, r1
 800dbc2:	4669      	mov	r1, sp
 800dbc4:	4681      	mov	r9, r0
 800dbc6:	f7ff ff4d 	bl	800da64 <__b2d>
 800dbca:	a901      	add	r1, sp, #4
 800dbcc:	4640      	mov	r0, r8
 800dbce:	ec55 4b10 	vmov	r4, r5, d0
 800dbd2:	f7ff ff47 	bl	800da64 <__b2d>
 800dbd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dbda:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dbde:	eba3 0c02 	sub.w	ip, r3, r2
 800dbe2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dbe6:	1a9b      	subs	r3, r3, r2
 800dbe8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dbec:	ec51 0b10 	vmov	r0, r1, d0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	bfd6      	itet	le
 800dbf4:	460a      	movle	r2, r1
 800dbf6:	462a      	movgt	r2, r5
 800dbf8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dbfc:	468b      	mov	fp, r1
 800dbfe:	462f      	mov	r7, r5
 800dc00:	bfd4      	ite	le
 800dc02:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dc06:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	ee10 2a10 	vmov	r2, s0
 800dc10:	465b      	mov	r3, fp
 800dc12:	4639      	mov	r1, r7
 800dc14:	f7f2 fe1a 	bl	800084c <__aeabi_ddiv>
 800dc18:	ec41 0b10 	vmov	d0, r0, r1
 800dc1c:	b003      	add	sp, #12
 800dc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc22 <__copybits>:
 800dc22:	3901      	subs	r1, #1
 800dc24:	b570      	push	{r4, r5, r6, lr}
 800dc26:	1149      	asrs	r1, r1, #5
 800dc28:	6914      	ldr	r4, [r2, #16]
 800dc2a:	3101      	adds	r1, #1
 800dc2c:	f102 0314 	add.w	r3, r2, #20
 800dc30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dc38:	1f05      	subs	r5, r0, #4
 800dc3a:	42a3      	cmp	r3, r4
 800dc3c:	d30c      	bcc.n	800dc58 <__copybits+0x36>
 800dc3e:	1aa3      	subs	r3, r4, r2
 800dc40:	3b11      	subs	r3, #17
 800dc42:	f023 0303 	bic.w	r3, r3, #3
 800dc46:	3211      	adds	r2, #17
 800dc48:	42a2      	cmp	r2, r4
 800dc4a:	bf88      	it	hi
 800dc4c:	2300      	movhi	r3, #0
 800dc4e:	4418      	add	r0, r3
 800dc50:	2300      	movs	r3, #0
 800dc52:	4288      	cmp	r0, r1
 800dc54:	d305      	bcc.n	800dc62 <__copybits+0x40>
 800dc56:	bd70      	pop	{r4, r5, r6, pc}
 800dc58:	f853 6b04 	ldr.w	r6, [r3], #4
 800dc5c:	f845 6f04 	str.w	r6, [r5, #4]!
 800dc60:	e7eb      	b.n	800dc3a <__copybits+0x18>
 800dc62:	f840 3b04 	str.w	r3, [r0], #4
 800dc66:	e7f4      	b.n	800dc52 <__copybits+0x30>

0800dc68 <__any_on>:
 800dc68:	f100 0214 	add.w	r2, r0, #20
 800dc6c:	6900      	ldr	r0, [r0, #16]
 800dc6e:	114b      	asrs	r3, r1, #5
 800dc70:	4298      	cmp	r0, r3
 800dc72:	b510      	push	{r4, lr}
 800dc74:	db11      	blt.n	800dc9a <__any_on+0x32>
 800dc76:	dd0a      	ble.n	800dc8e <__any_on+0x26>
 800dc78:	f011 011f 	ands.w	r1, r1, #31
 800dc7c:	d007      	beq.n	800dc8e <__any_on+0x26>
 800dc7e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dc82:	fa24 f001 	lsr.w	r0, r4, r1
 800dc86:	fa00 f101 	lsl.w	r1, r0, r1
 800dc8a:	428c      	cmp	r4, r1
 800dc8c:	d10b      	bne.n	800dca6 <__any_on+0x3e>
 800dc8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d803      	bhi.n	800dc9e <__any_on+0x36>
 800dc96:	2000      	movs	r0, #0
 800dc98:	bd10      	pop	{r4, pc}
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	e7f7      	b.n	800dc8e <__any_on+0x26>
 800dc9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dca2:	2900      	cmp	r1, #0
 800dca4:	d0f5      	beq.n	800dc92 <__any_on+0x2a>
 800dca6:	2001      	movs	r0, #1
 800dca8:	e7f6      	b.n	800dc98 <__any_on+0x30>

0800dcaa <__ssputs_r>:
 800dcaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcae:	688e      	ldr	r6, [r1, #8]
 800dcb0:	429e      	cmp	r6, r3
 800dcb2:	4682      	mov	sl, r0
 800dcb4:	460c      	mov	r4, r1
 800dcb6:	4690      	mov	r8, r2
 800dcb8:	461f      	mov	r7, r3
 800dcba:	d838      	bhi.n	800dd2e <__ssputs_r+0x84>
 800dcbc:	898a      	ldrh	r2, [r1, #12]
 800dcbe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dcc2:	d032      	beq.n	800dd2a <__ssputs_r+0x80>
 800dcc4:	6825      	ldr	r5, [r4, #0]
 800dcc6:	6909      	ldr	r1, [r1, #16]
 800dcc8:	eba5 0901 	sub.w	r9, r5, r1
 800dccc:	6965      	ldr	r5, [r4, #20]
 800dcce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dcd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	444b      	add	r3, r9
 800dcda:	106d      	asrs	r5, r5, #1
 800dcdc:	429d      	cmp	r5, r3
 800dcde:	bf38      	it	cc
 800dce0:	461d      	movcc	r5, r3
 800dce2:	0553      	lsls	r3, r2, #21
 800dce4:	d531      	bpl.n	800dd4a <__ssputs_r+0xa0>
 800dce6:	4629      	mov	r1, r5
 800dce8:	f7fc fa1a 	bl	800a120 <_malloc_r>
 800dcec:	4606      	mov	r6, r0
 800dcee:	b950      	cbnz	r0, 800dd06 <__ssputs_r+0x5c>
 800dcf0:	230c      	movs	r3, #12
 800dcf2:	f8ca 3000 	str.w	r3, [sl]
 800dcf6:	89a3      	ldrh	r3, [r4, #12]
 800dcf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcfc:	81a3      	strh	r3, [r4, #12]
 800dcfe:	f04f 30ff 	mov.w	r0, #4294967295
 800dd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd06:	6921      	ldr	r1, [r4, #16]
 800dd08:	464a      	mov	r2, r9
 800dd0a:	f7fc f971 	bl	8009ff0 <memcpy>
 800dd0e:	89a3      	ldrh	r3, [r4, #12]
 800dd10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd18:	81a3      	strh	r3, [r4, #12]
 800dd1a:	6126      	str	r6, [r4, #16]
 800dd1c:	6165      	str	r5, [r4, #20]
 800dd1e:	444e      	add	r6, r9
 800dd20:	eba5 0509 	sub.w	r5, r5, r9
 800dd24:	6026      	str	r6, [r4, #0]
 800dd26:	60a5      	str	r5, [r4, #8]
 800dd28:	463e      	mov	r6, r7
 800dd2a:	42be      	cmp	r6, r7
 800dd2c:	d900      	bls.n	800dd30 <__ssputs_r+0x86>
 800dd2e:	463e      	mov	r6, r7
 800dd30:	6820      	ldr	r0, [r4, #0]
 800dd32:	4632      	mov	r2, r6
 800dd34:	4641      	mov	r1, r8
 800dd36:	f000 fd29 	bl	800e78c <memmove>
 800dd3a:	68a3      	ldr	r3, [r4, #8]
 800dd3c:	1b9b      	subs	r3, r3, r6
 800dd3e:	60a3      	str	r3, [r4, #8]
 800dd40:	6823      	ldr	r3, [r4, #0]
 800dd42:	4433      	add	r3, r6
 800dd44:	6023      	str	r3, [r4, #0]
 800dd46:	2000      	movs	r0, #0
 800dd48:	e7db      	b.n	800dd02 <__ssputs_r+0x58>
 800dd4a:	462a      	mov	r2, r5
 800dd4c:	f000 fd38 	bl	800e7c0 <_realloc_r>
 800dd50:	4606      	mov	r6, r0
 800dd52:	2800      	cmp	r0, #0
 800dd54:	d1e1      	bne.n	800dd1a <__ssputs_r+0x70>
 800dd56:	6921      	ldr	r1, [r4, #16]
 800dd58:	4650      	mov	r0, sl
 800dd5a:	f7fc f975 	bl	800a048 <_free_r>
 800dd5e:	e7c7      	b.n	800dcf0 <__ssputs_r+0x46>

0800dd60 <_svfiprintf_r>:
 800dd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd64:	4698      	mov	r8, r3
 800dd66:	898b      	ldrh	r3, [r1, #12]
 800dd68:	061b      	lsls	r3, r3, #24
 800dd6a:	b09d      	sub	sp, #116	; 0x74
 800dd6c:	4607      	mov	r7, r0
 800dd6e:	460d      	mov	r5, r1
 800dd70:	4614      	mov	r4, r2
 800dd72:	d50e      	bpl.n	800dd92 <_svfiprintf_r+0x32>
 800dd74:	690b      	ldr	r3, [r1, #16]
 800dd76:	b963      	cbnz	r3, 800dd92 <_svfiprintf_r+0x32>
 800dd78:	2140      	movs	r1, #64	; 0x40
 800dd7a:	f7fc f9d1 	bl	800a120 <_malloc_r>
 800dd7e:	6028      	str	r0, [r5, #0]
 800dd80:	6128      	str	r0, [r5, #16]
 800dd82:	b920      	cbnz	r0, 800dd8e <_svfiprintf_r+0x2e>
 800dd84:	230c      	movs	r3, #12
 800dd86:	603b      	str	r3, [r7, #0]
 800dd88:	f04f 30ff 	mov.w	r0, #4294967295
 800dd8c:	e0d1      	b.n	800df32 <_svfiprintf_r+0x1d2>
 800dd8e:	2340      	movs	r3, #64	; 0x40
 800dd90:	616b      	str	r3, [r5, #20]
 800dd92:	2300      	movs	r3, #0
 800dd94:	9309      	str	r3, [sp, #36]	; 0x24
 800dd96:	2320      	movs	r3, #32
 800dd98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dda0:	2330      	movs	r3, #48	; 0x30
 800dda2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800df4c <_svfiprintf_r+0x1ec>
 800dda6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddaa:	f04f 0901 	mov.w	r9, #1
 800ddae:	4623      	mov	r3, r4
 800ddb0:	469a      	mov	sl, r3
 800ddb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddb6:	b10a      	cbz	r2, 800ddbc <_svfiprintf_r+0x5c>
 800ddb8:	2a25      	cmp	r2, #37	; 0x25
 800ddba:	d1f9      	bne.n	800ddb0 <_svfiprintf_r+0x50>
 800ddbc:	ebba 0b04 	subs.w	fp, sl, r4
 800ddc0:	d00b      	beq.n	800ddda <_svfiprintf_r+0x7a>
 800ddc2:	465b      	mov	r3, fp
 800ddc4:	4622      	mov	r2, r4
 800ddc6:	4629      	mov	r1, r5
 800ddc8:	4638      	mov	r0, r7
 800ddca:	f7ff ff6e 	bl	800dcaa <__ssputs_r>
 800ddce:	3001      	adds	r0, #1
 800ddd0:	f000 80aa 	beq.w	800df28 <_svfiprintf_r+0x1c8>
 800ddd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddd6:	445a      	add	r2, fp
 800ddd8:	9209      	str	r2, [sp, #36]	; 0x24
 800ddda:	f89a 3000 	ldrb.w	r3, [sl]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	f000 80a2 	beq.w	800df28 <_svfiprintf_r+0x1c8>
 800dde4:	2300      	movs	r3, #0
 800dde6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddee:	f10a 0a01 	add.w	sl, sl, #1
 800ddf2:	9304      	str	r3, [sp, #16]
 800ddf4:	9307      	str	r3, [sp, #28]
 800ddf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddfa:	931a      	str	r3, [sp, #104]	; 0x68
 800ddfc:	4654      	mov	r4, sl
 800ddfe:	2205      	movs	r2, #5
 800de00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de04:	4851      	ldr	r0, [pc, #324]	; (800df4c <_svfiprintf_r+0x1ec>)
 800de06:	f7f2 f9eb 	bl	80001e0 <memchr>
 800de0a:	9a04      	ldr	r2, [sp, #16]
 800de0c:	b9d8      	cbnz	r0, 800de46 <_svfiprintf_r+0xe6>
 800de0e:	06d0      	lsls	r0, r2, #27
 800de10:	bf44      	itt	mi
 800de12:	2320      	movmi	r3, #32
 800de14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de18:	0711      	lsls	r1, r2, #28
 800de1a:	bf44      	itt	mi
 800de1c:	232b      	movmi	r3, #43	; 0x2b
 800de1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de22:	f89a 3000 	ldrb.w	r3, [sl]
 800de26:	2b2a      	cmp	r3, #42	; 0x2a
 800de28:	d015      	beq.n	800de56 <_svfiprintf_r+0xf6>
 800de2a:	9a07      	ldr	r2, [sp, #28]
 800de2c:	4654      	mov	r4, sl
 800de2e:	2000      	movs	r0, #0
 800de30:	f04f 0c0a 	mov.w	ip, #10
 800de34:	4621      	mov	r1, r4
 800de36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de3a:	3b30      	subs	r3, #48	; 0x30
 800de3c:	2b09      	cmp	r3, #9
 800de3e:	d94e      	bls.n	800dede <_svfiprintf_r+0x17e>
 800de40:	b1b0      	cbz	r0, 800de70 <_svfiprintf_r+0x110>
 800de42:	9207      	str	r2, [sp, #28]
 800de44:	e014      	b.n	800de70 <_svfiprintf_r+0x110>
 800de46:	eba0 0308 	sub.w	r3, r0, r8
 800de4a:	fa09 f303 	lsl.w	r3, r9, r3
 800de4e:	4313      	orrs	r3, r2
 800de50:	9304      	str	r3, [sp, #16]
 800de52:	46a2      	mov	sl, r4
 800de54:	e7d2      	b.n	800ddfc <_svfiprintf_r+0x9c>
 800de56:	9b03      	ldr	r3, [sp, #12]
 800de58:	1d19      	adds	r1, r3, #4
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	9103      	str	r1, [sp, #12]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	bfbb      	ittet	lt
 800de62:	425b      	neglt	r3, r3
 800de64:	f042 0202 	orrlt.w	r2, r2, #2
 800de68:	9307      	strge	r3, [sp, #28]
 800de6a:	9307      	strlt	r3, [sp, #28]
 800de6c:	bfb8      	it	lt
 800de6e:	9204      	strlt	r2, [sp, #16]
 800de70:	7823      	ldrb	r3, [r4, #0]
 800de72:	2b2e      	cmp	r3, #46	; 0x2e
 800de74:	d10c      	bne.n	800de90 <_svfiprintf_r+0x130>
 800de76:	7863      	ldrb	r3, [r4, #1]
 800de78:	2b2a      	cmp	r3, #42	; 0x2a
 800de7a:	d135      	bne.n	800dee8 <_svfiprintf_r+0x188>
 800de7c:	9b03      	ldr	r3, [sp, #12]
 800de7e:	1d1a      	adds	r2, r3, #4
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	9203      	str	r2, [sp, #12]
 800de84:	2b00      	cmp	r3, #0
 800de86:	bfb8      	it	lt
 800de88:	f04f 33ff 	movlt.w	r3, #4294967295
 800de8c:	3402      	adds	r4, #2
 800de8e:	9305      	str	r3, [sp, #20]
 800de90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800df5c <_svfiprintf_r+0x1fc>
 800de94:	7821      	ldrb	r1, [r4, #0]
 800de96:	2203      	movs	r2, #3
 800de98:	4650      	mov	r0, sl
 800de9a:	f7f2 f9a1 	bl	80001e0 <memchr>
 800de9e:	b140      	cbz	r0, 800deb2 <_svfiprintf_r+0x152>
 800dea0:	2340      	movs	r3, #64	; 0x40
 800dea2:	eba0 000a 	sub.w	r0, r0, sl
 800dea6:	fa03 f000 	lsl.w	r0, r3, r0
 800deaa:	9b04      	ldr	r3, [sp, #16]
 800deac:	4303      	orrs	r3, r0
 800deae:	3401      	adds	r4, #1
 800deb0:	9304      	str	r3, [sp, #16]
 800deb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deb6:	4826      	ldr	r0, [pc, #152]	; (800df50 <_svfiprintf_r+0x1f0>)
 800deb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800debc:	2206      	movs	r2, #6
 800debe:	f7f2 f98f 	bl	80001e0 <memchr>
 800dec2:	2800      	cmp	r0, #0
 800dec4:	d038      	beq.n	800df38 <_svfiprintf_r+0x1d8>
 800dec6:	4b23      	ldr	r3, [pc, #140]	; (800df54 <_svfiprintf_r+0x1f4>)
 800dec8:	bb1b      	cbnz	r3, 800df12 <_svfiprintf_r+0x1b2>
 800deca:	9b03      	ldr	r3, [sp, #12]
 800decc:	3307      	adds	r3, #7
 800dece:	f023 0307 	bic.w	r3, r3, #7
 800ded2:	3308      	adds	r3, #8
 800ded4:	9303      	str	r3, [sp, #12]
 800ded6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ded8:	4433      	add	r3, r6
 800deda:	9309      	str	r3, [sp, #36]	; 0x24
 800dedc:	e767      	b.n	800ddae <_svfiprintf_r+0x4e>
 800dede:	fb0c 3202 	mla	r2, ip, r2, r3
 800dee2:	460c      	mov	r4, r1
 800dee4:	2001      	movs	r0, #1
 800dee6:	e7a5      	b.n	800de34 <_svfiprintf_r+0xd4>
 800dee8:	2300      	movs	r3, #0
 800deea:	3401      	adds	r4, #1
 800deec:	9305      	str	r3, [sp, #20]
 800deee:	4619      	mov	r1, r3
 800def0:	f04f 0c0a 	mov.w	ip, #10
 800def4:	4620      	mov	r0, r4
 800def6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800defa:	3a30      	subs	r2, #48	; 0x30
 800defc:	2a09      	cmp	r2, #9
 800defe:	d903      	bls.n	800df08 <_svfiprintf_r+0x1a8>
 800df00:	2b00      	cmp	r3, #0
 800df02:	d0c5      	beq.n	800de90 <_svfiprintf_r+0x130>
 800df04:	9105      	str	r1, [sp, #20]
 800df06:	e7c3      	b.n	800de90 <_svfiprintf_r+0x130>
 800df08:	fb0c 2101 	mla	r1, ip, r1, r2
 800df0c:	4604      	mov	r4, r0
 800df0e:	2301      	movs	r3, #1
 800df10:	e7f0      	b.n	800def4 <_svfiprintf_r+0x194>
 800df12:	ab03      	add	r3, sp, #12
 800df14:	9300      	str	r3, [sp, #0]
 800df16:	462a      	mov	r2, r5
 800df18:	4b0f      	ldr	r3, [pc, #60]	; (800df58 <_svfiprintf_r+0x1f8>)
 800df1a:	a904      	add	r1, sp, #16
 800df1c:	4638      	mov	r0, r7
 800df1e:	f7fc fa13 	bl	800a348 <_printf_float>
 800df22:	1c42      	adds	r2, r0, #1
 800df24:	4606      	mov	r6, r0
 800df26:	d1d6      	bne.n	800ded6 <_svfiprintf_r+0x176>
 800df28:	89ab      	ldrh	r3, [r5, #12]
 800df2a:	065b      	lsls	r3, r3, #25
 800df2c:	f53f af2c 	bmi.w	800dd88 <_svfiprintf_r+0x28>
 800df30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df32:	b01d      	add	sp, #116	; 0x74
 800df34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df38:	ab03      	add	r3, sp, #12
 800df3a:	9300      	str	r3, [sp, #0]
 800df3c:	462a      	mov	r2, r5
 800df3e:	4b06      	ldr	r3, [pc, #24]	; (800df58 <_svfiprintf_r+0x1f8>)
 800df40:	a904      	add	r1, sp, #16
 800df42:	4638      	mov	r0, r7
 800df44:	f7fc fca4 	bl	800a890 <_printf_i>
 800df48:	e7eb      	b.n	800df22 <_svfiprintf_r+0x1c2>
 800df4a:	bf00      	nop
 800df4c:	0800f2ec 	.word	0x0800f2ec
 800df50:	0800f2f6 	.word	0x0800f2f6
 800df54:	0800a349 	.word	0x0800a349
 800df58:	0800dcab 	.word	0x0800dcab
 800df5c:	0800f2f2 	.word	0x0800f2f2

0800df60 <__sfputc_r>:
 800df60:	6893      	ldr	r3, [r2, #8]
 800df62:	3b01      	subs	r3, #1
 800df64:	2b00      	cmp	r3, #0
 800df66:	b410      	push	{r4}
 800df68:	6093      	str	r3, [r2, #8]
 800df6a:	da08      	bge.n	800df7e <__sfputc_r+0x1e>
 800df6c:	6994      	ldr	r4, [r2, #24]
 800df6e:	42a3      	cmp	r3, r4
 800df70:	db01      	blt.n	800df76 <__sfputc_r+0x16>
 800df72:	290a      	cmp	r1, #10
 800df74:	d103      	bne.n	800df7e <__sfputc_r+0x1e>
 800df76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df7a:	f000 b9ad 	b.w	800e2d8 <__swbuf_r>
 800df7e:	6813      	ldr	r3, [r2, #0]
 800df80:	1c58      	adds	r0, r3, #1
 800df82:	6010      	str	r0, [r2, #0]
 800df84:	7019      	strb	r1, [r3, #0]
 800df86:	4608      	mov	r0, r1
 800df88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df8c:	4770      	bx	lr

0800df8e <__sfputs_r>:
 800df8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df90:	4606      	mov	r6, r0
 800df92:	460f      	mov	r7, r1
 800df94:	4614      	mov	r4, r2
 800df96:	18d5      	adds	r5, r2, r3
 800df98:	42ac      	cmp	r4, r5
 800df9a:	d101      	bne.n	800dfa0 <__sfputs_r+0x12>
 800df9c:	2000      	movs	r0, #0
 800df9e:	e007      	b.n	800dfb0 <__sfputs_r+0x22>
 800dfa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfa4:	463a      	mov	r2, r7
 800dfa6:	4630      	mov	r0, r6
 800dfa8:	f7ff ffda 	bl	800df60 <__sfputc_r>
 800dfac:	1c43      	adds	r3, r0, #1
 800dfae:	d1f3      	bne.n	800df98 <__sfputs_r+0xa>
 800dfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dfb4 <_vfiprintf_r>:
 800dfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb8:	460d      	mov	r5, r1
 800dfba:	b09d      	sub	sp, #116	; 0x74
 800dfbc:	4614      	mov	r4, r2
 800dfbe:	4698      	mov	r8, r3
 800dfc0:	4606      	mov	r6, r0
 800dfc2:	b118      	cbz	r0, 800dfcc <_vfiprintf_r+0x18>
 800dfc4:	6983      	ldr	r3, [r0, #24]
 800dfc6:	b90b      	cbnz	r3, 800dfcc <_vfiprintf_r+0x18>
 800dfc8:	f7fe fd7c 	bl	800cac4 <__sinit>
 800dfcc:	4b89      	ldr	r3, [pc, #548]	; (800e1f4 <_vfiprintf_r+0x240>)
 800dfce:	429d      	cmp	r5, r3
 800dfd0:	d11b      	bne.n	800e00a <_vfiprintf_r+0x56>
 800dfd2:	6875      	ldr	r5, [r6, #4]
 800dfd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfd6:	07d9      	lsls	r1, r3, #31
 800dfd8:	d405      	bmi.n	800dfe6 <_vfiprintf_r+0x32>
 800dfda:	89ab      	ldrh	r3, [r5, #12]
 800dfdc:	059a      	lsls	r2, r3, #22
 800dfde:	d402      	bmi.n	800dfe6 <_vfiprintf_r+0x32>
 800dfe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfe2:	f7ff f980 	bl	800d2e6 <__retarget_lock_acquire_recursive>
 800dfe6:	89ab      	ldrh	r3, [r5, #12]
 800dfe8:	071b      	lsls	r3, r3, #28
 800dfea:	d501      	bpl.n	800dff0 <_vfiprintf_r+0x3c>
 800dfec:	692b      	ldr	r3, [r5, #16]
 800dfee:	b9eb      	cbnz	r3, 800e02c <_vfiprintf_r+0x78>
 800dff0:	4629      	mov	r1, r5
 800dff2:	4630      	mov	r0, r6
 800dff4:	f000 f9e2 	bl	800e3bc <__swsetup_r>
 800dff8:	b1c0      	cbz	r0, 800e02c <_vfiprintf_r+0x78>
 800dffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dffc:	07dc      	lsls	r4, r3, #31
 800dffe:	d50e      	bpl.n	800e01e <_vfiprintf_r+0x6a>
 800e000:	f04f 30ff 	mov.w	r0, #4294967295
 800e004:	b01d      	add	sp, #116	; 0x74
 800e006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e00a:	4b7b      	ldr	r3, [pc, #492]	; (800e1f8 <_vfiprintf_r+0x244>)
 800e00c:	429d      	cmp	r5, r3
 800e00e:	d101      	bne.n	800e014 <_vfiprintf_r+0x60>
 800e010:	68b5      	ldr	r5, [r6, #8]
 800e012:	e7df      	b.n	800dfd4 <_vfiprintf_r+0x20>
 800e014:	4b79      	ldr	r3, [pc, #484]	; (800e1fc <_vfiprintf_r+0x248>)
 800e016:	429d      	cmp	r5, r3
 800e018:	bf08      	it	eq
 800e01a:	68f5      	ldreq	r5, [r6, #12]
 800e01c:	e7da      	b.n	800dfd4 <_vfiprintf_r+0x20>
 800e01e:	89ab      	ldrh	r3, [r5, #12]
 800e020:	0598      	lsls	r0, r3, #22
 800e022:	d4ed      	bmi.n	800e000 <_vfiprintf_r+0x4c>
 800e024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e026:	f7ff f95f 	bl	800d2e8 <__retarget_lock_release_recursive>
 800e02a:	e7e9      	b.n	800e000 <_vfiprintf_r+0x4c>
 800e02c:	2300      	movs	r3, #0
 800e02e:	9309      	str	r3, [sp, #36]	; 0x24
 800e030:	2320      	movs	r3, #32
 800e032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e036:	f8cd 800c 	str.w	r8, [sp, #12]
 800e03a:	2330      	movs	r3, #48	; 0x30
 800e03c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e200 <_vfiprintf_r+0x24c>
 800e040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e044:	f04f 0901 	mov.w	r9, #1
 800e048:	4623      	mov	r3, r4
 800e04a:	469a      	mov	sl, r3
 800e04c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e050:	b10a      	cbz	r2, 800e056 <_vfiprintf_r+0xa2>
 800e052:	2a25      	cmp	r2, #37	; 0x25
 800e054:	d1f9      	bne.n	800e04a <_vfiprintf_r+0x96>
 800e056:	ebba 0b04 	subs.w	fp, sl, r4
 800e05a:	d00b      	beq.n	800e074 <_vfiprintf_r+0xc0>
 800e05c:	465b      	mov	r3, fp
 800e05e:	4622      	mov	r2, r4
 800e060:	4629      	mov	r1, r5
 800e062:	4630      	mov	r0, r6
 800e064:	f7ff ff93 	bl	800df8e <__sfputs_r>
 800e068:	3001      	adds	r0, #1
 800e06a:	f000 80aa 	beq.w	800e1c2 <_vfiprintf_r+0x20e>
 800e06e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e070:	445a      	add	r2, fp
 800e072:	9209      	str	r2, [sp, #36]	; 0x24
 800e074:	f89a 3000 	ldrb.w	r3, [sl]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f000 80a2 	beq.w	800e1c2 <_vfiprintf_r+0x20e>
 800e07e:	2300      	movs	r3, #0
 800e080:	f04f 32ff 	mov.w	r2, #4294967295
 800e084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e088:	f10a 0a01 	add.w	sl, sl, #1
 800e08c:	9304      	str	r3, [sp, #16]
 800e08e:	9307      	str	r3, [sp, #28]
 800e090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e094:	931a      	str	r3, [sp, #104]	; 0x68
 800e096:	4654      	mov	r4, sl
 800e098:	2205      	movs	r2, #5
 800e09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e09e:	4858      	ldr	r0, [pc, #352]	; (800e200 <_vfiprintf_r+0x24c>)
 800e0a0:	f7f2 f89e 	bl	80001e0 <memchr>
 800e0a4:	9a04      	ldr	r2, [sp, #16]
 800e0a6:	b9d8      	cbnz	r0, 800e0e0 <_vfiprintf_r+0x12c>
 800e0a8:	06d1      	lsls	r1, r2, #27
 800e0aa:	bf44      	itt	mi
 800e0ac:	2320      	movmi	r3, #32
 800e0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0b2:	0713      	lsls	r3, r2, #28
 800e0b4:	bf44      	itt	mi
 800e0b6:	232b      	movmi	r3, #43	; 0x2b
 800e0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e0c0:	2b2a      	cmp	r3, #42	; 0x2a
 800e0c2:	d015      	beq.n	800e0f0 <_vfiprintf_r+0x13c>
 800e0c4:	9a07      	ldr	r2, [sp, #28]
 800e0c6:	4654      	mov	r4, sl
 800e0c8:	2000      	movs	r0, #0
 800e0ca:	f04f 0c0a 	mov.w	ip, #10
 800e0ce:	4621      	mov	r1, r4
 800e0d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0d4:	3b30      	subs	r3, #48	; 0x30
 800e0d6:	2b09      	cmp	r3, #9
 800e0d8:	d94e      	bls.n	800e178 <_vfiprintf_r+0x1c4>
 800e0da:	b1b0      	cbz	r0, 800e10a <_vfiprintf_r+0x156>
 800e0dc:	9207      	str	r2, [sp, #28]
 800e0de:	e014      	b.n	800e10a <_vfiprintf_r+0x156>
 800e0e0:	eba0 0308 	sub.w	r3, r0, r8
 800e0e4:	fa09 f303 	lsl.w	r3, r9, r3
 800e0e8:	4313      	orrs	r3, r2
 800e0ea:	9304      	str	r3, [sp, #16]
 800e0ec:	46a2      	mov	sl, r4
 800e0ee:	e7d2      	b.n	800e096 <_vfiprintf_r+0xe2>
 800e0f0:	9b03      	ldr	r3, [sp, #12]
 800e0f2:	1d19      	adds	r1, r3, #4
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	9103      	str	r1, [sp, #12]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	bfbb      	ittet	lt
 800e0fc:	425b      	neglt	r3, r3
 800e0fe:	f042 0202 	orrlt.w	r2, r2, #2
 800e102:	9307      	strge	r3, [sp, #28]
 800e104:	9307      	strlt	r3, [sp, #28]
 800e106:	bfb8      	it	lt
 800e108:	9204      	strlt	r2, [sp, #16]
 800e10a:	7823      	ldrb	r3, [r4, #0]
 800e10c:	2b2e      	cmp	r3, #46	; 0x2e
 800e10e:	d10c      	bne.n	800e12a <_vfiprintf_r+0x176>
 800e110:	7863      	ldrb	r3, [r4, #1]
 800e112:	2b2a      	cmp	r3, #42	; 0x2a
 800e114:	d135      	bne.n	800e182 <_vfiprintf_r+0x1ce>
 800e116:	9b03      	ldr	r3, [sp, #12]
 800e118:	1d1a      	adds	r2, r3, #4
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	9203      	str	r2, [sp, #12]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	bfb8      	it	lt
 800e122:	f04f 33ff 	movlt.w	r3, #4294967295
 800e126:	3402      	adds	r4, #2
 800e128:	9305      	str	r3, [sp, #20]
 800e12a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e210 <_vfiprintf_r+0x25c>
 800e12e:	7821      	ldrb	r1, [r4, #0]
 800e130:	2203      	movs	r2, #3
 800e132:	4650      	mov	r0, sl
 800e134:	f7f2 f854 	bl	80001e0 <memchr>
 800e138:	b140      	cbz	r0, 800e14c <_vfiprintf_r+0x198>
 800e13a:	2340      	movs	r3, #64	; 0x40
 800e13c:	eba0 000a 	sub.w	r0, r0, sl
 800e140:	fa03 f000 	lsl.w	r0, r3, r0
 800e144:	9b04      	ldr	r3, [sp, #16]
 800e146:	4303      	orrs	r3, r0
 800e148:	3401      	adds	r4, #1
 800e14a:	9304      	str	r3, [sp, #16]
 800e14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e150:	482c      	ldr	r0, [pc, #176]	; (800e204 <_vfiprintf_r+0x250>)
 800e152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e156:	2206      	movs	r2, #6
 800e158:	f7f2 f842 	bl	80001e0 <memchr>
 800e15c:	2800      	cmp	r0, #0
 800e15e:	d03f      	beq.n	800e1e0 <_vfiprintf_r+0x22c>
 800e160:	4b29      	ldr	r3, [pc, #164]	; (800e208 <_vfiprintf_r+0x254>)
 800e162:	bb1b      	cbnz	r3, 800e1ac <_vfiprintf_r+0x1f8>
 800e164:	9b03      	ldr	r3, [sp, #12]
 800e166:	3307      	adds	r3, #7
 800e168:	f023 0307 	bic.w	r3, r3, #7
 800e16c:	3308      	adds	r3, #8
 800e16e:	9303      	str	r3, [sp, #12]
 800e170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e172:	443b      	add	r3, r7
 800e174:	9309      	str	r3, [sp, #36]	; 0x24
 800e176:	e767      	b.n	800e048 <_vfiprintf_r+0x94>
 800e178:	fb0c 3202 	mla	r2, ip, r2, r3
 800e17c:	460c      	mov	r4, r1
 800e17e:	2001      	movs	r0, #1
 800e180:	e7a5      	b.n	800e0ce <_vfiprintf_r+0x11a>
 800e182:	2300      	movs	r3, #0
 800e184:	3401      	adds	r4, #1
 800e186:	9305      	str	r3, [sp, #20]
 800e188:	4619      	mov	r1, r3
 800e18a:	f04f 0c0a 	mov.w	ip, #10
 800e18e:	4620      	mov	r0, r4
 800e190:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e194:	3a30      	subs	r2, #48	; 0x30
 800e196:	2a09      	cmp	r2, #9
 800e198:	d903      	bls.n	800e1a2 <_vfiprintf_r+0x1ee>
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d0c5      	beq.n	800e12a <_vfiprintf_r+0x176>
 800e19e:	9105      	str	r1, [sp, #20]
 800e1a0:	e7c3      	b.n	800e12a <_vfiprintf_r+0x176>
 800e1a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	e7f0      	b.n	800e18e <_vfiprintf_r+0x1da>
 800e1ac:	ab03      	add	r3, sp, #12
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	462a      	mov	r2, r5
 800e1b2:	4b16      	ldr	r3, [pc, #88]	; (800e20c <_vfiprintf_r+0x258>)
 800e1b4:	a904      	add	r1, sp, #16
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	f7fc f8c6 	bl	800a348 <_printf_float>
 800e1bc:	4607      	mov	r7, r0
 800e1be:	1c78      	adds	r0, r7, #1
 800e1c0:	d1d6      	bne.n	800e170 <_vfiprintf_r+0x1bc>
 800e1c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1c4:	07d9      	lsls	r1, r3, #31
 800e1c6:	d405      	bmi.n	800e1d4 <_vfiprintf_r+0x220>
 800e1c8:	89ab      	ldrh	r3, [r5, #12]
 800e1ca:	059a      	lsls	r2, r3, #22
 800e1cc:	d402      	bmi.n	800e1d4 <_vfiprintf_r+0x220>
 800e1ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1d0:	f7ff f88a 	bl	800d2e8 <__retarget_lock_release_recursive>
 800e1d4:	89ab      	ldrh	r3, [r5, #12]
 800e1d6:	065b      	lsls	r3, r3, #25
 800e1d8:	f53f af12 	bmi.w	800e000 <_vfiprintf_r+0x4c>
 800e1dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1de:	e711      	b.n	800e004 <_vfiprintf_r+0x50>
 800e1e0:	ab03      	add	r3, sp, #12
 800e1e2:	9300      	str	r3, [sp, #0]
 800e1e4:	462a      	mov	r2, r5
 800e1e6:	4b09      	ldr	r3, [pc, #36]	; (800e20c <_vfiprintf_r+0x258>)
 800e1e8:	a904      	add	r1, sp, #16
 800e1ea:	4630      	mov	r0, r6
 800e1ec:	f7fc fb50 	bl	800a890 <_printf_i>
 800e1f0:	e7e4      	b.n	800e1bc <_vfiprintf_r+0x208>
 800e1f2:	bf00      	nop
 800e1f4:	0800f0d4 	.word	0x0800f0d4
 800e1f8:	0800f0f4 	.word	0x0800f0f4
 800e1fc:	0800f0b4 	.word	0x0800f0b4
 800e200:	0800f2ec 	.word	0x0800f2ec
 800e204:	0800f2f6 	.word	0x0800f2f6
 800e208:	0800a349 	.word	0x0800a349
 800e20c:	0800df8f 	.word	0x0800df8f
 800e210:	0800f2f2 	.word	0x0800f2f2
 800e214:	00000000 	.word	0x00000000

0800e218 <nan>:
 800e218:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e220 <nan+0x8>
 800e21c:	4770      	bx	lr
 800e21e:	bf00      	nop
 800e220:	00000000 	.word	0x00000000
 800e224:	7ff80000 	.word	0x7ff80000

0800e228 <__sread>:
 800e228:	b510      	push	{r4, lr}
 800e22a:	460c      	mov	r4, r1
 800e22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e230:	f000 faf6 	bl	800e820 <_read_r>
 800e234:	2800      	cmp	r0, #0
 800e236:	bfab      	itete	ge
 800e238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e23a:	89a3      	ldrhlt	r3, [r4, #12]
 800e23c:	181b      	addge	r3, r3, r0
 800e23e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e242:	bfac      	ite	ge
 800e244:	6563      	strge	r3, [r4, #84]	; 0x54
 800e246:	81a3      	strhlt	r3, [r4, #12]
 800e248:	bd10      	pop	{r4, pc}

0800e24a <__swrite>:
 800e24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e24e:	461f      	mov	r7, r3
 800e250:	898b      	ldrh	r3, [r1, #12]
 800e252:	05db      	lsls	r3, r3, #23
 800e254:	4605      	mov	r5, r0
 800e256:	460c      	mov	r4, r1
 800e258:	4616      	mov	r6, r2
 800e25a:	d505      	bpl.n	800e268 <__swrite+0x1e>
 800e25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e260:	2302      	movs	r3, #2
 800e262:	2200      	movs	r2, #0
 800e264:	f000 fa1a 	bl	800e69c <_lseek_r>
 800e268:	89a3      	ldrh	r3, [r4, #12]
 800e26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e26e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e272:	81a3      	strh	r3, [r4, #12]
 800e274:	4632      	mov	r2, r6
 800e276:	463b      	mov	r3, r7
 800e278:	4628      	mov	r0, r5
 800e27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e27e:	f000 b88b 	b.w	800e398 <_write_r>

0800e282 <__sseek>:
 800e282:	b510      	push	{r4, lr}
 800e284:	460c      	mov	r4, r1
 800e286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e28a:	f000 fa07 	bl	800e69c <_lseek_r>
 800e28e:	1c43      	adds	r3, r0, #1
 800e290:	89a3      	ldrh	r3, [r4, #12]
 800e292:	bf15      	itete	ne
 800e294:	6560      	strne	r0, [r4, #84]	; 0x54
 800e296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e29a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e29e:	81a3      	strheq	r3, [r4, #12]
 800e2a0:	bf18      	it	ne
 800e2a2:	81a3      	strhne	r3, [r4, #12]
 800e2a4:	bd10      	pop	{r4, pc}

0800e2a6 <__sclose>:
 800e2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2aa:	f000 b913 	b.w	800e4d4 <_close_r>

0800e2ae <strncmp>:
 800e2ae:	b510      	push	{r4, lr}
 800e2b0:	b17a      	cbz	r2, 800e2d2 <strncmp+0x24>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	3901      	subs	r1, #1
 800e2b6:	1884      	adds	r4, r0, r2
 800e2b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e2bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e2c0:	4290      	cmp	r0, r2
 800e2c2:	d101      	bne.n	800e2c8 <strncmp+0x1a>
 800e2c4:	42a3      	cmp	r3, r4
 800e2c6:	d101      	bne.n	800e2cc <strncmp+0x1e>
 800e2c8:	1a80      	subs	r0, r0, r2
 800e2ca:	bd10      	pop	{r4, pc}
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d1f3      	bne.n	800e2b8 <strncmp+0xa>
 800e2d0:	e7fa      	b.n	800e2c8 <strncmp+0x1a>
 800e2d2:	4610      	mov	r0, r2
 800e2d4:	e7f9      	b.n	800e2ca <strncmp+0x1c>
	...

0800e2d8 <__swbuf_r>:
 800e2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2da:	460e      	mov	r6, r1
 800e2dc:	4614      	mov	r4, r2
 800e2de:	4605      	mov	r5, r0
 800e2e0:	b118      	cbz	r0, 800e2ea <__swbuf_r+0x12>
 800e2e2:	6983      	ldr	r3, [r0, #24]
 800e2e4:	b90b      	cbnz	r3, 800e2ea <__swbuf_r+0x12>
 800e2e6:	f7fe fbed 	bl	800cac4 <__sinit>
 800e2ea:	4b21      	ldr	r3, [pc, #132]	; (800e370 <__swbuf_r+0x98>)
 800e2ec:	429c      	cmp	r4, r3
 800e2ee:	d12b      	bne.n	800e348 <__swbuf_r+0x70>
 800e2f0:	686c      	ldr	r4, [r5, #4]
 800e2f2:	69a3      	ldr	r3, [r4, #24]
 800e2f4:	60a3      	str	r3, [r4, #8]
 800e2f6:	89a3      	ldrh	r3, [r4, #12]
 800e2f8:	071a      	lsls	r2, r3, #28
 800e2fa:	d52f      	bpl.n	800e35c <__swbuf_r+0x84>
 800e2fc:	6923      	ldr	r3, [r4, #16]
 800e2fe:	b36b      	cbz	r3, 800e35c <__swbuf_r+0x84>
 800e300:	6923      	ldr	r3, [r4, #16]
 800e302:	6820      	ldr	r0, [r4, #0]
 800e304:	1ac0      	subs	r0, r0, r3
 800e306:	6963      	ldr	r3, [r4, #20]
 800e308:	b2f6      	uxtb	r6, r6
 800e30a:	4283      	cmp	r3, r0
 800e30c:	4637      	mov	r7, r6
 800e30e:	dc04      	bgt.n	800e31a <__swbuf_r+0x42>
 800e310:	4621      	mov	r1, r4
 800e312:	4628      	mov	r0, r5
 800e314:	f000 f974 	bl	800e600 <_fflush_r>
 800e318:	bb30      	cbnz	r0, 800e368 <__swbuf_r+0x90>
 800e31a:	68a3      	ldr	r3, [r4, #8]
 800e31c:	3b01      	subs	r3, #1
 800e31e:	60a3      	str	r3, [r4, #8]
 800e320:	6823      	ldr	r3, [r4, #0]
 800e322:	1c5a      	adds	r2, r3, #1
 800e324:	6022      	str	r2, [r4, #0]
 800e326:	701e      	strb	r6, [r3, #0]
 800e328:	6963      	ldr	r3, [r4, #20]
 800e32a:	3001      	adds	r0, #1
 800e32c:	4283      	cmp	r3, r0
 800e32e:	d004      	beq.n	800e33a <__swbuf_r+0x62>
 800e330:	89a3      	ldrh	r3, [r4, #12]
 800e332:	07db      	lsls	r3, r3, #31
 800e334:	d506      	bpl.n	800e344 <__swbuf_r+0x6c>
 800e336:	2e0a      	cmp	r6, #10
 800e338:	d104      	bne.n	800e344 <__swbuf_r+0x6c>
 800e33a:	4621      	mov	r1, r4
 800e33c:	4628      	mov	r0, r5
 800e33e:	f000 f95f 	bl	800e600 <_fflush_r>
 800e342:	b988      	cbnz	r0, 800e368 <__swbuf_r+0x90>
 800e344:	4638      	mov	r0, r7
 800e346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e348:	4b0a      	ldr	r3, [pc, #40]	; (800e374 <__swbuf_r+0x9c>)
 800e34a:	429c      	cmp	r4, r3
 800e34c:	d101      	bne.n	800e352 <__swbuf_r+0x7a>
 800e34e:	68ac      	ldr	r4, [r5, #8]
 800e350:	e7cf      	b.n	800e2f2 <__swbuf_r+0x1a>
 800e352:	4b09      	ldr	r3, [pc, #36]	; (800e378 <__swbuf_r+0xa0>)
 800e354:	429c      	cmp	r4, r3
 800e356:	bf08      	it	eq
 800e358:	68ec      	ldreq	r4, [r5, #12]
 800e35a:	e7ca      	b.n	800e2f2 <__swbuf_r+0x1a>
 800e35c:	4621      	mov	r1, r4
 800e35e:	4628      	mov	r0, r5
 800e360:	f000 f82c 	bl	800e3bc <__swsetup_r>
 800e364:	2800      	cmp	r0, #0
 800e366:	d0cb      	beq.n	800e300 <__swbuf_r+0x28>
 800e368:	f04f 37ff 	mov.w	r7, #4294967295
 800e36c:	e7ea      	b.n	800e344 <__swbuf_r+0x6c>
 800e36e:	bf00      	nop
 800e370:	0800f0d4 	.word	0x0800f0d4
 800e374:	0800f0f4 	.word	0x0800f0f4
 800e378:	0800f0b4 	.word	0x0800f0b4

0800e37c <__ascii_wctomb>:
 800e37c:	b149      	cbz	r1, 800e392 <__ascii_wctomb+0x16>
 800e37e:	2aff      	cmp	r2, #255	; 0xff
 800e380:	bf85      	ittet	hi
 800e382:	238a      	movhi	r3, #138	; 0x8a
 800e384:	6003      	strhi	r3, [r0, #0]
 800e386:	700a      	strbls	r2, [r1, #0]
 800e388:	f04f 30ff 	movhi.w	r0, #4294967295
 800e38c:	bf98      	it	ls
 800e38e:	2001      	movls	r0, #1
 800e390:	4770      	bx	lr
 800e392:	4608      	mov	r0, r1
 800e394:	4770      	bx	lr
	...

0800e398 <_write_r>:
 800e398:	b538      	push	{r3, r4, r5, lr}
 800e39a:	4d07      	ldr	r5, [pc, #28]	; (800e3b8 <_write_r+0x20>)
 800e39c:	4604      	mov	r4, r0
 800e39e:	4608      	mov	r0, r1
 800e3a0:	4611      	mov	r1, r2
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	602a      	str	r2, [r5, #0]
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	f7f4 fddb 	bl	8002f62 <_write>
 800e3ac:	1c43      	adds	r3, r0, #1
 800e3ae:	d102      	bne.n	800e3b6 <_write_r+0x1e>
 800e3b0:	682b      	ldr	r3, [r5, #0]
 800e3b2:	b103      	cbz	r3, 800e3b6 <_write_r+0x1e>
 800e3b4:	6023      	str	r3, [r4, #0]
 800e3b6:	bd38      	pop	{r3, r4, r5, pc}
 800e3b8:	20000868 	.word	0x20000868

0800e3bc <__swsetup_r>:
 800e3bc:	4b32      	ldr	r3, [pc, #200]	; (800e488 <__swsetup_r+0xcc>)
 800e3be:	b570      	push	{r4, r5, r6, lr}
 800e3c0:	681d      	ldr	r5, [r3, #0]
 800e3c2:	4606      	mov	r6, r0
 800e3c4:	460c      	mov	r4, r1
 800e3c6:	b125      	cbz	r5, 800e3d2 <__swsetup_r+0x16>
 800e3c8:	69ab      	ldr	r3, [r5, #24]
 800e3ca:	b913      	cbnz	r3, 800e3d2 <__swsetup_r+0x16>
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	f7fe fb79 	bl	800cac4 <__sinit>
 800e3d2:	4b2e      	ldr	r3, [pc, #184]	; (800e48c <__swsetup_r+0xd0>)
 800e3d4:	429c      	cmp	r4, r3
 800e3d6:	d10f      	bne.n	800e3f8 <__swsetup_r+0x3c>
 800e3d8:	686c      	ldr	r4, [r5, #4]
 800e3da:	89a3      	ldrh	r3, [r4, #12]
 800e3dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3e0:	0719      	lsls	r1, r3, #28
 800e3e2:	d42c      	bmi.n	800e43e <__swsetup_r+0x82>
 800e3e4:	06dd      	lsls	r5, r3, #27
 800e3e6:	d411      	bmi.n	800e40c <__swsetup_r+0x50>
 800e3e8:	2309      	movs	r3, #9
 800e3ea:	6033      	str	r3, [r6, #0]
 800e3ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3f0:	81a3      	strh	r3, [r4, #12]
 800e3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f6:	e03e      	b.n	800e476 <__swsetup_r+0xba>
 800e3f8:	4b25      	ldr	r3, [pc, #148]	; (800e490 <__swsetup_r+0xd4>)
 800e3fa:	429c      	cmp	r4, r3
 800e3fc:	d101      	bne.n	800e402 <__swsetup_r+0x46>
 800e3fe:	68ac      	ldr	r4, [r5, #8]
 800e400:	e7eb      	b.n	800e3da <__swsetup_r+0x1e>
 800e402:	4b24      	ldr	r3, [pc, #144]	; (800e494 <__swsetup_r+0xd8>)
 800e404:	429c      	cmp	r4, r3
 800e406:	bf08      	it	eq
 800e408:	68ec      	ldreq	r4, [r5, #12]
 800e40a:	e7e6      	b.n	800e3da <__swsetup_r+0x1e>
 800e40c:	0758      	lsls	r0, r3, #29
 800e40e:	d512      	bpl.n	800e436 <__swsetup_r+0x7a>
 800e410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e412:	b141      	cbz	r1, 800e426 <__swsetup_r+0x6a>
 800e414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e418:	4299      	cmp	r1, r3
 800e41a:	d002      	beq.n	800e422 <__swsetup_r+0x66>
 800e41c:	4630      	mov	r0, r6
 800e41e:	f7fb fe13 	bl	800a048 <_free_r>
 800e422:	2300      	movs	r3, #0
 800e424:	6363      	str	r3, [r4, #52]	; 0x34
 800e426:	89a3      	ldrh	r3, [r4, #12]
 800e428:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e42c:	81a3      	strh	r3, [r4, #12]
 800e42e:	2300      	movs	r3, #0
 800e430:	6063      	str	r3, [r4, #4]
 800e432:	6923      	ldr	r3, [r4, #16]
 800e434:	6023      	str	r3, [r4, #0]
 800e436:	89a3      	ldrh	r3, [r4, #12]
 800e438:	f043 0308 	orr.w	r3, r3, #8
 800e43c:	81a3      	strh	r3, [r4, #12]
 800e43e:	6923      	ldr	r3, [r4, #16]
 800e440:	b94b      	cbnz	r3, 800e456 <__swsetup_r+0x9a>
 800e442:	89a3      	ldrh	r3, [r4, #12]
 800e444:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e44c:	d003      	beq.n	800e456 <__swsetup_r+0x9a>
 800e44e:	4621      	mov	r1, r4
 800e450:	4630      	mov	r0, r6
 800e452:	f000 f95b 	bl	800e70c <__smakebuf_r>
 800e456:	89a0      	ldrh	r0, [r4, #12]
 800e458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e45c:	f010 0301 	ands.w	r3, r0, #1
 800e460:	d00a      	beq.n	800e478 <__swsetup_r+0xbc>
 800e462:	2300      	movs	r3, #0
 800e464:	60a3      	str	r3, [r4, #8]
 800e466:	6963      	ldr	r3, [r4, #20]
 800e468:	425b      	negs	r3, r3
 800e46a:	61a3      	str	r3, [r4, #24]
 800e46c:	6923      	ldr	r3, [r4, #16]
 800e46e:	b943      	cbnz	r3, 800e482 <__swsetup_r+0xc6>
 800e470:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e474:	d1ba      	bne.n	800e3ec <__swsetup_r+0x30>
 800e476:	bd70      	pop	{r4, r5, r6, pc}
 800e478:	0781      	lsls	r1, r0, #30
 800e47a:	bf58      	it	pl
 800e47c:	6963      	ldrpl	r3, [r4, #20]
 800e47e:	60a3      	str	r3, [r4, #8]
 800e480:	e7f4      	b.n	800e46c <__swsetup_r+0xb0>
 800e482:	2000      	movs	r0, #0
 800e484:	e7f7      	b.n	800e476 <__swsetup_r+0xba>
 800e486:	bf00      	nop
 800e488:	20000080 	.word	0x20000080
 800e48c:	0800f0d4 	.word	0x0800f0d4
 800e490:	0800f0f4 	.word	0x0800f0f4
 800e494:	0800f0b4 	.word	0x0800f0b4

0800e498 <__assert_func>:
 800e498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e49a:	4614      	mov	r4, r2
 800e49c:	461a      	mov	r2, r3
 800e49e:	4b09      	ldr	r3, [pc, #36]	; (800e4c4 <__assert_func+0x2c>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4605      	mov	r5, r0
 800e4a4:	68d8      	ldr	r0, [r3, #12]
 800e4a6:	b14c      	cbz	r4, 800e4bc <__assert_func+0x24>
 800e4a8:	4b07      	ldr	r3, [pc, #28]	; (800e4c8 <__assert_func+0x30>)
 800e4aa:	9100      	str	r1, [sp, #0]
 800e4ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e4b0:	4906      	ldr	r1, [pc, #24]	; (800e4cc <__assert_func+0x34>)
 800e4b2:	462b      	mov	r3, r5
 800e4b4:	f000 f8e0 	bl	800e678 <fiprintf>
 800e4b8:	f000 f9c4 	bl	800e844 <abort>
 800e4bc:	4b04      	ldr	r3, [pc, #16]	; (800e4d0 <__assert_func+0x38>)
 800e4be:	461c      	mov	r4, r3
 800e4c0:	e7f3      	b.n	800e4aa <__assert_func+0x12>
 800e4c2:	bf00      	nop
 800e4c4:	20000080 	.word	0x20000080
 800e4c8:	0800f2fd 	.word	0x0800f2fd
 800e4cc:	0800f30a 	.word	0x0800f30a
 800e4d0:	0800f338 	.word	0x0800f338

0800e4d4 <_close_r>:
 800e4d4:	b538      	push	{r3, r4, r5, lr}
 800e4d6:	4d06      	ldr	r5, [pc, #24]	; (800e4f0 <_close_r+0x1c>)
 800e4d8:	2300      	movs	r3, #0
 800e4da:	4604      	mov	r4, r0
 800e4dc:	4608      	mov	r0, r1
 800e4de:	602b      	str	r3, [r5, #0]
 800e4e0:	f7f4 fd5b 	bl	8002f9a <_close>
 800e4e4:	1c43      	adds	r3, r0, #1
 800e4e6:	d102      	bne.n	800e4ee <_close_r+0x1a>
 800e4e8:	682b      	ldr	r3, [r5, #0]
 800e4ea:	b103      	cbz	r3, 800e4ee <_close_r+0x1a>
 800e4ec:	6023      	str	r3, [r4, #0]
 800e4ee:	bd38      	pop	{r3, r4, r5, pc}
 800e4f0:	20000868 	.word	0x20000868

0800e4f4 <__sflush_r>:
 800e4f4:	898a      	ldrh	r2, [r1, #12]
 800e4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4fa:	4605      	mov	r5, r0
 800e4fc:	0710      	lsls	r0, r2, #28
 800e4fe:	460c      	mov	r4, r1
 800e500:	d458      	bmi.n	800e5b4 <__sflush_r+0xc0>
 800e502:	684b      	ldr	r3, [r1, #4]
 800e504:	2b00      	cmp	r3, #0
 800e506:	dc05      	bgt.n	800e514 <__sflush_r+0x20>
 800e508:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	dc02      	bgt.n	800e514 <__sflush_r+0x20>
 800e50e:	2000      	movs	r0, #0
 800e510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e516:	2e00      	cmp	r6, #0
 800e518:	d0f9      	beq.n	800e50e <__sflush_r+0x1a>
 800e51a:	2300      	movs	r3, #0
 800e51c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e520:	682f      	ldr	r7, [r5, #0]
 800e522:	602b      	str	r3, [r5, #0]
 800e524:	d032      	beq.n	800e58c <__sflush_r+0x98>
 800e526:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e528:	89a3      	ldrh	r3, [r4, #12]
 800e52a:	075a      	lsls	r2, r3, #29
 800e52c:	d505      	bpl.n	800e53a <__sflush_r+0x46>
 800e52e:	6863      	ldr	r3, [r4, #4]
 800e530:	1ac0      	subs	r0, r0, r3
 800e532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e534:	b10b      	cbz	r3, 800e53a <__sflush_r+0x46>
 800e536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e538:	1ac0      	subs	r0, r0, r3
 800e53a:	2300      	movs	r3, #0
 800e53c:	4602      	mov	r2, r0
 800e53e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e540:	6a21      	ldr	r1, [r4, #32]
 800e542:	4628      	mov	r0, r5
 800e544:	47b0      	blx	r6
 800e546:	1c43      	adds	r3, r0, #1
 800e548:	89a3      	ldrh	r3, [r4, #12]
 800e54a:	d106      	bne.n	800e55a <__sflush_r+0x66>
 800e54c:	6829      	ldr	r1, [r5, #0]
 800e54e:	291d      	cmp	r1, #29
 800e550:	d82c      	bhi.n	800e5ac <__sflush_r+0xb8>
 800e552:	4a2a      	ldr	r2, [pc, #168]	; (800e5fc <__sflush_r+0x108>)
 800e554:	40ca      	lsrs	r2, r1
 800e556:	07d6      	lsls	r6, r2, #31
 800e558:	d528      	bpl.n	800e5ac <__sflush_r+0xb8>
 800e55a:	2200      	movs	r2, #0
 800e55c:	6062      	str	r2, [r4, #4]
 800e55e:	04d9      	lsls	r1, r3, #19
 800e560:	6922      	ldr	r2, [r4, #16]
 800e562:	6022      	str	r2, [r4, #0]
 800e564:	d504      	bpl.n	800e570 <__sflush_r+0x7c>
 800e566:	1c42      	adds	r2, r0, #1
 800e568:	d101      	bne.n	800e56e <__sflush_r+0x7a>
 800e56a:	682b      	ldr	r3, [r5, #0]
 800e56c:	b903      	cbnz	r3, 800e570 <__sflush_r+0x7c>
 800e56e:	6560      	str	r0, [r4, #84]	; 0x54
 800e570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e572:	602f      	str	r7, [r5, #0]
 800e574:	2900      	cmp	r1, #0
 800e576:	d0ca      	beq.n	800e50e <__sflush_r+0x1a>
 800e578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e57c:	4299      	cmp	r1, r3
 800e57e:	d002      	beq.n	800e586 <__sflush_r+0x92>
 800e580:	4628      	mov	r0, r5
 800e582:	f7fb fd61 	bl	800a048 <_free_r>
 800e586:	2000      	movs	r0, #0
 800e588:	6360      	str	r0, [r4, #52]	; 0x34
 800e58a:	e7c1      	b.n	800e510 <__sflush_r+0x1c>
 800e58c:	6a21      	ldr	r1, [r4, #32]
 800e58e:	2301      	movs	r3, #1
 800e590:	4628      	mov	r0, r5
 800e592:	47b0      	blx	r6
 800e594:	1c41      	adds	r1, r0, #1
 800e596:	d1c7      	bne.n	800e528 <__sflush_r+0x34>
 800e598:	682b      	ldr	r3, [r5, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d0c4      	beq.n	800e528 <__sflush_r+0x34>
 800e59e:	2b1d      	cmp	r3, #29
 800e5a0:	d001      	beq.n	800e5a6 <__sflush_r+0xb2>
 800e5a2:	2b16      	cmp	r3, #22
 800e5a4:	d101      	bne.n	800e5aa <__sflush_r+0xb6>
 800e5a6:	602f      	str	r7, [r5, #0]
 800e5a8:	e7b1      	b.n	800e50e <__sflush_r+0x1a>
 800e5aa:	89a3      	ldrh	r3, [r4, #12]
 800e5ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5b0:	81a3      	strh	r3, [r4, #12]
 800e5b2:	e7ad      	b.n	800e510 <__sflush_r+0x1c>
 800e5b4:	690f      	ldr	r7, [r1, #16]
 800e5b6:	2f00      	cmp	r7, #0
 800e5b8:	d0a9      	beq.n	800e50e <__sflush_r+0x1a>
 800e5ba:	0793      	lsls	r3, r2, #30
 800e5bc:	680e      	ldr	r6, [r1, #0]
 800e5be:	bf08      	it	eq
 800e5c0:	694b      	ldreq	r3, [r1, #20]
 800e5c2:	600f      	str	r7, [r1, #0]
 800e5c4:	bf18      	it	ne
 800e5c6:	2300      	movne	r3, #0
 800e5c8:	eba6 0807 	sub.w	r8, r6, r7
 800e5cc:	608b      	str	r3, [r1, #8]
 800e5ce:	f1b8 0f00 	cmp.w	r8, #0
 800e5d2:	dd9c      	ble.n	800e50e <__sflush_r+0x1a>
 800e5d4:	6a21      	ldr	r1, [r4, #32]
 800e5d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5d8:	4643      	mov	r3, r8
 800e5da:	463a      	mov	r2, r7
 800e5dc:	4628      	mov	r0, r5
 800e5de:	47b0      	blx	r6
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	dc06      	bgt.n	800e5f2 <__sflush_r+0xfe>
 800e5e4:	89a3      	ldrh	r3, [r4, #12]
 800e5e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5ea:	81a3      	strh	r3, [r4, #12]
 800e5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f0:	e78e      	b.n	800e510 <__sflush_r+0x1c>
 800e5f2:	4407      	add	r7, r0
 800e5f4:	eba8 0800 	sub.w	r8, r8, r0
 800e5f8:	e7e9      	b.n	800e5ce <__sflush_r+0xda>
 800e5fa:	bf00      	nop
 800e5fc:	20400001 	.word	0x20400001

0800e600 <_fflush_r>:
 800e600:	b538      	push	{r3, r4, r5, lr}
 800e602:	690b      	ldr	r3, [r1, #16]
 800e604:	4605      	mov	r5, r0
 800e606:	460c      	mov	r4, r1
 800e608:	b913      	cbnz	r3, 800e610 <_fflush_r+0x10>
 800e60a:	2500      	movs	r5, #0
 800e60c:	4628      	mov	r0, r5
 800e60e:	bd38      	pop	{r3, r4, r5, pc}
 800e610:	b118      	cbz	r0, 800e61a <_fflush_r+0x1a>
 800e612:	6983      	ldr	r3, [r0, #24]
 800e614:	b90b      	cbnz	r3, 800e61a <_fflush_r+0x1a>
 800e616:	f7fe fa55 	bl	800cac4 <__sinit>
 800e61a:	4b14      	ldr	r3, [pc, #80]	; (800e66c <_fflush_r+0x6c>)
 800e61c:	429c      	cmp	r4, r3
 800e61e:	d11b      	bne.n	800e658 <_fflush_r+0x58>
 800e620:	686c      	ldr	r4, [r5, #4]
 800e622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d0ef      	beq.n	800e60a <_fflush_r+0xa>
 800e62a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e62c:	07d0      	lsls	r0, r2, #31
 800e62e:	d404      	bmi.n	800e63a <_fflush_r+0x3a>
 800e630:	0599      	lsls	r1, r3, #22
 800e632:	d402      	bmi.n	800e63a <_fflush_r+0x3a>
 800e634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e636:	f7fe fe56 	bl	800d2e6 <__retarget_lock_acquire_recursive>
 800e63a:	4628      	mov	r0, r5
 800e63c:	4621      	mov	r1, r4
 800e63e:	f7ff ff59 	bl	800e4f4 <__sflush_r>
 800e642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e644:	07da      	lsls	r2, r3, #31
 800e646:	4605      	mov	r5, r0
 800e648:	d4e0      	bmi.n	800e60c <_fflush_r+0xc>
 800e64a:	89a3      	ldrh	r3, [r4, #12]
 800e64c:	059b      	lsls	r3, r3, #22
 800e64e:	d4dd      	bmi.n	800e60c <_fflush_r+0xc>
 800e650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e652:	f7fe fe49 	bl	800d2e8 <__retarget_lock_release_recursive>
 800e656:	e7d9      	b.n	800e60c <_fflush_r+0xc>
 800e658:	4b05      	ldr	r3, [pc, #20]	; (800e670 <_fflush_r+0x70>)
 800e65a:	429c      	cmp	r4, r3
 800e65c:	d101      	bne.n	800e662 <_fflush_r+0x62>
 800e65e:	68ac      	ldr	r4, [r5, #8]
 800e660:	e7df      	b.n	800e622 <_fflush_r+0x22>
 800e662:	4b04      	ldr	r3, [pc, #16]	; (800e674 <_fflush_r+0x74>)
 800e664:	429c      	cmp	r4, r3
 800e666:	bf08      	it	eq
 800e668:	68ec      	ldreq	r4, [r5, #12]
 800e66a:	e7da      	b.n	800e622 <_fflush_r+0x22>
 800e66c:	0800f0d4 	.word	0x0800f0d4
 800e670:	0800f0f4 	.word	0x0800f0f4
 800e674:	0800f0b4 	.word	0x0800f0b4

0800e678 <fiprintf>:
 800e678:	b40e      	push	{r1, r2, r3}
 800e67a:	b503      	push	{r0, r1, lr}
 800e67c:	4601      	mov	r1, r0
 800e67e:	ab03      	add	r3, sp, #12
 800e680:	4805      	ldr	r0, [pc, #20]	; (800e698 <fiprintf+0x20>)
 800e682:	f853 2b04 	ldr.w	r2, [r3], #4
 800e686:	6800      	ldr	r0, [r0, #0]
 800e688:	9301      	str	r3, [sp, #4]
 800e68a:	f7ff fc93 	bl	800dfb4 <_vfiprintf_r>
 800e68e:	b002      	add	sp, #8
 800e690:	f85d eb04 	ldr.w	lr, [sp], #4
 800e694:	b003      	add	sp, #12
 800e696:	4770      	bx	lr
 800e698:	20000080 	.word	0x20000080

0800e69c <_lseek_r>:
 800e69c:	b538      	push	{r3, r4, r5, lr}
 800e69e:	4d07      	ldr	r5, [pc, #28]	; (800e6bc <_lseek_r+0x20>)
 800e6a0:	4604      	mov	r4, r0
 800e6a2:	4608      	mov	r0, r1
 800e6a4:	4611      	mov	r1, r2
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	602a      	str	r2, [r5, #0]
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	f7f4 fc9c 	bl	8002fe8 <_lseek>
 800e6b0:	1c43      	adds	r3, r0, #1
 800e6b2:	d102      	bne.n	800e6ba <_lseek_r+0x1e>
 800e6b4:	682b      	ldr	r3, [r5, #0]
 800e6b6:	b103      	cbz	r3, 800e6ba <_lseek_r+0x1e>
 800e6b8:	6023      	str	r3, [r4, #0]
 800e6ba:	bd38      	pop	{r3, r4, r5, pc}
 800e6bc:	20000868 	.word	0x20000868

0800e6c0 <__swhatbuf_r>:
 800e6c0:	b570      	push	{r4, r5, r6, lr}
 800e6c2:	460e      	mov	r6, r1
 800e6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6c8:	2900      	cmp	r1, #0
 800e6ca:	b096      	sub	sp, #88	; 0x58
 800e6cc:	4614      	mov	r4, r2
 800e6ce:	461d      	mov	r5, r3
 800e6d0:	da08      	bge.n	800e6e4 <__swhatbuf_r+0x24>
 800e6d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	602a      	str	r2, [r5, #0]
 800e6da:	061a      	lsls	r2, r3, #24
 800e6dc:	d410      	bmi.n	800e700 <__swhatbuf_r+0x40>
 800e6de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6e2:	e00e      	b.n	800e702 <__swhatbuf_r+0x42>
 800e6e4:	466a      	mov	r2, sp
 800e6e6:	f000 f8b5 	bl	800e854 <_fstat_r>
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	dbf1      	blt.n	800e6d2 <__swhatbuf_r+0x12>
 800e6ee:	9a01      	ldr	r2, [sp, #4]
 800e6f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e6f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e6f8:	425a      	negs	r2, r3
 800e6fa:	415a      	adcs	r2, r3
 800e6fc:	602a      	str	r2, [r5, #0]
 800e6fe:	e7ee      	b.n	800e6de <__swhatbuf_r+0x1e>
 800e700:	2340      	movs	r3, #64	; 0x40
 800e702:	2000      	movs	r0, #0
 800e704:	6023      	str	r3, [r4, #0]
 800e706:	b016      	add	sp, #88	; 0x58
 800e708:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e70c <__smakebuf_r>:
 800e70c:	898b      	ldrh	r3, [r1, #12]
 800e70e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e710:	079d      	lsls	r5, r3, #30
 800e712:	4606      	mov	r6, r0
 800e714:	460c      	mov	r4, r1
 800e716:	d507      	bpl.n	800e728 <__smakebuf_r+0x1c>
 800e718:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e71c:	6023      	str	r3, [r4, #0]
 800e71e:	6123      	str	r3, [r4, #16]
 800e720:	2301      	movs	r3, #1
 800e722:	6163      	str	r3, [r4, #20]
 800e724:	b002      	add	sp, #8
 800e726:	bd70      	pop	{r4, r5, r6, pc}
 800e728:	ab01      	add	r3, sp, #4
 800e72a:	466a      	mov	r2, sp
 800e72c:	f7ff ffc8 	bl	800e6c0 <__swhatbuf_r>
 800e730:	9900      	ldr	r1, [sp, #0]
 800e732:	4605      	mov	r5, r0
 800e734:	4630      	mov	r0, r6
 800e736:	f7fb fcf3 	bl	800a120 <_malloc_r>
 800e73a:	b948      	cbnz	r0, 800e750 <__smakebuf_r+0x44>
 800e73c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e740:	059a      	lsls	r2, r3, #22
 800e742:	d4ef      	bmi.n	800e724 <__smakebuf_r+0x18>
 800e744:	f023 0303 	bic.w	r3, r3, #3
 800e748:	f043 0302 	orr.w	r3, r3, #2
 800e74c:	81a3      	strh	r3, [r4, #12]
 800e74e:	e7e3      	b.n	800e718 <__smakebuf_r+0xc>
 800e750:	4b0d      	ldr	r3, [pc, #52]	; (800e788 <__smakebuf_r+0x7c>)
 800e752:	62b3      	str	r3, [r6, #40]	; 0x28
 800e754:	89a3      	ldrh	r3, [r4, #12]
 800e756:	6020      	str	r0, [r4, #0]
 800e758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e75c:	81a3      	strh	r3, [r4, #12]
 800e75e:	9b00      	ldr	r3, [sp, #0]
 800e760:	6163      	str	r3, [r4, #20]
 800e762:	9b01      	ldr	r3, [sp, #4]
 800e764:	6120      	str	r0, [r4, #16]
 800e766:	b15b      	cbz	r3, 800e780 <__smakebuf_r+0x74>
 800e768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e76c:	4630      	mov	r0, r6
 800e76e:	f000 f883 	bl	800e878 <_isatty_r>
 800e772:	b128      	cbz	r0, 800e780 <__smakebuf_r+0x74>
 800e774:	89a3      	ldrh	r3, [r4, #12]
 800e776:	f023 0303 	bic.w	r3, r3, #3
 800e77a:	f043 0301 	orr.w	r3, r3, #1
 800e77e:	81a3      	strh	r3, [r4, #12]
 800e780:	89a0      	ldrh	r0, [r4, #12]
 800e782:	4305      	orrs	r5, r0
 800e784:	81a5      	strh	r5, [r4, #12]
 800e786:	e7cd      	b.n	800e724 <__smakebuf_r+0x18>
 800e788:	0800ca5d 	.word	0x0800ca5d

0800e78c <memmove>:
 800e78c:	4288      	cmp	r0, r1
 800e78e:	b510      	push	{r4, lr}
 800e790:	eb01 0402 	add.w	r4, r1, r2
 800e794:	d902      	bls.n	800e79c <memmove+0x10>
 800e796:	4284      	cmp	r4, r0
 800e798:	4623      	mov	r3, r4
 800e79a:	d807      	bhi.n	800e7ac <memmove+0x20>
 800e79c:	1e43      	subs	r3, r0, #1
 800e79e:	42a1      	cmp	r1, r4
 800e7a0:	d008      	beq.n	800e7b4 <memmove+0x28>
 800e7a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e7aa:	e7f8      	b.n	800e79e <memmove+0x12>
 800e7ac:	4402      	add	r2, r0
 800e7ae:	4601      	mov	r1, r0
 800e7b0:	428a      	cmp	r2, r1
 800e7b2:	d100      	bne.n	800e7b6 <memmove+0x2a>
 800e7b4:	bd10      	pop	{r4, pc}
 800e7b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e7be:	e7f7      	b.n	800e7b0 <memmove+0x24>

0800e7c0 <_realloc_r>:
 800e7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7c4:	4680      	mov	r8, r0
 800e7c6:	4614      	mov	r4, r2
 800e7c8:	460e      	mov	r6, r1
 800e7ca:	b921      	cbnz	r1, 800e7d6 <_realloc_r+0x16>
 800e7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	f7fb bca5 	b.w	800a120 <_malloc_r>
 800e7d6:	b92a      	cbnz	r2, 800e7e4 <_realloc_r+0x24>
 800e7d8:	f7fb fc36 	bl	800a048 <_free_r>
 800e7dc:	4625      	mov	r5, r4
 800e7de:	4628      	mov	r0, r5
 800e7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7e4:	f000 f858 	bl	800e898 <_malloc_usable_size_r>
 800e7e8:	4284      	cmp	r4, r0
 800e7ea:	4607      	mov	r7, r0
 800e7ec:	d802      	bhi.n	800e7f4 <_realloc_r+0x34>
 800e7ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e7f2:	d812      	bhi.n	800e81a <_realloc_r+0x5a>
 800e7f4:	4621      	mov	r1, r4
 800e7f6:	4640      	mov	r0, r8
 800e7f8:	f7fb fc92 	bl	800a120 <_malloc_r>
 800e7fc:	4605      	mov	r5, r0
 800e7fe:	2800      	cmp	r0, #0
 800e800:	d0ed      	beq.n	800e7de <_realloc_r+0x1e>
 800e802:	42bc      	cmp	r4, r7
 800e804:	4622      	mov	r2, r4
 800e806:	4631      	mov	r1, r6
 800e808:	bf28      	it	cs
 800e80a:	463a      	movcs	r2, r7
 800e80c:	f7fb fbf0 	bl	8009ff0 <memcpy>
 800e810:	4631      	mov	r1, r6
 800e812:	4640      	mov	r0, r8
 800e814:	f7fb fc18 	bl	800a048 <_free_r>
 800e818:	e7e1      	b.n	800e7de <_realloc_r+0x1e>
 800e81a:	4635      	mov	r5, r6
 800e81c:	e7df      	b.n	800e7de <_realloc_r+0x1e>
	...

0800e820 <_read_r>:
 800e820:	b538      	push	{r3, r4, r5, lr}
 800e822:	4d07      	ldr	r5, [pc, #28]	; (800e840 <_read_r+0x20>)
 800e824:	4604      	mov	r4, r0
 800e826:	4608      	mov	r0, r1
 800e828:	4611      	mov	r1, r2
 800e82a:	2200      	movs	r2, #0
 800e82c:	602a      	str	r2, [r5, #0]
 800e82e:	461a      	mov	r2, r3
 800e830:	f7f4 fb7a 	bl	8002f28 <_read>
 800e834:	1c43      	adds	r3, r0, #1
 800e836:	d102      	bne.n	800e83e <_read_r+0x1e>
 800e838:	682b      	ldr	r3, [r5, #0]
 800e83a:	b103      	cbz	r3, 800e83e <_read_r+0x1e>
 800e83c:	6023      	str	r3, [r4, #0]
 800e83e:	bd38      	pop	{r3, r4, r5, pc}
 800e840:	20000868 	.word	0x20000868

0800e844 <abort>:
 800e844:	b508      	push	{r3, lr}
 800e846:	2006      	movs	r0, #6
 800e848:	f000 f856 	bl	800e8f8 <raise>
 800e84c:	2001      	movs	r0, #1
 800e84e:	f7f4 fb61 	bl	8002f14 <_exit>
	...

0800e854 <_fstat_r>:
 800e854:	b538      	push	{r3, r4, r5, lr}
 800e856:	4d07      	ldr	r5, [pc, #28]	; (800e874 <_fstat_r+0x20>)
 800e858:	2300      	movs	r3, #0
 800e85a:	4604      	mov	r4, r0
 800e85c:	4608      	mov	r0, r1
 800e85e:	4611      	mov	r1, r2
 800e860:	602b      	str	r3, [r5, #0]
 800e862:	f7f4 fba6 	bl	8002fb2 <_fstat>
 800e866:	1c43      	adds	r3, r0, #1
 800e868:	d102      	bne.n	800e870 <_fstat_r+0x1c>
 800e86a:	682b      	ldr	r3, [r5, #0]
 800e86c:	b103      	cbz	r3, 800e870 <_fstat_r+0x1c>
 800e86e:	6023      	str	r3, [r4, #0]
 800e870:	bd38      	pop	{r3, r4, r5, pc}
 800e872:	bf00      	nop
 800e874:	20000868 	.word	0x20000868

0800e878 <_isatty_r>:
 800e878:	b538      	push	{r3, r4, r5, lr}
 800e87a:	4d06      	ldr	r5, [pc, #24]	; (800e894 <_isatty_r+0x1c>)
 800e87c:	2300      	movs	r3, #0
 800e87e:	4604      	mov	r4, r0
 800e880:	4608      	mov	r0, r1
 800e882:	602b      	str	r3, [r5, #0]
 800e884:	f7f4 fba5 	bl	8002fd2 <_isatty>
 800e888:	1c43      	adds	r3, r0, #1
 800e88a:	d102      	bne.n	800e892 <_isatty_r+0x1a>
 800e88c:	682b      	ldr	r3, [r5, #0]
 800e88e:	b103      	cbz	r3, 800e892 <_isatty_r+0x1a>
 800e890:	6023      	str	r3, [r4, #0]
 800e892:	bd38      	pop	{r3, r4, r5, pc}
 800e894:	20000868 	.word	0x20000868

0800e898 <_malloc_usable_size_r>:
 800e898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e89c:	1f18      	subs	r0, r3, #4
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	bfbc      	itt	lt
 800e8a2:	580b      	ldrlt	r3, [r1, r0]
 800e8a4:	18c0      	addlt	r0, r0, r3
 800e8a6:	4770      	bx	lr

0800e8a8 <_raise_r>:
 800e8a8:	291f      	cmp	r1, #31
 800e8aa:	b538      	push	{r3, r4, r5, lr}
 800e8ac:	4604      	mov	r4, r0
 800e8ae:	460d      	mov	r5, r1
 800e8b0:	d904      	bls.n	800e8bc <_raise_r+0x14>
 800e8b2:	2316      	movs	r3, #22
 800e8b4:	6003      	str	r3, [r0, #0]
 800e8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ba:	bd38      	pop	{r3, r4, r5, pc}
 800e8bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e8be:	b112      	cbz	r2, 800e8c6 <_raise_r+0x1e>
 800e8c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8c4:	b94b      	cbnz	r3, 800e8da <_raise_r+0x32>
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f000 f830 	bl	800e92c <_getpid_r>
 800e8cc:	462a      	mov	r2, r5
 800e8ce:	4601      	mov	r1, r0
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8d6:	f000 b817 	b.w	800e908 <_kill_r>
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d00a      	beq.n	800e8f4 <_raise_r+0x4c>
 800e8de:	1c59      	adds	r1, r3, #1
 800e8e0:	d103      	bne.n	800e8ea <_raise_r+0x42>
 800e8e2:	2316      	movs	r3, #22
 800e8e4:	6003      	str	r3, [r0, #0]
 800e8e6:	2001      	movs	r0, #1
 800e8e8:	e7e7      	b.n	800e8ba <_raise_r+0x12>
 800e8ea:	2400      	movs	r4, #0
 800e8ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8f0:	4628      	mov	r0, r5
 800e8f2:	4798      	blx	r3
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	e7e0      	b.n	800e8ba <_raise_r+0x12>

0800e8f8 <raise>:
 800e8f8:	4b02      	ldr	r3, [pc, #8]	; (800e904 <raise+0xc>)
 800e8fa:	4601      	mov	r1, r0
 800e8fc:	6818      	ldr	r0, [r3, #0]
 800e8fe:	f7ff bfd3 	b.w	800e8a8 <_raise_r>
 800e902:	bf00      	nop
 800e904:	20000080 	.word	0x20000080

0800e908 <_kill_r>:
 800e908:	b538      	push	{r3, r4, r5, lr}
 800e90a:	4d07      	ldr	r5, [pc, #28]	; (800e928 <_kill_r+0x20>)
 800e90c:	2300      	movs	r3, #0
 800e90e:	4604      	mov	r4, r0
 800e910:	4608      	mov	r0, r1
 800e912:	4611      	mov	r1, r2
 800e914:	602b      	str	r3, [r5, #0]
 800e916:	f7f4 faed 	bl	8002ef4 <_kill>
 800e91a:	1c43      	adds	r3, r0, #1
 800e91c:	d102      	bne.n	800e924 <_kill_r+0x1c>
 800e91e:	682b      	ldr	r3, [r5, #0]
 800e920:	b103      	cbz	r3, 800e924 <_kill_r+0x1c>
 800e922:	6023      	str	r3, [r4, #0]
 800e924:	bd38      	pop	{r3, r4, r5, pc}
 800e926:	bf00      	nop
 800e928:	20000868 	.word	0x20000868

0800e92c <_getpid_r>:
 800e92c:	f7f4 bada 	b.w	8002ee4 <_getpid>

0800e930 <log10f>:
 800e930:	b508      	push	{r3, lr}
 800e932:	ed2d 8b02 	vpush	{d8}
 800e936:	eeb0 8a40 	vmov.f32	s16, s0
 800e93a:	f000 f827 	bl	800e98c <__ieee754_log10f>
 800e93e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e946:	d60f      	bvs.n	800e968 <log10f+0x38>
 800e948:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e950:	d80a      	bhi.n	800e968 <log10f+0x38>
 800e952:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e95a:	d108      	bne.n	800e96e <log10f+0x3e>
 800e95c:	f7fb fafe 	bl	8009f5c <__errno>
 800e960:	2322      	movs	r3, #34	; 0x22
 800e962:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800e984 <log10f+0x54>
 800e966:	6003      	str	r3, [r0, #0]
 800e968:	ecbd 8b02 	vpop	{d8}
 800e96c:	bd08      	pop	{r3, pc}
 800e96e:	f7fb faf5 	bl	8009f5c <__errno>
 800e972:	ecbd 8b02 	vpop	{d8}
 800e976:	2321      	movs	r3, #33	; 0x21
 800e978:	6003      	str	r3, [r0, #0]
 800e97a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e97e:	4802      	ldr	r0, [pc, #8]	; (800e988 <log10f+0x58>)
 800e980:	f7fc bae4 	b.w	800af4c <nanf>
 800e984:	ff800000 	.word	0xff800000
 800e988:	0800f338 	.word	0x0800f338

0800e98c <__ieee754_log10f>:
 800e98c:	b508      	push	{r3, lr}
 800e98e:	ee10 2a10 	vmov	r2, s0
 800e992:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800e996:	ed2d 8b02 	vpush	{d8}
 800e99a:	d108      	bne.n	800e9ae <__ieee754_log10f+0x22>
 800e99c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800ea24 <__ieee754_log10f+0x98>
 800e9a0:	eddf 7a21 	vldr	s15, [pc, #132]	; 800ea28 <__ieee754_log10f+0x9c>
 800e9a4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800e9a8:	ecbd 8b02 	vpop	{d8}
 800e9ac:	bd08      	pop	{r3, pc}
 800e9ae:	2a00      	cmp	r2, #0
 800e9b0:	da02      	bge.n	800e9b8 <__ieee754_log10f+0x2c>
 800e9b2:	ee30 7a40 	vsub.f32	s14, s0, s0
 800e9b6:	e7f3      	b.n	800e9a0 <__ieee754_log10f+0x14>
 800e9b8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e9bc:	db02      	blt.n	800e9c4 <__ieee754_log10f+0x38>
 800e9be:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e9c2:	e7f1      	b.n	800e9a8 <__ieee754_log10f+0x1c>
 800e9c4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800e9c8:	bfbf      	itttt	lt
 800e9ca:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800ea2c <__ieee754_log10f+0xa0>
 800e9ce:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e9d2:	f06f 0118 	mvnlt.w	r1, #24
 800e9d6:	ee17 2a90 	vmovlt	r2, s15
 800e9da:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800e9de:	bfa8      	it	ge
 800e9e0:	2100      	movge	r1, #0
 800e9e2:	3b7f      	subs	r3, #127	; 0x7f
 800e9e4:	440b      	add	r3, r1
 800e9e6:	0fd9      	lsrs	r1, r3, #31
 800e9e8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800e9ec:	ee07 3a90 	vmov	s15, r3
 800e9f0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800e9f4:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800e9f8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e9fc:	ee00 3a10 	vmov	s0, r3
 800ea00:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800ea04:	f000 f81a 	bl	800ea3c <__ieee754_logf>
 800ea08:	eddf 7a09 	vldr	s15, [pc, #36]	; 800ea30 <__ieee754_log10f+0xa4>
 800ea0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ea10:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ea34 <__ieee754_log10f+0xa8>
 800ea14:	eea8 0a27 	vfma.f32	s0, s16, s15
 800ea18:	eddf 7a07 	vldr	s15, [pc, #28]	; 800ea38 <__ieee754_log10f+0xac>
 800ea1c:	eea8 0a27 	vfma.f32	s0, s16, s15
 800ea20:	e7c2      	b.n	800e9a8 <__ieee754_log10f+0x1c>
 800ea22:	bf00      	nop
 800ea24:	cc000000 	.word	0xcc000000
 800ea28:	00000000 	.word	0x00000000
 800ea2c:	4c000000 	.word	0x4c000000
 800ea30:	3ede5bd9 	.word	0x3ede5bd9
 800ea34:	355427db 	.word	0x355427db
 800ea38:	3e9a2080 	.word	0x3e9a2080

0800ea3c <__ieee754_logf>:
 800ea3c:	ee10 3a10 	vmov	r3, s0
 800ea40:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ea44:	d106      	bne.n	800ea54 <__ieee754_logf+0x18>
 800ea46:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800ebdc <__ieee754_logf+0x1a0>
 800ea4a:	eddf 7a65 	vldr	s15, [pc, #404]	; 800ebe0 <__ieee754_logf+0x1a4>
 800ea4e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ea52:	4770      	bx	lr
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	da02      	bge.n	800ea5e <__ieee754_logf+0x22>
 800ea58:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ea5c:	e7f5      	b.n	800ea4a <__ieee754_logf+0xe>
 800ea5e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ea62:	db02      	blt.n	800ea6a <__ieee754_logf+0x2e>
 800ea64:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ea68:	4770      	bx	lr
 800ea6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ea6e:	bfb8      	it	lt
 800ea70:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800ebe4 <__ieee754_logf+0x1a8>
 800ea74:	485c      	ldr	r0, [pc, #368]	; (800ebe8 <__ieee754_logf+0x1ac>)
 800ea76:	bfbe      	ittt	lt
 800ea78:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800ea7c:	f06f 0118 	mvnlt.w	r1, #24
 800ea80:	ee17 3a90 	vmovlt	r3, s15
 800ea84:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800ea88:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ea8c:	4418      	add	r0, r3
 800ea8e:	bfa8      	it	ge
 800ea90:	2100      	movge	r1, #0
 800ea92:	3a7f      	subs	r2, #127	; 0x7f
 800ea94:	440a      	add	r2, r1
 800ea96:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800ea9a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800ea9e:	4319      	orrs	r1, r3
 800eaa0:	ee00 1a10 	vmov	s0, r1
 800eaa4:	4951      	ldr	r1, [pc, #324]	; (800ebec <__ieee754_logf+0x1b0>)
 800eaa6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800eaaa:	f103 000f 	add.w	r0, r3, #15
 800eaae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eab2:	4001      	ands	r1, r0
 800eab4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800eab8:	bb89      	cbnz	r1, 800eb1e <__ieee754_logf+0xe2>
 800eaba:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800eabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eac2:	d10f      	bne.n	800eae4 <__ieee754_logf+0xa8>
 800eac4:	2a00      	cmp	r2, #0
 800eac6:	f000 8085 	beq.w	800ebd4 <__ieee754_logf+0x198>
 800eaca:	ee07 2a90 	vmov	s15, r2
 800eace:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800ebf0 <__ieee754_logf+0x1b4>
 800ead2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800ebf4 <__ieee754_logf+0x1b8>
 800ead6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eada:	ee27 0a80 	vmul.f32	s0, s15, s0
 800eade:	eea7 0a87 	vfma.f32	s0, s15, s14
 800eae2:	4770      	bx	lr
 800eae4:	eddf 6a44 	vldr	s13, [pc, #272]	; 800ebf8 <__ieee754_logf+0x1bc>
 800eae8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800eaec:	eee0 7a66 	vfms.f32	s15, s0, s13
 800eaf0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800eaf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eaf8:	b912      	cbnz	r2, 800eb00 <__ieee754_logf+0xc4>
 800eafa:	ee30 0a47 	vsub.f32	s0, s0, s14
 800eafe:	4770      	bx	lr
 800eb00:	ee07 2a90 	vmov	s15, r2
 800eb04:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800ebf0 <__ieee754_logf+0x1b4>
 800eb08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb0c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800eb10:	ee37 0a40 	vsub.f32	s0, s14, s0
 800eb14:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800ebf4 <__ieee754_logf+0x1b8>
 800eb18:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800eb1c:	4770      	bx	lr
 800eb1e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800eb22:	ee70 7a27 	vadd.f32	s15, s0, s15
 800eb26:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ebfc <__ieee754_logf+0x1c0>
 800eb2a:	eddf 4a35 	vldr	s9, [pc, #212]	; 800ec00 <__ieee754_logf+0x1c4>
 800eb2e:	4935      	ldr	r1, [pc, #212]	; (800ec04 <__ieee754_logf+0x1c8>)
 800eb30:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800eb34:	4419      	add	r1, r3
 800eb36:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800eb3a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800eb3e:	430b      	orrs	r3, r1
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	ee07 2a90 	vmov	s15, r2
 800eb46:	ee26 5a06 	vmul.f32	s10, s12, s12
 800eb4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800eb4e:	ee25 7a05 	vmul.f32	s14, s10, s10
 800eb52:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800ec08 <__ieee754_logf+0x1cc>
 800eb56:	eee7 7a25 	vfma.f32	s15, s14, s11
 800eb5a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800ec0c <__ieee754_logf+0x1d0>
 800eb5e:	eee7 5a87 	vfma.f32	s11, s15, s14
 800eb62:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ec10 <__ieee754_logf+0x1d4>
 800eb66:	eee7 7a24 	vfma.f32	s15, s14, s9
 800eb6a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800ec14 <__ieee754_logf+0x1d8>
 800eb6e:	eee7 4a87 	vfma.f32	s9, s15, s14
 800eb72:	eddf 7a29 	vldr	s15, [pc, #164]	; 800ec18 <__ieee754_logf+0x1dc>
 800eb76:	eee4 7a87 	vfma.f32	s15, s9, s14
 800eb7a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800eb7e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800eb82:	dd1c      	ble.n	800ebbe <__ieee754_logf+0x182>
 800eb84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800eb88:	ee20 7a07 	vmul.f32	s14, s0, s14
 800eb8c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800eb90:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eb94:	ee67 7a86 	vmul.f32	s15, s15, s12
 800eb98:	b922      	cbnz	r2, 800eba4 <__ieee754_logf+0x168>
 800eb9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800eba2:	4770      	bx	lr
 800eba4:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800ebf0 <__ieee754_logf+0x1b4>
 800eba8:	eee6 7a86 	vfma.f32	s15, s13, s12
 800ebac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebb0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ebb4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800ebf4 <__ieee754_logf+0x1b8>
 800ebb8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800ebbc:	4770      	bx	lr
 800ebbe:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ebc2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ebc6:	2a00      	cmp	r2, #0
 800ebc8:	d0e9      	beq.n	800eb9e <__ieee754_logf+0x162>
 800ebca:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800ebf0 <__ieee754_logf+0x1b4>
 800ebce:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800ebd2:	e7ed      	b.n	800ebb0 <__ieee754_logf+0x174>
 800ebd4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800ebe0 <__ieee754_logf+0x1a4>
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	cc000000 	.word	0xcc000000
 800ebe0:	00000000 	.word	0x00000000
 800ebe4:	4c000000 	.word	0x4c000000
 800ebe8:	004afb20 	.word	0x004afb20
 800ebec:	007ffff0 	.word	0x007ffff0
 800ebf0:	3717f7d1 	.word	0x3717f7d1
 800ebf4:	3f317180 	.word	0x3f317180
 800ebf8:	3eaaaaab 	.word	0x3eaaaaab
 800ebfc:	3e1cd04f 	.word	0x3e1cd04f
 800ec00:	3e178897 	.word	0x3e178897
 800ec04:	ffcf5c30 	.word	0xffcf5c30
 800ec08:	3e638e29 	.word	0x3e638e29
 800ec0c:	3ecccccd 	.word	0x3ecccccd
 800ec10:	3e3a3325 	.word	0x3e3a3325
 800ec14:	3e924925 	.word	0x3e924925
 800ec18:	3f2aaaab 	.word	0x3f2aaaab

0800ec1c <_init>:
 800ec1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec1e:	bf00      	nop
 800ec20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec22:	bc08      	pop	{r3}
 800ec24:	469e      	mov	lr, r3
 800ec26:	4770      	bx	lr

0800ec28 <_fini>:
 800ec28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec2a:	bf00      	nop
 800ec2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec2e:	bc08      	pop	{r3}
 800ec30:	469e      	mov	lr, r3
 800ec32:	4770      	bx	lr
