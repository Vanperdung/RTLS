
rtls-anchor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6a8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800a890  0800a890  0001a890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adfc  0800adfc  00020250  2**0
                  CONTENTS
  4 .ARM          00000000  0800adfc  0800adfc  00020250  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800adfc  0800adfc  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adfc  0800adfc  0001adfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae00  0800ae00  0001ae00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800ae04  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000250  0800b054  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  0800b054  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146c5  00000000  00000000  00020279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003055  00000000  00000000  0003493e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00037998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  00038f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ccb3  00000000  00000000  0003a398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d5f  00000000  00000000  0005704b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1079  00000000  00000000  0006edaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010fe23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e20  00000000  00000000  0010fe74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000250 	.word	0x20000250
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a878 	.word	0x0800a878

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000254 	.word	0x20000254
 8000224:	0800a878 	.word	0x0800a878

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__gesf2>:
 800101c:	f04f 3cff 	mov.w	ip, #4294967295
 8001020:	e006      	b.n	8001030 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__lesf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	e002      	b.n	8001030 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__cmpsf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001034:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001038:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800103c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001040:	bf18      	it	ne
 8001042:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001046:	d011      	beq.n	800106c <__cmpsf2+0x40>
 8001048:	b001      	add	sp, #4
 800104a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800104e:	bf18      	it	ne
 8001050:	ea90 0f01 	teqne	r0, r1
 8001054:	bf58      	it	pl
 8001056:	ebb2 0003 	subspl.w	r0, r2, r3
 800105a:	bf88      	it	hi
 800105c:	17c8      	asrhi	r0, r1, #31
 800105e:	bf38      	it	cc
 8001060:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001064:	bf18      	it	ne
 8001066:	f040 0001 	orrne.w	r0, r0, #1
 800106a:	4770      	bx	lr
 800106c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001070:	d102      	bne.n	8001078 <__cmpsf2+0x4c>
 8001072:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001076:	d105      	bne.n	8001084 <__cmpsf2+0x58>
 8001078:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800107c:	d1e4      	bne.n	8001048 <__cmpsf2+0x1c>
 800107e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001082:	d0e1      	beq.n	8001048 <__cmpsf2+0x1c>
 8001084:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <__aeabi_cfrcmple>:
 800108c:	4684      	mov	ip, r0
 800108e:	4608      	mov	r0, r1
 8001090:	4661      	mov	r1, ip
 8001092:	e7ff      	b.n	8001094 <__aeabi_cfcmpeq>

08001094 <__aeabi_cfcmpeq>:
 8001094:	b50f      	push	{r0, r1, r2, r3, lr}
 8001096:	f7ff ffc9 	bl	800102c <__cmpsf2>
 800109a:	2800      	cmp	r0, #0
 800109c:	bf48      	it	mi
 800109e:	f110 0f00 	cmnmi.w	r0, #0
 80010a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a4 <__aeabi_fcmpeq>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff fff4 	bl	8001094 <__aeabi_cfcmpeq>
 80010ac:	bf0c      	ite	eq
 80010ae:	2001      	moveq	r0, #1
 80010b0:	2000      	movne	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmplt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffea 	bl	8001094 <__aeabi_cfcmpeq>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmple>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffe0 	bl	8001094 <__aeabi_cfcmpeq>
 80010d4:	bf94      	ite	ls
 80010d6:	2001      	movls	r0, #1
 80010d8:	2000      	movhi	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmpge>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffd2 	bl	800108c <__aeabi_cfrcmple>
 80010e8:	bf94      	ite	ls
 80010ea:	2001      	movls	r0, #1
 80010ec:	2000      	movhi	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmpgt>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffc8 	bl	800108c <__aeabi_cfrcmple>
 80010fc:	bf34      	ite	cc
 80010fe:	2001      	movcc	r0, #1
 8001100:	2000      	movcs	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmpun>:
 8001108:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800110c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001110:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001114:	d102      	bne.n	800111c <__aeabi_fcmpun+0x14>
 8001116:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800111a:	d108      	bne.n	800112e <__aeabi_fcmpun+0x26>
 800111c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001120:	d102      	bne.n	8001128 <__aeabi_fcmpun+0x20>
 8001122:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001126:	d102      	bne.n	800112e <__aeabi_fcmpun+0x26>
 8001128:	f04f 0000 	mov.w	r0, #0
 800112c:	4770      	bx	lr
 800112e:	f04f 0001 	mov.w	r0, #1
 8001132:	4770      	bx	lr

08001134 <__aeabi_f2iz>:
 8001134:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001138:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800113c:	d30f      	bcc.n	800115e <__aeabi_f2iz+0x2a>
 800113e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001142:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001146:	d90d      	bls.n	8001164 <__aeabi_f2iz+0x30>
 8001148:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800114c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001150:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	bf18      	it	ne
 800115a:	4240      	negne	r0, r0
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2iz+0x3a>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d105      	bne.n	800117a <__aeabi_f2iz+0x46>
 800116e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001172:	bf08      	it	eq
 8001174:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr

08001180 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001194:	4b51      	ldr	r3, [pc, #324]	; (80012dc <MX_GPIO_Init+0x15c>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a50      	ldr	r2, [pc, #320]	; (80012dc <MX_GPIO_Init+0x15c>)
 800119a:	f043 0320 	orr.w	r3, r3, #32
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b4e      	ldr	r3, [pc, #312]	; (80012dc <MX_GPIO_Init+0x15c>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ac:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <MX_GPIO_Init+0x15c>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a4a      	ldr	r2, [pc, #296]	; (80012dc <MX_GPIO_Init+0x15c>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b48      	ldr	r3, [pc, #288]	; (80012dc <MX_GPIO_Init+0x15c>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b45      	ldr	r3, [pc, #276]	; (80012dc <MX_GPIO_Init+0x15c>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a44      	ldr	r2, [pc, #272]	; (80012dc <MX_GPIO_Init+0x15c>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b42      	ldr	r3, [pc, #264]	; (80012dc <MX_GPIO_Init+0x15c>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <MX_GPIO_Init+0x15c>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a3e      	ldr	r2, [pc, #248]	; (80012dc <MX_GPIO_Init+0x15c>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <MX_GPIO_Init+0x15c>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|EX_IO2_Pin|EX_IO3_Pin|EX_IO4_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	210f      	movs	r1, #15
 80011f8:	4839      	ldr	r0, [pc, #228]	; (80012e0 <MX_GPIO_Init+0x160>)
 80011fa:	f004 f823 	bl	8005244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	210e      	movs	r1, #14
 8001202:	4838      	ldr	r0, [pc, #224]	; (80012e4 <MX_GPIO_Init+0x164>)
 8001204:	f004 f81e 	bl	8005244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UWB_CS_GPIO_Port, UWB_CS_Pin, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	2110      	movs	r1, #16
 800120c:	4835      	ldr	r0, [pc, #212]	; (80012e4 <MX_GPIO_Init+0x164>)
 800120e:	f004 f819 	bl	8005244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UWB_RST_GPIO_Port, UWB_RST_Pin, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001218:	4833      	ldr	r0, [pc, #204]	; (80012e8 <MX_GPIO_Init+0x168>)
 800121a:	f004 f813 	bl	8005244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800121e:	2301      	movs	r3, #1
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2302      	movs	r3, #2
 800122c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	4619      	mov	r1, r3
 8001234:	482a      	ldr	r0, [pc, #168]	; (80012e0 <MX_GPIO_Init+0x160>)
 8001236:	f003 fe71 	bl	8004f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EX_IO2_Pin|EX_IO3_Pin|EX_IO4_Pin;
 800123a:	230e      	movs	r3, #14
 800123c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4619      	mov	r1, r3
 8001250:	4823      	ldr	r0, [pc, #140]	; (80012e0 <MX_GPIO_Init+0x160>)
 8001252:	f003 fe63 	bl	8004f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_Pin|INT_Pin;
 8001256:	f240 1301 	movw	r3, #257	; 0x101
 800125a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	4619      	mov	r1, r3
 800126a:	481e      	ldr	r0, [pc, #120]	; (80012e4 <MX_GPIO_Init+0x164>)
 800126c:	f003 fe56 	bl	8004f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED3_Pin|UWB_CS_Pin;
 8001270:	231e      	movs	r3, #30
 8001272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	4619      	mov	r1, r3
 8001286:	4817      	ldr	r0, [pc, #92]	; (80012e4 <MX_GPIO_Init+0x164>)
 8001288:	f003 fe48 	bl	8004f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800128c:	2301      	movs	r3, #1
 800128e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_GPIO_Init+0x16c>)
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <MX_GPIO_Init+0x168>)
 80012a0:	f003 fe3c 	bl	8004f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB_RST_Pin;
 80012a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UWB_RST_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	4619      	mov	r1, r3
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <MX_GPIO_Init+0x168>)
 80012be:	f003 fe2d 	bl	8004f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2006      	movs	r0, #6
 80012c8:	f003 fcaf 	bl	8004c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012cc:	2006      	movs	r0, #6
 80012ce:	f003 fcc8 	bl	8004c62 <HAL_NVIC_EnableIRQ>

}
 80012d2:	bf00      	nop
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40011000 	.word	0x40011000
 80012e4:	40010800 	.word	0x40010800
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	10110000 	.word	0x10110000

080012f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_I2C1_Init+0x50>)
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <MX_I2C1_Init+0x54>)
 80012f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_I2C1_Init+0x50>)
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <MX_I2C1_Init+0x58>)
 80012fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_I2C1_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_I2C1_Init+0x50>)
 800130e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001312:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_I2C1_Init+0x50>)
 800132e:	f003 ffc3 	bl	80052b8 <HAL_I2C_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001338:	f000 fc21 	bl	8001b7e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000026c 	.word	0x2000026c
 8001344:	40005400 	.word	0x40005400
 8001348:	00061a80 	.word	0x00061a80

0800134c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a15      	ldr	r2, [pc, #84]	; (80013bc <HAL_I2C_MspInit+0x70>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d123      	bne.n	80013b4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <HAL_I2C_MspInit+0x74>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <HAL_I2C_MspInit+0x74>)
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_I2C_MspInit+0x74>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001384:	23c0      	movs	r3, #192	; 0xc0
 8001386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001388:	2312      	movs	r3, #18
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4619      	mov	r1, r3
 8001396:	480b      	ldr	r0, [pc, #44]	; (80013c4 <HAL_I2C_MspInit+0x78>)
 8001398:	f003 fdc0 	bl	8004f1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_I2C_MspInit+0x74>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_I2C_MspInit+0x74>)
 80013a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a6:	61d3      	str	r3, [r2, #28]
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_I2C_MspInit+0x74>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013b4:	bf00      	nop
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40005400 	.word	0x40005400
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010c00 	.word	0x40010c00

080013c8 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1);
 80013d0:	1d39      	adds	r1, r7, #4
 80013d2:	2301      	movs	r3, #1
 80013d4:	2201      	movs	r2, #1
 80013d6:	4804      	ldr	r0, [pc, #16]	; (80013e8 <__io_putchar+0x20>)
 80013d8:	f005 feb5 	bl	8007146 <HAL_UART_Transmit>
  return ch;
 80013dc:	687b      	ldr	r3, [r7, #4]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200003bc 	.word	0x200003bc

080013ec <dwInteruptHandler>:
//		systemHandle.timeoutIsIntr = true;
//	}
//}

void dwInteruptHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	dwReadSystemEventStatusRegister(&device);
 80013f0:	481b      	ldr	r0, [pc, #108]	; (8001460 <dwInteruptHandler+0x74>)
 80013f2:	f001 fa2e 	bl	8002852 <dwReadSystemEventStatusRegister>
	if (dwIsTransmitDone(&device))
 80013f6:	481a      	ldr	r0, [pc, #104]	; (8001460 <dwInteruptHandler+0x74>)
 80013f8:	f002 f981 	bl	80036fe <dwIsTransmitDone>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <dwInteruptHandler+0x1c>
	{
		dwClearTransmitStatus(&device);
 8001402:	4817      	ldr	r0, [pc, #92]	; (8001460 <dwInteruptHandler+0x74>)
 8001404:	f002 fa4e 	bl	80038a4 <dwClearTransmitStatus>
	}
	if (dwIsReceiveTimestampAvailable(&device))
 8001408:	4815      	ldr	r0, [pc, #84]	; (8001460 <dwInteruptHandler+0x74>)
 800140a:	f002 f988 	bl	800371e <dwIsReceiveTimestampAvailable>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <dwInteruptHandler+0x2e>
	{
		dwClearReceiveTimestampAvailableStatus(&device);
 8001414:	4812      	ldr	r0, [pc, #72]	; (8001460 <dwInteruptHandler+0x74>)
 8001416:	f002 fa16 	bl	8003846 <dwClearReceiveTimestampAvailableStatus>
	}
	if (dwIsReceiveFailed(&device))
 800141a:	4811      	ldr	r0, [pc, #68]	; (8001460 <dwInteruptHandler+0x74>)
 800141c:	f002 f9ad 	bl	800377a <dwIsReceiveFailed>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <dwInteruptHandler+0x46>
	{
		dwClearReceiveStatus(&device);
 8001426:	480e      	ldr	r0, [pc, #56]	; (8001460 <dwInteruptHandler+0x74>)
 8001428:	f002 fa2a 	bl	8003880 <dwClearReceiveStatus>
		dwRxSoftReset(&device);
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <dwInteruptHandler+0x74>)
 800142e:	f001 f9c1 	bl	80027b4 <dwRxSoftReset>
	}
	if (dwIsReceiveTimeout(&device))
 8001432:	480b      	ldr	r0, [pc, #44]	; (8001460 <dwInteruptHandler+0x74>)
 8001434:	f002 f9f7 	bl	8003826 <dwIsReceiveTimeout>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <dwInteruptHandler+0x5e>
	{
		dwClearReceiveStatus(&device);
 800143e:	4808      	ldr	r0, [pc, #32]	; (8001460 <dwInteruptHandler+0x74>)
 8001440:	f002 fa1e 	bl	8003880 <dwClearReceiveStatus>
		dwRxSoftReset(&device);
 8001444:	4806      	ldr	r0, [pc, #24]	; (8001460 <dwInteruptHandler+0x74>)
 8001446:	f001 f9b5 	bl	80027b4 <dwRxSoftReset>
	}
	if (dwIsReceiveDone(&device))
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <dwInteruptHandler+0x74>)
 800144c:	f002 f977 	bl	800373e <dwIsReceiveDone>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <dwInteruptHandler+0x70>
	{
		dwClearReceiveStatus(&device);
 8001456:	4802      	ldr	r0, [pc, #8]	; (8001460 <dwInteruptHandler+0x74>)
 8001458:	f002 fa12 	bl	8003880 <dwClearReceiveStatus>
	}
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000008 	.word	0x20000008
 8001464:	00000000 	.word	0x00000000

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800146e:	af02      	add	r7, sp, #8
	respHandle_t respHandle;
	locMess_t locMess;
	packet_t pollPacket;
	packet_t respPacket;
	packet_t locPacket;
	uint16_t twrTimeStart = TWR_SLOT_NUM * 4500 + 10000;
 8001470:	f647 63f4 	movw	r3, #32500	; 0x7ef4
 8001474:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001478:	f003 fa7a 	bl	8004970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147c:	f000 fb3a 	bl	8001af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001480:	f7ff fe7e 	bl	8001180 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001484:	f7ff ff34 	bl	80012f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001488:	f000 fb7e 	bl	8001b88 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800148c:	f000 fe14 	bl	80020b8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001490:	f000 fe3c 	bl	800210c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001494:	f000 fd3c 	bl	8001f10 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001498:	f000 fd8a 	bl	8001fb0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  logi("[ANCHOR START]");
 800149c:	f003 fac0 	bl	8004a20 <HAL_GetTick>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4619      	mov	r1, r3
 80014a4:	488f      	ldr	r0, [pc, #572]	; (80016e4 <main+0x27c>)
 80014a6:	f006 ff79 	bl	800839c <iprintf>
  MAC80215_PACKET_INIT(pollPacket, MAC802154_TYPE_DATA);
 80014aa:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 80014ae:	2201      	movs	r2, #1
 80014b0:	f362 0302 	bfi	r3, r2, #0, #3
 80014b4:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 80014b8:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 80014bc:	f36f 03c3 	bfc	r3, #3, #1
 80014c0:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 80014c4:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 80014c8:	f36f 1304 	bfc	r3, #4, #1
 80014cc:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 80014d0:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 80014d4:	f36f 1345 	bfc	r3, #5, #1
 80014d8:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 80014dc:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 80014e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e4:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 80014e8:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80014ec:	2202      	movs	r2, #2
 80014ee:	f362 0383 	bfi	r3, r2, #2, #2
 80014f2:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 80014f6:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80014fa:	2201      	movs	r2, #1
 80014fc:	f362 1305 	bfi	r3, r2, #4, #2
 8001500:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 8001504:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8001508:	2202      	movs	r2, #2
 800150a:	f362 1387 	bfi	r3, r2, #6, #2
 800150e:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 8001512:	2300      	movs	r3, #0
 8001514:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001518:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 800151c:	2300      	movs	r3, #0
 800151e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001522:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
  MAC80215_PACKET_INIT(respPacket, MAC802154_TYPE_DATA);
 8001526:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800152a:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 800152e:	7813      	ldrb	r3, [r2, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	f361 0302 	bfi	r3, r1, #0, #3
 8001536:	7013      	strb	r3, [r2, #0]
 8001538:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800153c:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8001540:	7813      	ldrb	r3, [r2, #0]
 8001542:	f36f 03c3 	bfc	r3, #3, #1
 8001546:	7013      	strb	r3, [r2, #0]
 8001548:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800154c:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8001550:	7813      	ldrb	r3, [r2, #0]
 8001552:	f36f 1304 	bfc	r3, #4, #1
 8001556:	7013      	strb	r3, [r2, #0]
 8001558:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800155c:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8001560:	7813      	ldrb	r3, [r2, #0]
 8001562:	f36f 1345 	bfc	r3, #5, #1
 8001566:	7013      	strb	r3, [r2, #0]
 8001568:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800156c:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8001570:	7813      	ldrb	r3, [r2, #0]
 8001572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001576:	7013      	strb	r3, [r2, #0]
 8001578:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800157c:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8001580:	7853      	ldrb	r3, [r2, #1]
 8001582:	2102      	movs	r1, #2
 8001584:	f361 0383 	bfi	r3, r1, #2, #2
 8001588:	7053      	strb	r3, [r2, #1]
 800158a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800158e:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8001592:	7853      	ldrb	r3, [r2, #1]
 8001594:	2101      	movs	r1, #1
 8001596:	f361 1305 	bfi	r3, r1, #4, #2
 800159a:	7053      	strb	r3, [r2, #1]
 800159c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80015a0:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80015a4:	7853      	ldrb	r3, [r2, #1]
 80015a6:	2102      	movs	r1, #2
 80015a8:	f361 1387 	bfi	r3, r1, #6, #2
 80015ac:	7053      	strb	r3, [r2, #1]
 80015ae:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80015b2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80015b6:	2200      	movs	r2, #0
 80015b8:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80015bc:	70da      	strb	r2, [r3, #3]
 80015be:	2200      	movs	r2, #0
 80015c0:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80015c4:	711a      	strb	r2, [r3, #4]
  dwInit(&device);
 80015c6:	4848      	ldr	r0, [pc, #288]	; (80016e8 <main+0x280>)
 80015c8:	f000 ff4a 	bl	8002460 <dwInit>
  if (dwConfigure(&device) == DW_ERROR_OK)
 80015cc:	4846      	ldr	r0, [pc, #280]	; (80016e8 <main+0x280>)
 80015ce:	f000 ff69 	bl	80024a4 <dwConfigure>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d112      	bne.n	80015fe <main+0x196>
  {
    dwEnableAllLeds(&device);
 80015d8:	4843      	ldr	r0, [pc, #268]	; (80016e8 <main+0x280>)
 80015da:	f001 f836 	bl	800264a <dwEnableAllLeds>
  else
  {
    loge("[Configure failed]");
    while (1);
  }
  dwNewConfiguration(&device);
 80015de:	4842      	ldr	r0, [pc, #264]	; (80016e8 <main+0x280>)
 80015e0:	f001 fbf1 	bl	8002dc6 <dwNewConfiguration>
  dwSetDefaults(&device);
 80015e4:	4840      	ldr	r0, [pc, #256]	; (80016e8 <main+0x280>)
 80015e6:	f001 fe25 	bl	8003234 <dwSetDefaults>
  dwCommitConfiguration(&device);
 80015ea:	483f      	ldr	r0, [pc, #252]	; (80016e8 <main+0x280>)
 80015ec:	f001 fc05 	bl	8002dfa <dwCommitConfiguration>
  TIM1->CNT = 0;
 80015f0:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <main+0x284>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(&htim1);
 80015f6:	483e      	ldr	r0, [pc, #248]	; (80016f0 <main+0x288>)
 80015f8:	f005 f978 	bl	80068ec <HAL_TIM_Base_Start>
 80015fc:	e008      	b.n	8001610 <main+0x1a8>
    loge("[Configure failed]");
 80015fe:	f003 fa0f 	bl	8004a20 <HAL_GetTick>
 8001602:	4601      	mov	r1, r0
 8001604:	23e4      	movs	r3, #228	; 0xe4
 8001606:	4a3b      	ldr	r2, [pc, #236]	; (80016f4 <main+0x28c>)
 8001608:	483b      	ldr	r0, [pc, #236]	; (80016f8 <main+0x290>)
 800160a:	f006 fec7 	bl	800839c <iprintf>
    while (1);
 800160e:	e7fe      	b.n	800160e <main+0x1a6>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (!(systemHandle.anchorSync))
 8001610:	4b3a      	ldr	r3, [pc, #232]	; (80016fc <main+0x294>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	f083 0301 	eor.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d072      	beq.n	8001704 <main+0x29c>
	  {
		  dwNewReceive(&device);
 800161e:	4832      	ldr	r0, [pc, #200]	; (80016e8 <main+0x280>)
 8001620:	f001 fb1b 	bl	8002c5a <dwNewReceive>
		  dwSetDefaults(&device);
 8001624:	4830      	ldr	r0, [pc, #192]	; (80016e8 <main+0x280>)
 8001626:	f001 fe05 	bl	8003234 <dwSetDefaults>
		  dwStartReceive(&device);
 800162a:	482f      	ldr	r0, [pc, #188]	; (80016e8 <main+0x280>)
 800162c:	f001 fb2d 	bl	8002c8a <dwStartReceive>
		  do
		  {
			  dwReadSystemEventStatusRegister(&device);
 8001630:	482d      	ldr	r0, [pc, #180]	; (80016e8 <main+0x280>)
 8001632:	f001 f90e 	bl	8002852 <dwReadSystemEventStatusRegister>
		  } while (!(device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)));
 8001636:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <main+0x280>)
 8001638:	7e9b      	ldrb	r3, [r3, #26]
 800163a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f6      	beq.n	8001630 <main+0x1c8>
		  dwInteruptHandler();
 8001642:	f7ff fed3 	bl	80013ec <dwInteruptHandler>
		  timePollRecv = TIM1->CNT;
 8001646:	4b29      	ldr	r3, [pc, #164]	; (80016ec <main+0x284>)
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		  memset(&pollHandle.pollMess, 0, sizeof(pollHandle.pollMess));
 800164e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001652:	220d      	movs	r2, #13
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f006 fa38 	bl	8007acc <memset>
		  int dataLen = dwGetDataLength(&device);
 800165c:	4822      	ldr	r0, [pc, #136]	; (80016e8 <main+0x280>)
 800165e:	f001 fe89 	bl	8003374 <dwGetDataLength>
 8001662:	4603      	mov	r3, r0
 8001664:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
		  if (dataLen > 0)
 8001668:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800166c:	2b00      	cmp	r3, #0
 800166e:	f340 81df 	ble.w	8001a30 <main+0x5c8>
		  {
			  dwGetData(&device, (uint8_t *)&pollPacket, dataLen);
 8001672:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8001676:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800167a:	4619      	mov	r1, r3
 800167c:	481a      	ldr	r0, [pc, #104]	; (80016e8 <main+0x280>)
 800167e:	f001 feb1 	bl	80033e4 <dwGetData>
			  if (pollPacket.payload[POLL_ID] != TYPE_POLL)
 8001682:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8001686:	2b21      	cmp	r3, #33	; 0x21
 8001688:	f040 81d2 	bne.w	8001a30 <main+0x5c8>
			  {

			  }
			  else
			  {
				  memcpy(&pollHandle.pollMess, pollPacket.payload, sizeof(pollHandle.pollMess));
 800168c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001690:	f207 1421 	addw	r4, r7, #289	; 0x121
 8001694:	6820      	ldr	r0, [r4, #0]
 8001696:	6861      	ldr	r1, [r4, #4]
 8001698:	68a2      	ldr	r2, [r4, #8]
 800169a:	c307      	stmia	r3!, {r0, r1, r2}
 800169c:	7b22      	ldrb	r2, [r4, #12]
 800169e:	701a      	strb	r2, [r3, #0]
				  systemHandle.anchorSync = true;
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <main+0x294>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
				  timePollProcess = TIM1->CNT - timePollRecv;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <main+0x284>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
				  TIM1->CNT = timePollProcess + OFFSET + twrTimeStart;
 80016b6:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80016ba:	f103 02f5 	add.w	r2, r3, #245	; 0xf5
 80016be:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80016c2:	441a      	add	r2, r3
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <main+0x284>)
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24
				  cntSync = TIM1->CNT;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <main+0x284>)
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
				  logi("Sync clock, CNT: %d", cntSync);
 80016d0:	f003 f9a6 	bl	8004a20 <HAL_GetTick>
 80016d4:	4601      	mov	r1, r0
 80016d6:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 80016da:	461a      	mov	r2, r3
 80016dc:	4808      	ldr	r0, [pc, #32]	; (8001700 <main+0x298>)
 80016de:	f006 fe5d 	bl	800839c <iprintf>
 80016e2:	e1a5      	b.n	8001a30 <main+0x5c8>
 80016e4:	0800a890 	.word	0x0800a890
 80016e8:	20000008 	.word	0x20000008
 80016ec:	40012c00 	.word	0x40012c00
 80016f0:	2000032c 	.word	0x2000032c
 80016f4:	0800a8b4 	.word	0x0800a8b4
 80016f8:	0800a8c8 	.word	0x0800a8c8
 80016fc:	200002c0 	.word	0x200002c0
 8001700:	0800a8f8 	.word	0x0800a8f8

		  }
	  }
	  else
	  {
		  while (TIM1->CNT < twrTimeStart);
 8001704:	bf00      	nop
 8001706:	4bbe      	ldr	r3, [pc, #760]	; (8001a00 <main+0x598>)
 8001708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800170e:	429a      	cmp	r2, r3
 8001710:	d3f9      	bcc.n	8001706 <main+0x29e>
		  systemHandle.timePollStart = TIM1->CNT;
 8001712:	4bbb      	ldr	r3, [pc, #748]	; (8001a00 <main+0x598>)
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	b29a      	uxth	r2, r3
 8001718:	4bba      	ldr	r3, [pc, #744]	; (8001a04 <main+0x59c>)
 800171a:	805a      	strh	r2, [r3, #2]
//		  TIM2->CNT = 1;
//		  TIM2->ARR = 600;
//		  HAL_TIM_Base_Start_IT(&htim2);
		  dwSetReceiveWaitTimeout(&device, 600);
 800171c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001720:	48b9      	ldr	r0, [pc, #740]	; (8001a08 <main+0x5a0>)
 8001722:	f001 f92f 	bl	8002984 <dwSetReceiveWaitTimeout>
		  dwWriteSystemConfigurationRegister(&device);
 8001726:	48b8      	ldr	r0, [pc, #736]	; (8001a08 <main+0x5a0>)
 8001728:	f001 f882 	bl	8002830 <dwWriteSystemConfigurationRegister>
		  dwNewReceive(&device);
 800172c:	48b6      	ldr	r0, [pc, #728]	; (8001a08 <main+0x5a0>)
 800172e:	f001 fa94 	bl	8002c5a <dwNewReceive>
		  dwSetDefaults(&device);
 8001732:	48b5      	ldr	r0, [pc, #724]	; (8001a08 <main+0x5a0>)
 8001734:	f001 fd7e 	bl	8003234 <dwSetDefaults>
		  dwStartReceive(&device);
 8001738:	48b3      	ldr	r0, [pc, #716]	; (8001a08 <main+0x5a0>)
 800173a:	f001 faa6 	bl	8002c8a <dwStartReceive>
		  do
		  {
			  dwReadSystemEventStatusRegister(&device);
 800173e:	48b2      	ldr	r0, [pc, #712]	; (8001a08 <main+0x5a0>)
 8001740:	f001 f887 	bl	8002852 <dwReadSystemEventStatusRegister>
		  } while (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))));
 8001744:	4bb0      	ldr	r3, [pc, #704]	; (8001a08 <main+0x5a0>)
 8001746:	7e9b      	ldrb	r3, [r3, #26]
 8001748:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800174c:	2b00      	cmp	r3, #0
 800174e:	d105      	bne.n	800175c <main+0x2f4>
 8001750:	4bad      	ldr	r3, [pc, #692]	; (8001a08 <main+0x5a0>)
 8001752:	7edb      	ldrb	r3, [r3, #27]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <main+0x2d6>
		  dwInteruptHandler();
 800175c:	f7ff fe46 	bl	80013ec <dwInteruptHandler>
		  timePollRecv = TIM1->CNT;
 8001760:	4ba7      	ldr	r3, [pc, #668]	; (8001a00 <main+0x598>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
//		  HAL_TIM_Base_Stop_IT(&htim2);
		  memset(&pollHandle.pollMess, 0, sizeof(pollHandle.pollMess));
 8001768:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800176c:	220d      	movs	r2, #13
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f006 f9ab 	bl	8007acc <memset>
		  if (device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8))
 8001776:	4ba4      	ldr	r3, [pc, #656]	; (8001a08 <main+0x5a0>)
 8001778:	7e9b      	ldrb	r3, [r3, #26]
 800177a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 814b 	beq.w	8001a1a <main+0x5b2>
		  {
//			  systemHandle.dwIsIntr = false;
			  int dataLen = dwGetDataLength(&device);
 8001784:	48a0      	ldr	r0, [pc, #640]	; (8001a08 <main+0x5a0>)
 8001786:	f001 fdf5 	bl	8003374 <dwGetDataLength>
 800178a:	4603      	mov	r3, r0
 800178c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
			  if (dataLen > 0)
 8001790:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001794:	2b00      	cmp	r3, #0
 8001796:	f340 814b 	ble.w	8001a30 <main+0x5c8>
			  {
				  dwGetData(&device, (uint8_t *)&pollPacket, dataLen);
 800179a:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800179e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017a2:	4619      	mov	r1, r3
 80017a4:	4898      	ldr	r0, [pc, #608]	; (8001a08 <main+0x5a0>)
 80017a6:	f001 fe1d 	bl	80033e4 <dwGetData>
				  if (pollPacket.payload[POLL_ID] != TYPE_POLL)
 80017aa:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 80017ae:	2b21      	cmp	r3, #33	; 0x21
 80017b0:	f040 813e 	bne.w	8001a30 <main+0x5c8>
					  // Recv fail
				  }
				  else
				  {
					  // Recv Poll Message from Tag
					  memcpy(&pollHandle.pollMess, pollPacket.payload, sizeof(pollHandle.pollMess));
 80017b4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80017b8:	f207 1421 	addw	r4, r7, #289	; 0x121
 80017bc:	6820      	ldr	r0, [r4, #0]
 80017be:	6861      	ldr	r1, [r4, #4]
 80017c0:	68a2      	ldr	r2, [r4, #8]
 80017c2:	c307      	stmia	r3!, {r0, r1, r2}
 80017c4:	7b22      	ldrb	r2, [r4, #12]
 80017c6:	701a      	strb	r2, [r3, #0]
					  timePollProcess = TIM1->CNT - timePollRecv;
 80017c8:	4b8d      	ldr	r3, [pc, #564]	; (8001a00 <main+0x598>)
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
					  TIM1->CNT = timePollProcess + OFFSET + twrTimeStart;
 80017d8:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80017dc:	f103 02f5 	add.w	r2, r3, #245	; 0xf5
 80017e0:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80017e4:	441a      	add	r2, r3
 80017e6:	4b86      	ldr	r3, [pc, #536]	; (8001a00 <main+0x598>)
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
					  cntSync = TIM1->CNT;
 80017ea:	4b85      	ldr	r3, [pc, #532]	; (8001a00 <main+0x598>)
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
					  uint8_t *addrIndex = (uint8_t*)strstr(pollHandle.pollMess.anchorAddr, anchorBaseAddr);
 80017f2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80017f6:	3305      	adds	r3, #5
 80017f8:	4984      	ldr	r1, [pc, #528]	; (8001a0c <main+0x5a4>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	f006 fde6 	bl	80083cc <strstr>
 8001800:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
					  if (addrIndex != NULL)
 8001804:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 8111 	beq.w	8001a30 <main+0x5c8>
					  {
						  // Have my anchor address
						  dwGetReceiveTimestamp(&device, &pollHandle.timestamp);
 800180e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001812:	3310      	adds	r3, #16
 8001814:	4619      	mov	r1, r3
 8001816:	487c      	ldr	r0, [pc, #496]	; (8001a08 <main+0x5a0>)
 8001818:	f001 fdfa 	bl	8003410 <dwGetReceiveTimestamp>
						  uint8_t respIndex = (uint8_t)(addrIndex - pollHandle.pollMess.anchorAddr) / 2;
 800181c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001820:	3305      	adds	r3, #5
 8001822:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	085b      	lsrs	r3, r3, #1
 800182c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
						  systemHandle.timePollEnd = TIM1->CNT;
 8001830:	4b73      	ldr	r3, [pc, #460]	; (8001a00 <main+0x598>)
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	b29a      	uxth	r2, r3
 8001836:	4b73      	ldr	r3, [pc, #460]	; (8001a04 <main+0x59c>)
 8001838:	809a      	strh	r2, [r3, #4]
						  while (TIM1->CNT < twrTimeStart + 750 + 750 * respIndex);
 800183a:	bf00      	nop
 800183c:	4b70      	ldr	r3, [pc, #448]	; (8001a00 <main+0x598>)
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8001844:	f202 21ee 	addw	r1, r2, #750	; 0x2ee
 8001848:	f897 21ff 	ldrb.w	r2, [r7, #511]	; 0x1ff
 800184c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001850:	fb00 f202 	mul.w	r2, r0, r2
 8001854:	440a      	add	r2, r1
 8001856:	4293      	cmp	r3, r2
 8001858:	d3f0      	bcc.n	800183c <main+0x3d4>
						  systemHandle.timeRespStart = TIM1->CNT;
 800185a:	4b69      	ldr	r3, [pc, #420]	; (8001a00 <main+0x598>)
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <main+0x59c>)
 8001862:	80da      	strh	r2, [r3, #6]
 8001864:	f8b7 311f 	ldrh.w	r3, [r7, #287]	; 0x11f
 8001868:	b29a      	uxth	r2, r3
//						  while (TIM1->CNT < twrTimeStart + 750 + 750 * respIndex + 50);
						  memcpy(respPacket.destAddress, pollPacket.sourceAddress, sizeof(pollPacket.sourceAddress));
 800186a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800186e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001872:	f8a3 2005 	strh.w	r2, [r3, #5]
 8001876:	4b65      	ldr	r3, [pc, #404]	; (8001a0c <main+0x5a4>)
 8001878:	881a      	ldrh	r2, [r3, #0]
						  memcpy(respPacket.sourceAddress, anchorBaseAddr, sizeof(anchorBaseAddr));
 800187a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800187e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001882:	f8a3 2007 	strh.w	r2, [r3, #7]
						  respHandle.respMess.messID = TYPE_RESP;
 8001886:	2332      	movs	r3, #50	; 0x32
 8001888:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
						  respHandle.respMess.x.xVal = X;
 800188c:	4b60      	ldr	r3, [pc, #384]	; (8001a10 <main+0x5a8>)
 800188e:	f8c7 31b1 	str.w	r3, [r7, #433]	; 0x1b1
						  respHandle.respMess.y.yVal = Y;
 8001892:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001896:	f8c7 31b5 	str.w	r3, [r7, #437]	; 0x1b5
						  memcpy(respHandle.respMess.rxTimestamp.timeRaw, pollHandle.timestamp.timeRaw, sizeof(pollHandle.timestamp.timeRaw));
 800189a:	f207 13b9 	addw	r3, r7, #441	; 0x1b9
 800189e:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80018a2:	6810      	ldr	r0, [r2, #0]
 80018a4:	6018      	str	r0, [r3, #0]
 80018a6:	7912      	ldrb	r2, [r2, #4]
 80018a8:	711a      	strb	r2, [r3, #4]
						  uint64_t delayTx = US_TO_DECAWAVE_TICK * RSP_DELAY;
 80018aa:	a353      	add	r3, pc, #332	; (adr r3, 80019f8 <main+0x590>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	e9c7 237c 	strd	r2, r3, [r7, #496]	; 0x1f0
						  respHandle.timestamp.timeFull = dwSetTxDelay(&device, delayTx);
 80018b4:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80018b8:	4853      	ldr	r0, [pc, #332]	; (8001a08 <main+0x5a0>)
 80018ba:	f001 fb06 	bl	8002eca <dwSetTxDelay>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
						  memcpy(respHandle.respMess.txTimestamp.timeRaw, respHandle.timestamp.timeRaw, sizeof(respHandle.timestamp.timeRaw));
 80018c6:	f507 73df 	add.w	r3, r7, #446	; 0x1be
 80018ca:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80018ce:	6810      	ldr	r0, [r2, #0]
 80018d0:	6018      	str	r0, [r3, #0]
 80018d2:	7912      	ldrb	r2, [r2, #4]
 80018d4:	711a      	strb	r2, [r3, #4]
						  memcpy(respPacket.payload, (uint8_t*)&respHandle.respMess, sizeof(respHandle.respMess));
 80018d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80018da:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018de:	f103 0509 	add.w	r5, r3, #9
 80018e2:	f507 74d8 	add.w	r4, r7, #432	; 0x1b0
 80018e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e8:	6028      	str	r0, [r5, #0]
 80018ea:	6069      	str	r1, [r5, #4]
 80018ec:	60aa      	str	r2, [r5, #8]
 80018ee:	60eb      	str	r3, [r5, #12]
 80018f0:	8823      	ldrh	r3, [r4, #0]
 80018f2:	78a2      	ldrb	r2, [r4, #2]
 80018f4:	822b      	strh	r3, [r5, #16]
 80018f6:	4613      	mov	r3, r2
 80018f8:	74ab      	strb	r3, [r5, #18]
						  dwNewTransmit(&device);
 80018fa:	4843      	ldr	r0, [pc, #268]	; (8001a08 <main+0x5a0>)
 80018fc:	f001 f9f1 	bl	8002ce2 <dwNewTransmit>
						  dwSetDefaults(&device);
 8001900:	4841      	ldr	r0, [pc, #260]	; (8001a08 <main+0x5a0>)
 8001902:	f001 fc97 	bl	8003234 <dwSetDefaults>
						  dwSetData(&device, (uint8_t *)&respPacket, MAC802154_HEADER_LENGTH + sizeof(respHandle.respMess));
 8001906:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800190a:	221c      	movs	r2, #28
 800190c:	4619      	mov	r1, r3
 800190e:	483e      	ldr	r0, [pc, #248]	; (8001a08 <main+0x5a0>)
 8001910:	f001 fcee 	bl	80032f0 <dwSetData>
						  dwStartTransmit(&device, true);
 8001914:	2101      	movs	r1, #1
 8001916:	483c      	ldr	r0, [pc, #240]	; (8001a08 <main+0x5a0>)
 8001918:	f001 f9fb 	bl	8002d12 <dwStartTransmit>
//						  while (!(systemHandle.dwIsIntr == true));
//						  dwReadSystemEventMaskRegister(&device);
						  do
						  {
							  dwReadSystemEventStatusRegister(&device);
 800191c:	483a      	ldr	r0, [pc, #232]	; (8001a08 <main+0x5a0>)
 800191e:	f000 ff98 	bl	8002852 <dwReadSystemEventStatusRegister>
						  } while (!(device.sysstatus[0] & (1 << TXFRS_BIT)));
 8001922:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <main+0x5a0>)
 8001924:	7e5b      	ldrb	r3, [r3, #25]
 8001926:	b25b      	sxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	daf7      	bge.n	800191c <main+0x4b4>
						  dwInteruptHandler();
 800192c:	f7ff fd5e 	bl	80013ec <dwInteruptHandler>
						  systemHandle.timeRespEnd = TIM1->CNT;
 8001930:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <main+0x598>)
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	b29a      	uxth	r2, r3
 8001936:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <main+0x59c>)
 8001938:	811a      	strh	r2, [r3, #8]
//						  systemHandle.dwIsIntr = false;

						  // Wait for Loc slot
						  while (TIM1->CNT < twrTimeStart + 750 + 750 * 4);
 800193a:	bf00      	nop
 800193c:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <main+0x598>)
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8001944:	f602 62a6 	addw	r2, r2, #3750	; 0xea6
 8001948:	4293      	cmp	r3, r2
 800194a:	d3f7      	bcc.n	800193c <main+0x4d4>
						  systemHandle.timeLocStart = TIM1->CNT;
 800194c:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <main+0x598>)
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	b29a      	uxth	r2, r3
 8001952:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <main+0x59c>)
 8001954:	815a      	strh	r2, [r3, #10]
						  dwSetReceiveWaitTimeout(&device, 500);
 8001956:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800195a:	482b      	ldr	r0, [pc, #172]	; (8001a08 <main+0x5a0>)
 800195c:	f001 f812 	bl	8002984 <dwSetReceiveWaitTimeout>
						  dwWriteSystemConfigurationRegister(&device);
 8001960:	4829      	ldr	r0, [pc, #164]	; (8001a08 <main+0x5a0>)
 8001962:	f000 ff65 	bl	8002830 <dwWriteSystemConfigurationRegister>
						  dwNewReceive(&device);
 8001966:	4828      	ldr	r0, [pc, #160]	; (8001a08 <main+0x5a0>)
 8001968:	f001 f977 	bl	8002c5a <dwNewReceive>
						  dwSetDefaults(&device);
 800196c:	4826      	ldr	r0, [pc, #152]	; (8001a08 <main+0x5a0>)
 800196e:	f001 fc61 	bl	8003234 <dwSetDefaults>
						  dwStartReceive(&device);
 8001972:	4825      	ldr	r0, [pc, #148]	; (8001a08 <main+0x5a0>)
 8001974:	f001 f989 	bl	8002c8a <dwStartReceive>
						  do
						  {
							  dwReadSystemEventStatusRegister(&device);
 8001978:	4823      	ldr	r0, [pc, #140]	; (8001a08 <main+0x5a0>)
 800197a:	f000 ff6a 	bl	8002852 <dwReadSystemEventStatusRegister>
						  } while (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))));
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <main+0x5a0>)
 8001980:	7e9b      	ldrb	r3, [r3, #26]
 8001982:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001986:	2b00      	cmp	r3, #0
 8001988:	d105      	bne.n	8001996 <main+0x52e>
 800198a:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <main+0x5a0>)
 800198c:	7edb      	ldrb	r3, [r3, #27]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <main+0x510>
						  if (device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8))
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <main+0x5a0>)
 8001998:	7e9b      	ldrb	r3, [r3, #26]
 800199a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d023      	beq.n	80019ea <main+0x582>
						  {
							  // Recv Loc message
							  int dataLen = dwGetDataLength(&device);
 80019a2:	4819      	ldr	r0, [pc, #100]	; (8001a08 <main+0x5a0>)
 80019a4:	f001 fce6 	bl	8003374 <dwGetDataLength>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
							  if (dataLen > 0)
 80019ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	dd19      	ble.n	80019ea <main+0x582>
							  {
								  dwGetData(&device, (uint8_t *)&locPacket, dataLen);
 80019b6:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80019ba:	463b      	mov	r3, r7
 80019bc:	4619      	mov	r1, r3
 80019be:	4812      	ldr	r0, [pc, #72]	; (8001a08 <main+0x5a0>)
 80019c0:	f001 fd10 	bl	80033e4 <dwGetData>
								  if (locPacket.payload[LOC_ID] != TYPE_LOC)
 80019c4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019c8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80019cc:	7a5b      	ldrb	r3, [r3, #9]
 80019ce:	2b43      	cmp	r3, #67	; 0x43
 80019d0:	d10b      	bne.n	80019ea <main+0x582>
								  {

								  }
								  else
								  {
									  memcpy((uint8_t*)&locMess, locPacket.payload, sizeof(locMess));
 80019d2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019d6:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 80019da:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80019de:	3209      	adds	r2, #9
 80019e0:	6810      	ldr	r0, [r2, #0]
 80019e2:	6851      	ldr	r1, [r2, #4]
 80019e4:	c303      	stmia	r3!, {r0, r1}
 80019e6:	8912      	ldrh	r2, [r2, #8]
 80019e8:	801a      	strh	r2, [r3, #0]
						  else if (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))
						  {
							  // RX timeout
//							  loge("RX Loc message timeout");
						  }
						  systemHandle.timeLocEnd = TIM1->CNT;
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <main+0x598>)
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	e010      	b.n	8001a14 <main+0x5ac>
 80019f2:	bf00      	nop
 80019f4:	f3af 8000 	nop.w
 80019f8:	015f0090 	.word	0x015f0090
 80019fc:	00000000 	.word	0x00000000
 8001a00:	40012c00 	.word	0x40012c00
 8001a04:	200002c0 	.word	0x200002c0
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	3e99999a 	.word	0x3e99999a
 8001a14:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <main+0x670>)
 8001a16:	819a      	strh	r2, [r3, #12]
 8001a18:	e00a      	b.n	8001a30 <main+0x5c8>
			  {
				  // RX fail
			  }

		  }
		  else if (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))
 8001a1a:	4b30      	ldr	r3, [pc, #192]	; (8001adc <main+0x674>)
 8001a1c:	7edb      	ldrb	r3, [r3, #27]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <main+0x5c8>
		  {
			  // RX timeout
//			  dwIdle(&device);
//			  systemHandle.timeoutIsIntr = false;
//			  loge("RX Poll message timeout");
			  systemHandle.timePollEnd = TIM1->CNT;
 8001a26:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <main+0x678>)
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <main+0x670>)
 8001a2e:	809a      	strh	r2, [r3, #4]
		  }
	  }
	  printf("Poll: start %d, end %d, delta %d\r\n", systemHandle.timePollStart, systemHandle.timePollEnd, systemHandle.timePollEnd - systemHandle.timePollStart);
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <main+0x670>)
 8001a32:	885b      	ldrh	r3, [r3, #2]
 8001a34:	4619      	mov	r1, r3
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <main+0x670>)
 8001a38:	889b      	ldrh	r3, [r3, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <main+0x670>)
 8001a3e:	889b      	ldrh	r3, [r3, #4]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <main+0x670>)
 8001a44:	885b      	ldrh	r3, [r3, #2]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4826      	ldr	r0, [pc, #152]	; (8001ae4 <main+0x67c>)
 8001a4c:	f006 fca6 	bl	800839c <iprintf>
	  printf("Resp: start %d, end %d, delta %d\r\n", systemHandle.timeRespStart, systemHandle.timeRespEnd, systemHandle.timeRespEnd - systemHandle.timeRespStart);
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <main+0x670>)
 8001a52:	88db      	ldrh	r3, [r3, #6]
 8001a54:	4619      	mov	r1, r3
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <main+0x670>)
 8001a58:	891b      	ldrh	r3, [r3, #8]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <main+0x670>)
 8001a5e:	891b      	ldrh	r3, [r3, #8]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <main+0x670>)
 8001a64:	88db      	ldrh	r3, [r3, #6]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	4602      	mov	r2, r0
 8001a6a:	481f      	ldr	r0, [pc, #124]	; (8001ae8 <main+0x680>)
 8001a6c:	f006 fc96 	bl	800839c <iprintf>
	  if (locMess.messID)
 8001a70:	f897 31a4 	ldrb.w	r3, [r7, #420]	; 0x1a4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01e      	beq.n	8001ab6 <main+0x64e>
	  {
		  printf("Loc: start %d, end %d, delta %d\r\n", systemHandle.timeLocStart, systemHandle.timeLocEnd, systemHandle.timeLocStart - systemHandle.timeLocStart);
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <main+0x670>)
 8001a7a:	895b      	ldrh	r3, [r3, #10]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <main+0x670>)
 8001a80:	899b      	ldrh	r3, [r3, #12]
 8001a82:	461a      	mov	r2, r3
 8001a84:	2300      	movs	r3, #0
 8001a86:	4819      	ldr	r0, [pc, #100]	; (8001aec <main+0x684>)
 8001a88:	f006 fc88 	bl	800839c <iprintf>
		  printf("X: %0.2f, Y: %0.2f\r\n", locMess.x.xVal, locMess.y.yVal);
 8001a8c:	f8d7 31a6 	ldr.w	r3, [r7, #422]	; 0x1a6
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fd35 	bl	8000500 <__aeabi_f2d>
 8001a96:	4604      	mov	r4, r0
 8001a98:	460d      	mov	r5, r1
 8001a9a:	f8d7 31aa 	ldr.w	r3, [r7, #426]	; 0x1aa
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fd2e 	bl	8000500 <__aeabi_f2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	e9cd 2300 	strd	r2, r3, [sp]
 8001aac:	4622      	mov	r2, r4
 8001aae:	462b      	mov	r3, r5
 8001ab0:	480f      	ldr	r0, [pc, #60]	; (8001af0 <main+0x688>)
 8001ab2:	f006 fc73 	bl	800839c <iprintf>
	  }
	  memset(&locMess, 0, sizeof(locMess));
 8001ab6:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001aba:	220a      	movs	r2, #10
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f006 f804 	bl	8007acc <memset>
	  while (!((TIM1->CNT > 0) && (TIM1->CNT < 10)));
 8001ac4:	bf00      	nop
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <main+0x678>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0fb      	beq.n	8001ac6 <main+0x65e>
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <main+0x678>)
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	2b09      	cmp	r3, #9
 8001ad4:	d8f7      	bhi.n	8001ac6 <main+0x65e>
	  if (!(systemHandle.anchorSync))
 8001ad6:	e59b      	b.n	8001610 <main+0x1a8>
 8001ad8:	200002c0 	.word	0x200002c0
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	40012c00 	.word	0x40012c00
 8001ae4:	0800a920 	.word	0x0800a920
 8001ae8:	0800a944 	.word	0x0800a944
 8001aec:	0800a968 	.word	0x0800a968
 8001af0:	0800a98c 	.word	0x0800a98c

08001af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b090      	sub	sp, #64	; 0x40
 8001af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001afa:	f107 0318 	add.w	r3, r7, #24
 8001afe:	2228      	movs	r2, #40	; 0x28
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f005 ffe2 	bl	8007acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b16:	2301      	movs	r3, #1
 8001b18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b24:	2301      	movs	r3, #1
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b38:	f107 0318 	add.w	r3, r7, #24
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 fcff 	bl	8005540 <HAL_RCC_OscConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b48:	f000 f819 	bl	8001b7e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b50:	2302      	movs	r3, #2
 8001b52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2102      	movs	r1, #2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 ff6c 	bl	8005a44 <HAL_RCC_ClockConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b72:	f000 f804 	bl	8001b7e <Error_Handler>
  }
}
 8001b76:	bf00      	nop
 8001b78:	3740      	adds	r7, #64	; 0x40
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b82:	b672      	cpsid	i
}
 8001b84:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <Error_Handler+0x8>

08001b88 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <MX_SPI1_Init+0x64>)
 8001b8e:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <MX_SPI1_Init+0x68>)
 8001b90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <MX_SPI1_Init+0x64>)
 8001b94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MX_SPI1_Init+0x64>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <MX_SPI1_Init+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_SPI1_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bd4:	220a      	movs	r2, #10
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bd8:	4804      	ldr	r0, [pc, #16]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bda:	f004 f8cb 	bl	8005d74 <HAL_SPI_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001be4:	f7ff ffcb 	bl	8001b7e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200002d0 	.word	0x200002d0
 8001bf0:	40013000 	.word	0x40013000

08001bf4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d12f      	bne.n	8001c74 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_SPI_MspInit+0x8c>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <HAL_SPI_MspInit+0x8c>)
 8001c1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c1e:	6193      	str	r3, [r2, #24]
 8001c20:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_SPI_MspInit+0x8c>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2c:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <HAL_SPI_MspInit+0x8c>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <HAL_SPI_MspInit+0x8c>)
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	6193      	str	r3, [r2, #24]
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_SPI_MspInit+0x8c>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c44:	23a0      	movs	r3, #160	; 0xa0
 8001c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	4619      	mov	r1, r3
 8001c56:	480b      	ldr	r0, [pc, #44]	; (8001c84 <HAL_SPI_MspInit+0x90>)
 8001c58:	f003 f960 	bl	8004f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c5c:	2340      	movs	r3, #64	; 0x40
 8001c5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <HAL_SPI_MspInit+0x90>)
 8001c70:	f003 f954 	bl	8004f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c74:	bf00      	nop
 8001c76:	3720      	adds	r7, #32
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40013000 	.word	0x40013000
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40010800 	.word	0x40010800

08001c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6193      	str	r3, [r2, #24]
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a0e      	ldr	r2, [pc, #56]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	61d3      	str	r3, [r2, #28]
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_MspInit+0x5c>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_MspInit+0x60>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_MspInit+0x60>)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010000 	.word	0x40010000

08001cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <NMI_Handler+0x4>

08001cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <HardFault_Handler+0x4>

08001cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <MemManage_Handler+0x4>

08001cfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <BusFault_Handler+0x4>

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <UsageFault_Handler+0x4>

08001d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d32:	f002 fe63 	bl	80049fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f003 fa98 	bl	8005274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <TIM2_IRQHandler+0x10>)
 8001d4e:	f004 fe25 	bl	800699c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000374 	.word	0x20000374

08001d5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <USART1_IRQHandler+0x10>)
 8001d62:	f005 fa83 	bl	800726c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200003bc 	.word	0x200003bc

08001d70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <USART3_IRQHandler+0x10>)
 8001d76:	f005 fa79 	bl	800726c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000400 	.word	0x20000400

08001d84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
	return 1;
 8001d88:	2301      	movs	r3, #1
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <_kill>:

int _kill(int pid, int sig)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d9c:	f005 fe5e 	bl	8007a5c <__errno>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2216      	movs	r2, #22
 8001da4:	601a      	str	r2, [r3, #0]
	return -1;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <_exit>:

void _exit (int status)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dba:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffe7 	bl	8001d92 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dc4:	e7fe      	b.n	8001dc4 <_exit+0x12>

08001dc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e00a      	b.n	8001dee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dd8:	f3af 8000 	nop.w
 8001ddc:	4601      	mov	r1, r0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	60ba      	str	r2, [r7, #8]
 8001de4:	b2ca      	uxtb	r2, r1
 8001de6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	dbf0      	blt.n	8001dd8 <_read+0x12>
	}

return len;
 8001df6:	687b      	ldr	r3, [r7, #4]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e009      	b.n	8001e26 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	60ba      	str	r2, [r7, #8]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fad4 	bl	80013c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3301      	adds	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	dbf1      	blt.n	8001e12 <_write+0x12>
	}
	return len;
 8001e2e:	687b      	ldr	r3, [r7, #4]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_close>:

int _close(int file)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	return -1;
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <_isatty>:

int _isatty(int file)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	return 1;
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea0:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <_sbrk+0x5c>)
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <_sbrk+0x60>)
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eac:	4b13      	ldr	r3, [pc, #76]	; (8001efc <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d102      	bne.n	8001eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <_sbrk+0x64>)
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <_sbrk+0x68>)
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <_sbrk+0x64>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d207      	bcs.n	8001ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec8:	f005 fdc8 	bl	8007a5c <__errno>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	220c      	movs	r2, #12
 8001ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	e009      	b.n	8001eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <_sbrk+0x64>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <_sbrk+0x64>)
 8001ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eea:	68fb      	ldr	r3, [r7, #12]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	2000c000 	.word	0x2000c000
 8001ef8:	00000400 	.word	0x00000400
 8001efc:	20000328 	.word	0x20000328
 8001f00:	200004d8 	.word	0x200004d8

08001f04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f16:	f107 0308 	add.w	r3, r7, #8
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f24:	463b      	mov	r3, r7
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f2e:	4a1f      	ldr	r2, [pc, #124]	; (8001fac <MX_TIM1_Init+0x9c>)
 8001f30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 143;
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f34:	228f      	movs	r2, #143	; 0x8f
 8001f36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f40:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001f44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f4c:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f58:	4813      	ldr	r0, [pc, #76]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f5a:	f004 fc77 	bl	800684c <HAL_TIM_Base_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f64:	f7ff fe0b 	bl	8001b7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f6e:	f107 0308 	add.w	r3, r7, #8
 8001f72:	4619      	mov	r1, r3
 8001f74:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f76:	f004 fe19 	bl	8006bac <HAL_TIM_ConfigClockSource>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f80:	f7ff fdfd 	bl	8001b7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f84:	2300      	movs	r3, #0
 8001f86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f92:	f005 f80d 	bl	8006fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f9c:	f7ff fdef 	bl	8001b7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	2000032c 	.word	0x2000032c
 8001fac:	40012c00 	.word	0x40012c00

08001fb0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <MX_TIM2_Init+0x94>)
 8001fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 143;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <MX_TIM2_Init+0x94>)
 8001fd6:	228f      	movs	r2, #143	; 0x8f
 8001fd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <MX_TIM2_Init+0x94>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <MX_TIM2_Init+0x94>)
 8001fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <MX_TIM2_Init+0x94>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <MX_TIM2_Init+0x94>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ff4:	4813      	ldr	r0, [pc, #76]	; (8002044 <MX_TIM2_Init+0x94>)
 8001ff6:	f004 fc29 	bl	800684c <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002000:	f7ff fdbd 	bl	8001b7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002008:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800200a:	f107 0308 	add.w	r3, r7, #8
 800200e:	4619      	mov	r1, r3
 8002010:	480c      	ldr	r0, [pc, #48]	; (8002044 <MX_TIM2_Init+0x94>)
 8002012:	f004 fdcb 	bl	8006bac <HAL_TIM_ConfigClockSource>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800201c:	f7ff fdaf 	bl	8001b7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002028:	463b      	mov	r3, r7
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_TIM2_Init+0x94>)
 800202e:	f004 ffbf 	bl	8006fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002038:	f7ff fda1 	bl	8001b7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000374 	.word	0x20000374

08002048 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <HAL_TIM_Base_MspInit+0x68>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d10c      	bne.n	8002074 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <HAL_TIM_Base_MspInit+0x6c>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	4a15      	ldr	r2, [pc, #84]	; (80020b4 <HAL_TIM_Base_MspInit+0x6c>)
 8002060:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002064:	6193      	str	r3, [r2, #24]
 8002066:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_TIM_Base_MspInit+0x6c>)
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002072:	e018      	b.n	80020a6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207c:	d113      	bne.n	80020a6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_TIM_Base_MspInit+0x6c>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <HAL_TIM_Base_MspInit+0x6c>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	61d3      	str	r3, [r2, #28]
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_TIM_Base_MspInit+0x6c>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	201c      	movs	r0, #28
 800209c:	f002 fdc5 	bl	8004c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020a0:	201c      	movs	r0, #28
 80020a2:	f002 fdde 	bl	8004c62 <HAL_NVIC_EnableIRQ>
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40012c00 	.word	0x40012c00
 80020b4:	40021000 	.word	0x40021000

080020b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <MX_USART1_UART_Init+0x50>)
 80020c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020de:	220c      	movs	r2, #12
 80020e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020ee:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_USART1_UART_Init+0x4c>)
 80020f0:	f004 ffdc 	bl	80070ac <HAL_UART_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020fa:	f7ff fd40 	bl	8001b7e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200003bc 	.word	0x200003bc
 8002108:	40013800 	.word	0x40013800

0800210c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_USART3_UART_Init+0x4c>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <MX_USART3_UART_Init+0x50>)
 8002114:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <MX_USART3_UART_Init+0x4c>)
 8002118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800211c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <MX_USART3_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <MX_USART3_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_USART3_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_USART3_UART_Init+0x4c>)
 8002132:	220c      	movs	r2, #12
 8002134:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <MX_USART3_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <MX_USART3_UART_Init+0x4c>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_USART3_UART_Init+0x4c>)
 8002144:	f004 ffb2 	bl	80070ac <HAL_UART_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800214e:	f7ff fd16 	bl	8001b7e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000400 	.word	0x20000400
 800215c:	40004800 	.word	0x40004800

08002160 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0318 	add.w	r3, r7, #24
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a40      	ldr	r2, [pc, #256]	; (800227c <HAL_UART_MspInit+0x11c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d13a      	bne.n	80021f6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002180:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <HAL_UART_MspInit+0x120>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a3e      	ldr	r2, [pc, #248]	; (8002280 <HAL_UART_MspInit+0x120>)
 8002186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <HAL_UART_MspInit+0x120>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002198:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_UART_MspInit+0x120>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a38      	ldr	r2, [pc, #224]	; (8002280 <HAL_UART_MspInit+0x120>)
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_UART_MspInit+0x120>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 0318 	add.w	r3, r7, #24
 80021c2:	4619      	mov	r1, r3
 80021c4:	482f      	ldr	r0, [pc, #188]	; (8002284 <HAL_UART_MspInit+0x124>)
 80021c6:	f002 fea9 	bl	8004f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d8:	f107 0318 	add.w	r3, r7, #24
 80021dc:	4619      	mov	r1, r3
 80021de:	4829      	ldr	r0, [pc, #164]	; (8002284 <HAL_UART_MspInit+0x124>)
 80021e0:	f002 fe9c 	bl	8004f1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2100      	movs	r1, #0
 80021e8:	2025      	movs	r0, #37	; 0x25
 80021ea:	f002 fd1e 	bl	8004c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021ee:	2025      	movs	r0, #37	; 0x25
 80021f0:	f002 fd37 	bl	8004c62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021f4:	e03e      	b.n	8002274 <HAL_UART_MspInit+0x114>
  else if(uartHandle->Instance==USART3)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a23      	ldr	r2, [pc, #140]	; (8002288 <HAL_UART_MspInit+0x128>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d139      	bne.n	8002274 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <HAL_UART_MspInit+0x120>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <HAL_UART_MspInit+0x120>)
 8002206:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220a:	61d3      	str	r3, [r2, #28]
 800220c:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <HAL_UART_MspInit+0x120>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_UART_MspInit+0x120>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	4a18      	ldr	r2, [pc, #96]	; (8002280 <HAL_UART_MspInit+0x120>)
 800221e:	f043 0308 	orr.w	r3, r3, #8
 8002222:	6193      	str	r3, [r2, #24]
 8002224:	4b16      	ldr	r3, [pc, #88]	; (8002280 <HAL_UART_MspInit+0x120>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223a:	2303      	movs	r3, #3
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223e:	f107 0318 	add.w	r3, r7, #24
 8002242:	4619      	mov	r1, r3
 8002244:	4811      	ldr	r0, [pc, #68]	; (800228c <HAL_UART_MspInit+0x12c>)
 8002246:	f002 fe69 	bl	8004f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800224a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800224e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002258:	f107 0318 	add.w	r3, r7, #24
 800225c:	4619      	mov	r1, r3
 800225e:	480b      	ldr	r0, [pc, #44]	; (800228c <HAL_UART_MspInit+0x12c>)
 8002260:	f002 fe5c 	bl	8004f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	2027      	movs	r0, #39	; 0x27
 800226a:	f002 fcde 	bl	8004c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800226e:	2027      	movs	r0, #39	; 0x27
 8002270:	f002 fcf7 	bl	8004c62 <HAL_NVIC_EnableIRQ>
}
 8002274:	bf00      	nop
 8002276:	3728      	adds	r7, #40	; 0x28
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40013800 	.word	0x40013800
 8002280:	40021000 	.word	0x40021000
 8002284:	40010800 	.word	0x40010800
 8002288:	40004800 	.word	0x40004800
 800228c:	40010c00 	.word	0x40010c00

08002290 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002290:	480c      	ldr	r0, [pc, #48]	; (80022c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002292:	490d      	ldr	r1, [pc, #52]	; (80022c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002298:	e002      	b.n	80022a0 <LoopCopyDataInit>

0800229a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800229c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229e:	3304      	adds	r3, #4

080022a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a4:	d3f9      	bcc.n	800229a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022a8:	4c0a      	ldr	r4, [pc, #40]	; (80022d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ac:	e001      	b.n	80022b2 <LoopFillZerobss>

080022ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b0:	3204      	adds	r2, #4

080022b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b4:	d3fb      	bcc.n	80022ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022b6:	f7ff fe25 	bl	8001f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ba:	f005 fbd5 	bl	8007a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022be:	f7ff f8d3 	bl	8001468 <main>
  bx lr
 80022c2:	4770      	bx	lr
  ldr r0, =_sdata
 80022c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c8:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 80022cc:	0800ae04 	.word	0x0800ae04
  ldr r2, =_sbss
 80022d0:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80022d4:	200004d8 	.word	0x200004d8

080022d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022d8:	e7fe      	b.n	80022d8 <ADC1_2_IRQHandler>

080022da <setBit>:
static const uint8_t BIAS_900_16[] = {137, 122, 105, 88, 69, 47, 25, 0, 21, 48, 79, 105, 127, 147, 160, 169, 178, 197};
static const uint8_t BIAS_900_64[] = {147, 133, 117, 99, 75, 50, 29, 0, 24, 45, 63, 76, 87, 98, 116, 122, 132, 142};

// Utility functions
static void setBit(uint8_t data[], unsigned int n, unsigned int bit, bool val)
{
 80022da:	b480      	push	{r7}
 80022dc:	b089      	sub	sp, #36	; 0x24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	70fb      	strb	r3, [r7, #3]
    unsigned int idx;
    unsigned int shift;
    idx = bit / 8;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	08db      	lsrs	r3, r3, #3
 80022ec:	61fb      	str	r3, [r7, #28]
    if (idx >= n)
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d228      	bcs.n	8002348 <setBit+0x6e>
        return; // TODO proper error handling: out of bounds
    uint8_t *targetByte = &data[idx];
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	4413      	add	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
    shift = bit % 8;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	617b      	str	r3, [r7, #20]
    if (val)
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00d      	beq.n	8002328 <setBit+0x4e>
        *targetByte |= (1 << shift);
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b25a      	sxtb	r2, r3
 8002312:	2101      	movs	r1, #1
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	b25b      	sxtb	r3, r3
 800231c:	4313      	orrs	r3, r2
 800231e:	b25b      	sxtb	r3, r3
 8002320:	b2da      	uxtb	r2, r3
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e010      	b.n	800234a <setBit+0x70>
    else
        *targetByte &= ~(1 << shift);
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b25a      	sxtb	r2, r3
 800232e:	2101      	movs	r1, #1
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	b25b      	sxtb	r3, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	b25b      	sxtb	r3, r3
 800233c:	4013      	ands	r3, r2
 800233e:	b25b      	sxtb	r3, r3
 8002340:	b2da      	uxtb	r2, r3
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	e000      	b.n	800234a <setBit+0x70>
        return; // TODO proper error handling: out of bounds
 8002348:	bf00      	nop
}
 800234a:	3724      	adds	r7, #36	; 0x24
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <getBit>:

static bool getBit(uint8_t data[], unsigned int n, unsigned int bit)
{
 8002352:	b480      	push	{r7}
 8002354:	b089      	sub	sp, #36	; 0x24
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
    unsigned int idx;
    unsigned int shift;

    idx = bit / 8;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	08db      	lsrs	r3, r3, #3
 8002362:	61fb      	str	r3, [r7, #28]
    if (idx >= n)
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	429a      	cmp	r2, r3
 800236a:	d301      	bcc.n	8002370 <getBit+0x1e>
        return false; // TODO proper error handling: out of bounds
 800236c:	2300      	movs	r3, #0
 800236e:	e013      	b.n	8002398 <getBit+0x46>
    uint8_t targetByte = data[idx];
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	4413      	add	r3, r2
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	76fb      	strb	r3, [r7, #27]
    shift = bit % 8;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	617b      	str	r3, [r7, #20]
    return (targetByte >> shift) & 0x01;
 8002382:	7efa      	ldrb	r2, [r7, #27]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa42 f303 	asr.w	r3, r2, r3
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	bf14      	ite	ne
 8002392:	2301      	movne	r3, #1
 8002394:	2300      	moveq	r3, #0
 8002396:	b2db      	uxtb	r3, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	3724      	adds	r7, #36	; 0x24
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <writeValueToBytes>:

static void writeValueToBytes(uint8_t data[], long val, unsigned int n)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b087      	sub	sp, #28
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
    unsigned int i;
    for (i = 0; i < n; i++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e00c      	b.n	80023ce <writeValueToBytes+0x2c>
    {
        data[i] = ((val >> (i * 8)) & 0xFF);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	fa42 f103 	asr.w	r1, r2, r3
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	4413      	add	r3, r2
 80023c4:	b2ca      	uxtb	r2, r1
 80023c6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < n; i++)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3301      	adds	r3, #1
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d3ee      	bcc.n	80023b4 <writeValueToBytes+0x12>
    }
}
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <readBytesOTP>:

static void readBytesOTP(dwDeviceTypes_t *dev, uint16_t address, uint8_t data[])
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b088      	sub	sp, #32
 80023e6:	af02      	add	r7, sp, #8
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	460b      	mov	r3, r1
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	817b      	strh	r3, [r7, #10]
    uint8_t addressBytes[LEN_OTP_ADDR];
    addressBytes[0] = (address & 0xFF);
 80023f0:	897b      	ldrh	r3, [r7, #10]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	753b      	strb	r3, [r7, #20]
    addressBytes[1] = ((address >> 8) & 0xFF);
 80023f6:	897b      	ldrh	r3, [r7, #10]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	757b      	strb	r3, [r7, #21]
    // set address
    dwSpiWrite(dev, OTP_IF, OTP_ADDR_SUB, addressBytes, LEN_OTP_ADDR);
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2202      	movs	r2, #2
 8002406:	9200      	str	r2, [sp, #0]
 8002408:	2204      	movs	r2, #4
 800240a:	212d      	movs	r1, #45	; 0x2d
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f002 fa41 	bl	8004894 <dwSpiWrite>
    // switch into read mode
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x03); // OTPRDEN | OTPREAD
 8002412:	2303      	movs	r3, #3
 8002414:	2206      	movs	r2, #6
 8002416:	212d      	movs	r1, #45	; 0x2d
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f002 fa7e 	bl	800491a <dwSpiWrite8>
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x01); // OTPRDEN
 800241e:	2301      	movs	r3, #1
 8002420:	2206      	movs	r2, #6
 8002422:	212d      	movs	r1, #45	; 0x2d
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f002 fa78 	bl	800491a <dwSpiWrite8>
    // read value/block - 4 bytes
    dwSpiRead(dev, OTP_IF, OTP_RDAT_SUB, data, LEN_OTP_RDAT);
 800242a:	2304      	movs	r3, #4
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	220a      	movs	r2, #10
 8002432:	212d      	movs	r1, #45	; 0x2d
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f002 f9c5 	bl	80047c4 <dwSpiRead>
    // end read mode
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x00);
 800243a:	2300      	movs	r3, #0
 800243c:	2206      	movs	r2, #6
 800243e:	212d      	movs	r1, #45	; 0x2d
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f002 fa6a 	bl	800491a <dwSpiWrite8>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <dummyHandler>:

void dummyHandler(dwDeviceTypes_t *dev)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
    ;
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <dwInit>:

void dwInit(dwDeviceTypes_t *dev)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    dev->func = &dwFunc;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a0c      	ldr	r2, [pc, #48]	; (800249c <dwInit+0x3c>)
 800246c:	601a      	str	r2, [r3, #0]
    dev->handleSent = dummyHandler;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <dwInit+0x40>)
 8002472:	639a      	str	r2, [r3, #56]	; 0x38
	dev->handleError = dummyHandler;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <dwInit+0x40>)
 8002478:	63da      	str	r2, [r3, #60]	; 0x3c
	dev->handleReceived = dummyHandler;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <dwInit+0x40>)
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
	dev->handleReceiveTimeout = dummyHandler;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <dwInit+0x40>)
 8002484:	645a      	str	r2, [r3, #68]	; 0x44
	dev->handleReceiveFailed = dummyHandler;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <dwInit+0x40>)
 800248a:	649a      	str	r2, [r3, #72]	; 0x48
	dev->handleReceiveTimestampAvailable = dummyHandler;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <dwInit+0x40>)
 8002490:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	20000064 	.word	0x20000064
 80024a0:	0800244f 	.word	0x0800244f

080024a4 <dwConfigure>:

int dwConfigure(dwDeviceTypes_t *dev)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	6078      	str	r0, [r7, #4]
    dwEnableClock(dev, dwClockAuto);
 80024ac:	2100      	movs	r1, #0
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f91c 	bl	80026ec <dwEnableClock>
    dev->func->delayms(dev, 5);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2105      	movs	r1, #5
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
	dev->func->reset(dev);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	4798      	blx	r3
    dev->func->delayms(dev, 5);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2105      	movs	r1, #5
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	4798      	blx	r3
    uint32_t deviceID = dwGetDeviceId(dev);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f8a9 	bl	800262e <dwGetDeviceId>
 80024dc:	60f8      	str	r0, [r7, #12]
    if (deviceID != 0xdeca0130)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4a27      	ldr	r2, [pc, #156]	; (8002580 <dwConfigure+0xdc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d001      	beq.n	80024ea <dwConfigure+0x46>
    {
        return DW_ERROR_WRONG_ID;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e045      	b.n	8002576 <dwConfigure+0xd2>
    }

    memset(dev->networkAndAddress, 0x38, LEN_PANADR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3309      	adds	r3, #9
 80024ee:	2204      	movs	r2, #4
 80024f0:	2138      	movs	r1, #56	; 0x38
 80024f2:	4618      	mov	r0, r3
 80024f4:	f005 faea 	bl	8007acc <memset>
    dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3309      	adds	r3, #9
 80024fc:	2204      	movs	r2, #4
 80024fe:	9200      	str	r2, [sp, #0]
 8002500:	2200      	movs	r2, #0
 8002502:	2103      	movs	r1, #3
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f002 f9c5 	bl	8004894 <dwSpiWrite>

    memset(dev->syscfg, 0, LEN_SYS_CFG);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	330d      	adds	r3, #13
 800250e:	2204      	movs	r2, #4
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f005 fada 	bl	8007acc <memset>
    dwSetDoubleBuffering(dev, false);
 8002518:	2100      	movs	r1, #0
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fa87 	bl	8002a2e <dwSetDoubleBuffering>
    dwSetInterruptPolarity(dev, true);
 8002520:	2101      	movs	r1, #1
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 faa0 	bl	8002a68 <dwSetInterruptPolarity>
    dwWriteSystemConfigurationRegister(dev);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f981 	bl	8002830 <dwWriteSystemConfigurationRegister>

    dwClearInterrupts(dev);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fb62 	bl	8002bf8 <dwClearInterrupts>
    dwWriteSystemEventMaskRegister(dev);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f9d0 	bl	80028da <dwWriteSystemEventMaskRegister>

    dwEnableClock(dev, dwClockXti);
 800253a:	2101      	movs	r1, #1
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f8d5 	bl	80026ec <dwEnableClock>
    dev->func->delayms(dev, 5);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2105      	movs	r1, #5
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	4798      	blx	r3
    dwManageLDE(dev);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f818 	bl	8002584 <dwManageLDE>
    dev->func->delayms(dev, 5);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2105      	movs	r1, #5
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4798      	blx	r3
    dwEnableClock(dev, dwClockPll);
 8002560:	2102      	movs	r1, #2
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f8c2 	bl	80026ec <dwEnableClock>
    dev->func->delayms(dev, 5);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2105      	movs	r1, #5
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4798      	blx	r3
//    dev->func->spiSetSpeed(dev, dwSpiSpeedHigh);
//    dev->func->delayms(dev, 5);
    return DW_ERROR_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	deca0130 	.word	0xdeca0130

08002584 <dwManageLDE>:

void dwManageLDE(dwDeviceTypes_t *dev)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af02      	add	r7, sp, #8
 800258a:	6078      	str	r0, [r7, #4]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    uint8_t otpctrl[LEN_OTP_CTRL];
    memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	2204      	movs	r2, #4
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f005 fa99 	bl	8007acc <memset>
    memset(otpctrl, 0, LEN_OTP_CTRL);
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	2202      	movs	r2, #2
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f005 fa92 	bl	8007acc <memset>
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80025a8:	f107 030c 	add.w	r3, r7, #12
 80025ac:	2204      	movs	r2, #4
 80025ae:	9200      	str	r2, [sp, #0]
 80025b0:	2200      	movs	r2, #0
 80025b2:	2136      	movs	r1, #54	; 0x36
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f002 f905 	bl	80047c4 <dwSpiRead>
    dwSpiRead(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	2202      	movs	r2, #2
 80025c0:	9200      	str	r2, [sp, #0]
 80025c2:	2206      	movs	r2, #6
 80025c4:	212d      	movs	r1, #45	; 0x2d
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f002 f8fc 	bl	80047c4 <dwSpiRead>
    pmscctrl0[0] = 0x01;
 80025cc:	2301      	movs	r3, #1
 80025ce:	733b      	strb	r3, [r7, #12]
    pmscctrl0[1] = 0x03;
 80025d0:	2303      	movs	r3, #3
 80025d2:	737b      	strb	r3, [r7, #13]
    otpctrl[0] = 0x00;
 80025d4:	2300      	movs	r3, #0
 80025d6:	723b      	strb	r3, [r7, #8]
    otpctrl[1] = 0x80;
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	727b      	strb	r3, [r7, #9]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80025dc:	f107 030c 	add.w	r3, r7, #12
 80025e0:	2204      	movs	r2, #4
 80025e2:	9200      	str	r2, [sp, #0]
 80025e4:	2200      	movs	r2, #0
 80025e6:	2136      	movs	r1, #54	; 0x36
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f002 f953 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 80025ee:	f107 0308 	add.w	r3, r7, #8
 80025f2:	2202      	movs	r2, #2
 80025f4:	9200      	str	r2, [sp, #0]
 80025f6:	2206      	movs	r2, #6
 80025f8:	212d      	movs	r1, #45	; 0x2d
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f002 f94a 	bl	8004894 <dwSpiWrite>
    dev->func->delayms(dev, 5);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2105      	movs	r1, #5
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	4798      	blx	r3
    pmscctrl0[0] = 0x00;
 800260c:	2300      	movs	r3, #0
 800260e:	733b      	strb	r3, [r7, #12]
    pmscctrl0[1] = 0x02;
 8002610:	2302      	movs	r3, #2
 8002612:	737b      	strb	r3, [r7, #13]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	2204      	movs	r2, #4
 800261a:	9200      	str	r2, [sp, #0]
 800261c:	2200      	movs	r2, #0
 800261e:	2136      	movs	r1, #54	; 0x36
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f002 f937 	bl	8004894 <dwSpiWrite>
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <dwGetDeviceId>:

uint32_t dwGetDeviceId(dwDeviceTypes_t *dev)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
    return dwSpiRead32(dev, DEV_ID, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f002 f915 	bl	800486a <dwSpiRead32>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <dwEnableAllLeds>:

void dwEnableAllLeds(dwDeviceTypes_t *dev)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
    uint32_t reg;
    // Set all 4 GPIO in LED mode
    reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 8002652:	2200      	movs	r2, #0
 8002654:	2126      	movs	r1, #38	; 0x26
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f002 f907 	bl	800486a <dwSpiRead32>
 800265c:	60f8      	str	r0, [r7, #12]
    reg &= ~0x00003FC0ul;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002664:	60fb      	str	r3, [r7, #12]
    reg |= 0x00001540ul;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f443 53aa 	orr.w	r3, r3, #5440	; 0x1540
 800266c:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, GPIO_CTRL, GPIO_MODE_SUB, reg);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	2126      	movs	r1, #38	; 0x26
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f002 f967 	bl	8004948 <dwSpiWrite32>
    reg = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
    reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 800267e:	2200      	movs	r2, #0
 8002680:	2126      	movs	r1, #38	; 0x26
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f002 f8f1 	bl	800486a <dwSpiRead32>
 8002688:	60f8      	str	r0, [r7, #12]
    // Enable debounce clock (used to clock the LED blinking)
    reg = dwSpiRead32(dev, PMSC, PMSC_CTRL0_SUB);
 800268a:	2200      	movs	r2, #0
 800268c:	2136      	movs	r1, #54	; 0x36
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f002 f8eb 	bl	800486a <dwSpiRead32>
 8002694:	60f8      	str	r0, [r7, #12]
    reg |= 0x00840000ul;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f443 0304 	orr.w	r3, r3, #8650752	; 0x840000
 800269c:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_CTRL0_SUB, reg);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	2136      	movs	r1, #54	; 0x36
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f002 f94f 	bl	8004948 <dwSpiWrite32>

    // Enable LED blinking and set the rate
    reg = 0x00000110ul;
 80026aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80026ae:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2228      	movs	r2, #40	; 0x28
 80026b4:	2136      	movs	r1, #54	; 0x36
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f002 f946 	bl	8004948 <dwSpiWrite32>

    // Trigger a manual blink of the LEDs for test
    reg |= 0x000f0000ul;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80026c2:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2228      	movs	r2, #40	; 0x28
 80026c8:	2136      	movs	r1, #54	; 0x36
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f002 f93c 	bl	8004948 <dwSpiWrite32>
    reg &= ~0x000f0000ul;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80026d6:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2228      	movs	r2, #40	; 0x28
 80026dc:	2136      	movs	r1, #54	; 0x36
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f002 f932 	bl	8004948 <dwSpiWrite32>
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <dwEnableClock>:

void dwEnableClock(dwDeviceTypes_t *dev, dwClock_t clock)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	70fb      	strb	r3, [r7, #3]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 80026f8:	f107 030c 	add.w	r3, r7, #12
 80026fc:	2204      	movs	r2, #4
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f005 f9e3 	bl	8007acc <memset>
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	2204      	movs	r2, #4
 800270c:	9200      	str	r2, [sp, #0]
 800270e:	2200      	movs	r2, #0
 8002710:	2136      	movs	r1, #54	; 0x36
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f002 f856 	bl	80047c4 <dwSpiRead>
    if (clock == dwClockAuto)
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10d      	bne.n	800273a <dwEnableClock+0x4e>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedLow);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2100      	movs	r1, #0
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
        pmscctrl0[0] = dwClockAuto;
 800272a:	2300      	movs	r3, #0
 800272c:	733b      	strb	r3, [r7, #12]
        pmscctrl0[1] &= 0xFE;
 800272e:	7b7b      	ldrb	r3, [r7, #13]
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	737b      	strb	r3, [r7, #13]
 8002738:	e026      	b.n	8002788 <dwEnableClock+0x9c>
    }
    else if (clock == dwClockXti)
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d110      	bne.n	8002762 <dwEnableClock+0x76>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedLow);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2100      	movs	r1, #0
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
        pmscctrl0[0] &= 0xFC;
 800274c:	7b3b      	ldrb	r3, [r7, #12]
 800274e:	f023 0303 	bic.w	r3, r3, #3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	733b      	strb	r3, [r7, #12]
        pmscctrl0[0] |= dwClockXti;
 8002756:	7b3b      	ldrb	r3, [r7, #12]
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	733b      	strb	r3, [r7, #12]
 8002760:	e012      	b.n	8002788 <dwEnableClock+0x9c>
    }
    else if (clock == dwClockPll)
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d10f      	bne.n	8002788 <dwEnableClock+0x9c>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedHigh);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2101      	movs	r1, #1
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	4798      	blx	r3
        pmscctrl0[0] &= 0xFC;
 8002774:	7b3b      	ldrb	r3, [r7, #12]
 8002776:	f023 0303 	bic.w	r3, r3, #3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	733b      	strb	r3, [r7, #12]
        pmscctrl0[0] |= dwClockPll;
 800277e:	7b3b      	ldrb	r3, [r7, #12]
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	b2db      	uxtb	r3, r3
 8002786:	733b      	strb	r3, [r7, #12]
    }
    else
    {
        // TODO deliver proper warning
    }
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, 1);
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	2201      	movs	r2, #1
 800278e:	9200      	str	r2, [sp, #0]
 8002790:	2200      	movs	r2, #0
 8002792:	2136      	movs	r1, #54	; 0x36
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f002 f87d 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	2204      	movs	r2, #4
 80027a0:	9200      	str	r2, [sp, #0]
 80027a2:	2200      	movs	r2, #0
 80027a4:	2136      	movs	r1, #54	; 0x36
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f002 f874 	bl	8004894 <dwSpiWrite>
}
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <dwRxSoftReset>:
/**
    Reset the receiver. Needed after errors or timeouts.
    From the DW1000 User Manual, v2.13 page 35: "Due to an issue in the re-initialisation of the receiver, it is necessary to apply a receiver reset after certain receiver error or timeout events (i.e. RXPHE (PHY Header Error), RXRFSL (Reed Solomon error), RXRFTO (Frame wait timeout), etc.). This ensures that the next good frame will have correctly calculated timestamp. It is not necessary to do this in the cases of RXPTO (Preamble detection Timeout) and RXSFDTO (SFD timeout). For details on how to apply a receiver-only reset see SOFTRESET field of Sub- Register 0x36:00 – PMSC_CTRL0."
 */
void dwRxSoftReset(dwDeviceTypes_t *dev)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	6078      	str	r0, [r7, #4]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	2204      	movs	r2, #4
 80027c2:	9200      	str	r2, [sp, #0]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2136      	movs	r1, #54	; 0x36
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f001 fffb 	bl	80047c4 <dwSpiRead>
    pmscctrl0[3] = pmscctrl0[3] & 0xEF;
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	f023 0310 	bic.w	r3, r3, #16
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	73fb      	strb	r3, [r7, #15]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	2204      	movs	r2, #4
 80027de:	9200      	str	r2, [sp, #0]
 80027e0:	2200      	movs	r2, #0
 80027e2:	2136      	movs	r1, #54	; 0x36
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f002 f855 	bl	8004894 <dwSpiWrite>
    pmscctrl0[3] = pmscctrl0[3] | 0x10;
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	f043 0310 	orr.w	r3, r3, #16
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	73fb      	strb	r3, [r7, #15]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	2204      	movs	r2, #4
 80027fa:	9200      	str	r2, [sp, #0]
 80027fc:	2200      	movs	r2, #0
 80027fe:	2136      	movs	r1, #54	; 0x36
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f002 f847 	bl	8004894 <dwSpiWrite>
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <dwReadSystemConfigurationRegister>:

/* ###########################################################################
 * #### DW1000 register read/write ###########################################
 * ######################################################################### */
void dwReadSystemConfigurationRegister(dwDeviceTypes_t *dev)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af02      	add	r7, sp, #8
 8002814:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	330d      	adds	r3, #13
 800281a:	2204      	movs	r2, #4
 800281c:	9200      	str	r2, [sp, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	2104      	movs	r1, #4
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f001 ffce 	bl	80047c4 <dwSpiRead>
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <dwWriteSystemConfigurationRegister>:

void dwWriteSystemConfigurationRegister(dwDeviceTypes_t *dev)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af02      	add	r7, sp, #8
 8002836:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	330d      	adds	r3, #13
 800283c:	2204      	movs	r2, #4
 800283e:	9200      	str	r2, [sp, #0]
 8002840:	2200      	movs	r2, #0
 8002842:	2104      	movs	r1, #4
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f002 f825 	bl	8004894 <dwSpiWrite>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <dwReadSystemEventStatusRegister>:

void dwReadSystemEventStatusRegister(dwDeviceTypes_t *dev)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af02      	add	r7, sp, #8
 8002858:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_STATUS, NO_SUB, dev->sysstatus, LEN_SYS_STATUS);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3319      	adds	r3, #25
 800285e:	2205      	movs	r2, #5
 8002860:	9200      	str	r2, [sp, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	210f      	movs	r1, #15
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f001 ffac 	bl	80047c4 <dwSpiRead>
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <dwReadNetworkIdAndDeviceAddress>:

void dwReadNetworkIdAndDeviceAddress(dwDeviceTypes_t *dev)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af02      	add	r7, sp, #8
 800287a:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3309      	adds	r3, #9
 8002880:	2204      	movs	r2, #4
 8002882:	9200      	str	r2, [sp, #0]
 8002884:	2200      	movs	r2, #0
 8002886:	2103      	movs	r1, #3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f001 ff9b 	bl	80047c4 <dwSpiRead>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <dwWriteNetworkIdAndDeviceAddress>:

void dwWriteNetworkIdAndDeviceAddress(dwDeviceTypes_t *dev)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af02      	add	r7, sp, #8
 800289c:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3309      	adds	r3, #9
 80028a2:	2204      	movs	r2, #4
 80028a4:	9200      	str	r2, [sp, #0]
 80028a6:	2200      	movs	r2, #0
 80028a8:	2103      	movs	r1, #3
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f001 fff2 	bl	8004894 <dwSpiWrite>
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <dwReadSystemEventMaskRegister>:

void dwReadSystemEventMaskRegister(dwDeviceTypes_t *dev)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af02      	add	r7, sp, #8
 80028be:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3311      	adds	r3, #17
 80028c4:	2204      	movs	r2, #4
 80028c6:	9200      	str	r2, [sp, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	210e      	movs	r1, #14
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f001 ff79 	bl	80047c4 <dwSpiRead>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <dwWriteSystemEventMaskRegister>:

void dwWriteSystemEventMaskRegister(dwDeviceTypes_t *dev)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af02      	add	r7, sp, #8
 80028e0:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3311      	adds	r3, #17
 80028e6:	2204      	movs	r2, #4
 80028e8:	9200      	str	r2, [sp, #0]
 80028ea:	2200      	movs	r2, #0
 80028ec:	210e      	movs	r1, #14
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f001 ffd0 	bl	8004894 <dwSpiWrite>
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <dwReadChannelControlRegister>:

void dwReadChannelControlRegister(dwDeviceTypes_t *dev)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af02      	add	r7, sp, #8
 8002902:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3315      	adds	r3, #21
 8002908:	2204      	movs	r2, #4
 800290a:	9200      	str	r2, [sp, #0]
 800290c:	2200      	movs	r2, #0
 800290e:	211f      	movs	r1, #31
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f001 ff57 	bl	80047c4 <dwSpiRead>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <dwWriteChannelControlRegister>:

void dwWriteChannelControlRegister(dwDeviceTypes_t *dev)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af02      	add	r7, sp, #8
 8002924:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3315      	adds	r3, #21
 800292a:	2204      	movs	r2, #4
 800292c:	9200      	str	r2, [sp, #0]
 800292e:	2200      	movs	r2, #0
 8002930:	211f      	movs	r1, #31
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f001 ffae 	bl	8004894 <dwSpiWrite>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <dwReadTransmitFrameControlRegister>:

void dwReadTransmitFrameControlRegister(dwDeviceTypes_t *dev)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af02      	add	r7, sp, #8
 8002946:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	331e      	adds	r3, #30
 800294c:	2205      	movs	r2, #5
 800294e:	9200      	str	r2, [sp, #0]
 8002950:	2200      	movs	r2, #0
 8002952:	2108      	movs	r1, #8
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f001 ff35 	bl	80047c4 <dwSpiRead>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <dwWriteTransmitFrameControlRegister>:

void dwWriteTransmitFrameControlRegister(dwDeviceTypes_t *dev)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af02      	add	r7, sp, #8
 8002968:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	331e      	adds	r3, #30
 800296e:	2205      	movs	r2, #5
 8002970:	9200      	str	r2, [sp, #0]
 8002972:	2200      	movs	r2, #0
 8002974:	2108      	movs	r1, #8
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f001 ff8c 	bl	8004894 <dwSpiWrite>
}
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <dwSetReceiveWaitTimeout>:

/******************************************************************/

void dwSetReceiveWaitTimeout(dwDeviceTypes_t *dev, uint16_t timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af02      	add	r7, sp, #8
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
    dwSpiWrite(dev, RX_FWTO, NO_SUB, &timeout, 2);
 8002990:	1cbb      	adds	r3, r7, #2
 8002992:	2202      	movs	r2, #2
 8002994:	9200      	str	r2, [sp, #0]
 8002996:	2200      	movs	r2, #0
 8002998:	210c      	movs	r1, #12
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f001 ff7a 	bl	8004894 <dwSpiWrite>
    setBit(dev->syscfg, LEN_SYS_CFG, RXWTOE_BIT, timeout != 0);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f103 000d 	add.w	r0, r3, #13
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	221c      	movs	r2, #28
 80029b4:	2104      	movs	r1, #4
 80029b6:	f7ff fc90 	bl	80022da <setBit>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <dwSetFrameFilter>:

void dwSetFrameFilter(dwDeviceTypes_t *dev, bool val)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFEN_BIT, val);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f103 000d 	add.w	r0, r3, #13
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	2200      	movs	r2, #0
 80029d8:	2104      	movs	r1, #4
 80029da:	f7ff fc7e 	bl	80022da <setBit>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <dwSetFrameFilterAllowData>:
{
    setBit(dev->syscfg, LEN_SYS_CFG, FFAB_BIT, val);
}

void dwSetFrameFilterAllowData(dwDeviceTypes_t *dev, bool val)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFAD_BIT, val);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f103 000d 	add.w	r0, r3, #13
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	2203      	movs	r2, #3
 80029fc:	2104      	movs	r1, #4
 80029fe:	f7ff fc6c 	bl	80022da <setBit>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <dwSetFrameFilterAllowReserved>:
{
    setBit(dev->syscfg, LEN_SYS_CFG, FFAM_BIT, val);
}

void dwSetFrameFilterAllowReserved(dwDeviceTypes_t *dev, bool val)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	460b      	mov	r3, r1
 8002a14:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFAR_BIT, val);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f103 000d 	add.w	r0, r3, #13
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	2206      	movs	r2, #6
 8002a20:	2104      	movs	r1, #4
 8002a22:	f7ff fc5a 	bl	80022da <setBit>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <dwSetDoubleBuffering>:

void dwSetDoubleBuffering(dwDeviceTypes_t *dev, bool val)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	460b      	mov	r3, r1
 8002a38:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, DIS_DRXB_BIT, !val);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f103 000d 	add.w	r0, r3, #13
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	bf14      	ite	ne
 8002a46:	2301      	movne	r3, #1
 8002a48:	2300      	moveq	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f083 0301 	eor.w	r3, r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	220c      	movs	r2, #12
 8002a5a:	2104      	movs	r1, #4
 8002a5c:	f7ff fc3d 	bl	80022da <setBit>
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <dwSetInterruptPolarity>:

void dwSetInterruptPolarity(dwDeviceTypes_t *dev, bool val)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, HIRQ_POL_BIT, val);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f103 000d 	add.w	r0, r3, #13
 8002a7a:	78fb      	ldrb	r3, [r7, #3]
 8002a7c:	2209      	movs	r2, #9
 8002a7e:	2104      	movs	r1, #4
 8002a80:	f7ff fc2b 	bl	80022da <setBit>
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <dwSetReceiverAutoReenable>:

void dwSetReceiverAutoReenable(dwDeviceTypes_t *dev, bool val)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, RXAUTR_BIT, val);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f103 000d 	add.w	r0, r3, #13
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	221d      	movs	r2, #29
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	f7ff fc19 	bl	80022da <setBit>
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <dwInterruptOnSent>:

void dwInterruptOnSent(dwDeviceTypes_t *dev, bool val)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, TXFRS_BIT, val);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f103 0011 	add.w	r0, r3, #17
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	2104      	movs	r1, #4
 8002ac8:	f7ff fc07 	bl	80022da <setBit>
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <dwInterruptOnReceived>:

void dwInterruptOnReceived(dwDeviceTypes_t *dev, bool val)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, RXDFR_BIT, val);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f103 0011 	add.w	r0, r3, #17
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	220d      	movs	r2, #13
 8002aea:	2104      	movs	r1, #4
 8002aec:	f7ff fbf5 	bl	80022da <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXFCG_BIT, val);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f103 0011 	add.w	r0, r3, #17
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	220e      	movs	r2, #14
 8002afa:	2104      	movs	r1, #4
 8002afc:	f7ff fbed 	bl	80022da <setBit>
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <dwInterruptOnReceiveFailed>:

void dwInterruptOnReceiveFailed(dwDeviceTypes_t *dev, bool val)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_STATUS, LDEERR_BIT, val);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f103 0011 	add.w	r0, r3, #17
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	2212      	movs	r2, #18
 8002b1e:	2105      	movs	r1, #5
 8002b20:	f7ff fbdb 	bl	80022da <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXFCE_BIT, val);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f103 0011 	add.w	r0, r3, #17
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	220f      	movs	r2, #15
 8002b2e:	2105      	movs	r1, #5
 8002b30:	f7ff fbd3 	bl	80022da <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXPHE_BIT, val);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f103 0011 	add.w	r0, r3, #17
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	220c      	movs	r2, #12
 8002b3e:	2105      	movs	r1, #5
 8002b40:	f7ff fbcb 	bl	80022da <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXRFSL_BIT, val);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f103 0011 	add.w	r0, r3, #17
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	2105      	movs	r1, #5
 8002b50:	f7ff fbc3 	bl	80022da <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXSFDTO_BIT, val);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f103 0011 	add.w	r0, r3, #17
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	221a      	movs	r2, #26
 8002b5e:	2104      	movs	r1, #4
 8002b60:	f7ff fbbb 	bl	80022da <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, AFFREJ_BIT, val);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f103 0011 	add.w	r0, r3, #17
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	221d      	movs	r2, #29
 8002b6e:	2104      	movs	r1, #4
 8002b70:	f7ff fbb3 	bl	80022da <setBit>
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <dwInterruptOnReceiveTimeout>:

void dwInterruptOnReceiveTimeout(dwDeviceTypes_t *dev, bool val)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, RXRFTO_BIT, val);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f103 0011 	add.w	r0, r3, #17
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	2211      	movs	r2, #17
 8002b92:	2104      	movs	r1, #4
 8002b94:	f7ff fba1 	bl	80022da <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXPTO_BIT, val);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f103 0011 	add.w	r0, r3, #17
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	2215      	movs	r2, #21
 8002ba2:	2104      	movs	r1, #4
 8002ba4:	f7ff fb99 	bl	80022da <setBit>
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <dwInterruptOnReceiveTimestampAvailable>:

void dwInterruptOnReceiveTimestampAvailable(dwDeviceTypes_t *dev, bool val)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, LDEDONE_BIT, val);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f103 0011 	add.w	r0, r3, #17
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	220a      	movs	r2, #10
 8002bc6:	2104      	movs	r1, #4
 8002bc8:	f7ff fb87 	bl	80022da <setBit>
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <dwInterruptOnAutomaticAcknowledgeTrigger>:

void dwInterruptOnAutomaticAcknowledgeTrigger(dwDeviceTypes_t *dev, bool val)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, AAT_BIT, val);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f103 0011 	add.w	r0, r3, #17
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	2203      	movs	r2, #3
 8002bea:	2104      	movs	r1, #4
 8002bec:	f7ff fb75 	bl	80022da <setBit>
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <dwClearInterrupts>:

void dwClearInterrupts(dwDeviceTypes_t *dev)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
    memset(dev->sysmask, 0, LEN_SYS_MASK);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3311      	adds	r3, #17
 8002c04:	2204      	movs	r2, #4
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f004 ff5f 	bl	8007acc <memset>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <dwIdle>:

void dwIdle(dwDeviceTypes_t *dev)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af02      	add	r7, sp, #8
 8002c1c:	6078      	str	r0, [r7, #4]
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3304      	adds	r3, #4
 8002c22:	2204      	movs	r2, #4
 8002c24:	2100      	movs	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f004 ff50 	bl	8007acc <memset>
    dev->sysctrl[0] |= 1 << TRXOFF_BIT;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	791b      	ldrb	r3, [r3, #4]
 8002c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	711a      	strb	r2, [r3, #4]
    dev->deviceMode = IDLE_MODE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	721a      	strb	r2, [r3, #8]
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	2204      	movs	r2, #4
 8002c46:	9200      	str	r2, [sp, #0]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	210d      	movs	r1, #13
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f001 fe21 	bl	8004894 <dwSpiWrite>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <dwNewReceive>:

void dwNewReceive(dwDeviceTypes_t *dev)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ffd7 	bl	8002c16 <dwIdle>
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f004 ff2b 	bl	8007acc <memset>
    dwClearReceiveStatus(dev);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fe02 	bl	8003880 <dwClearReceiveStatus>
    dev->deviceMode = RX_MODE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	721a      	strb	r2, [r3, #8]
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <dwStartReceive>:

void dwStartReceive(dwDeviceTypes_t *dev)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af02      	add	r7, sp, #8
 8002c90:	6078      	str	r0, [r7, #4]
    setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	1d18      	adds	r0, r3, #4
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	f083 0301 	eor.w	r3, r3, #1
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2104      	movs	r1, #4
 8002cb6:	f7ff fb10 	bl	80022da <setBit>
    setBit(dev->sysctrl, LEN_SYS_CTRL, RXENAB_BIT, true);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	1d18      	adds	r0, r3, #4
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	2104      	movs	r1, #4
 8002cc4:	f7ff fb09 	bl	80022da <setBit>
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	2204      	movs	r2, #4
 8002cce:	9200      	str	r2, [sp, #0]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	210d      	movs	r1, #13
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f001 fddd 	bl	8004894 <dwSpiWrite>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <dwNewTransmit>:

void dwNewTransmit(dwDeviceTypes_t *dev)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff ff93 	bl	8002c16 <dwIdle>
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 fee7 	bl	8007acc <memset>
    dwClearTransmitStatus(dev);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fdd0 	bl	80038a4 <dwClearTransmitStatus>
    dev->deviceMode = TX_MODE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	721a      	strb	r2, [r3, #8]
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <dwStartTransmit>:

void dwStartTransmit(dwDeviceTypes_t *dev, bool isTxDelay)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af02      	add	r7, sp, #8
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	70fb      	strb	r3, [r7, #3]
    dwWriteTransmitFrameControlRegister(dev);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff fe1f 	bl	8002962 <dwWriteTransmitFrameControlRegister>
    setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	1d18      	adds	r0, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bf14      	ite	ne
 8002d32:	2301      	movne	r3, #1
 8002d34:	2300      	moveq	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f083 0301 	eor.w	r3, r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2200      	movs	r2, #0
 8002d46:	2104      	movs	r1, #4
 8002d48:	f7ff fac7 	bl	80022da <setBit>
    if (isTxDelay)
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <dwStartTransmit+0x4e>
    	setBit(dev->sysctrl, LEN_SYS_CTRL, TXDLYS_BIT, true);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	1d18      	adds	r0, r3, #4
 8002d56:	2301      	movs	r3, #1
 8002d58:	2202      	movs	r2, #2
 8002d5a:	2104      	movs	r1, #4
 8002d5c:	f7ff fabd 	bl	80022da <setBit>
    setBit(dev->sysctrl, LEN_SYS_CTRL, TXSTRT_BIT, true);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	1d18      	adds	r0, r3, #4
 8002d64:	2301      	movs	r3, #1
 8002d66:	2201      	movs	r2, #1
 8002d68:	2104      	movs	r1, #4
 8002d6a:	f7ff fab6 	bl	80022da <setBit>
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2204      	movs	r2, #4
 8002d74:	9200      	str	r2, [sp, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	210d      	movs	r1, #13
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f001 fd8a 	bl	8004894 <dwSpiWrite>
    if (dev->permanentReceive)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00d      	beq.n	8002da6 <dwStartTransmit+0x94>
    {
        memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	2204      	movs	r2, #4
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f004 fe9a 	bl	8007acc <memset>
        dev->deviceMode = RX_MODE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	721a      	strb	r2, [r3, #8]
        dwStartReceive(dev);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ff73 	bl	8002c8a <dwStartReceive>
    }
    else
    {
        dev->deviceMode = IDLE_MODE;
    }
}
 8002da4:	e00b      	b.n	8002dbe <dwStartTransmit+0xac>
    else if (dev->wait4resp)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <dwStartTransmit+0xa6>
        dev->deviceMode = RX_MODE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	721a      	strb	r2, [r3, #8]
}
 8002db6:	e002      	b.n	8002dbe <dwStartTransmit+0xac>
        dev->deviceMode = IDLE_MODE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	721a      	strb	r2, [r3, #8]
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <dwNewConfiguration>:

void dwNewConfiguration(dwDeviceTypes_t *dev)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ff21 	bl	8002c16 <dwIdle>
    dwReadNetworkIdAndDeviceAddress(dev);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff fd4d 	bl	8002874 <dwReadNetworkIdAndDeviceAddress>
    dwReadSystemConfigurationRegister(dev);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff fd17 	bl	800280e <dwReadSystemConfigurationRegister>
    dwReadChannelControlRegister(dev);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff fd8b 	bl	80028fc <dwReadChannelControlRegister>
    dwReadTransmitFrameControlRegister(dev);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff fdaa 	bl	8002940 <dwReadTransmitFrameControlRegister>
    dwReadSystemEventMaskRegister(dev);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff fd63 	bl	80028b8 <dwReadSystemEventMaskRegister>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <dwCommitConfiguration>:

void dwCommitConfiguration(dwDeviceTypes_t *dev)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af02      	add	r7, sp, #8
 8002e00:	6078      	str	r0, [r7, #4]
    // write all configurations back to device
    dwWriteNetworkIdAndDeviceAddress(dev);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff fd47 	bl	8002896 <dwWriteNetworkIdAndDeviceAddress>
    dwWriteSystemConfigurationRegister(dev);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff fd11 	bl	8002830 <dwWriteSystemConfigurationRegister>
    dwWriteChannelControlRegister(dev);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff fd85 	bl	800291e <dwWriteChannelControlRegister>
    dwWriteTransmitFrameControlRegister(dev);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff fda4 	bl	8002962 <dwWriteTransmitFrameControlRegister>
    dwWriteSystemEventMaskRegister(dev);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff fd5d 	bl	80028da <dwWriteSystemEventMaskRegister>
    // tune according to configuration
    dwTune(dev);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fe17 	bl	8003a54 <dwTune>
    // uint8_t antennaDelayBytes[LEN_STAMP];
    // writeValueToBytes(antennaDelayBytes, 16384, LEN_STAMP);
    // dev->antennaDelay.setTimestamp(antennaDelayBytes);
    // dwSpiRead(dev, TX_ANTD, NO_SUB, antennaDelayBytes, LEN_TX_ANTD);
    // dwSpiRead(dev, LDE_IF, LDE_RXANTD_SUB, antennaDelayBytes, LEN_LDE_RXANTD);
    dwSpiWrite(dev, TX_ANTD, NO_SUB, dev->antennaDelay.timeRaw, LEN_TX_ANTD);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3330      	adds	r3, #48	; 0x30
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	9200      	str	r2, [sp, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2118      	movs	r1, #24
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f001 fd2e 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_RXANTD_SUB, dev->antennaDelay.timeRaw, LEN_LDE_RXANTD);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3330      	adds	r3, #48	; 0x30
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	9200      	str	r2, [sp, #0]
 8002e40:	f641 0204 	movw	r2, #6148	; 0x1804
 8002e44:	212e      	movs	r1, #46	; 0x2e
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f001 fd24 	bl	8004894 <dwSpiWrite>
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <dwSuppressFrameCheck>:
    dev->wait4resp = val;
    setBit(dev->sysctrl, LEN_SYS_CTRL, WAIT4RESP_BIT, val);
}

void dwSuppressFrameCheck(dwDeviceTypes_t *dev, bool val)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	70fb      	strb	r3, [r7, #3]
    dev->frameCheck = !val;
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf14      	ite	ne
 8002e66:	2301      	movne	r3, #1
 8002e68:	2300      	moveq	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f083 0301 	eor.w	r3, r3, #1
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <dwUseSmartPower>:

void dwUseSmartPower(dwDeviceTypes_t *dev, bool smartPower)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
    dev->smartPower = smartPower;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    setBit(dev->syscfg, LEN_SYS_CFG, DIS_STXP_BIT, !smartPower);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f103 000d 	add.w	r0, r3, #13
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f083 0301 	eor.w	r3, r3, #1
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2212      	movs	r2, #18
 8002ebc:	2104      	movs	r1, #4
 8002ebe:	f7ff fa0c 	bl	80022da <setBit>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <dwSetTxDelay>:
    futureTime.timeFull += dev->antennaDelay.timeFull;
    return futureTime;
}

uint64_t dwSetTxDelay(dwDeviceTypes_t *dev, uint64_t delay)
{
 8002eca:	b5b0      	push	{r4, r5, r7, lr}
 8002ecc:	b08a      	sub	sp, #40	; 0x28
 8002ece:	af02      	add	r7, sp, #8
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t delayBytes[5];
	dwTimestamp_t timeTx;
	dwGetSystemTimestamp(dev, &timeTx);
 8002ed6:	f107 0310 	add.w	r3, r7, #16
 8002eda:	4619      	mov	r1, r3
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fbfd 	bl	80036dc <dwGetSystemTimestamp>
	timeTx.timeFull += delay;
 8002ee2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eea:	1884      	adds	r4, r0, r2
 8002eec:	eb41 0503 	adc.w	r5, r1, r3
 8002ef0:	e9c7 4504 	strd	r4, r5, [r7, #16]
	memcpy(delayBytes, timeTx.timeRaw, sizeof(timeTx.timeRaw));
 8002ef4:	f107 0318 	add.w	r3, r7, #24
 8002ef8:	f107 0210 	add.w	r2, r7, #16
 8002efc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f00:	6018      	str	r0, [r3, #0]
 8002f02:	3304      	adds	r3, #4
 8002f04:	7019      	strb	r1, [r3, #0]
    delayBytes[0] = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	763b      	strb	r3, [r7, #24]
    delayBytes[1] &= 0xFE;
 8002f0a:	7e7b      	ldrb	r3, [r7, #25]
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	767b      	strb	r3, [r7, #25]
    dwSpiWrite(dev, DX_TIME, NO_SUB, delayBytes, LEN_DX_TIME);
 8002f14:	f107 0318 	add.w	r3, r7, #24
 8002f18:	2205      	movs	r2, #5
 8002f1a:	9200      	str	r2, [sp, #0]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	210a      	movs	r1, #10
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f001 fcb7 	bl	8004894 <dwSpiWrite>
    memcpy(timeTx.timeRaw, delayBytes, sizeof(delayBytes));
 8002f26:	f107 0310 	add.w	r3, r7, #16
 8002f2a:	f107 0218 	add.w	r2, r7, #24
 8002f2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f32:	6018      	str	r0, [r3, #0]
 8002f34:	3304      	adds	r3, #4
 8002f36:	7019      	strb	r1, [r3, #0]
    return timeTx.timeFull;
 8002f38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bdb0      	pop	{r4, r5, r7, pc}

08002f46 <dwSetDataRate>:
    delayBytes[1] &= 0xFE;
    dwSpiWrite(dev, DX_TIME, NO_SUB, delayBytes, LEN_DX_TIME);
}

void dwSetDataRate(dwDeviceTypes_t *dev, uint8_t rate)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af02      	add	r7, sp, #8
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	70fb      	strb	r3, [r7, #3]
    rate &= 0x03;
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[1] &= 0x83;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7fdb      	ldrb	r3, [r3, #31]
 8002f5e:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	77da      	strb	r2, [r3, #31]
    dev->txfctrl[1] |= (uint8_t)((rate << 5) & 0xFF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7fda      	ldrb	r2, [r3, #31]
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	015b      	lsls	r3, r3, #5
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	4313      	orrs	r3, r2
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	77da      	strb	r2, [r3, #31]
    // special 110kbps flag
    if (rate == TRX_RATE_110KBPS)
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d108      	bne.n	8002f92 <dwSetDataRate+0x4c>
    {
        setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, true);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f103 000d 	add.w	r0, r3, #13
 8002f86:	2301      	movs	r3, #1
 8002f88:	2216      	movs	r2, #22
 8002f8a:	2104      	movs	r1, #4
 8002f8c:	f7ff f9a5 	bl	80022da <setBit>
 8002f90:	e007      	b.n	8002fa2 <dwSetDataRate+0x5c>
    }
    else
    {
        setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, false);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f103 000d 	add.w	r0, r3, #13
 8002f98:	2300      	movs	r3, #0
 8002f9a:	2216      	movs	r2, #22
 8002f9c:	2104      	movs	r1, #4
 8002f9e:	f7ff f99c 	bl	80022da <setBit>
    }
    // SFD mode and type (non-configurable, as in Table )
    if (rate == TRX_RATE_6800KBPS)
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d118      	bne.n	8002fda <dwSetDataRate+0x94>
    {
        setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, false);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f103 0015 	add.w	r0, r3, #21
 8002fae:	2300      	movs	r3, #0
 8002fb0:	2211      	movs	r2, #17
 8002fb2:	2104      	movs	r1, #4
 8002fb4:	f7ff f991 	bl	80022da <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, false);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f103 0015 	add.w	r0, r3, #21
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2214      	movs	r2, #20
 8002fc2:	2104      	movs	r1, #4
 8002fc4:	f7ff f989 	bl	80022da <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, false);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f103 0015 	add.w	r0, r3, #21
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2215      	movs	r2, #21
 8002fd2:	2104      	movs	r1, #4
 8002fd4:	f7ff f981 	bl	80022da <setBit>
 8002fd8:	e017      	b.n	800300a <dwSetDataRate+0xc4>
    }
    else
    {
        setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, true);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f103 0015 	add.w	r0, r3, #21
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	2211      	movs	r2, #17
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	f7ff f978 	bl	80022da <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, true);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f103 0015 	add.w	r0, r3, #21
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	2214      	movs	r2, #20
 8002ff4:	2104      	movs	r1, #4
 8002ff6:	f7ff f970 	bl	80022da <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, true);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f103 0015 	add.w	r0, r3, #21
 8003000:	2301      	movs	r3, #1
 8003002:	2215      	movs	r2, #21
 8003004:	2104      	movs	r1, #4
 8003006:	f7ff f968 	bl	80022da <setBit>
    }
    uint8_t sfdLength;
    if (rate == TRX_RATE_6800KBPS)
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d102      	bne.n	8003016 <dwSetDataRate+0xd0>
    {
        sfdLength = 0x08;
 8003010:	2308      	movs	r3, #8
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	e007      	b.n	8003026 <dwSetDataRate+0xe0>
    }
    else if (rate == TRX_RATE_850KBPS)
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d102      	bne.n	8003022 <dwSetDataRate+0xdc>
    {
        sfdLength = 0x10;
 800301c:	2310      	movs	r3, #16
 800301e:	73fb      	strb	r3, [r7, #15]
 8003020:	e001      	b.n	8003026 <dwSetDataRate+0xe0>
    }
    else
    {
        sfdLength = 0x40;
 8003022:	2340      	movs	r3, #64	; 0x40
 8003024:	73fb      	strb	r3, [r7, #15]
    }
    dwSpiWrite(dev, USR_SFD, SFD_LENGTH_SUB, &sfdLength, LEN_SFD_LENGTH);
 8003026:	f107 030f 	add.w	r3, r7, #15
 800302a:	2201      	movs	r2, #1
 800302c:	9200      	str	r2, [sp, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	2121      	movs	r1, #33	; 0x21
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f001 fc2e 	bl	8004894 <dwSpiWrite>
    dev->dataRate = rate;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <dwSetPulseFrequency>:

void dwSetPulseFrequency(dwDeviceTypes_t *dev, uint8_t freq)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	70fb      	strb	r3, [r7, #3]
    freq &= 0x03;
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[2] &= 0xFC;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003062:	f023 0303 	bic.w	r3, r3, #3
 8003066:	b2da      	uxtb	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f883 2020 	strb.w	r2, [r3, #32]
    dev->txfctrl[2] |= (uint8_t)(freq & 0xFF);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	4313      	orrs	r3, r2
 8003078:	b2da      	uxtb	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f883 2020 	strb.w	r2, [r3, #32]
    dev->chanctrl[2] &= 0xF3;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	7ddb      	ldrb	r3, [r3, #23]
 8003084:	f023 030c 	bic.w	r3, r3, #12
 8003088:	b2da      	uxtb	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[2] |= (uint8_t)((freq << 2) & 0xFF);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7dda      	ldrb	r2, [r3, #23]
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	b2db      	uxtb	r3, r3
 8003098:	4313      	orrs	r3, r2
 800309a:	b2da      	uxtb	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	75da      	strb	r2, [r3, #23]
    dev->pulseFrequency = freq;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <dwSetPreambleLength>:
{
    return dev->pulseFrequency;
}

void dwSetPreambleLength(dwDeviceTypes_t *dev, uint8_t prealen)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	70fb      	strb	r3, [r7, #3]
    prealen &= 0x0F;
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[2] &= 0xC3;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030cc:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f883 2020 	strb.w	r2, [r3, #32]
    dev->txfctrl[2] |= (uint8_t)((prealen << 2) & 0xFF);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 2020 	ldrb.w	r2, [r3, #32]
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	4313      	orrs	r3, r2
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f883 2020 	strb.w	r2, [r3, #32]
    if (prealen == TX_PREAMBLE_LEN_64 || prealen == TX_PREAMBLE_LEN_128)
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d002      	beq.n	80030fa <dwSetPreambleLength+0x48>
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	2b05      	cmp	r3, #5
 80030f8:	d104      	bne.n	8003104 <dwSetPreambleLength+0x52>
    {
        dev->pacSize = PAC_SIZE_8;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2208      	movs	r2, #8
 80030fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003102:	e016      	b.n	8003132 <dwSetPreambleLength+0x80>
    }
    else if (prealen == TX_PREAMBLE_LEN_256 || prealen == TX_PREAMBLE_LEN_512)
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	2b09      	cmp	r3, #9
 8003108:	d002      	beq.n	8003110 <dwSetPreambleLength+0x5e>
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	2b0d      	cmp	r3, #13
 800310e:	d104      	bne.n	800311a <dwSetPreambleLength+0x68>
    {
        dev->pacSize = PAC_SIZE_16;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2210      	movs	r2, #16
 8003114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003118:	e00b      	b.n	8003132 <dwSetPreambleLength+0x80>
    }
    else if (prealen == TX_PREAMBLE_LEN_1024)
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d104      	bne.n	800312a <dwSetPreambleLength+0x78>
    {
        dev->pacSize = PAC_SIZE_32;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003128:	e003      	b.n	8003132 <dwSetPreambleLength+0x80>
    }
    else
    {
        dev->pacSize = PAC_SIZE_64;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2240      	movs	r2, #64	; 0x40
 800312e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    dev->preambleLength = prealen;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <dwUseExtendedFrameLength>:

void dwUseExtendedFrameLength(dwDeviceTypes_t *dev, bool val)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
    dev->extendedFrameLength = (val ? FRAME_LENGTH_EXTENDED : FRAME_LENGTH_NORMAL);
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <dwUseExtendedFrameLength+0x16>
 8003156:	2203      	movs	r2, #3
 8003158:	e000      	b.n	800315c <dwUseExtendedFrameLength+0x18>
 800315a:	2200      	movs	r2, #0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    dev->syscfg[2] &= 0xFC;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7bdb      	ldrb	r3, [r3, #15]
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	b2da      	uxtb	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	73da      	strb	r2, [r3, #15]
    dev->syscfg[2] |= dev->extendedFrameLength;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	7bda      	ldrb	r2, [r3, #15]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800317a:	4313      	orrs	r3, r2
 800317c:	b2da      	uxtb	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	73da      	strb	r2, [r3, #15]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <dwSetChannel>:
{
    dev->permanentReceive = val;
}

void dwSetChannel(dwDeviceTypes_t *dev, uint8_t channel)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
    channel &= 0xF;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	70fb      	strb	r3, [r7, #3]
    dev->chanctrl[0] = ((channel | (channel << 4)) & 0xFF);
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	b25a      	sxtb	r2, r3
 80031a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	b25b      	sxtb	r3, r3
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	755a      	strb	r2, [r3, #21]
    dev->channel = channel;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <dwSetPreambleCode>:

void dwSetPreambleCode(dwDeviceTypes_t *dev, uint8_t preacode)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	460b      	mov	r3, r1
 80031d0:	70fb      	strb	r3, [r7, #3]
    preacode &= 0x1F;
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	70fb      	strb	r3, [r7, #3]
    dev->chanctrl[2] &= 0x3F;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	7ddb      	ldrb	r3, [r3, #23]
 80031de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[2] |= ((preacode << 6) & 0xFF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	7ddb      	ldrb	r3, [r3, #23]
 80031ec:	b25a      	sxtb	r2, r3
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	019b      	lsls	r3, r3, #6
 80031f2:	b25b      	sxtb	r3, r3
 80031f4:	4313      	orrs	r3, r2
 80031f6:	b25b      	sxtb	r3, r3
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[3] = 0x00;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	761a      	strb	r2, [r3, #24]
    dev->chanctrl[3] = ((((preacode >> 2) & 0x07) | (preacode << 3)) & 0xFF);
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	089b      	lsrs	r3, r3, #2
 8003208:	b2db      	uxtb	r3, r3
 800320a:	b25b      	sxtb	r3, r3
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	b25a      	sxtb	r2, r3
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	b25b      	sxtb	r3, r3
 8003218:	4313      	orrs	r3, r2
 800321a:	b25b      	sxtb	r3, r3
 800321c:	b2da      	uxtb	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	761a      	strb	r2, [r3, #24]
    dev->preambleCode = preacode;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <dwSetDefaults>:

void dwSetDefaults(dwDeviceTypes_t *dev)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
    if (dev->deviceMode == TX_MODE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	7a1b      	ldrb	r3, [r3, #8]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d04d      	beq.n	80032e0 <dwSetDefaults+0xac>
    {
    }
    else if (dev->deviceMode == RX_MODE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7a1b      	ldrb	r3, [r3, #8]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d049      	beq.n	80032e0 <dwSetDefaults+0xac>
    {
    }
    else if (dev->deviceMode == IDLE_MODE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7a1b      	ldrb	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d145      	bne.n	80032e0 <dwSetDefaults+0xac>
    {
        dwUseExtendedFrameLength(dev, false);
 8003254:	2100      	movs	r1, #0
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff ff74 	bl	8003144 <dwUseExtendedFrameLength>
        dwUseSmartPower(dev, false);
 800325c:	2100      	movs	r1, #0
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff fe12 	bl	8002e88 <dwUseSmartPower>
        dwSuppressFrameCheck(dev, false);
 8003264:	2100      	movs	r1, #0
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff fdf4 	bl	8002e54 <dwSuppressFrameCheck>
        // for global frame filtering
        dwSetFrameFilter(dev, false);
 800326c:	2100      	movs	r1, #0
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fba7 	bl	80029c2 <dwSetFrameFilter>
        // for data frame (poll, poll_ack, range, range report, range failed) filtering
        dwSetFrameFilterAllowData(dev, false);
 8003274:	2100      	movs	r1, #0
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff fbb5 	bl	80029e6 <dwSetFrameFilterAllowData>
        // for reserved (blink) frame filtering
        dwSetFrameFilterAllowReserved(dev, false);
 800327c:	2100      	movs	r1, #0
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff fbc3 	bl	8002a0a <dwSetFrameFilterAllowReserved>
        // setFrameFilterAllowMAC(true);
        // setFrameFilterAllowBeacon(true);
        // setFrameFilterAllowAcknowledgement(true);
        dwInterruptOnSent(dev, true);
 8003284:	2101      	movs	r1, #1
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff fc12 	bl	8002ab0 <dwInterruptOnSent>
        dwInterruptOnReceived(dev, true);
 800328c:	2101      	movs	r1, #1
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff fc20 	bl	8002ad4 <dwInterruptOnReceived>
        dwInterruptOnReceiveTimeout(dev, true);
 8003294:	2101      	movs	r1, #1
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff fc70 	bl	8002b7c <dwInterruptOnReceiveTimeout>
        dwInterruptOnReceiveFailed(dev, false);
 800329c:	2100      	movs	r1, #0
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff fc32 	bl	8002b08 <dwInterruptOnReceiveFailed>
        dwInterruptOnReceiveTimestampAvailable(dev, false);
 80032a4:	2100      	movs	r1, #0
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fc82 	bl	8002bb0 <dwInterruptOnReceiveTimestampAvailable>
        dwInterruptOnAutomaticAcknowledgeTrigger(dev, false);
 80032ac:	2100      	movs	r1, #0
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff fc90 	bl	8002bd4 <dwInterruptOnAutomaticAcknowledgeTrigger>
        dwSetReceiverAutoReenable(dev, true);
 80032b4:	2101      	movs	r1, #1
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff fbe8 	bl	8002a8c <dwSetReceiverAutoReenable>
        // default mode when powering up the chip
        // still explicitly selected for later tuning
        dwEnableMode(dev, MODE_LONGDATA_RANGE_LOWPOWER);
 80032bc:	490a      	ldr	r1, [pc, #40]	; (80032e8 <dwSetDefaults+0xb4>)
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fb9c 	bl	80039fc <dwEnableMode>
        dev->func->delayms(dev, 5);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2105      	movs	r1, #5
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
        dwUseSmartPower(dev, true);
 80032d0:	2101      	movs	r1, #1
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff fdd8 	bl	8002e88 <dwUseSmartPower>
        dwEnableMode(dev, MODE_SHORTDATA_FAST_ACCURACY);
 80032d8:	4904      	ldr	r1, [pc, #16]	; (80032ec <dwSetDefaults+0xb8>)
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fb8e 	bl	80039fc <dwEnableMode>
    }
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	0800a9cc 	.word	0x0800a9cc
 80032ec:	0800a9d0 	.word	0x0800a9d0

080032f0 <dwSetData>:

void dwSetData(dwDeviceTypes_t *dev, uint8_t data[], unsigned int n)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
    if (dev->frameCheck)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <dwSetData+0x1c>
    {
        n += 2; // two bytes CRC-16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3302      	adds	r3, #2
 800330a:	607b      	str	r3, [r7, #4]
    }
    if (n > LEN_EXT_UWB_FRAMES)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003312:	d229      	bcs.n	8003368 <dwSetData+0x78>
    {
        return; // TODO proper error handling: frame/buffer size
    }
    if (n > LEN_UWB_FRAMES && !dev->extendedFrameLength)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b7f      	cmp	r3, #127	; 0x7f
 8003318:	d904      	bls.n	8003324 <dwSetData+0x34>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003320:	2b00      	cmp	r3, #0
 8003322:	d023      	beq.n	800336c <dwSetData+0x7c>
    {
        return; // TODO proper error handling: frame/buffer size
    }
    // transmit data and length
    dwSpiWrite(dev, TX_BUFFER, NO_SUB, data, n);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2200      	movs	r2, #0
 800332c:	2109      	movs	r1, #9
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f001 fab0 	bl	8004894 <dwSpiWrite>
    dev->txfctrl[0] = (uint8_t)(n & 0xFF); // 1 byte (regular length + 1 bit)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	779a      	strb	r2, [r3, #30]
    dev->txfctrl[1] &= 0xE0;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	7fdb      	ldrb	r3, [r3, #31]
 8003340:	f023 031f 	bic.w	r3, r3, #31
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	77da      	strb	r2, [r3, #31]
    dev->txfctrl[1] |= (uint8_t)((n >> 8) & 0x03); // 2 added bits if extended length
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	7fdb      	ldrb	r3, [r3, #31]
 800334e:	b25a      	sxtb	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	b25b      	sxtb	r3, r3
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	b25b      	sxtb	r3, r3
 800335c:	4313      	orrs	r3, r2
 800335e:	b25b      	sxtb	r3, r3
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	77da      	strb	r2, [r3, #31]
 8003366:	e002      	b.n	800336e <dwSetData+0x7e>
        return; // TODO proper error handling: frame/buffer size
 8003368:	bf00      	nop
 800336a:	e000      	b.n	800336e <dwSetData+0x7e>
        return; // TODO proper error handling: frame/buffer size
 800336c:	bf00      	nop
}
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <dwGetDataLength>:

unsigned int dwGetDataLength(dwDeviceTypes_t *dev)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af02      	add	r7, sp, #8
 800337a:	6078      	str	r0, [r7, #4]
    unsigned int len = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
    if (dev->deviceMode == TX_MODE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	7a1b      	ldrb	r3, [r3, #8]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d109      	bne.n	800339c <dwGetDataLength+0x28>
    {
        // 10 bits of TX frame control register
        len = ((((unsigned int)dev->txfctrl[1] << 8) | (unsigned int)dev->txfctrl[0]) & 0x03FF);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	7fdb      	ldrb	r3, [r3, #31]
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	7f92      	ldrb	r2, [r2, #30]
 8003392:	4313      	orrs	r3, r2
 8003394:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	e013      	b.n	80033c4 <dwGetDataLength+0x50>
    }
    else if (dev->deviceMode == RX_MODE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	7a1b      	ldrb	r3, [r3, #8]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d10f      	bne.n	80033c4 <dwGetDataLength+0x50>
    {
        // 10 bits of RX frame control register
        uint8_t rxFrameInfo[LEN_RX_FINFO];
        dwSpiRead(dev, RX_FINFO, NO_SUB, rxFrameInfo, LEN_RX_FINFO);
 80033a4:	f107 0308 	add.w	r3, r7, #8
 80033a8:	2204      	movs	r2, #4
 80033aa:	9200      	str	r2, [sp, #0]
 80033ac:	2200      	movs	r2, #0
 80033ae:	2110      	movs	r1, #16
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f001 fa07 	bl	80047c4 <dwSpiRead>
        len = ((((unsigned int)rxFrameInfo[1] << 8) | (unsigned int)rxFrameInfo[0]) & 0x03FF);
 80033b6:	7a7b      	ldrb	r3, [r7, #9]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	7a3a      	ldrb	r2, [r7, #8]
 80033bc:	4313      	orrs	r3, r2
 80033be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c2:	60fb      	str	r3, [r7, #12]
    }
    if (dev->frameCheck && len > 2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <dwGetDataLength+0x66>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d902      	bls.n	80033da <dwGetDataLength+0x66>
    {
        return len - 2;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3b02      	subs	r3, #2
 80033d8:	e000      	b.n	80033dc <dwGetDataLength+0x68>
    }
    return len;
 80033da:	68fb      	ldr	r3, [r7, #12]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <dwGetData>:

void dwGetData(dwDeviceTypes_t *dev, uint8_t data[], unsigned int n)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
    if (n <= 0)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <dwGetData+0x24>
    {
        return;
    }
    dwSpiRead(dev, RX_BUFFER, NO_SUB, data, n);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2200      	movs	r2, #0
 80033fe:	2111      	movs	r1, #17
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f001 f9df 	bl	80047c4 <dwSpiRead>
 8003406:	e000      	b.n	800340a <dwGetData+0x26>
        return;
 8003408:	bf00      	nop
}
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <dwGetReceiveTimestamp>:
{
    dwSpiRead(dev, TX_TIME, TX_STAMP_SUB, time->timeRaw, LEN_TX_STAMP);
}

void dwGetReceiveTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *time)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af02      	add	r7, sp, #8
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
    time->timeFull = 0;
 800341a:	6839      	ldr	r1, [r7, #0]
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	e9c1 2300 	strd	r2, r3, [r1]
    dwSpiRead(dev, RX_TIME, RX_STAMP_SUB, time->timeRaw, LEN_RX_STAMP);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2205      	movs	r2, #5
 800342c:	9200      	str	r2, [sp, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	2115      	movs	r1, #21
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f001 f9c6 	bl	80047c4 <dwSpiRead>
    // correct timestamp (i.e. consider range bias)
    dwCorrectTimestamp(dev, time);
 8003438:	6839      	ldr	r1, [r7, #0]
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f804 	bl	8003448 <dwCorrectTimestamp>
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <dwCorrectTimestamp>:
    time->timeFull = 0;
    dwSpiRead(dev, RX_TIME, RX_STAMP_SUB, time->timeRaw, LEN_RX_STAMP);
}

void dwCorrectTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *timestamp)
{
 8003448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800344c:	b08a      	sub	sp, #40	; 0x28
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
    // base line dBm, which is -61, 2 dBm steps, total 18 data points (down to -95 dBm)
    float rxPowerBase = -(dwGetReceivePower(dev) + 61.0f) * 0.5f;
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 faa9 	bl	80039ac <dwGetReceivePower>
 800345a:	4603      	mov	r3, r0
 800345c:	4997      	ldr	r1, [pc, #604]	; (80036bc <dwCorrectTimestamp+0x274>)
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fb84 	bl	8000b6c <__addsf3>
 8003464:	4603      	mov	r3, r0
 8003466:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800346a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd fc84 	bl	8000d7c <__aeabi_fmul>
 8003474:	4603      	mov	r3, r0
 8003476:	617b      	str	r3, [r7, #20]

    if (!isfinite(rxPowerBase))
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800347e:	4990      	ldr	r1, [pc, #576]	; (80036c0 <dwCorrectTimestamp+0x278>)
 8003480:	4630      	mov	r0, r6
 8003482:	f7fd fe41 	bl	8001108 <__aeabi_fcmpun>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	f040 8111 	bne.w	80036b0 <dwCorrectTimestamp+0x268>
 800348e:	498c      	ldr	r1, [pc, #560]	; (80036c0 <dwCorrectTimestamp+0x278>)
 8003490:	4630      	mov	r0, r6
 8003492:	f7fd fe2f 	bl	80010f4 <__aeabi_fcmpgt>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	f040 8109 	bne.w	80036b0 <dwCorrectTimestamp+0x268>
    {
        return;
    }
    int rxPowerBaseLow = (int)rxPowerBase;
 800349e:	6978      	ldr	r0, [r7, #20]
 80034a0:	f7fd fe48 	bl	8001134 <__aeabi_f2iz>
 80034a4:	4603      	mov	r3, r0
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
    int rxPowerBaseHigh = rxPowerBaseLow + 1;
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	3301      	adds	r3, #1
 80034ac:	623b      	str	r3, [r7, #32]
    if (rxPowerBaseLow <= 0)
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	dc04      	bgt.n	80034be <dwCorrectTimestamp+0x76>
    {
        rxPowerBaseLow = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
        rxPowerBaseHigh = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	623b      	str	r3, [r7, #32]
 80034bc:	e006      	b.n	80034cc <dwCorrectTimestamp+0x84>
    }
    else if (rxPowerBaseHigh >= 17)
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	2b10      	cmp	r3, #16
 80034c2:	dd03      	ble.n	80034cc <dwCorrectTimestamp+0x84>
    {
        rxPowerBaseLow = 17;
 80034c4:	2311      	movs	r3, #17
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
        rxPowerBaseHigh = 17;
 80034c8:	2311      	movs	r3, #17
 80034ca:	623b      	str	r3, [r7, #32]
    }
    // select range low/high values from corresponding table
    int rangeBiasHigh = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
    int rangeBiasLow = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
    if (dev->channel == CHANNEL_4 || dev->channel == CHANNEL_7)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d004      	beq.n	80034e8 <dwCorrectTimestamp+0xa0>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80034e4:	2b07      	cmp	r3, #7
 80034e6:	d157      	bne.n	8003598 <dwCorrectTimestamp+0x150>
    {
        // 900 MHz receiver bandwidth
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d126      	bne.n	8003540 <dwCorrectTimestamp+0xf8>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_900_16_ZERO ? -BIAS_900_16[rxPowerBaseHigh] : BIAS_900_16[rxPowerBaseHigh]);
 80034f2:	2307      	movs	r3, #7
 80034f4:	461a      	mov	r2, r3
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	4293      	cmp	r3, r2
 80034fa:	da05      	bge.n	8003508 <dwCorrectTimestamp+0xc0>
 80034fc:	4a71      	ldr	r2, [pc, #452]	; (80036c4 <dwCorrectTimestamp+0x27c>)
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	4413      	add	r3, r2
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	425b      	negs	r3, r3
 8003506:	e003      	b.n	8003510 <dwCorrectTimestamp+0xc8>
 8003508:	4a6e      	ldr	r2, [pc, #440]	; (80036c4 <dwCorrectTimestamp+0x27c>)
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	4413      	add	r3, r2
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	61fb      	str	r3, [r7, #28]
            rangeBiasHigh <<= 1;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_900_16_ZERO ? -BIAS_900_16[rxPowerBaseLow] : BIAS_900_16[rxPowerBaseLow]);
 8003518:	2307      	movs	r3, #7
 800351a:	461a      	mov	r2, r3
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	4293      	cmp	r3, r2
 8003520:	da05      	bge.n	800352e <dwCorrectTimestamp+0xe6>
 8003522:	4a68      	ldr	r2, [pc, #416]	; (80036c4 <dwCorrectTimestamp+0x27c>)
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	4413      	add	r3, r2
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	425b      	negs	r3, r3
 800352c:	e003      	b.n	8003536 <dwCorrectTimestamp+0xee>
 800352e:	4a65      	ldr	r2, [pc, #404]	; (80036c4 <dwCorrectTimestamp+0x27c>)
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	4413      	add	r3, r2
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	61bb      	str	r3, [r7, #24]
            rangeBiasLow <<= 1;
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	61bb      	str	r3, [r7, #24]
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800353e:	e077      	b.n	8003630 <dwCorrectTimestamp+0x1e8>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003546:	2b02      	cmp	r3, #2
 8003548:	d172      	bne.n	8003630 <dwCorrectTimestamp+0x1e8>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_900_64_ZERO ? -BIAS_900_64[rxPowerBaseHigh] : BIAS_900_64[rxPowerBaseHigh]);
 800354a:	2307      	movs	r3, #7
 800354c:	461a      	mov	r2, r3
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	4293      	cmp	r3, r2
 8003552:	da05      	bge.n	8003560 <dwCorrectTimestamp+0x118>
 8003554:	4a5c      	ldr	r2, [pc, #368]	; (80036c8 <dwCorrectTimestamp+0x280>)
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	4413      	add	r3, r2
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	425b      	negs	r3, r3
 800355e:	e003      	b.n	8003568 <dwCorrectTimestamp+0x120>
 8003560:	4a59      	ldr	r2, [pc, #356]	; (80036c8 <dwCorrectTimestamp+0x280>)
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	4413      	add	r3, r2
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	61fb      	str	r3, [r7, #28]
            rangeBiasHigh <<= 1;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_900_64_ZERO ? -BIAS_900_64[rxPowerBaseLow] : BIAS_900_64[rxPowerBaseLow]);
 8003570:	2307      	movs	r3, #7
 8003572:	461a      	mov	r2, r3
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	4293      	cmp	r3, r2
 8003578:	da05      	bge.n	8003586 <dwCorrectTimestamp+0x13e>
 800357a:	4a53      	ldr	r2, [pc, #332]	; (80036c8 <dwCorrectTimestamp+0x280>)
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	4413      	add	r3, r2
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	425b      	negs	r3, r3
 8003584:	e003      	b.n	800358e <dwCorrectTimestamp+0x146>
 8003586:	4a50      	ldr	r2, [pc, #320]	; (80036c8 <dwCorrectTimestamp+0x280>)
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	4413      	add	r3, r2
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	61bb      	str	r3, [r7, #24]
            rangeBiasLow <<= 1;
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	61bb      	str	r3, [r7, #24]
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003596:	e04b      	b.n	8003630 <dwCorrectTimestamp+0x1e8>
        }
    }
    else
    {
        // 500 MHz receiver bandwidth
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d120      	bne.n	80035e4 <dwCorrectTimestamp+0x19c>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_500_16_ZERO ? -BIAS_500_16[rxPowerBaseHigh] : BIAS_500_16[rxPowerBaseHigh]);
 80035a2:	230a      	movs	r3, #10
 80035a4:	461a      	mov	r2, r3
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	4293      	cmp	r3, r2
 80035aa:	da05      	bge.n	80035b8 <dwCorrectTimestamp+0x170>
 80035ac:	4a47      	ldr	r2, [pc, #284]	; (80036cc <dwCorrectTimestamp+0x284>)
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	4413      	add	r3, r2
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	425b      	negs	r3, r3
 80035b6:	e003      	b.n	80035c0 <dwCorrectTimestamp+0x178>
 80035b8:	4a44      	ldr	r2, [pc, #272]	; (80036cc <dwCorrectTimestamp+0x284>)
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	4413      	add	r3, r2
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_500_16_ZERO ? -BIAS_500_16[rxPowerBaseLow] : BIAS_500_16[rxPowerBaseLow]);
 80035c2:	230a      	movs	r3, #10
 80035c4:	461a      	mov	r2, r3
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	4293      	cmp	r3, r2
 80035ca:	da05      	bge.n	80035d8 <dwCorrectTimestamp+0x190>
 80035cc:	4a3f      	ldr	r2, [pc, #252]	; (80036cc <dwCorrectTimestamp+0x284>)
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	4413      	add	r3, r2
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	425b      	negs	r3, r3
 80035d6:	e003      	b.n	80035e0 <dwCorrectTimestamp+0x198>
 80035d8:	4a3c      	ldr	r2, [pc, #240]	; (80036cc <dwCorrectTimestamp+0x284>)
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	4413      	add	r3, r2
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	e026      	b.n	8003632 <dwCorrectTimestamp+0x1ea>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d121      	bne.n	8003632 <dwCorrectTimestamp+0x1ea>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_500_64_ZERO ? -BIAS_500_64[rxPowerBaseHigh] : BIAS_500_64[rxPowerBaseHigh]);
 80035ee:	2308      	movs	r3, #8
 80035f0:	461a      	mov	r2, r3
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	4293      	cmp	r3, r2
 80035f6:	da05      	bge.n	8003604 <dwCorrectTimestamp+0x1bc>
 80035f8:	4a35      	ldr	r2, [pc, #212]	; (80036d0 <dwCorrectTimestamp+0x288>)
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	4413      	add	r3, r2
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	425b      	negs	r3, r3
 8003602:	e003      	b.n	800360c <dwCorrectTimestamp+0x1c4>
 8003604:	4a32      	ldr	r2, [pc, #200]	; (80036d0 <dwCorrectTimestamp+0x288>)
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	4413      	add	r3, r2
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_500_64_ZERO ? -BIAS_500_64[rxPowerBaseLow] : BIAS_500_64[rxPowerBaseLow]);
 800360e:	2308      	movs	r3, #8
 8003610:	461a      	mov	r2, r3
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	4293      	cmp	r3, r2
 8003616:	da05      	bge.n	8003624 <dwCorrectTimestamp+0x1dc>
 8003618:	4a2d      	ldr	r2, [pc, #180]	; (80036d0 <dwCorrectTimestamp+0x288>)
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	4413      	add	r3, r2
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	425b      	negs	r3, r3
 8003622:	e003      	b.n	800362c <dwCorrectTimestamp+0x1e4>
 8003624:	4a2a      	ldr	r2, [pc, #168]	; (80036d0 <dwCorrectTimestamp+0x288>)
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	4413      	add	r3, r2
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	e000      	b.n	8003632 <dwCorrectTimestamp+0x1ea>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003630:	bf00      	nop
        {
            // TODO proper error handling
        }
    }
    // linear interpolation of bias values
    float rangeBias = rangeBiasLow + (rxPowerBase - rxPowerBaseLow) * (rangeBiasHigh - rangeBiasLow);
 8003632:	69b8      	ldr	r0, [r7, #24]
 8003634:	f7fd fb4e 	bl	8000cd4 <__aeabi_i2f>
 8003638:	4606      	mov	r6, r0
 800363a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800363c:	f7fd fb4a 	bl	8000cd4 <__aeabi_i2f>
 8003640:	4603      	mov	r3, r0
 8003642:	4619      	mov	r1, r3
 8003644:	6978      	ldr	r0, [r7, #20]
 8003646:	f7fd fa8f 	bl	8000b68 <__aeabi_fsub>
 800364a:	4603      	mov	r3, r0
 800364c:	469a      	mov	sl, r3
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	4618      	mov	r0, r3
 8003656:	f7fd fb3d 	bl	8000cd4 <__aeabi_i2f>
 800365a:	4603      	mov	r3, r0
 800365c:	4619      	mov	r1, r3
 800365e:	4650      	mov	r0, sl
 8003660:	f7fd fb8c 	bl	8000d7c <__aeabi_fmul>
 8003664:	4603      	mov	r3, r0
 8003666:	4619      	mov	r1, r3
 8003668:	4630      	mov	r0, r6
 800366a:	f7fd fa7f 	bl	8000b6c <__addsf3>
 800366e:	4603      	mov	r3, r0
 8003670:	613b      	str	r3, [r7, #16]
    // range bias [mm] to timestamp modification value conversion
    dwTimestamp_t adjustmentTime;
    adjustmentTime.timeFull = (int)(rangeBias * DISTANCE_OF_RADIO_INV * 0.001f);
 8003672:	4918      	ldr	r1, [pc, #96]	; (80036d4 <dwCorrectTimestamp+0x28c>)
 8003674:	6938      	ldr	r0, [r7, #16]
 8003676:	f7fd fb81 	bl	8000d7c <__aeabi_fmul>
 800367a:	4603      	mov	r3, r0
 800367c:	4916      	ldr	r1, [pc, #88]	; (80036d8 <dwCorrectTimestamp+0x290>)
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd fb7c 	bl	8000d7c <__aeabi_fmul>
 8003684:	4603      	mov	r3, r0
 8003686:	4618      	mov	r0, r3
 8003688:	f7fd fd54 	bl	8001134 <__aeabi_f2iz>
 800368c:	4603      	mov	r3, r0
 800368e:	17da      	asrs	r2, r3, #31
 8003690:	4698      	mov	r8, r3
 8003692:	4691      	mov	r9, r2
 8003694:	e9c7 8902 	strd	r8, r9, [r7, #8]
    // apply correction
    timestamp->timeFull -= adjustmentTime.timeFull;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800369e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036a2:	1a84      	subs	r4, r0, r2
 80036a4:	eb61 0503 	sbc.w	r5, r1, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	e9c3 4500 	strd	r4, r5, [r3]
 80036ae:	e000      	b.n	80036b2 <dwCorrectTimestamp+0x26a>
        return;
 80036b0:	bf00      	nop
}
 80036b2:	3728      	adds	r7, #40	; 0x28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ba:	bf00      	nop
 80036bc:	42740000 	.word	0x42740000
 80036c0:	7f7fffff 	.word	0x7f7fffff
 80036c4:	0800a9fc 	.word	0x0800a9fc
 80036c8:	0800aa10 	.word	0x0800aa10
 80036cc:	0800a9d4 	.word	0x0800a9d4
 80036d0:	0800a9e8 	.word	0x0800a9e8
 80036d4:	435523b3 	.word	0x435523b3
 80036d8:	3a83126f 	.word	0x3a83126f

080036dc <dwGetSystemTimestamp>:

void dwGetSystemTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *time)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
    dwSpiRead(dev, SYS_TIME, NO_SUB, time->timeRaw, LEN_SYS_TIME);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2205      	movs	r2, #5
 80036ea:	9200      	str	r2, [sp, #0]
 80036ec:	2200      	movs	r2, #0
 80036ee:	2106      	movs	r1, #6
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f001 f867 	bl	80047c4 <dwSpiRead>
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <dwIsTransmitDone>:

bool dwIsTransmitDone(dwDeviceTypes_t *dev)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, TXFRS_BIT);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3319      	adds	r3, #25
 800370a:	2207      	movs	r2, #7
 800370c:	2105      	movs	r1, #5
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fe1f 	bl	8002352 <getBit>
 8003714:	4603      	mov	r3, r0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <dwIsReceiveTimestampAvailable>:

bool dwIsReceiveTimestampAvailable(dwDeviceTypes_t *dev)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, LDEDONE_BIT);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3319      	adds	r3, #25
 800372a:	220a      	movs	r2, #10
 800372c:	2105      	movs	r1, #5
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe fe0f 	bl	8002352 <getBit>
 8003734:	4603      	mov	r3, r0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <dwIsReceiveDone>:

bool dwIsReceiveDone(dwDeviceTypes_t *dev)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
    if (dev->frameCheck)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <dwIsReceiveDone+0x24>
    {
        return getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCG_BIT);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3319      	adds	r3, #25
 8003754:	220e      	movs	r2, #14
 8003756:	2105      	movs	r1, #5
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fdfa 	bl	8002352 <getBit>
 800375e:	4603      	mov	r3, r0
 8003760:	e007      	b.n	8003772 <dwIsReceiveDone+0x34>
    }
    return getBit(dev->sysstatus, LEN_SYS_STATUS, RXDFR_BIT);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3319      	adds	r3, #25
 8003766:	220d      	movs	r2, #13
 8003768:	2105      	movs	r1, #5
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe fdf1 	bl	8002352 <getBit>
 8003770:	4603      	mov	r3, r0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <dwIsReceiveFailed>:

bool dwIsReceiveFailed(dwDeviceTypes_t *dev)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
    bool ldeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, LDEERR_BIT);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3319      	adds	r3, #25
 8003786:	2212      	movs	r2, #18
 8003788:	2105      	movs	r1, #5
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe fde1 	bl	8002352 <getBit>
 8003790:	4603      	mov	r3, r0
 8003792:	73fb      	strb	r3, [r7, #15]
    bool rxCRCErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCE_BIT);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3319      	adds	r3, #25
 8003798:	220f      	movs	r2, #15
 800379a:	2105      	movs	r1, #5
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe fdd8 	bl	8002352 <getBit>
 80037a2:	4603      	mov	r3, r0
 80037a4:	73bb      	strb	r3, [r7, #14]
    bool rxHeaderErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXPHE_BIT);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3319      	adds	r3, #25
 80037aa:	220c      	movs	r2, #12
 80037ac:	2105      	movs	r1, #5
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe fdcf 	bl	8002352 <getBit>
 80037b4:	4603      	mov	r3, r0
 80037b6:	737b      	strb	r3, [r7, #13]
    bool rxDecodeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFSL_BIT);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3319      	adds	r3, #25
 80037bc:	2210      	movs	r2, #16
 80037be:	2105      	movs	r1, #5
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe fdc6 	bl	8002352 <getBit>
 80037c6:	4603      	mov	r3, r0
 80037c8:	733b      	strb	r3, [r7, #12]

    bool rxSfdto = getBit(dev->sysstatus, LEN_SYS_STATUS, RXSFDTO_BIT);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3319      	adds	r3, #25
 80037ce:	221a      	movs	r2, #26
 80037d0:	2105      	movs	r1, #5
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe fdbd 	bl	8002352 <getBit>
 80037d8:	4603      	mov	r3, r0
 80037da:	72fb      	strb	r3, [r7, #11]
    bool affrej = getBit(dev->sysstatus, LEN_SYS_STATUS, AFFREJ_BIT);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3319      	adds	r3, #25
 80037e0:	221d      	movs	r2, #29
 80037e2:	2105      	movs	r1, #5
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe fdb4 	bl	8002352 <getBit>
 80037ea:	4603      	mov	r3, r0
 80037ec:	72bb      	strb	r3, [r7, #10]

    return (ldeErr || rxCRCErr || rxHeaderErr || rxDecodeErr || rxSfdto || affrej);
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10e      	bne.n	8003812 <dwIsReceiveFailed+0x98>
 80037f4:	7bbb      	ldrb	r3, [r7, #14]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10b      	bne.n	8003812 <dwIsReceiveFailed+0x98>
 80037fa:	7b7b      	ldrb	r3, [r7, #13]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d108      	bne.n	8003812 <dwIsReceiveFailed+0x98>
 8003800:	7b3b      	ldrb	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d105      	bne.n	8003812 <dwIsReceiveFailed+0x98>
 8003806:	7afb      	ldrb	r3, [r7, #11]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d102      	bne.n	8003812 <dwIsReceiveFailed+0x98>
 800380c:	7abb      	ldrb	r3, [r7, #10]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <dwIsReceiveFailed+0x9c>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <dwIsReceiveFailed+0x9e>
 8003816:	2300      	movs	r3, #0
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	b2db      	uxtb	r3, r3
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <dwIsReceiveTimeout>:

bool dwIsReceiveTimeout(dwDeviceTypes_t *dev)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFTO_BIT);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3319      	adds	r3, #25
 8003832:	2211      	movs	r2, #17
 8003834:	2105      	movs	r1, #5
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fd8b 	bl	8002352 <getBit>
 800383c:	4603      	mov	r3, r0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <dwClearReceiveTimestampAvailableStatus>:
    uint32_t reg = 0xffffffff;
    dwSpiWrite(dev, SYS_STATUS, NO_SUB, &reg, LEN_SYS_STATUS);
}

void dwClearReceiveTimestampAvailableStatus(dwDeviceTypes_t *dev)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b086      	sub	sp, #24
 800384a:	af02      	add	r7, sp, #8
 800384c:	6078      	str	r0, [r7, #4]
    uint8_t reg[LEN_SYS_STATUS] = {0};
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	2300      	movs	r3, #0
 8003854:	733b      	strb	r3, [r7, #12]
    setBit(reg, LEN_SYS_STATUS, LDEDONE_BIT, true);
 8003856:	f107 0008 	add.w	r0, r7, #8
 800385a:	2301      	movs	r3, #1
 800385c:	220a      	movs	r2, #10
 800385e:	2105      	movs	r1, #5
 8003860:	f7fe fd3b 	bl	80022da <setBit>
    dwSpiWrite(dev, SYS_STATUS, NO_SUB, reg, LEN_SYS_STATUS);
 8003864:	f107 0308 	add.w	r3, r7, #8
 8003868:	2205      	movs	r2, #5
 800386a:	9200      	str	r2, [sp, #0]
 800386c:	2200      	movs	r2, #0
 800386e:	210f      	movs	r1, #15
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f001 f80f 	bl	8004894 <dwSpiWrite>
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <dwClearReceiveStatus>:

void dwClearReceiveStatus(dwDeviceTypes_t *dev)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    // clear latched RX bits (i.e. write 1 to clear)
    uint32_t regData = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_GOOD;
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <dwClearReceiveStatus+0x20>)
 800388a:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	210f      	movs	r1, #15
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f001 f858 	bl	8004948 <dwSpiWrite32>
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	2427ff00 	.word	0x2427ff00

080038a4 <dwClearTransmitStatus>:

void dwClearTransmitStatus(dwDeviceTypes_t *dev)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
    // clear latched TX bits
    uint32_t regData = SYS_STATUS_ALL_TX;
 80038ac:	23f8      	movs	r3, #248	; 0xf8
 80038ae:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	210f      	movs	r1, #15
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f001 f846 	bl	8004948 <dwSpiWrite32>
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <spiReadRxInfo>:
    f2 = (unsigned int)fpAmpl2Bytes[0] | ((unsigned int)fpAmpl2Bytes[1] << 8);
    return (float)f2 / noise;
}

static float spiReadRxInfo(dwDeviceTypes_t *dev)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	6078      	str	r0, [r7, #4]
    uint8_t rxFrameInfo[LEN_RX_FINFO];
    dwSpiRead(dev, RX_FINFO, NO_SUB, rxFrameInfo, LEN_RX_FINFO);
 80038cc:	f107 030c 	add.w	r3, r7, #12
 80038d0:	2204      	movs	r2, #4
 80038d2:	9200      	str	r2, [sp, #0]
 80038d4:	2200      	movs	r2, #0
 80038d6:	2110      	movs	r1, #16
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 ff73 	bl	80047c4 <dwSpiRead>
    return (float)((((unsigned int)rxFrameInfo[2] >> 4) & 0xFF) | ((unsigned int)rxFrameInfo[3] << 4));
 80038de:	7bbb      	ldrb	r3, [r7, #14]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	4313      	orrs	r3, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd f9ed 	bl	8000ccc <__aeabi_ui2f>
 80038f2:	4603      	mov	r3, r0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <calculatePower>:

static float calculatePower(float base, float N, uint8_t pulseFrequency)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	71fb      	strb	r3, [r7, #7]
    float A, corrFac;

    if (TX_PULSE_FREQ_16MHZ == pulseFrequency)
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d104      	bne.n	800391a <calculatePower+0x1e>
    {
        A = 113.77f;
 8003910:	4b1f      	ldr	r3, [pc, #124]	; (8003990 <calculatePower+0x94>)
 8003912:	61fb      	str	r3, [r7, #28]
        corrFac = 2.3334f;
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <calculatePower+0x98>)
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	e003      	b.n	8003922 <calculatePower+0x26>
    }
    else
    {
        A = 121.74f;
 800391a:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <calculatePower+0x9c>)
 800391c:	61fb      	str	r3, [r7, #28]
        corrFac = 1.1667f;
 800391e:	4b1f      	ldr	r3, [pc, #124]	; (800399c <calculatePower+0xa0>)
 8003920:	61bb      	str	r3, [r7, #24]
    }

    float estFpPwr = 10.0f * log10f(base / (N * N)) - A;
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	68b8      	ldr	r0, [r7, #8]
 8003926:	f7fd fa29 	bl	8000d7c <__aeabi_fmul>
 800392a:	4603      	mov	r3, r0
 800392c:	4619      	mov	r1, r3
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7fd fad8 	bl	8000ee4 <__aeabi_fdiv>
 8003934:	4603      	mov	r3, r0
 8003936:	4618      	mov	r0, r3
 8003938:	f006 fdfc 	bl	800a534 <log10f>
 800393c:	4603      	mov	r3, r0
 800393e:	4918      	ldr	r1, [pc, #96]	; (80039a0 <calculatePower+0xa4>)
 8003940:	4618      	mov	r0, r3
 8003942:	f7fd fa1b 	bl	8000d7c <__aeabi_fmul>
 8003946:	4603      	mov	r3, r0
 8003948:	69f9      	ldr	r1, [r7, #28]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fd f90c 	bl	8000b68 <__aeabi_fsub>
 8003950:	4603      	mov	r3, r0
 8003952:	617b      	str	r3, [r7, #20]

    if (estFpPwr <= -88)
 8003954:	4913      	ldr	r1, [pc, #76]	; (80039a4 <calculatePower+0xa8>)
 8003956:	6978      	ldr	r0, [r7, #20]
 8003958:	f7fd fbb8 	bl	80010cc <__aeabi_fcmple>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <calculatePower+0x6a>
    {
        return estFpPwr;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	e010      	b.n	8003988 <calculatePower+0x8c>
    }
    else
    {
        // approximation of Fig. 22 in user manual for dbm correction
        estFpPwr += (estFpPwr + 88) * corrFac;
 8003966:	4910      	ldr	r1, [pc, #64]	; (80039a8 <calculatePower+0xac>)
 8003968:	6978      	ldr	r0, [r7, #20]
 800396a:	f7fd f8ff 	bl	8000b6c <__addsf3>
 800396e:	4603      	mov	r3, r0
 8003970:	69b9      	ldr	r1, [r7, #24]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fd fa02 	bl	8000d7c <__aeabi_fmul>
 8003978:	4603      	mov	r3, r0
 800397a:	4619      	mov	r1, r3
 800397c:	6978      	ldr	r0, [r7, #20]
 800397e:	f7fd f8f5 	bl	8000b6c <__addsf3>
 8003982:	4603      	mov	r3, r0
 8003984:	617b      	str	r3, [r7, #20]
    }

    return estFpPwr;
 8003986:	697b      	ldr	r3, [r7, #20]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	42e38a3d 	.word	0x42e38a3d
 8003994:	4015566d 	.word	0x4015566d
 8003998:	42f37ae1 	.word	0x42f37ae1
 800399c:	3f95566d 	.word	0x3f95566d
 80039a0:	41200000 	.word	0x41200000
 80039a4:	c2b00000 	.word	0xc2b00000
 80039a8:	42b00000 	.word	0x42b00000

080039ac <dwGetReceivePower>:

    return calculatePower(f1 * f1 + f2 * f2 + f3 * f3, N, dev->pulseFrequency);
}

float dwGetReceivePower(dwDeviceTypes_t *dev)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
    float C = (float)dwSpiRead16(dev, RX_FQUAL, CIR_PWR_SUB);
 80039b4:	2206      	movs	r2, #6
 80039b6:	2112      	movs	r1, #18
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 ff41 	bl	8004840 <dwSpiRead16>
 80039be:	4603      	mov	r3, r0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fd f983 	bl	8000ccc <__aeabi_ui2f>
 80039c6:	4603      	mov	r3, r0
 80039c8:	617b      	str	r3, [r7, #20]
    float N = spiReadRxInfo(dev);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ff7a 	bl	80038c4 <spiReadRxInfo>
 80039d0:	6138      	str	r0, [r7, #16]

    float twoPower17 = 131072.0f;
 80039d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039d6:	60fb      	str	r3, [r7, #12]

    return calculatePower(C * twoPower17, N, dev->pulseFrequency);
 80039d8:	68f9      	ldr	r1, [r7, #12]
 80039da:	6978      	ldr	r0, [r7, #20]
 80039dc:	f7fd f9ce 	bl	8000d7c <__aeabi_fmul>
 80039e0:	4603      	mov	r3, r0
 80039e2:	4618      	mov	r0, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039ea:	461a      	mov	r2, r3
 80039ec:	6939      	ldr	r1, [r7, #16]
 80039ee:	f7ff ff85 	bl	80038fc <calculatePower>
 80039f2:	4603      	mov	r3, r0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <dwEnableMode>:

void dwEnableMode(dwDeviceTypes_t *dev, const uint8_t mode[])
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
    dwSetDataRate(dev, mode[0]);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff fa9a 	bl	8002f46 <dwSetDataRate>
    dwSetPulseFrequency(dev, mode[1]);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	3301      	adds	r3, #1
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fb14 	bl	8003048 <dwSetPulseFrequency>
    dwSetPreambleLength(dev, mode[2]);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	3302      	adds	r3, #2
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	4619      	mov	r1, r3
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff fb42 	bl	80030b2 <dwSetPreambleLength>
    // TODO add channel and code to mode tuples
    // TODO add channel and code settings with checks (see Table 58)
    dwSetChannel(dev, dev->channel);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a34:	4619      	mov	r1, r3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff fba8 	bl	800318c <dwSetChannel>
    dwSetPreambleCode(dev, dev->preambleCode);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a42:	4619      	mov	r1, r3
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff fbbe 	bl	80031c6 <dwSetPreambleCode>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <dwTune>:
    dwSetChannel(dev, dev->channel);
    dwSetPreambleCode(dev, dev->preambleCode);
}

void dwTune(dwDeviceTypes_t *dev)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b098      	sub	sp, #96	; 0x60
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	6078      	str	r0, [r7, #4]
    uint8_t tcpgdelay[LEN_TC_PGDELAY];
    uint8_t fspllcfg[LEN_FS_PLLCFG];
    uint8_t fsplltune[LEN_FS_PLLTUNE];
    uint8_t fsxtalt[LEN_FS_XTALT];
    // AGC_TUNE1
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d108      	bne.n	8003a78 <dwTune+0x24>
    {
        writeValueToBytes(agctune1, 0x8870, LEN_AGC_TUNE1);
 8003a66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f648 0170 	movw	r1, #34928	; 0x8870
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe fc96 	bl	80023a2 <writeValueToBytes>
 8003a76:	e00c      	b.n	8003a92 <dwTune+0x3e>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d107      	bne.n	8003a92 <dwTune+0x3e>
    {
        writeValueToBytes(agctune1, 0x889B, LEN_AGC_TUNE1);
 8003a82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a86:	2202      	movs	r2, #2
 8003a88:	f648 019b 	movw	r1, #34971	; 0x889b
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fe fc88 	bl	80023a2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // AGC_TUNE2
    writeValueToBytes(agctune2, 0x2502A907L, LEN_AGC_TUNE2);
 8003a92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a96:	2204      	movs	r2, #4
 8003a98:	49b9      	ldr	r1, [pc, #740]	; (8003d80 <dwTune+0x32c>)
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fc81 	bl	80023a2 <writeValueToBytes>
    // AGC_TUNE3
    writeValueToBytes(agctune3, 0x0035, LEN_AGC_TUNE3);
 8003aa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	2135      	movs	r1, #53	; 0x35
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe fc7a 	bl	80023a2 <writeValueToBytes>
    // DRX_TUNE0b (already optimized according to Table 20 of user manual)
    if (dev->dataRate == TRX_RATE_110KBPS)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d107      	bne.n	8003ac8 <dwTune+0x74>
    {
        writeValueToBytes(drxtune0b, 0x0016, LEN_DRX_TUNE0b);
 8003ab8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003abc:	2202      	movs	r2, #2
 8003abe:	2116      	movs	r1, #22
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe fc6e 	bl	80023a2 <writeValueToBytes>
 8003ac6:	e018      	b.n	8003afa <dwTune+0xa6>
    }
    else if (dev->dataRate == TRX_RATE_850KBPS)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d107      	bne.n	8003ae2 <dwTune+0x8e>
    {
        writeValueToBytes(drxtune0b, 0x0006, LEN_DRX_TUNE0b);
 8003ad2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	2106      	movs	r1, #6
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe fc61 	bl	80023a2 <writeValueToBytes>
 8003ae0:	e00b      	b.n	8003afa <dwTune+0xa6>
    }
    else if (dev->dataRate == TRX_RATE_6800KBPS)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d106      	bne.n	8003afa <dwTune+0xa6>
    {
        writeValueToBytes(drxtune0b, 0x0001, LEN_DRX_TUNE0b);
 8003aec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003af0:	2202      	movs	r2, #2
 8003af2:	2101      	movs	r1, #1
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe fc54 	bl	80023a2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE1a
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d107      	bne.n	8003b14 <dwTune+0xc0>
    {
        writeValueToBytes(drxtune1a, 0x0087, LEN_DRX_TUNE1a);
 8003b04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b08:	2202      	movs	r2, #2
 8003b0a:	2187      	movs	r1, #135	; 0x87
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe fc48 	bl	80023a2 <writeValueToBytes>
 8003b12:	e00b      	b.n	8003b2c <dwTune+0xd8>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d106      	bne.n	8003b2c <dwTune+0xd8>
    {
        writeValueToBytes(drxtune1a, 0x008D, LEN_DRX_TUNE1a);
 8003b1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b22:	2202      	movs	r2, #2
 8003b24:	218d      	movs	r1, #141	; 0x8d
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fc3b 	bl	80023a2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE1b
    if (dev->preambleLength == TX_PREAMBLE_LEN_1536 || dev->preambleLength == TX_PREAMBLE_LEN_2048 ||
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003b32:	2b06      	cmp	r3, #6
 8003b34:	d009      	beq.n	8003b4a <dwTune+0xf6>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003b3c:	2b0a      	cmp	r3, #10
 8003b3e:	d004      	beq.n	8003b4a <dwTune+0xf6>
        dev->preambleLength == TX_PREAMBLE_LEN_4096)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    if (dev->preambleLength == TX_PREAMBLE_LEN_1536 || dev->preambleLength == TX_PREAMBLE_LEN_2048 ||
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d10c      	bne.n	8003b64 <dwTune+0x110>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d12a      	bne.n	8003baa <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0064, LEN_DRX_TUNE1b);
 8003b54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b58:	2202      	movs	r2, #2
 8003b5a:	2164      	movs	r1, #100	; 0x64
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe fc20 	bl	80023a2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003b62:	e022      	b.n	8003baa <dwTune+0x156>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->preambleLength != TX_PREAMBLE_LEN_64)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d011      	beq.n	8003b92 <dwTune+0x13e>
    {
        if (dev->dataRate == TRX_RATE_850KBPS || dev->dataRate == TRX_RATE_6800KBPS)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d004      	beq.n	8003b82 <dwTune+0x12e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d113      	bne.n	8003baa <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0020, LEN_DRX_TUNE1b);
 8003b82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b86:	2202      	movs	r2, #2
 8003b88:	2120      	movs	r1, #32
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe fc09 	bl	80023a2 <writeValueToBytes>
 8003b90:	e00b      	b.n	8003baa <dwTune+0x156>
            // TODO proper error/warning handling
        }
    }
    else
    {
        if (dev->dataRate == TRX_RATE_6800KBPS)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d106      	bne.n	8003baa <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0010, LEN_DRX_TUNE1b);
 8003b9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	2110      	movs	r1, #16
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe fbfc 	bl	80023a2 <writeValueToBytes>
        {
            // TODO proper error/warning handling
        }
    }
    // DRX_TUNE2
    if (dev->pacSize == PAC_SIZE_8)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d119      	bne.n	8003be8 <dwTune+0x194>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d107      	bne.n	8003bce <dwTune+0x17a>
        {
            writeValueToBytes(drxtune2, 0x311A002DL, LEN_DRX_TUNE2);
 8003bbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	496f      	ldr	r1, [pc, #444]	; (8003d84 <dwTune+0x330>)
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fbeb 	bl	80023a2 <writeValueToBytes>
 8003bcc:	e068      	b.n	8003ca0 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d163      	bne.n	8003ca0 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x313B006BL, LEN_DRX_TUNE2);
 8003bd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bdc:	2204      	movs	r2, #4
 8003bde:	496a      	ldr	r1, [pc, #424]	; (8003d88 <dwTune+0x334>)
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe fbde 	bl	80023a2 <writeValueToBytes>
 8003be6:	e05b      	b.n	8003ca0 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_16)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bee:	2b10      	cmp	r3, #16
 8003bf0:	d119      	bne.n	8003c26 <dwTune+0x1d2>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d107      	bne.n	8003c0c <dwTune+0x1b8>
        {
            writeValueToBytes(drxtune2, 0x331A0052L, LEN_DRX_TUNE2);
 8003bfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c00:	2204      	movs	r2, #4
 8003c02:	4962      	ldr	r1, [pc, #392]	; (8003d8c <dwTune+0x338>)
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fe fbcc 	bl	80023a2 <writeValueToBytes>
 8003c0a:	e049      	b.n	8003ca0 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d144      	bne.n	8003ca0 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x333B00BEL, LEN_DRX_TUNE2);
 8003c16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	495c      	ldr	r1, [pc, #368]	; (8003d90 <dwTune+0x33c>)
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe fbbf 	bl	80023a2 <writeValueToBytes>
 8003c24:	e03c      	b.n	8003ca0 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_32)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d119      	bne.n	8003c64 <dwTune+0x210>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d107      	bne.n	8003c4a <dwTune+0x1f6>
        {
            writeValueToBytes(drxtune2, 0x351A009AL, LEN_DRX_TUNE2);
 8003c3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c3e:	2204      	movs	r2, #4
 8003c40:	4954      	ldr	r1, [pc, #336]	; (8003d94 <dwTune+0x340>)
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe fbad 	bl	80023a2 <writeValueToBytes>
 8003c48:	e02a      	b.n	8003ca0 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d125      	bne.n	8003ca0 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x353B015EL, LEN_DRX_TUNE2);
 8003c54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c58:	2204      	movs	r2, #4
 8003c5a:	494f      	ldr	r1, [pc, #316]	; (8003d98 <dwTune+0x344>)
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe fba0 	bl	80023a2 <writeValueToBytes>
 8003c62:	e01d      	b.n	8003ca0 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_64)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	d118      	bne.n	8003ca0 <dwTune+0x24c>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <dwTune+0x234>
        {
            writeValueToBytes(drxtune2, 0x371A011DL, LEN_DRX_TUNE2);
 8003c78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	4947      	ldr	r1, [pc, #284]	; (8003d9c <dwTune+0x348>)
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe fb8e 	bl	80023a2 <writeValueToBytes>
 8003c86:	e00b      	b.n	8003ca0 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d106      	bne.n	8003ca0 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x373B0296L, LEN_DRX_TUNE2);
 8003c92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c96:	2204      	movs	r2, #4
 8003c98:	4941      	ldr	r1, [pc, #260]	; (8003da0 <dwTune+0x34c>)
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fb81 	bl	80023a2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE4H
    if (dev->preambleLength == TX_PREAMBLE_LEN_64)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d107      	bne.n	8003cba <dwTune+0x266>
    {
        writeValueToBytes(drxtune4H, 0x0010, LEN_DRX_TUNE4H);
 8003caa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003cae:	2202      	movs	r2, #2
 8003cb0:	2110      	movs	r1, #16
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe fb75 	bl	80023a2 <writeValueToBytes>
 8003cb8:	e006      	b.n	8003cc8 <dwTune+0x274>
    }
    else
    {
        writeValueToBytes(drxtune4H, 0x0028, LEN_DRX_TUNE4H);
 8003cba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	2128      	movs	r1, #40	; 0x28
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe fb6d 	bl	80023a2 <writeValueToBytes>
    }
    // RF_RXCTRLH
    if (dev->channel != CHANNEL_4 && dev->channel != CHANNEL_7)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d00c      	beq.n	8003cec <dwTune+0x298>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003cd8:	2b07      	cmp	r3, #7
 8003cda:	d007      	beq.n	8003cec <dwTune+0x298>
    {
        writeValueToBytes(rfrxctrlh, 0xD8, LEN_RF_RXCTRLH);
 8003cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	21d8      	movs	r1, #216	; 0xd8
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fe fb5c 	bl	80023a2 <writeValueToBytes>
 8003cea:	e006      	b.n	8003cfa <dwTune+0x2a6>
    }
    else
    {
        writeValueToBytes(rfrxctrlh, 0xBC, LEN_RF_RXCTRLH);
 8003cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	21bc      	movs	r1, #188	; 0xbc
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe fb54 	bl	80023a2 <writeValueToBytes>
    }
    // RX_TXCTRL
    if (dev->channel == CHANNEL_1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d108      	bne.n	8003d16 <dwTune+0x2c2>
    {
        writeValueToBytes(rftxctrl, 0x00005C40L, LEN_RF_TXCTRL);
 8003d04:	f107 0320 	add.w	r3, r7, #32
 8003d08:	2204      	movs	r2, #4
 8003d0a:	f645 4140 	movw	r1, #23616	; 0x5c40
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fb47 	bl	80023a2 <writeValueToBytes>
 8003d14:	e05a      	b.n	8003dcc <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_2)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d107      	bne.n	8003d30 <dwTune+0x2dc>
    {
        writeValueToBytes(rftxctrl, 0x00045CA0L, LEN_RF_TXCTRL);
 8003d20:	f107 0320 	add.w	r3, r7, #32
 8003d24:	2204      	movs	r2, #4
 8003d26:	491f      	ldr	r1, [pc, #124]	; (8003da4 <dwTune+0x350>)
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe fb3a 	bl	80023a2 <writeValueToBytes>
 8003d2e:	e04d      	b.n	8003dcc <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_3)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d107      	bne.n	8003d4a <dwTune+0x2f6>
    {
        writeValueToBytes(rftxctrl, 0x00086CC0L, LEN_RF_TXCTRL);
 8003d3a:	f107 0320 	add.w	r3, r7, #32
 8003d3e:	2204      	movs	r2, #4
 8003d40:	4919      	ldr	r1, [pc, #100]	; (8003da8 <dwTune+0x354>)
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fb2d 	bl	80023a2 <writeValueToBytes>
 8003d48:	e040      	b.n	8003dcc <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_4)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d107      	bne.n	8003d64 <dwTune+0x310>
    {
        writeValueToBytes(rftxctrl, 0x00045C80L, LEN_RF_TXCTRL);
 8003d54:	f107 0320 	add.w	r3, r7, #32
 8003d58:	2204      	movs	r2, #4
 8003d5a:	4914      	ldr	r1, [pc, #80]	; (8003dac <dwTune+0x358>)
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe fb20 	bl	80023a2 <writeValueToBytes>
 8003d62:	e033      	b.n	8003dcc <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_5)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d122      	bne.n	8003db4 <dwTune+0x360>
    {
        writeValueToBytes(rftxctrl, 0x001E3FE0L, LEN_RF_TXCTRL);
 8003d6e:	f107 0320 	add.w	r3, r7, #32
 8003d72:	2204      	movs	r2, #4
 8003d74:	490e      	ldr	r1, [pc, #56]	; (8003db0 <dwTune+0x35c>)
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe fb13 	bl	80023a2 <writeValueToBytes>
 8003d7c:	e026      	b.n	8003dcc <dwTune+0x378>
 8003d7e:	bf00      	nop
 8003d80:	2502a907 	.word	0x2502a907
 8003d84:	311a002d 	.word	0x311a002d
 8003d88:	313b006b 	.word	0x313b006b
 8003d8c:	331a0052 	.word	0x331a0052
 8003d90:	333b00be 	.word	0x333b00be
 8003d94:	351a009a 	.word	0x351a009a
 8003d98:	353b015e 	.word	0x353b015e
 8003d9c:	371a011d 	.word	0x371a011d
 8003da0:	373b0296 	.word	0x373b0296
 8003da4:	00045ca0 	.word	0x00045ca0
 8003da8:	00086cc0 	.word	0x00086cc0
 8003dac:	00045c80 	.word	0x00045c80
 8003db0:	001e3fe0 	.word	0x001e3fe0
    }
    else if (dev->channel == CHANNEL_7)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003dba:	2b07      	cmp	r3, #7
 8003dbc:	d106      	bne.n	8003dcc <dwTune+0x378>
    {
        writeValueToBytes(rftxctrl, 0x001E7DE0L, LEN_RF_TXCTRL);
 8003dbe:	f107 0320 	add.w	r3, r7, #32
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	49be      	ldr	r1, [pc, #760]	; (80040c0 <dwTune+0x66c>)
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fe faeb 	bl	80023a2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // TC_PGDELAY
    if (dev->channel == CHANNEL_1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d107      	bne.n	8003de6 <dwTune+0x392>
    {
        writeValueToBytes(tcpgdelay, 0xC9, LEN_TC_PGDELAY);
 8003dd6:	f107 031c 	add.w	r3, r7, #28
 8003dda:	2201      	movs	r2, #1
 8003ddc:	21c9      	movs	r1, #201	; 0xc9
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fadf 	bl	80023a2 <writeValueToBytes>
 8003de4:	e03f      	b.n	8003e66 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d107      	bne.n	8003e00 <dwTune+0x3ac>
    {
        writeValueToBytes(tcpgdelay, 0xC2, LEN_TC_PGDELAY);
 8003df0:	f107 031c 	add.w	r3, r7, #28
 8003df4:	2201      	movs	r2, #1
 8003df6:	21c2      	movs	r1, #194	; 0xc2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fe fad2 	bl	80023a2 <writeValueToBytes>
 8003dfe:	e032      	b.n	8003e66 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_3)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d107      	bne.n	8003e1a <dwTune+0x3c6>
    {
        writeValueToBytes(tcpgdelay, 0xC5, LEN_TC_PGDELAY);
 8003e0a:	f107 031c 	add.w	r3, r7, #28
 8003e0e:	2201      	movs	r2, #1
 8003e10:	21c5      	movs	r1, #197	; 0xc5
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fac5 	bl	80023a2 <writeValueToBytes>
 8003e18:	e025      	b.n	8003e66 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_4)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d107      	bne.n	8003e34 <dwTune+0x3e0>
    {
        writeValueToBytes(tcpgdelay, 0x95, LEN_TC_PGDELAY);
 8003e24:	f107 031c 	add.w	r3, r7, #28
 8003e28:	2201      	movs	r2, #1
 8003e2a:	2195      	movs	r1, #149	; 0x95
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe fab8 	bl	80023a2 <writeValueToBytes>
 8003e32:	e018      	b.n	8003e66 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_5)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e3a:	2b05      	cmp	r3, #5
 8003e3c:	d107      	bne.n	8003e4e <dwTune+0x3fa>
    {
        writeValueToBytes(tcpgdelay, 0xC0, LEN_TC_PGDELAY);
 8003e3e:	f107 031c 	add.w	r3, r7, #28
 8003e42:	2201      	movs	r2, #1
 8003e44:	21c0      	movs	r1, #192	; 0xc0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe faab 	bl	80023a2 <writeValueToBytes>
 8003e4c:	e00b      	b.n	8003e66 <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_7)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e54:	2b07      	cmp	r3, #7
 8003e56:	d106      	bne.n	8003e66 <dwTune+0x412>
    {
        writeValueToBytes(tcpgdelay, 0x93, LEN_TC_PGDELAY);
 8003e58:	f107 031c 	add.w	r3, r7, #28
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	2193      	movs	r1, #147	; 0x93
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe fa9e 	bl	80023a2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // FS_PLLCFG and FS_PLLTUNE
    if (dev->channel == CHANNEL_1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10e      	bne.n	8003e8e <dwTune+0x43a>
    {
        writeValueToBytes(fspllcfg, 0x09000407L, LEN_FS_PLLCFG);
 8003e70:	f107 0318 	add.w	r3, r7, #24
 8003e74:	2204      	movs	r2, #4
 8003e76:	4993      	ldr	r1, [pc, #588]	; (80040c4 <dwTune+0x670>)
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe fa92 	bl	80023a2 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x1E, LEN_FS_PLLTUNE);
 8003e7e:	f107 0314 	add.w	r3, r7, #20
 8003e82:	2201      	movs	r2, #1
 8003e84:	211e      	movs	r1, #30
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe fa8b 	bl	80023a2 <writeValueToBytes>
 8003e8c:	e044      	b.n	8003f18 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_2 || dev->channel == CHANNEL_4)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d004      	beq.n	8003ea2 <dwTune+0x44e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d10e      	bne.n	8003ec0 <dwTune+0x46c>
    {
        writeValueToBytes(fspllcfg, 0x08400508L, LEN_FS_PLLCFG);
 8003ea2:	f107 0318 	add.w	r3, r7, #24
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	4987      	ldr	r1, [pc, #540]	; (80040c8 <dwTune+0x674>)
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fe fa79 	bl	80023a2 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x26, LEN_FS_PLLTUNE);
 8003eb0:	f107 0314 	add.w	r3, r7, #20
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	2126      	movs	r1, #38	; 0x26
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe fa72 	bl	80023a2 <writeValueToBytes>
 8003ebe:	e02b      	b.n	8003f18 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_3)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d10e      	bne.n	8003ee8 <dwTune+0x494>
    {
        writeValueToBytes(fspllcfg, 0x08401009L, LEN_FS_PLLCFG);
 8003eca:	f107 0318 	add.w	r3, r7, #24
 8003ece:	2204      	movs	r2, #4
 8003ed0:	497e      	ldr	r1, [pc, #504]	; (80040cc <dwTune+0x678>)
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fa65 	bl	80023a2 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x56, LEN_FS_PLLTUNE);
 8003ed8:	f107 0314 	add.w	r3, r7, #20
 8003edc:	2201      	movs	r2, #1
 8003ede:	2156      	movs	r1, #86	; 0x56
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe fa5e 	bl	80023a2 <writeValueToBytes>
 8003ee6:	e017      	b.n	8003f18 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_5 || dev->channel == CHANNEL_7)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d004      	beq.n	8003efc <dwTune+0x4a8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ef8:	2b07      	cmp	r3, #7
 8003efa:	d10d      	bne.n	8003f18 <dwTune+0x4c4>
    {
        writeValueToBytes(fspllcfg, 0x0800041DL, LEN_FS_PLLCFG);
 8003efc:	f107 0318 	add.w	r3, r7, #24
 8003f00:	2204      	movs	r2, #4
 8003f02:	4973      	ldr	r1, [pc, #460]	; (80040d0 <dwTune+0x67c>)
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fe fa4c 	bl	80023a2 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0xA6, LEN_FS_PLLTUNE);
 8003f0a:	f107 0314 	add.w	r3, r7, #20
 8003f0e:	2201      	movs	r2, #1
 8003f10:	21a6      	movs	r1, #166	; 0xa6
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe fa45 	bl	80023a2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // LDE_CFG1
    writeValueToBytes(ldecfg1, 0xD, LEN_LDE_CFG1);
 8003f18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	210d      	movs	r1, #13
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe fa3e 	bl	80023a2 <writeValueToBytes>
    // LDE_CFG2
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d108      	bne.n	8003f42 <dwTune+0x4ee>
    {
        writeValueToBytes(ldecfg2, 0x1607, LEN_LDE_CFG2);
 8003f30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f34:	2202      	movs	r2, #2
 8003f36:	f241 6107 	movw	r1, #5639	; 0x1607
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe fa31 	bl	80023a2 <writeValueToBytes>
 8003f40:	e00c      	b.n	8003f5c <dwTune+0x508>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d107      	bne.n	8003f5c <dwTune+0x508>
    {
        writeValueToBytes(ldecfg2, 0x0607, LEN_LDE_CFG2);
 8003f4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f50:	2202      	movs	r2, #2
 8003f52:	f240 6107 	movw	r1, #1543	; 0x607
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe fa23 	bl	80023a2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // LDE_REPC
    if (dev->preambleCode == PREAMBLE_CODE_16MHZ_1 || dev->preambleCode == PREAMBLE_CODE_16MHZ_2)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d004      	beq.n	8003f70 <dwTune+0x51c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d116      	bne.n	8003f9e <dwTune+0x54a>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d108      	bne.n	8003f8c <dwTune+0x538>
        {
            writeValueToBytes(lderepc, ((0x5998 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f640 3133 	movw	r1, #2867	; 0xb33
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe fa0c 	bl	80023a2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003f8a:	e154      	b.n	8004236 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x5998, LEN_LDE_REPC);
 8003f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f90:	2202      	movs	r2, #2
 8003f92:	f645 1198 	movw	r1, #22936	; 0x5998
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fa03 	bl	80023a2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003f9c:	e14b      	b.n	8004236 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_3 || dev->preambleCode == PREAMBLE_CODE_16MHZ_8)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d004      	beq.n	8003fb2 <dwTune+0x55e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d116      	bne.n	8003fe0 <dwTune+0x58c>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d108      	bne.n	8003fce <dwTune+0x57a>
        {
            writeValueToBytes(lderepc, ((0x51EA >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f640 213d 	movw	r1, #2621	; 0xa3d
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe f9eb 	bl	80023a2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003fcc:	e133      	b.n	8004236 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x51EA, LEN_LDE_REPC);
 8003fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f245 11ea 	movw	r1, #20970	; 0x51ea
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe f9e2 	bl	80023a2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003fde:	e12a      	b.n	8004236 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_4)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d116      	bne.n	8004018 <dwTune+0x5c4>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d108      	bne.n	8004006 <dwTune+0x5b2>
        {
            writeValueToBytes(lderepc, ((0x428E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8003ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	f640 0151 	movw	r1, #2129	; 0x851
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe f9cf 	bl	80023a2 <writeValueToBytes>
 8004004:	e117      	b.n	8004236 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x428E, LEN_LDE_REPC);
 8004006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800400a:	2202      	movs	r2, #2
 800400c:	f244 218e 	movw	r1, #17038	; 0x428e
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe f9c6 	bl	80023a2 <writeValueToBytes>
 8004016:	e10e      	b.n	8004236 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_5)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800401e:	2b05      	cmp	r3, #5
 8004020:	d116      	bne.n	8004050 <dwTune+0x5fc>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004028:	2b00      	cmp	r3, #0
 800402a:	d108      	bne.n	800403e <dwTune+0x5ea>
        {
            writeValueToBytes(lderepc, ((0x451E >> 3) & 0xFFFF), LEN_LDE_REPC);
 800402c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004030:	2202      	movs	r2, #2
 8004032:	f640 01a3 	movw	r1, #2211	; 0x8a3
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe f9b3 	bl	80023a2 <writeValueToBytes>
 800403c:	e0fb      	b.n	8004236 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x451E, LEN_LDE_REPC);
 800403e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004042:	2202      	movs	r2, #2
 8004044:	f244 511e 	movw	r1, #17694	; 0x451e
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe f9aa 	bl	80023a2 <writeValueToBytes>
 800404e:	e0f2      	b.n	8004236 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_6)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004056:	2b06      	cmp	r3, #6
 8004058:	d116      	bne.n	8004088 <dwTune+0x634>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004060:	2b00      	cmp	r3, #0
 8004062:	d108      	bne.n	8004076 <dwTune+0x622>
        {
            writeValueToBytes(lderepc, ((0x2E14 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8004064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004068:	2202      	movs	r2, #2
 800406a:	f240 51c2 	movw	r1, #1474	; 0x5c2
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe f997 	bl	80023a2 <writeValueToBytes>
 8004074:	e0df      	b.n	8004236 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x2E14, LEN_LDE_REPC);
 8004076:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800407a:	2202      	movs	r2, #2
 800407c:	f642 6114 	movw	r1, #11796	; 0x2e14
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe f98e 	bl	80023a2 <writeValueToBytes>
 8004086:	e0d6      	b.n	8004236 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_7)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800408e:	2b07      	cmp	r3, #7
 8004090:	d120      	bne.n	80040d4 <dwTune+0x680>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004098:	2b00      	cmp	r3, #0
 800409a:	d108      	bne.n	80040ae <dwTune+0x65a>
        {
            writeValueToBytes(lderepc, ((0x8000 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800409c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040a0:	2202      	movs	r2, #2
 80040a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe f97b 	bl	80023a2 <writeValueToBytes>
 80040ac:	e0c3      	b.n	8004236 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x8000, LEN_LDE_REPC);
 80040ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040b2:	2202      	movs	r2, #2
 80040b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe f972 	bl	80023a2 <writeValueToBytes>
 80040be:	e0ba      	b.n	8004236 <dwTune+0x7e2>
 80040c0:	001e7de0 	.word	0x001e7de0
 80040c4:	09000407 	.word	0x09000407
 80040c8:	08400508 	.word	0x08400508
 80040cc:	08401009 	.word	0x08401009
 80040d0:	0800041d 	.word	0x0800041d
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_9)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040da:	2b09      	cmp	r3, #9
 80040dc:	d116      	bne.n	800410c <dwTune+0x6b8>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d108      	bne.n	80040fa <dwTune+0x6a6>
        {
            writeValueToBytes(lderepc, ((0x28F4 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80040e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ec:	2202      	movs	r2, #2
 80040ee:	f240 511e 	movw	r1, #1310	; 0x51e
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe f955 	bl	80023a2 <writeValueToBytes>
 80040f8:	e09d      	b.n	8004236 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x28F4, LEN_LDE_REPC);
 80040fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040fe:	2202      	movs	r2, #2
 8004100:	f642 01f4 	movw	r1, #10484	; 0x28f4
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe f94c 	bl	80023a2 <writeValueToBytes>
 800410a:	e094      	b.n	8004236 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_10 || dev->preambleCode == PREAMBLE_CODE_64MHZ_17)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004112:	2b0a      	cmp	r3, #10
 8004114:	d004      	beq.n	8004120 <dwTune+0x6cc>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800411c:	2b11      	cmp	r3, #17
 800411e:	d116      	bne.n	800414e <dwTune+0x6fa>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004126:	2b00      	cmp	r3, #0
 8004128:	d108      	bne.n	800413c <dwTune+0x6e8>
        {
            writeValueToBytes(lderepc, ((0x3332 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800412a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800412e:	2202      	movs	r2, #2
 8004130:	f240 6166 	movw	r1, #1638	; 0x666
 8004134:	4618      	mov	r0, r3
 8004136:	f7fe f934 	bl	80023a2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 800413a:	e07c      	b.n	8004236 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3332, LEN_LDE_REPC);
 800413c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004140:	2202      	movs	r2, #2
 8004142:	f243 3132 	movw	r1, #13106	; 0x3332
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe f92b 	bl	80023a2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 800414c:	e073      	b.n	8004236 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_11)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004154:	2b0b      	cmp	r3, #11
 8004156:	d116      	bne.n	8004186 <dwTune+0x732>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800415e:	2b00      	cmp	r3, #0
 8004160:	d108      	bne.n	8004174 <dwTune+0x720>
        {
            writeValueToBytes(lderepc, ((0x3AE0 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8004162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004166:	2202      	movs	r2, #2
 8004168:	f240 715c 	movw	r1, #1884	; 0x75c
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe f918 	bl	80023a2 <writeValueToBytes>
 8004172:	e060      	b.n	8004236 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3AE0, LEN_LDE_REPC);
 8004174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004178:	2202      	movs	r2, #2
 800417a:	f643 21e0 	movw	r1, #15072	; 0x3ae0
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe f90f 	bl	80023a2 <writeValueToBytes>
 8004184:	e057      	b.n	8004236 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_12)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800418c:	2b0c      	cmp	r3, #12
 800418e:	d116      	bne.n	80041be <dwTune+0x76a>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004196:	2b00      	cmp	r3, #0
 8004198:	d108      	bne.n	80041ac <dwTune+0x758>
        {
            writeValueToBytes(lderepc, ((0x3D70 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800419a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800419e:	2202      	movs	r2, #2
 80041a0:	f240 71ae 	movw	r1, #1966	; 0x7ae
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe f8fc 	bl	80023a2 <writeValueToBytes>
 80041aa:	e044      	b.n	8004236 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3D70, LEN_LDE_REPC);
 80041ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041b0:	2202      	movs	r2, #2
 80041b2:	f643 5170 	movw	r1, #15728	; 0x3d70
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fe f8f3 	bl	80023a2 <writeValueToBytes>
 80041bc:	e03b      	b.n	8004236 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_18 || dev->preambleCode == PREAMBLE_CODE_64MHZ_19)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041c4:	2b12      	cmp	r3, #18
 80041c6:	d004      	beq.n	80041d2 <dwTune+0x77e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ce:	2b13      	cmp	r3, #19
 80041d0:	d116      	bne.n	8004200 <dwTune+0x7ac>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d108      	bne.n	80041ee <dwTune+0x79a>
        {
            writeValueToBytes(lderepc, ((0x35C2 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80041dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041e0:	2202      	movs	r2, #2
 80041e2:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe f8db 	bl	80023a2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 80041ec:	e023      	b.n	8004236 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x35C2, LEN_LDE_REPC);
 80041ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041f2:	2202      	movs	r2, #2
 80041f4:	f243 51c2 	movw	r1, #13762	; 0x35c2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fe f8d2 	bl	80023a2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 80041fe:	e01a      	b.n	8004236 <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_20)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004206:	2b14      	cmp	r3, #20
 8004208:	d115      	bne.n	8004236 <dwTune+0x7e2>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004210:	2b00      	cmp	r3, #0
 8004212:	d108      	bne.n	8004226 <dwTune+0x7d2>
        {
            writeValueToBytes(lderepc, ((0x47AE >> 3) & 0xFFFF), LEN_LDE_REPC);
 8004214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004218:	2202      	movs	r2, #2
 800421a:	f640 01f5 	movw	r1, #2293	; 0x8f5
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe f8bf 	bl	80023a2 <writeValueToBytes>
 8004224:	e007      	b.n	8004236 <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x47AE, LEN_LDE_REPC);
 8004226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800422a:	2202      	movs	r2, #2
 800422c:	f244 71ae 	movw	r1, #18350	; 0x47ae
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe f8b6 	bl	80023a2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // TX_POWER (enabled smart transmit power control)
    if (dev->forceTxPower)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800423c:	2b00      	cmp	r3, #0
 800423e:	d009      	beq.n	8004254 <dwTune+0x800>
    {
        writeValueToBytes(txpower, dev->txPower, LEN_TX_POWER);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004244:	4619      	mov	r1, r3
 8004246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800424a:	2204      	movs	r2, #4
 800424c:	4618      	mov	r0, r3
 800424e:	f7fe f8a8 	bl	80023a2 <writeValueToBytes>
 8004252:	e12f      	b.n	80044b4 <dwTune+0xa60>
    }
    else if (dev->channel == CHANNEL_1 || dev->channel == CHANNEL_2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800425a:	2b01      	cmp	r3, #1
 800425c:	d004      	beq.n	8004268 <dwTune+0x814>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004264:	2b02      	cmp	r3, #2
 8004266:	d136      	bne.n	80042d6 <dwTune+0x882>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800426e:	2b01      	cmp	r3, #1
 8004270:	d115      	bne.n	800429e <dwTune+0x84a>
        {
            if (dev->smartPower)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <dwTune+0x838>
            {
                writeValueToBytes(txpower, 0x15355575L, LEN_TX_POWER);
 800427c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004280:	2204      	movs	r2, #4
 8004282:	4995      	ldr	r1, [pc, #596]	; (80044d8 <dwTune+0xa84>)
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe f88c 	bl	80023a2 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800428a:	e112      	b.n	80044b2 <dwTune+0xa5e>
            }
            else
            {
                writeValueToBytes(txpower, 0x75757575L, LEN_TX_POWER);
 800428c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004290:	2204      	movs	r2, #4
 8004292:	f04f 3175 	mov.w	r1, #1970632053	; 0x75757575
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe f883 	bl	80023a2 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800429c:	e109      	b.n	80044b2 <dwTune+0xa5e>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	f040 8104 	bne.w	80044b2 <dwTune+0xa5e>
        {
            if (dev->smartPower)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d007      	beq.n	80042c4 <dwTune+0x870>
            {
                writeValueToBytes(txpower, 0x07274767L, LEN_TX_POWER);
 80042b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042b8:	2204      	movs	r2, #4
 80042ba:	4988      	ldr	r1, [pc, #544]	; (80044dc <dwTune+0xa88>)
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe f870 	bl	80023a2 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80042c2:	e0f6      	b.n	80044b2 <dwTune+0xa5e>
            }
            else
            {
                writeValueToBytes(txpower, 0x67676767L, LEN_TX_POWER);
 80042c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042c8:	2204      	movs	r2, #4
 80042ca:	f04f 3167 	mov.w	r1, #1734829927	; 0x67676767
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fe f867 	bl	80023a2 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80042d4:	e0ed      	b.n	80044b2 <dwTune+0xa5e>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_3)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d136      	bne.n	800434e <dwTune+0x8fa>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d115      	bne.n	8004316 <dwTune+0x8c2>
        {
            if (dev->smartPower)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <dwTune+0x8b0>
            {
                writeValueToBytes(txpower, 0x0F2F4F6FL, LEN_TX_POWER);
 80042f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042f8:	2204      	movs	r2, #4
 80042fa:	4979      	ldr	r1, [pc, #484]	; (80044e0 <dwTune+0xa8c>)
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fe f850 	bl	80023a2 <writeValueToBytes>
 8004302:	e0d7      	b.n	80044b4 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x6F6F6F6FL, LEN_TX_POWER);
 8004304:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004308:	2204      	movs	r2, #4
 800430a:	f04f 316f 	mov.w	r1, #1869573999	; 0x6f6f6f6f
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe f847 	bl	80023a2 <writeValueToBytes>
 8004314:	e0ce      	b.n	80044b4 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800431c:	2b02      	cmp	r3, #2
 800431e:	f040 80c9 	bne.w	80044b4 <dwTune+0xa60>
        {
            if (dev->smartPower)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <dwTune+0x8e8>
            {
                writeValueToBytes(txpower, 0x2B4B6B8BL, LEN_TX_POWER);
 800432c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004330:	2204      	movs	r2, #4
 8004332:	496c      	ldr	r1, [pc, #432]	; (80044e4 <dwTune+0xa90>)
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe f834 	bl	80023a2 <writeValueToBytes>
 800433a:	e0bb      	b.n	80044b4 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x8B8B8B8BL, LEN_TX_POWER);
 800433c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004340:	2204      	movs	r2, #4
 8004342:	f04f 318b 	mov.w	r1, #2341178251	; 0x8b8b8b8b
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe f82b 	bl	80023a2 <writeValueToBytes>
 800434c:	e0b2      	b.n	80044b4 <dwTune+0xa60>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_4)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004354:	2b04      	cmp	r3, #4
 8004356:	d136      	bne.n	80043c6 <dwTune+0x972>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800435e:	2b01      	cmp	r3, #1
 8004360:	d115      	bne.n	800438e <dwTune+0x93a>
        {
            if (dev->smartPower)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <dwTune+0x928>
            {
                writeValueToBytes(txpower, 0x1F1F3F5FL, LEN_TX_POWER);
 800436c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004370:	2204      	movs	r2, #4
 8004372:	495d      	ldr	r1, [pc, #372]	; (80044e8 <dwTune+0xa94>)
 8004374:	4618      	mov	r0, r3
 8004376:	f7fe f814 	bl	80023a2 <writeValueToBytes>
 800437a:	e09b      	b.n	80044b4 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x5F5F5F5FL, LEN_TX_POWER);
 800437c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004380:	2204      	movs	r2, #4
 8004382:	f04f 315f 	mov.w	r1, #1600085855	; 0x5f5f5f5f
 8004386:	4618      	mov	r0, r3
 8004388:	f7fe f80b 	bl	80023a2 <writeValueToBytes>
 800438c:	e092      	b.n	80044b4 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004394:	2b02      	cmp	r3, #2
 8004396:	f040 808d 	bne.w	80044b4 <dwTune+0xa60>
        {
            if (dev->smartPower)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d007      	beq.n	80043b4 <dwTune+0x960>
            {
                writeValueToBytes(txpower, 0x3A5A7A9AL, LEN_TX_POWER);
 80043a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043a8:	2204      	movs	r2, #4
 80043aa:	4950      	ldr	r1, [pc, #320]	; (80044ec <dwTune+0xa98>)
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fd fff8 	bl	80023a2 <writeValueToBytes>
 80043b2:	e07f      	b.n	80044b4 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x9A9A9A9AL, LEN_TX_POWER);
 80043b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043b8:	2204      	movs	r2, #4
 80043ba:	f04f 319a 	mov.w	r1, #2593823386	; 0x9a9a9a9a
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd ffef 	bl	80023a2 <writeValueToBytes>
 80043c4:	e076      	b.n	80044b4 <dwTune+0xa60>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_5)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80043cc:	2b05      	cmp	r3, #5
 80043ce:	d135      	bne.n	800443c <dwTune+0x9e8>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d115      	bne.n	8004406 <dwTune+0x9b2>
        {
            if (dev->smartPower)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <dwTune+0x9a0>
            {
                writeValueToBytes(txpower, 0x0E082848L, LEN_TX_POWER);
 80043e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043e8:	2204      	movs	r2, #4
 80043ea:	4941      	ldr	r1, [pc, #260]	; (80044f0 <dwTune+0xa9c>)
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fd ffd8 	bl	80023a2 <writeValueToBytes>
 80043f2:	e05f      	b.n	80044b4 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x48484848L, LEN_TX_POWER);
 80043f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043f8:	2204      	movs	r2, #4
 80043fa:	f04f 3148 	mov.w	r1, #1212696648	; 0x48484848
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fd ffcf 	bl	80023a2 <writeValueToBytes>
 8004404:	e056      	b.n	80044b4 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800440c:	2b02      	cmp	r3, #2
 800440e:	d151      	bne.n	80044b4 <dwTune+0xa60>
        {
            if (dev->smartPower)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <dwTune+0x9d6>
            {
                writeValueToBytes(txpower, 0x25456585L, LEN_TX_POWER);
 800441a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800441e:	2204      	movs	r2, #4
 8004420:	4934      	ldr	r1, [pc, #208]	; (80044f4 <dwTune+0xaa0>)
 8004422:	4618      	mov	r0, r3
 8004424:	f7fd ffbd 	bl	80023a2 <writeValueToBytes>
 8004428:	e044      	b.n	80044b4 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x85858585L, LEN_TX_POWER);
 800442a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800442e:	2204      	movs	r2, #4
 8004430:	f04f 3185 	mov.w	r1, #2240120197	; 0x85858585
 8004434:	4618      	mov	r0, r3
 8004436:	f7fd ffb4 	bl	80023a2 <writeValueToBytes>
 800443a:	e03b      	b.n	80044b4 <dwTune+0xa60>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_7)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004442:	2b07      	cmp	r3, #7
 8004444:	d136      	bne.n	80044b4 <dwTune+0xa60>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800444c:	2b01      	cmp	r3, #1
 800444e:	d115      	bne.n	800447c <dwTune+0xa28>
        {
            if (dev->smartPower)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <dwTune+0xa16>
            {
                writeValueToBytes(txpower, 0x32527292L, LEN_TX_POWER);
 800445a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800445e:	2204      	movs	r2, #4
 8004460:	4925      	ldr	r1, [pc, #148]	; (80044f8 <dwTune+0xaa4>)
 8004462:	4618      	mov	r0, r3
 8004464:	f7fd ff9d 	bl	80023a2 <writeValueToBytes>
 8004468:	e024      	b.n	80044b4 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0x92929292L, LEN_TX_POWER);
 800446a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800446e:	2204      	movs	r2, #4
 8004470:	f04f 3192 	mov.w	r1, #2459079314	; 0x92929292
 8004474:	4618      	mov	r0, r3
 8004476:	f7fd ff94 	bl	80023a2 <writeValueToBytes>
 800447a:	e01b      	b.n	80044b4 <dwTune+0xa60>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004482:	2b02      	cmp	r3, #2
 8004484:	d116      	bne.n	80044b4 <dwTune+0xa60>
        {
            if (dev->smartPower)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <dwTune+0xa4c>
            {
                writeValueToBytes(txpower, 0x5171B1D1L, LEN_TX_POWER);
 8004490:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004494:	2204      	movs	r2, #4
 8004496:	4919      	ldr	r1, [pc, #100]	; (80044fc <dwTune+0xaa8>)
 8004498:	4618      	mov	r0, r3
 800449a:	f7fd ff82 	bl	80023a2 <writeValueToBytes>
 800449e:	e009      	b.n	80044b4 <dwTune+0xa60>
            }
            else
            {
                writeValueToBytes(txpower, 0xD1D1D1D1L, LEN_TX_POWER);
 80044a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044a4:	2204      	movs	r2, #4
 80044a6:	f04f 31d1 	mov.w	r1, #3520188881	; 0xd1d1d1d1
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fd ff79 	bl	80023a2 <writeValueToBytes>
 80044b0:	e000      	b.n	80044b4 <dwTune+0xa60>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80044b2:	bf00      	nop
    {
        // TODO proper error/warning handling
    }
    // Crystal calibration from OTP (if available)
    uint8_t buf_otp[4];
    readBytesOTP(dev, 0x01E, buf_otp);
 80044b4:	f107 030c 	add.w	r3, r7, #12
 80044b8:	461a      	mov	r2, r3
 80044ba:	211e      	movs	r1, #30
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7fd ff90 	bl	80023e2 <readBytesOTP>
    if (buf_otp[0] == 0)
 80044c2:	7b3b      	ldrb	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d11b      	bne.n	8004500 <dwTune+0xaac>
    {
        // No trim value available from OTP, use midrange value of 0x10
        writeValueToBytes(fsxtalt, ((0x10 & 0x1F) | 0x60), LEN_FS_XTALT);
 80044c8:	f107 0310 	add.w	r3, r7, #16
 80044cc:	2201      	movs	r2, #1
 80044ce:	2170      	movs	r1, #112	; 0x70
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fd ff66 	bl	80023a2 <writeValueToBytes>
 80044d6:	e01e      	b.n	8004516 <dwTune+0xac2>
 80044d8:	15355575 	.word	0x15355575
 80044dc:	07274767 	.word	0x07274767
 80044e0:	0f2f4f6f 	.word	0x0f2f4f6f
 80044e4:	2b4b6b8b 	.word	0x2b4b6b8b
 80044e8:	1f1f3f5f 	.word	0x1f1f3f5f
 80044ec:	3a5a7a9a 	.word	0x3a5a7a9a
 80044f0:	0e082848 	.word	0x0e082848
 80044f4:	25456585 	.word	0x25456585
 80044f8:	32527292 	.word	0x32527292
 80044fc:	5171b1d1 	.word	0x5171b1d1
    }
    else
    {
        writeValueToBytes(fsxtalt, ((buf_otp[0] & 0x1F) | 0x60), LEN_FS_XTALT);
 8004500:	7b3b      	ldrb	r3, [r7, #12]
 8004502:	f003 031f 	and.w	r3, r3, #31
 8004506:	f043 0160 	orr.w	r1, r3, #96	; 0x60
 800450a:	f107 0310 	add.w	r3, r7, #16
 800450e:	2201      	movs	r2, #1
 8004510:	4618      	mov	r0, r3
 8004512:	f7fd ff46 	bl	80023a2 <writeValueToBytes>
    }
    // write configuration back to chip
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE1_SUB, agctune1, LEN_AGC_TUNE1);
 8004516:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800451a:	2202      	movs	r2, #2
 800451c:	9200      	str	r2, [sp, #0]
 800451e:	2204      	movs	r2, #4
 8004520:	2123      	movs	r1, #35	; 0x23
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f9b6 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE2_SUB, agctune2, LEN_AGC_TUNE2);
 8004528:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800452c:	2204      	movs	r2, #4
 800452e:	9200      	str	r2, [sp, #0]
 8004530:	220c      	movs	r2, #12
 8004532:	2123      	movs	r1, #35	; 0x23
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f9ad 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE3_SUB, agctune3, LEN_AGC_TUNE3);
 800453a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800453e:	2202      	movs	r2, #2
 8004540:	9200      	str	r2, [sp, #0]
 8004542:	2212      	movs	r2, #18
 8004544:	2123      	movs	r1, #35	; 0x23
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f9a4 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE0b_SUB, drxtune0b, LEN_DRX_TUNE0b);
 800454c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004550:	2202      	movs	r2, #2
 8004552:	9200      	str	r2, [sp, #0]
 8004554:	2202      	movs	r2, #2
 8004556:	2127      	movs	r1, #39	; 0x27
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f99b 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1a_SUB, drxtune1a, LEN_DRX_TUNE1a);
 800455e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004562:	2202      	movs	r2, #2
 8004564:	9200      	str	r2, [sp, #0]
 8004566:	2204      	movs	r2, #4
 8004568:	2127      	movs	r1, #39	; 0x27
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f992 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1b_SUB, drxtune1b, LEN_DRX_TUNE1b);
 8004570:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004574:	2202      	movs	r2, #2
 8004576:	9200      	str	r2, [sp, #0]
 8004578:	2206      	movs	r2, #6
 800457a:	2127      	movs	r1, #39	; 0x27
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f989 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE2_SUB, drxtune2, LEN_DRX_TUNE2);
 8004582:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004586:	2204      	movs	r2, #4
 8004588:	9200      	str	r2, [sp, #0]
 800458a:	2208      	movs	r2, #8
 800458c:	2127      	movs	r1, #39	; 0x27
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f980 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE4H_SUB, drxtune4H, LEN_DRX_TUNE4H);
 8004594:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004598:	2202      	movs	r2, #2
 800459a:	9200      	str	r2, [sp, #0]
 800459c:	2226      	movs	r2, #38	; 0x26
 800459e:	2127      	movs	r1, #39	; 0x27
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f977 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_CFG1_SUB, ldecfg1, LEN_LDE_CFG1);
 80045a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045aa:	2201      	movs	r2, #1
 80045ac:	9200      	str	r2, [sp, #0]
 80045ae:	f640 0206 	movw	r2, #2054	; 0x806
 80045b2:	212e      	movs	r1, #46	; 0x2e
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f96d 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_CFG2_SUB, ldecfg2, LEN_LDE_CFG2);
 80045ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045be:	2202      	movs	r2, #2
 80045c0:	9200      	str	r2, [sp, #0]
 80045c2:	f641 0206 	movw	r2, #6150	; 0x1806
 80045c6:	212e      	movs	r1, #46	; 0x2e
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f963 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_REPC_SUB, lderepc, LEN_LDE_REPC);
 80045ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045d2:	2202      	movs	r2, #2
 80045d4:	9200      	str	r2, [sp, #0]
 80045d6:	f642 0204 	movw	r2, #10244	; 0x2804
 80045da:	212e      	movs	r1, #46	; 0x2e
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f959 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, TX_POWER, NO_SUB, txpower, LEN_TX_POWER);
 80045e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045e6:	2204      	movs	r2, #4
 80045e8:	9200      	str	r2, [sp, #0]
 80045ea:	2200      	movs	r2, #0
 80045ec:	211e      	movs	r1, #30
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f950 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, RF_CONF, RF_RXCTRLH_SUB, rfrxctrlh, LEN_RF_RXCTRLH);
 80045f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045f8:	2201      	movs	r2, #1
 80045fa:	9200      	str	r2, [sp, #0]
 80045fc:	220b      	movs	r2, #11
 80045fe:	2128      	movs	r1, #40	; 0x28
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f947 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, RF_CONF, RF_TXCTRL_SUB, rftxctrl, LEN_RF_TXCTRL);
 8004606:	f107 0320 	add.w	r3, r7, #32
 800460a:	2204      	movs	r2, #4
 800460c:	9200      	str	r2, [sp, #0]
 800460e:	220c      	movs	r2, #12
 8004610:	2128      	movs	r1, #40	; 0x28
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f93e 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, TX_CAL, TC_PGDELAY_SUB, tcpgdelay, LEN_TC_PGDELAY);
 8004618:	f107 031c 	add.w	r3, r7, #28
 800461c:	2201      	movs	r2, #1
 800461e:	9200      	str	r2, [sp, #0]
 8004620:	220b      	movs	r2, #11
 8004622:	212a      	movs	r1, #42	; 0x2a
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f935 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_PLLTUNE_SUB, fsplltune, LEN_FS_PLLTUNE);
 800462a:	f107 0314 	add.w	r3, r7, #20
 800462e:	2201      	movs	r2, #1
 8004630:	9200      	str	r2, [sp, #0]
 8004632:	220b      	movs	r2, #11
 8004634:	212b      	movs	r1, #43	; 0x2b
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f92c 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_PLLCFG_SUB, fspllcfg, LEN_FS_PLLCFG);
 800463c:	f107 0318 	add.w	r3, r7, #24
 8004640:	2204      	movs	r2, #4
 8004642:	9200      	str	r2, [sp, #0]
 8004644:	2207      	movs	r2, #7
 8004646:	212b      	movs	r1, #43	; 0x2b
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f923 	bl	8004894 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_XTALT_SUB, fsxtalt, LEN_FS_XTALT);
 800464e:	f107 0310 	add.w	r3, r7, #16
 8004652:	2201      	movs	r2, #1
 8004654:	9200      	str	r2, [sp, #0]
 8004656:	220e      	movs	r2, #14
 8004658:	212b      	movs	r1, #43	; 0x2b
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f91a 	bl	8004894 <dwSpiWrite>
}
 8004660:	bf00      	nop
 8004662:	3758      	adds	r7, #88	; 0x58
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <spiWrite>:

uint16_t buffer[64];

static void spiWrite(dwDeviceTypes_t *dev, const void *header, size_t headerLength,
                     const void *data, size_t dataLength)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8004676:	2200      	movs	r2, #0
 8004678:	2110      	movs	r1, #16
 800467a:	4813      	ldr	r0, [pc, #76]	; (80046c8 <spiWrite+0x60>)
 800467c:	f000 fde2 	bl	8005244 <HAL_GPIO_WritePin>
    memcpy(buffer, header, headerLength);
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	4811      	ldr	r0, [pc, #68]	; (80046cc <spiWrite+0x64>)
 8004686:	f003 fa13 	bl	8007ab0 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, headerLength, HAL_MAX_DELAY);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	b29a      	uxth	r2, r3
 800468e:	f04f 33ff 	mov.w	r3, #4294967295
 8004692:	490e      	ldr	r1, [pc, #56]	; (80046cc <spiWrite+0x64>)
 8004694:	480e      	ldr	r0, [pc, #56]	; (80046d0 <spiWrite+0x68>)
 8004696:	f001 fbf1 	bl	8005e7c <HAL_SPI_Transmit>
    memcpy(buffer, data, dataLength);
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	6839      	ldr	r1, [r7, #0]
 800469e:	480b      	ldr	r0, [pc, #44]	; (80046cc <spiWrite+0x64>)
 80046a0:	f003 fa06 	bl	8007ab0 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, dataLength, HAL_MAX_DELAY);
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	f04f 33ff 	mov.w	r3, #4294967295
 80046ac:	4907      	ldr	r1, [pc, #28]	; (80046cc <spiWrite+0x64>)
 80046ae:	4808      	ldr	r0, [pc, #32]	; (80046d0 <spiWrite+0x68>)
 80046b0:	f001 fbe4 	bl	8005e7c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80046b4:	2201      	movs	r2, #1
 80046b6:	2110      	movs	r1, #16
 80046b8:	4803      	ldr	r0, [pc, #12]	; (80046c8 <spiWrite+0x60>)
 80046ba:	f000 fdc3 	bl	8005244 <HAL_GPIO_WritePin>
}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40010800 	.word	0x40010800
 80046cc:	20000444 	.word	0x20000444
 80046d0:	200002d0 	.word	0x200002d0

080046d4 <spiRead>:

static void spiRead(dwDeviceTypes_t *dev, const void *header, size_t headerLength,
                    void *data, size_t dataLength)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80046e2:	2200      	movs	r2, #0
 80046e4:	2110      	movs	r1, #16
 80046e6:	4813      	ldr	r0, [pc, #76]	; (8004734 <spiRead+0x60>)
 80046e8:	f000 fdac 	bl	8005244 <HAL_GPIO_WritePin>
    memcpy(buffer, header, headerLength);
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	4811      	ldr	r0, [pc, #68]	; (8004738 <spiRead+0x64>)
 80046f2:	f003 f9dd 	bl	8007ab0 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, headerLength, HAL_MAX_DELAY);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	490e      	ldr	r1, [pc, #56]	; (8004738 <spiRead+0x64>)
 8004700:	480e      	ldr	r0, [pc, #56]	; (800473c <spiRead+0x68>)
 8004702:	f001 fbbb 	bl	8005e7c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)buffer, dataLength, HAL_MAX_DELAY);
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	b29a      	uxth	r2, r3
 800470a:	f04f 33ff 	mov.w	r3, #4294967295
 800470e:	490a      	ldr	r1, [pc, #40]	; (8004738 <spiRead+0x64>)
 8004710:	480a      	ldr	r0, [pc, #40]	; (800473c <spiRead+0x68>)
 8004712:	f001 fcef 	bl	80060f4 <HAL_SPI_Receive>
    memcpy(data, buffer, dataLength);
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	4907      	ldr	r1, [pc, #28]	; (8004738 <spiRead+0x64>)
 800471a:	6838      	ldr	r0, [r7, #0]
 800471c:	f003 f9c8 	bl	8007ab0 <memcpy>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8004720:	2201      	movs	r2, #1
 8004722:	2110      	movs	r1, #16
 8004724:	4803      	ldr	r0, [pc, #12]	; (8004734 <spiRead+0x60>)
 8004726:	f000 fd8d 	bl	8005244 <HAL_GPIO_WritePin>
}
 800472a:	bf00      	nop
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40010800 	.word	0x40010800
 8004738:	20000444 	.word	0x20000444
 800473c:	200002d0 	.word	0x200002d0

08004740 <spiSetSpeed>:

static void spiSetSpeed(dwDeviceTypes_t *dev, dwSpiSpeed_t speed)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	70fb      	strb	r3, [r7, #3]
    if (speed == dwSpiSpeedLow)
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <spiSetSpeed+0x20>
    {
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <spiSetSpeed+0x34>)
 8004754:	2220      	movs	r2, #32
 8004756:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi1);
 8004758:	4806      	ldr	r0, [pc, #24]	; (8004774 <spiSetSpeed+0x34>)
 800475a:	f001 fb0b 	bl	8005d74 <HAL_SPI_Init>
    else
    {
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
        HAL_SPI_Init(&hspi1);
    }
}
 800475e:	e005      	b.n	800476c <spiSetSpeed+0x2c>
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <spiSetSpeed+0x34>)
 8004762:	2208      	movs	r2, #8
 8004764:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi1);
 8004766:	4803      	ldr	r0, [pc, #12]	; (8004774 <spiSetSpeed+0x34>)
 8004768:	f001 fb04 	bl	8005d74 <HAL_SPI_Init>
}
 800476c:	bf00      	nop
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	200002d0 	.word	0x200002d0

08004778 <reset>:

static void reset(dwDeviceTypes_t *dev)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8004780:	2200      	movs	r2, #0
 8004782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004786:	4808      	ldr	r0, [pc, #32]	; (80047a8 <reset+0x30>)
 8004788:	f000 fd5c 	bl	8005244 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800478c:	2002      	movs	r0, #2
 800478e:	f000 f951 	bl	8004a34 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8004792:	2201      	movs	r2, #1
 8004794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004798:	4803      	ldr	r0, [pc, #12]	; (80047a8 <reset+0x30>)
 800479a:	f000 fd53 	bl	8005244 <HAL_GPIO_WritePin>
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40010c00 	.word	0x40010c00

080047ac <delayms>:
    HAL_Delay(2);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
}

static void delayms(dwDeviceTypes_t *dev, unsigned int delay)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
    HAL_Delay(delay);
 80047b6:	6838      	ldr	r0, [r7, #0]
 80047b8:	f000 f93c 	bl	8004a34 <HAL_Delay>
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <dwSpiRead>:
#include "dw_spi.h"

void dwSpiRead(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, void *data, size_t length)
{
 80047c4:	b590      	push	{r4, r7, lr}
 80047c6:	b089      	sub	sp, #36	; 0x24
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	460b      	mov	r3, r1
 80047d2:	72fb      	strb	r3, [r7, #11]
    uint8_t header[3];
    size_t headerLength = 1;
 80047d4:	2301      	movs	r3, #1
 80047d6:	617b      	str	r3, [r7, #20]
    header[0] = regid & 0x3f;
 80047d8:	7afb      	ldrb	r3, [r7, #11]
 80047da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	743b      	strb	r3, [r7, #16]
    if (address != 0)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01c      	beq.n	8004822 <dwSpiRead+0x5e>
    {
        header[0] |= 0x40;
 80047e8:	7c3b      	ldrb	r3, [r7, #16]
 80047ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	743b      	strb	r3, [r7, #16]
        header[1] = address & 0x7f;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	747b      	strb	r3, [r7, #17]
        address >>= 7;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	09db      	lsrs	r3, r3, #7
 8004802:	607b      	str	r3, [r7, #4]
        headerLength = 2;
 8004804:	2302      	movs	r3, #2
 8004806:	617b      	str	r3, [r7, #20]
        if (address != 0)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <dwSpiRead+0x5e>
        {
            header[1] |= 0x80;
 800480e:	7c7b      	ldrb	r3, [r7, #17]
 8004810:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004814:	b2db      	uxtb	r3, r3
 8004816:	747b      	strb	r3, [r7, #17]
            header[2] = address & 0xff;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	74bb      	strb	r3, [r7, #18]
            headerLength = 3;
 800481e:	2303      	movs	r3, #3
 8004820:	617b      	str	r3, [r7, #20]
        }
    }
    dev->func->spiRead(dev, header, headerLength, data, length);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681c      	ldr	r4, [r3, #0]
 8004828:	f107 0110 	add.w	r1, r7, #16
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	47a0      	blx	r4
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	bd90      	pop	{r4, r7, pc}

08004840 <dwSpiRead16>:

uint16_t dwSpiRead16(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af02      	add	r7, sp, #8
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	460b      	mov	r3, r1
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	72fb      	strb	r3, [r7, #11]
    uint16_t data;
    dwSpiRead(dev, regid, address, &data, sizeof(data));
 800484e:	f107 0316 	add.w	r3, r7, #22
 8004852:	7af9      	ldrb	r1, [r7, #11]
 8004854:	2202      	movs	r2, #2
 8004856:	9200      	str	r2, [sp, #0]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f7ff ffb2 	bl	80047c4 <dwSpiRead>
    return data;
 8004860:	8afb      	ldrh	r3, [r7, #22]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <dwSpiRead32>:

uint32_t dwSpiRead32(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b088      	sub	sp, #32
 800486e:	af02      	add	r7, sp, #8
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	460b      	mov	r3, r1
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	72fb      	strb	r3, [r7, #11]
    uint32_t data;
    dwSpiRead(dev, regid, address, &data, sizeof(data));
 8004878:	f107 0314 	add.w	r3, r7, #20
 800487c:	7af9      	ldrb	r1, [r7, #11]
 800487e:	2204      	movs	r2, #4
 8004880:	9200      	str	r2, [sp, #0]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7ff ff9d 	bl	80047c4 <dwSpiRead>
    return data;
 800488a:	697b      	ldr	r3, [r7, #20]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <dwSpiWrite>:

void dwSpiWrite(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, const void *data, size_t length)
{
 8004894:	b590      	push	{r4, r7, lr}
 8004896:	b089      	sub	sp, #36	; 0x24
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	460b      	mov	r3, r1
 80048a2:	72fb      	strb	r3, [r7, #11]
    uint8_t header[3];
    size_t headerLength = 1;
 80048a4:	2301      	movs	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
    header[0] = regid & 0x3f;
 80048a8:	7afb      	ldrb	r3, [r7, #11]
 80048aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	743b      	strb	r3, [r7, #16]
    header[0] |= 0x80;
 80048b2:	7c3b      	ldrb	r3, [r7, #16]
 80048b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	743b      	strb	r3, [r7, #16]
    if (address != 0)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d01c      	beq.n	80048fc <dwSpiWrite+0x68>
    {
        header[0] |= 0x40;
 80048c2:	7c3b      	ldrb	r3, [r7, #16]
 80048c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	743b      	strb	r3, [r7, #16]
        header[1] = address & 0x7f;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	747b      	strb	r3, [r7, #17]
        address >>= 7;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	09db      	lsrs	r3, r3, #7
 80048dc:	607b      	str	r3, [r7, #4]
        headerLength = 2;
 80048de:	2302      	movs	r3, #2
 80048e0:	617b      	str	r3, [r7, #20]
        if (address != 0)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d009      	beq.n	80048fc <dwSpiWrite+0x68>
        {
            header[1] |= 0x80;
 80048e8:	7c7b      	ldrb	r3, [r7, #17]
 80048ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	747b      	strb	r3, [r7, #17]
            header[2] = address & 0xff;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	74bb      	strb	r3, [r7, #18]
            headerLength = 3;
 80048f8:	2303      	movs	r3, #3
 80048fa:	617b      	str	r3, [r7, #20]
        }
    }
    dev->func->spiWrite(dev, header, headerLength, data, length);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685c      	ldr	r4, [r3, #4]
 8004902:	f107 0110 	add.w	r1, r7, #16
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	47a0      	blx	r4
}
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	bd90      	pop	{r4, r7, pc}

0800491a <dwSpiWrite8>:

void dwSpiWrite8(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, uint8_t data)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af02      	add	r7, sp, #8
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	461a      	mov	r2, r3
 8004926:	460b      	mov	r3, r1
 8004928:	72fb      	strb	r3, [r7, #11]
 800492a:	4613      	mov	r3, r2
 800492c:	72bb      	strb	r3, [r7, #10]
    dwSpiWrite(dev, regid, address, &data, sizeof(data));
 800492e:	f107 030a 	add.w	r3, r7, #10
 8004932:	7af9      	ldrb	r1, [r7, #11]
 8004934:	2201      	movs	r2, #1
 8004936:	9200      	str	r2, [sp, #0]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff ffaa 	bl	8004894 <dwSpiWrite>
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <dwSpiWrite32>:

void dwSpiWrite32(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, uint32_t data)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	460b      	mov	r3, r1
 8004956:	72fb      	strb	r3, [r7, #11]
    dwSpiWrite(dev, regid, address, &data, sizeof(data));
 8004958:	463b      	mov	r3, r7
 800495a:	7af9      	ldrb	r1, [r7, #11]
 800495c:	2204      	movs	r2, #4
 800495e:	9200      	str	r2, [sp, #0]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f7ff ff96 	bl	8004894 <dwSpiWrite>
}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004974:	4b08      	ldr	r3, [pc, #32]	; (8004998 <HAL_Init+0x28>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a07      	ldr	r2, [pc, #28]	; (8004998 <HAL_Init+0x28>)
 800497a:	f043 0310 	orr.w	r3, r3, #16
 800497e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004980:	2003      	movs	r0, #3
 8004982:	f000 f947 	bl	8004c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004986:	200f      	movs	r0, #15
 8004988:	f000 f808 	bl	800499c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800498c:	f7fd f97c 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40022000 	.word	0x40022000

0800499c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049a4:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <HAL_InitTick+0x54>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <HAL_InitTick+0x58>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	4619      	mov	r1, r3
 80049ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80049b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f95f 	bl	8004c7e <HAL_SYSTICK_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e00e      	b.n	80049e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b0f      	cmp	r3, #15
 80049ce:	d80a      	bhi.n	80049e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049d0:	2200      	movs	r2, #0
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	f04f 30ff 	mov.w	r0, #4294967295
 80049d8:	f000 f927 	bl	8004c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049dc:	4a06      	ldr	r2, [pc, #24]	; (80049f8 <HAL_InitTick+0x5c>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e000      	b.n	80049e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20000060 	.word	0x20000060
 80049f4:	2000007c 	.word	0x2000007c
 80049f8:	20000078 	.word	0x20000078

080049fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_IncTick+0x1c>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <HAL_IncTick+0x20>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	4a03      	ldr	r2, [pc, #12]	; (8004a1c <HAL_IncTick+0x20>)
 8004a0e:	6013      	str	r3, [r2, #0]
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr
 8004a18:	2000007c 	.word	0x2000007c
 8004a1c:	200004c4 	.word	0x200004c4

08004a20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return uwTick;
 8004a24:	4b02      	ldr	r3, [pc, #8]	; (8004a30 <HAL_GetTick+0x10>)
 8004a26:	681b      	ldr	r3, [r3, #0]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	200004c4 	.word	0x200004c4

08004a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a3c:	f7ff fff0 	bl	8004a20 <HAL_GetTick>
 8004a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d005      	beq.n	8004a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <HAL_Delay+0x44>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a5a:	bf00      	nop
 8004a5c:	f7ff ffe0 	bl	8004a20 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d8f7      	bhi.n	8004a5c <HAL_Delay+0x28>
  {
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	2000007c 	.word	0x2000007c

08004a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aae:	4a04      	ldr	r2, [pc, #16]	; (8004ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	60d3      	str	r3, [r2, #12]
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	e000ed00 	.word	0xe000ed00

08004ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ac8:	4b04      	ldr	r3, [pc, #16]	; (8004adc <__NVIC_GetPriorityGrouping+0x18>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	0a1b      	lsrs	r3, r3, #8
 8004ace:	f003 0307 	and.w	r3, r3, #7
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	e000ed00 	.word	0xe000ed00

08004ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	db0b      	blt.n	8004b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	f003 021f 	and.w	r2, r3, #31
 8004af8:	4906      	ldr	r1, [pc, #24]	; (8004b14 <__NVIC_EnableIRQ+0x34>)
 8004afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	2001      	movs	r0, #1
 8004b02:	fa00 f202 	lsl.w	r2, r0, r2
 8004b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	e000e100 	.word	0xe000e100

08004b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	6039      	str	r1, [r7, #0]
 8004b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	db0a      	blt.n	8004b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	490c      	ldr	r1, [pc, #48]	; (8004b64 <__NVIC_SetPriority+0x4c>)
 8004b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b36:	0112      	lsls	r2, r2, #4
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b40:	e00a      	b.n	8004b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	4908      	ldr	r1, [pc, #32]	; (8004b68 <__NVIC_SetPriority+0x50>)
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	3b04      	subs	r3, #4
 8004b50:	0112      	lsls	r2, r2, #4
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	440b      	add	r3, r1
 8004b56:	761a      	strb	r2, [r3, #24]
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	e000e100 	.word	0xe000e100
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b089      	sub	sp, #36	; 0x24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f1c3 0307 	rsb	r3, r3, #7
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	bf28      	it	cs
 8004b8a:	2304      	movcs	r3, #4
 8004b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3304      	adds	r3, #4
 8004b92:	2b06      	cmp	r3, #6
 8004b94:	d902      	bls.n	8004b9c <NVIC_EncodePriority+0x30>
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	3b03      	subs	r3, #3
 8004b9a:	e000      	b.n	8004b9e <NVIC_EncodePriority+0x32>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43da      	mvns	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	401a      	ands	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbe:	43d9      	mvns	r1, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc4:	4313      	orrs	r3, r2
         );
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3724      	adds	r7, #36	; 0x24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr

08004bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004be0:	d301      	bcc.n	8004be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004be2:	2301      	movs	r3, #1
 8004be4:	e00f      	b.n	8004c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004be6:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <SysTick_Config+0x40>)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bee:	210f      	movs	r1, #15
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	f7ff ff90 	bl	8004b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <SysTick_Config+0x40>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bfe:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <SysTick_Config+0x40>)
 8004c00:	2207      	movs	r2, #7
 8004c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	e000e010 	.word	0xe000e010

08004c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff ff2d 	bl	8004a7c <__NVIC_SetPriorityGrouping>
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b086      	sub	sp, #24
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	4603      	mov	r3, r0
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c3c:	f7ff ff42 	bl	8004ac4 <__NVIC_GetPriorityGrouping>
 8004c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	6978      	ldr	r0, [r7, #20]
 8004c48:	f7ff ff90 	bl	8004b6c <NVIC_EncodePriority>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c52:	4611      	mov	r1, r2
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff ff5f 	bl	8004b18 <__NVIC_SetPriority>
}
 8004c5a:	bf00      	nop
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	4603      	mov	r3, r0
 8004c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ff35 	bl	8004ae0 <__NVIC_EnableIRQ>
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff ffa2 	bl	8004bd0 <SysTick_Config>
 8004c8c:	4603      	mov	r3, r0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b085      	sub	sp, #20
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d008      	beq.n	8004cbe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2204      	movs	r2, #4
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e020      	b.n	8004d00 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 020e 	bic.w	r2, r2, #14
 8004ccc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0201 	bic.w	r2, r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr
	...

08004d0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d005      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2204      	movs	r2, #4
 8004d26:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
 8004d2c:	e0d6      	b.n	8004edc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 020e 	bic.w	r2, r2, #14
 8004d3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0201 	bic.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	4b64      	ldr	r3, [pc, #400]	; (8004ee8 <HAL_DMA_Abort_IT+0x1dc>)
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d958      	bls.n	8004e0c <HAL_DMA_Abort_IT+0x100>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a63      	ldr	r2, [pc, #396]	; (8004eec <HAL_DMA_Abort_IT+0x1e0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d04f      	beq.n	8004e04 <HAL_DMA_Abort_IT+0xf8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a61      	ldr	r2, [pc, #388]	; (8004ef0 <HAL_DMA_Abort_IT+0x1e4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d048      	beq.n	8004e00 <HAL_DMA_Abort_IT+0xf4>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a60      	ldr	r2, [pc, #384]	; (8004ef4 <HAL_DMA_Abort_IT+0x1e8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d040      	beq.n	8004dfa <HAL_DMA_Abort_IT+0xee>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a5e      	ldr	r2, [pc, #376]	; (8004ef8 <HAL_DMA_Abort_IT+0x1ec>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d038      	beq.n	8004df4 <HAL_DMA_Abort_IT+0xe8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a5d      	ldr	r2, [pc, #372]	; (8004efc <HAL_DMA_Abort_IT+0x1f0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d030      	beq.n	8004dee <HAL_DMA_Abort_IT+0xe2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a5b      	ldr	r2, [pc, #364]	; (8004f00 <HAL_DMA_Abort_IT+0x1f4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d028      	beq.n	8004de8 <HAL_DMA_Abort_IT+0xdc>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a53      	ldr	r2, [pc, #332]	; (8004ee8 <HAL_DMA_Abort_IT+0x1dc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d020      	beq.n	8004de2 <HAL_DMA_Abort_IT+0xd6>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a57      	ldr	r2, [pc, #348]	; (8004f04 <HAL_DMA_Abort_IT+0x1f8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d019      	beq.n	8004dde <HAL_DMA_Abort_IT+0xd2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a56      	ldr	r2, [pc, #344]	; (8004f08 <HAL_DMA_Abort_IT+0x1fc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d012      	beq.n	8004dda <HAL_DMA_Abort_IT+0xce>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a54      	ldr	r2, [pc, #336]	; (8004f0c <HAL_DMA_Abort_IT+0x200>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_DMA_Abort_IT+0xc8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a53      	ldr	r2, [pc, #332]	; (8004f10 <HAL_DMA_Abort_IT+0x204>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d102      	bne.n	8004dce <HAL_DMA_Abort_IT+0xc2>
 8004dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dcc:	e01b      	b.n	8004e06 <HAL_DMA_Abort_IT+0xfa>
 8004dce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dd2:	e018      	b.n	8004e06 <HAL_DMA_Abort_IT+0xfa>
 8004dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dd8:	e015      	b.n	8004e06 <HAL_DMA_Abort_IT+0xfa>
 8004dda:	2310      	movs	r3, #16
 8004ddc:	e013      	b.n	8004e06 <HAL_DMA_Abort_IT+0xfa>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e011      	b.n	8004e06 <HAL_DMA_Abort_IT+0xfa>
 8004de2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004de6:	e00e      	b.n	8004e06 <HAL_DMA_Abort_IT+0xfa>
 8004de8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004dec:	e00b      	b.n	8004e06 <HAL_DMA_Abort_IT+0xfa>
 8004dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004df2:	e008      	b.n	8004e06 <HAL_DMA_Abort_IT+0xfa>
 8004df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004df8:	e005      	b.n	8004e06 <HAL_DMA_Abort_IT+0xfa>
 8004dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dfe:	e002      	b.n	8004e06 <HAL_DMA_Abort_IT+0xfa>
 8004e00:	2310      	movs	r3, #16
 8004e02:	e000      	b.n	8004e06 <HAL_DMA_Abort_IT+0xfa>
 8004e04:	2301      	movs	r3, #1
 8004e06:	4a43      	ldr	r2, [pc, #268]	; (8004f14 <HAL_DMA_Abort_IT+0x208>)
 8004e08:	6053      	str	r3, [r2, #4]
 8004e0a:	e057      	b.n	8004ebc <HAL_DMA_Abort_IT+0x1b0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a36      	ldr	r2, [pc, #216]	; (8004eec <HAL_DMA_Abort_IT+0x1e0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d04f      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x1aa>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a35      	ldr	r2, [pc, #212]	; (8004ef0 <HAL_DMA_Abort_IT+0x1e4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d048      	beq.n	8004eb2 <HAL_DMA_Abort_IT+0x1a6>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a33      	ldr	r2, [pc, #204]	; (8004ef4 <HAL_DMA_Abort_IT+0x1e8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d040      	beq.n	8004eac <HAL_DMA_Abort_IT+0x1a0>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a32      	ldr	r2, [pc, #200]	; (8004ef8 <HAL_DMA_Abort_IT+0x1ec>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d038      	beq.n	8004ea6 <HAL_DMA_Abort_IT+0x19a>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a30      	ldr	r2, [pc, #192]	; (8004efc <HAL_DMA_Abort_IT+0x1f0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d030      	beq.n	8004ea0 <HAL_DMA_Abort_IT+0x194>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a2f      	ldr	r2, [pc, #188]	; (8004f00 <HAL_DMA_Abort_IT+0x1f4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d028      	beq.n	8004e9a <HAL_DMA_Abort_IT+0x18e>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a26      	ldr	r2, [pc, #152]	; (8004ee8 <HAL_DMA_Abort_IT+0x1dc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d020      	beq.n	8004e94 <HAL_DMA_Abort_IT+0x188>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2b      	ldr	r2, [pc, #172]	; (8004f04 <HAL_DMA_Abort_IT+0x1f8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d019      	beq.n	8004e90 <HAL_DMA_Abort_IT+0x184>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a29      	ldr	r2, [pc, #164]	; (8004f08 <HAL_DMA_Abort_IT+0x1fc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d012      	beq.n	8004e8c <HAL_DMA_Abort_IT+0x180>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a28      	ldr	r2, [pc, #160]	; (8004f0c <HAL_DMA_Abort_IT+0x200>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00a      	beq.n	8004e86 <HAL_DMA_Abort_IT+0x17a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a26      	ldr	r2, [pc, #152]	; (8004f10 <HAL_DMA_Abort_IT+0x204>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d102      	bne.n	8004e80 <HAL_DMA_Abort_IT+0x174>
 8004e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e7e:	e01b      	b.n	8004eb8 <HAL_DMA_Abort_IT+0x1ac>
 8004e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e84:	e018      	b.n	8004eb8 <HAL_DMA_Abort_IT+0x1ac>
 8004e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e8a:	e015      	b.n	8004eb8 <HAL_DMA_Abort_IT+0x1ac>
 8004e8c:	2310      	movs	r3, #16
 8004e8e:	e013      	b.n	8004eb8 <HAL_DMA_Abort_IT+0x1ac>
 8004e90:	2301      	movs	r3, #1
 8004e92:	e011      	b.n	8004eb8 <HAL_DMA_Abort_IT+0x1ac>
 8004e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e98:	e00e      	b.n	8004eb8 <HAL_DMA_Abort_IT+0x1ac>
 8004e9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e9e:	e00b      	b.n	8004eb8 <HAL_DMA_Abort_IT+0x1ac>
 8004ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ea4:	e008      	b.n	8004eb8 <HAL_DMA_Abort_IT+0x1ac>
 8004ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eaa:	e005      	b.n	8004eb8 <HAL_DMA_Abort_IT+0x1ac>
 8004eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004eb0:	e002      	b.n	8004eb8 <HAL_DMA_Abort_IT+0x1ac>
 8004eb2:	2310      	movs	r3, #16
 8004eb4:	e000      	b.n	8004eb8 <HAL_DMA_Abort_IT+0x1ac>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <HAL_DMA_Abort_IT+0x20c>)
 8004eba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	4798      	blx	r3
    } 
  }
  return status;
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40020080 	.word	0x40020080
 8004eec:	40020008 	.word	0x40020008
 8004ef0:	4002001c 	.word	0x4002001c
 8004ef4:	40020030 	.word	0x40020030
 8004ef8:	40020044 	.word	0x40020044
 8004efc:	40020058 	.word	0x40020058
 8004f00:	4002006c 	.word	0x4002006c
 8004f04:	40020408 	.word	0x40020408
 8004f08:	4002041c 	.word	0x4002041c
 8004f0c:	40020430 	.word	0x40020430
 8004f10:	40020444 	.word	0x40020444
 8004f14:	40020400 	.word	0x40020400
 8004f18:	40020000 	.word	0x40020000

08004f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b08b      	sub	sp, #44	; 0x2c
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f26:	2300      	movs	r3, #0
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f2e:	e179      	b.n	8005224 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004f30:	2201      	movs	r2, #1
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	f040 8168 	bne.w	800521e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4a96      	ldr	r2, [pc, #600]	; (80051ac <HAL_GPIO_Init+0x290>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d05e      	beq.n	8005016 <HAL_GPIO_Init+0xfa>
 8004f58:	4a94      	ldr	r2, [pc, #592]	; (80051ac <HAL_GPIO_Init+0x290>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d875      	bhi.n	800504a <HAL_GPIO_Init+0x12e>
 8004f5e:	4a94      	ldr	r2, [pc, #592]	; (80051b0 <HAL_GPIO_Init+0x294>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d058      	beq.n	8005016 <HAL_GPIO_Init+0xfa>
 8004f64:	4a92      	ldr	r2, [pc, #584]	; (80051b0 <HAL_GPIO_Init+0x294>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d86f      	bhi.n	800504a <HAL_GPIO_Init+0x12e>
 8004f6a:	4a92      	ldr	r2, [pc, #584]	; (80051b4 <HAL_GPIO_Init+0x298>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d052      	beq.n	8005016 <HAL_GPIO_Init+0xfa>
 8004f70:	4a90      	ldr	r2, [pc, #576]	; (80051b4 <HAL_GPIO_Init+0x298>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d869      	bhi.n	800504a <HAL_GPIO_Init+0x12e>
 8004f76:	4a90      	ldr	r2, [pc, #576]	; (80051b8 <HAL_GPIO_Init+0x29c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d04c      	beq.n	8005016 <HAL_GPIO_Init+0xfa>
 8004f7c:	4a8e      	ldr	r2, [pc, #568]	; (80051b8 <HAL_GPIO_Init+0x29c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d863      	bhi.n	800504a <HAL_GPIO_Init+0x12e>
 8004f82:	4a8e      	ldr	r2, [pc, #568]	; (80051bc <HAL_GPIO_Init+0x2a0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d046      	beq.n	8005016 <HAL_GPIO_Init+0xfa>
 8004f88:	4a8c      	ldr	r2, [pc, #560]	; (80051bc <HAL_GPIO_Init+0x2a0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d85d      	bhi.n	800504a <HAL_GPIO_Init+0x12e>
 8004f8e:	2b12      	cmp	r3, #18
 8004f90:	d82a      	bhi.n	8004fe8 <HAL_GPIO_Init+0xcc>
 8004f92:	2b12      	cmp	r3, #18
 8004f94:	d859      	bhi.n	800504a <HAL_GPIO_Init+0x12e>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <HAL_GPIO_Init+0x80>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08005017 	.word	0x08005017
 8004fa0:	08004ff1 	.word	0x08004ff1
 8004fa4:	08005003 	.word	0x08005003
 8004fa8:	08005045 	.word	0x08005045
 8004fac:	0800504b 	.word	0x0800504b
 8004fb0:	0800504b 	.word	0x0800504b
 8004fb4:	0800504b 	.word	0x0800504b
 8004fb8:	0800504b 	.word	0x0800504b
 8004fbc:	0800504b 	.word	0x0800504b
 8004fc0:	0800504b 	.word	0x0800504b
 8004fc4:	0800504b 	.word	0x0800504b
 8004fc8:	0800504b 	.word	0x0800504b
 8004fcc:	0800504b 	.word	0x0800504b
 8004fd0:	0800504b 	.word	0x0800504b
 8004fd4:	0800504b 	.word	0x0800504b
 8004fd8:	0800504b 	.word	0x0800504b
 8004fdc:	0800504b 	.word	0x0800504b
 8004fe0:	08004ff9 	.word	0x08004ff9
 8004fe4:	0800500d 	.word	0x0800500d
 8004fe8:	4a75      	ldr	r2, [pc, #468]	; (80051c0 <HAL_GPIO_Init+0x2a4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004fee:	e02c      	b.n	800504a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	623b      	str	r3, [r7, #32]
          break;
 8004ff6:	e029      	b.n	800504c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	623b      	str	r3, [r7, #32]
          break;
 8005000:	e024      	b.n	800504c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	3308      	adds	r3, #8
 8005008:	623b      	str	r3, [r7, #32]
          break;
 800500a:	e01f      	b.n	800504c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	330c      	adds	r3, #12
 8005012:	623b      	str	r3, [r7, #32]
          break;
 8005014:	e01a      	b.n	800504c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800501e:	2304      	movs	r3, #4
 8005020:	623b      	str	r3, [r7, #32]
          break;
 8005022:	e013      	b.n	800504c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d105      	bne.n	8005038 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800502c:	2308      	movs	r3, #8
 800502e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	611a      	str	r2, [r3, #16]
          break;
 8005036:	e009      	b.n	800504c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005038:	2308      	movs	r3, #8
 800503a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	615a      	str	r2, [r3, #20]
          break;
 8005042:	e003      	b.n	800504c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005044:	2300      	movs	r3, #0
 8005046:	623b      	str	r3, [r7, #32]
          break;
 8005048:	e000      	b.n	800504c <HAL_GPIO_Init+0x130>
          break;
 800504a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	2bff      	cmp	r3, #255	; 0xff
 8005050:	d801      	bhi.n	8005056 <HAL_GPIO_Init+0x13a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	e001      	b.n	800505a <HAL_GPIO_Init+0x13e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3304      	adds	r3, #4
 800505a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2bff      	cmp	r3, #255	; 0xff
 8005060:	d802      	bhi.n	8005068 <HAL_GPIO_Init+0x14c>
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	e002      	b.n	800506e <HAL_GPIO_Init+0x152>
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	3b08      	subs	r3, #8
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	210f      	movs	r1, #15
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	fa01 f303 	lsl.w	r3, r1, r3
 800507c:	43db      	mvns	r3, r3
 800507e:	401a      	ands	r2, r3
 8005080:	6a39      	ldr	r1, [r7, #32]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	431a      	orrs	r2, r3
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80c1 	beq.w	800521e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800509c:	4b49      	ldr	r3, [pc, #292]	; (80051c4 <HAL_GPIO_Init+0x2a8>)
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	4a48      	ldr	r2, [pc, #288]	; (80051c4 <HAL_GPIO_Init+0x2a8>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	6193      	str	r3, [r2, #24]
 80050a8:	4b46      	ldr	r3, [pc, #280]	; (80051c4 <HAL_GPIO_Init+0x2a8>)
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	60bb      	str	r3, [r7, #8]
 80050b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80050b4:	4a44      	ldr	r2, [pc, #272]	; (80051c8 <HAL_GPIO_Init+0x2ac>)
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	089b      	lsrs	r3, r3, #2
 80050ba:	3302      	adds	r3, #2
 80050bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	220f      	movs	r2, #15
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	43db      	mvns	r3, r3
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4013      	ands	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a3c      	ldr	r2, [pc, #240]	; (80051cc <HAL_GPIO_Init+0x2b0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d01f      	beq.n	8005120 <HAL_GPIO_Init+0x204>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a3b      	ldr	r2, [pc, #236]	; (80051d0 <HAL_GPIO_Init+0x2b4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d019      	beq.n	800511c <HAL_GPIO_Init+0x200>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a3a      	ldr	r2, [pc, #232]	; (80051d4 <HAL_GPIO_Init+0x2b8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_GPIO_Init+0x1fc>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a39      	ldr	r2, [pc, #228]	; (80051d8 <HAL_GPIO_Init+0x2bc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00d      	beq.n	8005114 <HAL_GPIO_Init+0x1f8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a38      	ldr	r2, [pc, #224]	; (80051dc <HAL_GPIO_Init+0x2c0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d007      	beq.n	8005110 <HAL_GPIO_Init+0x1f4>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a37      	ldr	r2, [pc, #220]	; (80051e0 <HAL_GPIO_Init+0x2c4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_GPIO_Init+0x1f0>
 8005108:	2305      	movs	r3, #5
 800510a:	e00a      	b.n	8005122 <HAL_GPIO_Init+0x206>
 800510c:	2306      	movs	r3, #6
 800510e:	e008      	b.n	8005122 <HAL_GPIO_Init+0x206>
 8005110:	2304      	movs	r3, #4
 8005112:	e006      	b.n	8005122 <HAL_GPIO_Init+0x206>
 8005114:	2303      	movs	r3, #3
 8005116:	e004      	b.n	8005122 <HAL_GPIO_Init+0x206>
 8005118:	2302      	movs	r3, #2
 800511a:	e002      	b.n	8005122 <HAL_GPIO_Init+0x206>
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <HAL_GPIO_Init+0x206>
 8005120:	2300      	movs	r3, #0
 8005122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005124:	f002 0203 	and.w	r2, r2, #3
 8005128:	0092      	lsls	r2, r2, #2
 800512a:	4093      	lsls	r3, r2
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005132:	4925      	ldr	r1, [pc, #148]	; (80051c8 <HAL_GPIO_Init+0x2ac>)
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	3302      	adds	r3, #2
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d006      	beq.n	800515a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800514c:	4b25      	ldr	r3, [pc, #148]	; (80051e4 <HAL_GPIO_Init+0x2c8>)
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	4924      	ldr	r1, [pc, #144]	; (80051e4 <HAL_GPIO_Init+0x2c8>)
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	4313      	orrs	r3, r2
 8005156:	600b      	str	r3, [r1, #0]
 8005158:	e006      	b.n	8005168 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800515a:	4b22      	ldr	r3, [pc, #136]	; (80051e4 <HAL_GPIO_Init+0x2c8>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	43db      	mvns	r3, r3
 8005162:	4920      	ldr	r1, [pc, #128]	; (80051e4 <HAL_GPIO_Init+0x2c8>)
 8005164:	4013      	ands	r3, r2
 8005166:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d006      	beq.n	8005182 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005174:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <HAL_GPIO_Init+0x2c8>)
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	491a      	ldr	r1, [pc, #104]	; (80051e4 <HAL_GPIO_Init+0x2c8>)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	4313      	orrs	r3, r2
 800517e:	604b      	str	r3, [r1, #4]
 8005180:	e006      	b.n	8005190 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005182:	4b18      	ldr	r3, [pc, #96]	; (80051e4 <HAL_GPIO_Init+0x2c8>)
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	43db      	mvns	r3, r3
 800518a:	4916      	ldr	r1, [pc, #88]	; (80051e4 <HAL_GPIO_Init+0x2c8>)
 800518c:	4013      	ands	r3, r2
 800518e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d025      	beq.n	80051e8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800519c:	4b11      	ldr	r3, [pc, #68]	; (80051e4 <HAL_GPIO_Init+0x2c8>)
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	4910      	ldr	r1, [pc, #64]	; (80051e4 <HAL_GPIO_Init+0x2c8>)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]
 80051a8:	e025      	b.n	80051f6 <HAL_GPIO_Init+0x2da>
 80051aa:	bf00      	nop
 80051ac:	10320000 	.word	0x10320000
 80051b0:	10310000 	.word	0x10310000
 80051b4:	10220000 	.word	0x10220000
 80051b8:	10210000 	.word	0x10210000
 80051bc:	10120000 	.word	0x10120000
 80051c0:	10110000 	.word	0x10110000
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40010000 	.word	0x40010000
 80051cc:	40010800 	.word	0x40010800
 80051d0:	40010c00 	.word	0x40010c00
 80051d4:	40011000 	.word	0x40011000
 80051d8:	40011400 	.word	0x40011400
 80051dc:	40011800 	.word	0x40011800
 80051e0:	40011c00 	.word	0x40011c00
 80051e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80051e8:	4b15      	ldr	r3, [pc, #84]	; (8005240 <HAL_GPIO_Init+0x324>)
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	43db      	mvns	r3, r3
 80051f0:	4913      	ldr	r1, [pc, #76]	; (8005240 <HAL_GPIO_Init+0x324>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d006      	beq.n	8005210 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005202:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <HAL_GPIO_Init+0x324>)
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	490e      	ldr	r1, [pc, #56]	; (8005240 <HAL_GPIO_Init+0x324>)
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	4313      	orrs	r3, r2
 800520c:	60cb      	str	r3, [r1, #12]
 800520e:	e006      	b.n	800521e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <HAL_GPIO_Init+0x324>)
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	43db      	mvns	r3, r3
 8005218:	4909      	ldr	r1, [pc, #36]	; (8005240 <HAL_GPIO_Init+0x324>)
 800521a:	4013      	ands	r3, r2
 800521c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	3301      	adds	r3, #1
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	fa22 f303 	lsr.w	r3, r2, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	f47f ae7e 	bne.w	8004f30 <HAL_GPIO_Init+0x14>
  }
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	372c      	adds	r7, #44	; 0x2c
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr
 8005240:	40010400 	.word	0x40010400

08005244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	807b      	strh	r3, [r7, #2]
 8005250:	4613      	mov	r3, r2
 8005252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005254:	787b      	ldrb	r3, [r7, #1]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800525a:	887a      	ldrh	r2, [r7, #2]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005260:	e003      	b.n	800526a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005262:	887b      	ldrh	r3, [r7, #2]
 8005264:	041a      	lsls	r2, r3, #16
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	611a      	str	r2, [r3, #16]
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800527e:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005280:	695a      	ldr	r2, [r3, #20]
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	4013      	ands	r3, r2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d006      	beq.n	8005298 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800528a:	4a05      	ldr	r2, [pc, #20]	; (80052a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005290:	88fb      	ldrh	r3, [r7, #6]
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f806 	bl	80052a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40010400 	.word	0x40010400

080052a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr

080052b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e12b      	b.n	8005522 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fc f834 	bl	800134c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2224      	movs	r2, #36	; 0x24
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0201 	bic.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800530a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800531a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800531c:	f000 fce4 	bl	8005ce8 <HAL_RCC_GetPCLK1Freq>
 8005320:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	4a81      	ldr	r2, [pc, #516]	; (800552c <HAL_I2C_Init+0x274>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d807      	bhi.n	800533c <HAL_I2C_Init+0x84>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a80      	ldr	r2, [pc, #512]	; (8005530 <HAL_I2C_Init+0x278>)
 8005330:	4293      	cmp	r3, r2
 8005332:	bf94      	ite	ls
 8005334:	2301      	movls	r3, #1
 8005336:	2300      	movhi	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	e006      	b.n	800534a <HAL_I2C_Init+0x92>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4a7d      	ldr	r2, [pc, #500]	; (8005534 <HAL_I2C_Init+0x27c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	bf94      	ite	ls
 8005344:	2301      	movls	r3, #1
 8005346:	2300      	movhi	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e0e7      	b.n	8005522 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4a78      	ldr	r2, [pc, #480]	; (8005538 <HAL_I2C_Init+0x280>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	0c9b      	lsrs	r3, r3, #18
 800535c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	4a6a      	ldr	r2, [pc, #424]	; (800552c <HAL_I2C_Init+0x274>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d802      	bhi.n	800538c <HAL_I2C_Init+0xd4>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	3301      	adds	r3, #1
 800538a:	e009      	b.n	80053a0 <HAL_I2C_Init+0xe8>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005392:	fb02 f303 	mul.w	r3, r2, r3
 8005396:	4a69      	ldr	r2, [pc, #420]	; (800553c <HAL_I2C_Init+0x284>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	099b      	lsrs	r3, r3, #6
 800539e:	3301      	adds	r3, #1
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6812      	ldr	r2, [r2, #0]
 80053a4:	430b      	orrs	r3, r1
 80053a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80053b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	495c      	ldr	r1, [pc, #368]	; (800552c <HAL_I2C_Init+0x274>)
 80053bc:	428b      	cmp	r3, r1
 80053be:	d819      	bhi.n	80053f4 <HAL_I2C_Init+0x13c>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	1e59      	subs	r1, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80053ce:	1c59      	adds	r1, r3, #1
 80053d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80053d4:	400b      	ands	r3, r1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_I2C_Init+0x138>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1e59      	subs	r1, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80053e8:	3301      	adds	r3, #1
 80053ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ee:	e051      	b.n	8005494 <HAL_I2C_Init+0x1dc>
 80053f0:	2304      	movs	r3, #4
 80053f2:	e04f      	b.n	8005494 <HAL_I2C_Init+0x1dc>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d111      	bne.n	8005420 <HAL_I2C_Init+0x168>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	1e58      	subs	r0, r3, #1
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6859      	ldr	r1, [r3, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	440b      	add	r3, r1
 800540a:	fbb0 f3f3 	udiv	r3, r0, r3
 800540e:	3301      	adds	r3, #1
 8005410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005414:	2b00      	cmp	r3, #0
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	e012      	b.n	8005446 <HAL_I2C_Init+0x18e>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	1e58      	subs	r0, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6859      	ldr	r1, [r3, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	0099      	lsls	r1, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	fbb0 f3f3 	udiv	r3, r0, r3
 8005436:	3301      	adds	r3, #1
 8005438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800543c:	2b00      	cmp	r3, #0
 800543e:	bf0c      	ite	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2300      	movne	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_I2C_Init+0x196>
 800544a:	2301      	movs	r3, #1
 800544c:	e022      	b.n	8005494 <HAL_I2C_Init+0x1dc>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10e      	bne.n	8005474 <HAL_I2C_Init+0x1bc>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1e58      	subs	r0, r3, #1
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6859      	ldr	r1, [r3, #4]
 800545e:	460b      	mov	r3, r1
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	440b      	add	r3, r1
 8005464:	fbb0 f3f3 	udiv	r3, r0, r3
 8005468:	3301      	adds	r3, #1
 800546a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800546e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005472:	e00f      	b.n	8005494 <HAL_I2C_Init+0x1dc>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	1e58      	subs	r0, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6859      	ldr	r1, [r3, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	0099      	lsls	r1, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	fbb0 f3f3 	udiv	r3, r0, r3
 800548a:	3301      	adds	r3, #1
 800548c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	6809      	ldr	r1, [r1, #0]
 8005498:	4313      	orrs	r3, r2
 800549a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69da      	ldr	r2, [r3, #28]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80054c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6911      	ldr	r1, [r2, #16]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	68d2      	ldr	r2, [r2, #12]
 80054ce:	4311      	orrs	r1, r2
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	430b      	orrs	r3, r1
 80054d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	000186a0 	.word	0x000186a0
 8005530:	001e847f 	.word	0x001e847f
 8005534:	003d08ff 	.word	0x003d08ff
 8005538:	431bde83 	.word	0x431bde83
 800553c:	10624dd3 	.word	0x10624dd3

08005540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e272      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 8087 	beq.w	800566e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005560:	4b92      	ldr	r3, [pc, #584]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 030c 	and.w	r3, r3, #12
 8005568:	2b04      	cmp	r3, #4
 800556a:	d00c      	beq.n	8005586 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800556c:	4b8f      	ldr	r3, [pc, #572]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 030c 	and.w	r3, r3, #12
 8005574:	2b08      	cmp	r3, #8
 8005576:	d112      	bne.n	800559e <HAL_RCC_OscConfig+0x5e>
 8005578:	4b8c      	ldr	r3, [pc, #560]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005584:	d10b      	bne.n	800559e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005586:	4b89      	ldr	r3, [pc, #548]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d06c      	beq.n	800566c <HAL_RCC_OscConfig+0x12c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d168      	bne.n	800566c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e24c      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a6:	d106      	bne.n	80055b6 <HAL_RCC_OscConfig+0x76>
 80055a8:	4b80      	ldr	r3, [pc, #512]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a7f      	ldr	r2, [pc, #508]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80055ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	e02e      	b.n	8005614 <HAL_RCC_OscConfig+0xd4>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCC_OscConfig+0x98>
 80055be:	4b7b      	ldr	r3, [pc, #492]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a7a      	ldr	r2, [pc, #488]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80055c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	4b78      	ldr	r3, [pc, #480]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a77      	ldr	r2, [pc, #476]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80055d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	e01d      	b.n	8005614 <HAL_RCC_OscConfig+0xd4>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055e0:	d10c      	bne.n	80055fc <HAL_RCC_OscConfig+0xbc>
 80055e2:	4b72      	ldr	r3, [pc, #456]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a71      	ldr	r2, [pc, #452]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80055e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	4b6f      	ldr	r3, [pc, #444]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a6e      	ldr	r2, [pc, #440]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80055f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	e00b      	b.n	8005614 <HAL_RCC_OscConfig+0xd4>
 80055fc:	4b6b      	ldr	r3, [pc, #428]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a6a      	ldr	r2, [pc, #424]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 8005602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	4b68      	ldr	r3, [pc, #416]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a67      	ldr	r2, [pc, #412]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 800560e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005612:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d013      	beq.n	8005644 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561c:	f7ff fa00 	bl	8004a20 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005624:	f7ff f9fc 	bl	8004a20 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b64      	cmp	r3, #100	; 0x64
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e200      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005636:	4b5d      	ldr	r3, [pc, #372]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0xe4>
 8005642:	e014      	b.n	800566e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005644:	f7ff f9ec 	bl	8004a20 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800564c:	f7ff f9e8 	bl	8004a20 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b64      	cmp	r3, #100	; 0x64
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e1ec      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800565e:	4b53      	ldr	r3, [pc, #332]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x10c>
 800566a:	e000      	b.n	800566e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800566c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d063      	beq.n	8005742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800567a:	4b4c      	ldr	r3, [pc, #304]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f003 030c 	and.w	r3, r3, #12
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00b      	beq.n	800569e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005686:	4b49      	ldr	r3, [pc, #292]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f003 030c 	and.w	r3, r3, #12
 800568e:	2b08      	cmp	r3, #8
 8005690:	d11c      	bne.n	80056cc <HAL_RCC_OscConfig+0x18c>
 8005692:	4b46      	ldr	r3, [pc, #280]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d116      	bne.n	80056cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800569e:	4b43      	ldr	r3, [pc, #268]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d005      	beq.n	80056b6 <HAL_RCC_OscConfig+0x176>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d001      	beq.n	80056b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e1c0      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b6:	4b3d      	ldr	r3, [pc, #244]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4939      	ldr	r1, [pc, #228]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ca:	e03a      	b.n	8005742 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d020      	beq.n	8005716 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056d4:	4b36      	ldr	r3, [pc, #216]	; (80057b0 <HAL_RCC_OscConfig+0x270>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056da:	f7ff f9a1 	bl	8004a20 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056e2:	f7ff f99d 	bl	8004a20 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e1a1      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f4:	4b2d      	ldr	r3, [pc, #180]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0f0      	beq.n	80056e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005700:	4b2a      	ldr	r3, [pc, #168]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	4927      	ldr	r1, [pc, #156]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 8005710:	4313      	orrs	r3, r2
 8005712:	600b      	str	r3, [r1, #0]
 8005714:	e015      	b.n	8005742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005716:	4b26      	ldr	r3, [pc, #152]	; (80057b0 <HAL_RCC_OscConfig+0x270>)
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571c:	f7ff f980 	bl	8004a20 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005724:	f7ff f97c 	bl	8004a20 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e180      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005736:	4b1d      	ldr	r3, [pc, #116]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d03a      	beq.n	80057c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d019      	beq.n	800578a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005756:	4b17      	ldr	r3, [pc, #92]	; (80057b4 <HAL_RCC_OscConfig+0x274>)
 8005758:	2201      	movs	r2, #1
 800575a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800575c:	f7ff f960 	bl	8004a20 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005764:	f7ff f95c 	bl	8004a20 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e160      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <HAL_RCC_OscConfig+0x26c>)
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005782:	2001      	movs	r0, #1
 8005784:	f000 fad8 	bl	8005d38 <RCC_Delay>
 8005788:	e01c      	b.n	80057c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800578a:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <HAL_RCC_OscConfig+0x274>)
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005790:	f7ff f946 	bl	8004a20 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005796:	e00f      	b.n	80057b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005798:	f7ff f942 	bl	8004a20 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d908      	bls.n	80057b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e146      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
 80057aa:	bf00      	nop
 80057ac:	40021000 	.word	0x40021000
 80057b0:	42420000 	.word	0x42420000
 80057b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057b8:	4b92      	ldr	r3, [pc, #584]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e9      	bne.n	8005798 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80a6 	beq.w	800591e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057d2:	2300      	movs	r3, #0
 80057d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057d6:	4b8b      	ldr	r3, [pc, #556]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10d      	bne.n	80057fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e2:	4b88      	ldr	r3, [pc, #544]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	4a87      	ldr	r2, [pc, #540]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 80057e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ec:	61d3      	str	r3, [r2, #28]
 80057ee:	4b85      	ldr	r3, [pc, #532]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f6:	60bb      	str	r3, [r7, #8]
 80057f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057fa:	2301      	movs	r3, #1
 80057fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fe:	4b82      	ldr	r3, [pc, #520]	; (8005a08 <HAL_RCC_OscConfig+0x4c8>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005806:	2b00      	cmp	r3, #0
 8005808:	d118      	bne.n	800583c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800580a:	4b7f      	ldr	r3, [pc, #508]	; (8005a08 <HAL_RCC_OscConfig+0x4c8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a7e      	ldr	r2, [pc, #504]	; (8005a08 <HAL_RCC_OscConfig+0x4c8>)
 8005810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005816:	f7ff f903 	bl	8004a20 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800581c:	e008      	b.n	8005830 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581e:	f7ff f8ff 	bl	8004a20 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b64      	cmp	r3, #100	; 0x64
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e103      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005830:	4b75      	ldr	r3, [pc, #468]	; (8005a08 <HAL_RCC_OscConfig+0x4c8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0f0      	beq.n	800581e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d106      	bne.n	8005852 <HAL_RCC_OscConfig+0x312>
 8005844:	4b6f      	ldr	r3, [pc, #444]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	4a6e      	ldr	r2, [pc, #440]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	6213      	str	r3, [r2, #32]
 8005850:	e02d      	b.n	80058ae <HAL_RCC_OscConfig+0x36e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10c      	bne.n	8005874 <HAL_RCC_OscConfig+0x334>
 800585a:	4b6a      	ldr	r3, [pc, #424]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	4a69      	ldr	r2, [pc, #420]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	6213      	str	r3, [r2, #32]
 8005866:	4b67      	ldr	r3, [pc, #412]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	4a66      	ldr	r2, [pc, #408]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 800586c:	f023 0304 	bic.w	r3, r3, #4
 8005870:	6213      	str	r3, [r2, #32]
 8005872:	e01c      	b.n	80058ae <HAL_RCC_OscConfig+0x36e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	2b05      	cmp	r3, #5
 800587a:	d10c      	bne.n	8005896 <HAL_RCC_OscConfig+0x356>
 800587c:	4b61      	ldr	r3, [pc, #388]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	4a60      	ldr	r2, [pc, #384]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 8005882:	f043 0304 	orr.w	r3, r3, #4
 8005886:	6213      	str	r3, [r2, #32]
 8005888:	4b5e      	ldr	r3, [pc, #376]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	4a5d      	ldr	r2, [pc, #372]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 800588e:	f043 0301 	orr.w	r3, r3, #1
 8005892:	6213      	str	r3, [r2, #32]
 8005894:	e00b      	b.n	80058ae <HAL_RCC_OscConfig+0x36e>
 8005896:	4b5b      	ldr	r3, [pc, #364]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	4a5a      	ldr	r2, [pc, #360]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 800589c:	f023 0301 	bic.w	r3, r3, #1
 80058a0:	6213      	str	r3, [r2, #32]
 80058a2:	4b58      	ldr	r3, [pc, #352]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	4a57      	ldr	r2, [pc, #348]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 80058a8:	f023 0304 	bic.w	r3, r3, #4
 80058ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d015      	beq.n	80058e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058b6:	f7ff f8b3 	bl	8004a20 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058bc:	e00a      	b.n	80058d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058be:	f7ff f8af 	bl	8004a20 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e0b1      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d4:	4b4b      	ldr	r3, [pc, #300]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0ee      	beq.n	80058be <HAL_RCC_OscConfig+0x37e>
 80058e0:	e014      	b.n	800590c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058e2:	f7ff f89d 	bl	8004a20 <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e8:	e00a      	b.n	8005900 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ea:	f7ff f899 	bl	8004a20 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e09b      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005900:	4b40      	ldr	r3, [pc, #256]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1ee      	bne.n	80058ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800590c:	7dfb      	ldrb	r3, [r7, #23]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d105      	bne.n	800591e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005912:	4b3c      	ldr	r3, [pc, #240]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	4a3b      	ldr	r2, [pc, #236]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 8005918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800591c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 8087 	beq.w	8005a36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005928:	4b36      	ldr	r3, [pc, #216]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 030c 	and.w	r3, r3, #12
 8005930:	2b08      	cmp	r3, #8
 8005932:	d061      	beq.n	80059f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d146      	bne.n	80059ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800593c:	4b33      	ldr	r3, [pc, #204]	; (8005a0c <HAL_RCC_OscConfig+0x4cc>)
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005942:	f7ff f86d 	bl	8004a20 <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005948:	e008      	b.n	800595c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800594a:	f7ff f869 	bl	8004a20 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d901      	bls.n	800595c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e06d      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800595c:	4b29      	ldr	r3, [pc, #164]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1f0      	bne.n	800594a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005970:	d108      	bne.n	8005984 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005972:	4b24      	ldr	r3, [pc, #144]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	4921      	ldr	r1, [pc, #132]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 8005980:	4313      	orrs	r3, r2
 8005982:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005984:	4b1f      	ldr	r3, [pc, #124]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a19      	ldr	r1, [r3, #32]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	430b      	orrs	r3, r1
 8005996:	491b      	ldr	r1, [pc, #108]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 8005998:	4313      	orrs	r3, r2
 800599a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800599c:	4b1b      	ldr	r3, [pc, #108]	; (8005a0c <HAL_RCC_OscConfig+0x4cc>)
 800599e:	2201      	movs	r2, #1
 80059a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a2:	f7ff f83d 	bl	8004a20 <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059a8:	e008      	b.n	80059bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059aa:	f7ff f839 	bl	8004a20 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e03d      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059bc:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0f0      	beq.n	80059aa <HAL_RCC_OscConfig+0x46a>
 80059c8:	e035      	b.n	8005a36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ca:	4b10      	ldr	r3, [pc, #64]	; (8005a0c <HAL_RCC_OscConfig+0x4cc>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d0:	f7ff f826 	bl	8004a20 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d8:	f7ff f822 	bl	8004a20 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e026      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059ea:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <HAL_RCC_OscConfig+0x4c4>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f0      	bne.n	80059d8 <HAL_RCC_OscConfig+0x498>
 80059f6:	e01e      	b.n	8005a36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d107      	bne.n	8005a10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e019      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
 8005a04:	40021000 	.word	0x40021000
 8005a08:	40007000 	.word	0x40007000
 8005a0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <HAL_RCC_OscConfig+0x500>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d106      	bne.n	8005a32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d001      	beq.n	8005a36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40021000 	.word	0x40021000

08005a44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0d0      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a58:	4b6a      	ldr	r3, [pc, #424]	; (8005c04 <HAL_RCC_ClockConfig+0x1c0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d910      	bls.n	8005a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a66:	4b67      	ldr	r3, [pc, #412]	; (8005c04 <HAL_RCC_ClockConfig+0x1c0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 0207 	bic.w	r2, r3, #7
 8005a6e:	4965      	ldr	r1, [pc, #404]	; (8005c04 <HAL_RCC_ClockConfig+0x1c0>)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a76:	4b63      	ldr	r3, [pc, #396]	; (8005c04 <HAL_RCC_ClockConfig+0x1c0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0b8      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d020      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aa0:	4b59      	ldr	r3, [pc, #356]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4a58      	ldr	r2, [pc, #352]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005aaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0308 	and.w	r3, r3, #8
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ab8:	4b53      	ldr	r3, [pc, #332]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	4a52      	ldr	r2, [pc, #328]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005abe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005ac2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac4:	4b50      	ldr	r3, [pc, #320]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	494d      	ldr	r1, [pc, #308]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d040      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d107      	bne.n	8005afa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aea:	4b47      	ldr	r3, [pc, #284]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d115      	bne.n	8005b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e07f      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d107      	bne.n	8005b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b02:	4b41      	ldr	r3, [pc, #260]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d109      	bne.n	8005b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e073      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b12:	4b3d      	ldr	r3, [pc, #244]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e06b      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b22:	4b39      	ldr	r3, [pc, #228]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f023 0203 	bic.w	r2, r3, #3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	4936      	ldr	r1, [pc, #216]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b34:	f7fe ff74 	bl	8004a20 <HAL_GetTick>
 8005b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3a:	e00a      	b.n	8005b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b3c:	f7fe ff70 	bl	8004a20 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e053      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b52:	4b2d      	ldr	r3, [pc, #180]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f003 020c 	and.w	r2, r3, #12
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d1eb      	bne.n	8005b3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b64:	4b27      	ldr	r3, [pc, #156]	; (8005c04 <HAL_RCC_ClockConfig+0x1c0>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d210      	bcs.n	8005b94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b72:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <HAL_RCC_ClockConfig+0x1c0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f023 0207 	bic.w	r2, r3, #7
 8005b7a:	4922      	ldr	r1, [pc, #136]	; (8005c04 <HAL_RCC_ClockConfig+0x1c0>)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b82:	4b20      	ldr	r3, [pc, #128]	; (8005c04 <HAL_RCC_ClockConfig+0x1c0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d001      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e032      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d008      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ba0:	4b19      	ldr	r3, [pc, #100]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	4916      	ldr	r1, [pc, #88]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d009      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bbe:	4b12      	ldr	r3, [pc, #72]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	490e      	ldr	r1, [pc, #56]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bd2:	f000 f821 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <HAL_RCC_ClockConfig+0x1c4>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	091b      	lsrs	r3, r3, #4
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	490a      	ldr	r1, [pc, #40]	; (8005c0c <HAL_RCC_ClockConfig+0x1c8>)
 8005be4:	5ccb      	ldrb	r3, [r1, r3]
 8005be6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bea:	4a09      	ldr	r2, [pc, #36]	; (8005c10 <HAL_RCC_ClockConfig+0x1cc>)
 8005bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bee:	4b09      	ldr	r3, [pc, #36]	; (8005c14 <HAL_RCC_ClockConfig+0x1d0>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fed2 	bl	800499c <HAL_InitTick>

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	40022000 	.word	0x40022000
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	0800a9b4 	.word	0x0800a9b4
 8005c10:	20000060 	.word	0x20000060
 8005c14:	20000078 	.word	0x20000078

08005c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c18:	b490      	push	{r4, r7}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005c1e:	4b29      	ldr	r3, [pc, #164]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0xac>)
 8005c20:	1d3c      	adds	r4, r7, #4
 8005c22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005c28:	f240 2301 	movw	r3, #513	; 0x201
 8005c2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	2300      	movs	r3, #0
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	2300      	movs	r3, #0
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c42:	4b21      	ldr	r3, [pc, #132]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f003 030c 	and.w	r3, r3, #12
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d002      	beq.n	8005c58 <HAL_RCC_GetSysClockFreq+0x40>
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d003      	beq.n	8005c5e <HAL_RCC_GetSysClockFreq+0x46>
 8005c56:	e02b      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c58:	4b1c      	ldr	r3, [pc, #112]	; (8005ccc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c5a:	623b      	str	r3, [r7, #32]
      break;
 8005c5c:	e02b      	b.n	8005cb6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	0c9b      	lsrs	r3, r3, #18
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	3328      	adds	r3, #40	; 0x28
 8005c68:	443b      	add	r3, r7
 8005c6a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005c6e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d012      	beq.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c7a:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	0c5b      	lsrs	r3, r3, #17
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	3328      	adds	r3, #40	; 0x28
 8005c86:	443b      	add	r3, r7
 8005c88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005c8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	4a0e      	ldr	r2, [pc, #56]	; (8005ccc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c92:	fb03 f202 	mul.w	r2, r3, r2
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9e:	e004      	b.n	8005caa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	4a0b      	ldr	r2, [pc, #44]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ca4:	fb02 f303 	mul.w	r3, r2, r3
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	623b      	str	r3, [r7, #32]
      break;
 8005cae:	e002      	b.n	8005cb6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005cb0:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005cb2:	623b      	str	r3, [r7, #32]
      break;
 8005cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3728      	adds	r7, #40	; 0x28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bc90      	pop	{r4, r7}
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	0800a9a4 	.word	0x0800a9a4
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	007a1200 	.word	0x007a1200
 8005cd0:	003d0900 	.word	0x003d0900

08005cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cd8:	4b02      	ldr	r3, [pc, #8]	; (8005ce4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cda:	681b      	ldr	r3, [r3, #0]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bc80      	pop	{r7}
 8005ce2:	4770      	bx	lr
 8005ce4:	20000060 	.word	0x20000060

08005ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cec:	f7ff fff2 	bl	8005cd4 <HAL_RCC_GetHCLKFreq>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	0a1b      	lsrs	r3, r3, #8
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	4903      	ldr	r1, [pc, #12]	; (8005d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cfe:	5ccb      	ldrb	r3, [r1, r3]
 8005d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	0800a9c4 	.word	0x0800a9c4

08005d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d14:	f7ff ffde 	bl	8005cd4 <HAL_RCC_GetHCLKFreq>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	0adb      	lsrs	r3, r3, #11
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	4903      	ldr	r1, [pc, #12]	; (8005d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d26:	5ccb      	ldrb	r3, [r1, r3]
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40021000 	.word	0x40021000
 8005d34:	0800a9c4 	.word	0x0800a9c4

08005d38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d40:	4b0a      	ldr	r3, [pc, #40]	; (8005d6c <RCC_Delay+0x34>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a0a      	ldr	r2, [pc, #40]	; (8005d70 <RCC_Delay+0x38>)
 8005d46:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4a:	0a5b      	lsrs	r3, r3, #9
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	fb02 f303 	mul.w	r3, r2, r3
 8005d52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d54:	bf00      	nop
  }
  while (Delay --);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1e5a      	subs	r2, r3, #1
 8005d5a:	60fa      	str	r2, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1f9      	bne.n	8005d54 <RCC_Delay+0x1c>
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr
 8005d6c:	20000060 	.word	0x20000060
 8005d70:	10624dd3 	.word	0x10624dd3

08005d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e076      	b.n	8005e74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d108      	bne.n	8005da0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d96:	d009      	beq.n	8005dac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	61da      	str	r2, [r3, #28]
 8005d9e:	e005      	b.n	8005dac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fb ff14 	bl	8001bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e30:	ea42 0103 	orr.w	r1, r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	0c1a      	lsrs	r2, r3, #16
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f002 0204 	and.w	r2, r2, #4
 8005e52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	69da      	ldr	r2, [r3, #28]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HAL_SPI_Transmit+0x22>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e126      	b.n	80060ec <HAL_SPI_Transmit+0x270>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ea6:	f7fe fdbb 	bl	8004a20 <HAL_GetTick>
 8005eaa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005eac:	88fb      	ldrh	r3, [r7, #6]
 8005eae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d002      	beq.n	8005ec2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ec0:	e10b      	b.n	80060da <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_SPI_Transmit+0x52>
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d102      	bne.n	8005ed4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ed2:	e102      	b.n	80060da <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	88fa      	ldrh	r2, [r7, #6]
 8005eec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f1a:	d10f      	bne.n	8005f3c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f46:	2b40      	cmp	r3, #64	; 0x40
 8005f48:	d007      	beq.n	8005f5a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f62:	d14b      	bne.n	8005ffc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <HAL_SPI_Transmit+0xf6>
 8005f6c:	8afb      	ldrh	r3, [r7, #22]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d13e      	bne.n	8005ff0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	881a      	ldrh	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	1c9a      	adds	r2, r3, #2
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f96:	e02b      	b.n	8005ff0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d112      	bne.n	8005fcc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	881a      	ldrh	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	1c9a      	adds	r2, r3, #2
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fca:	e011      	b.n	8005ff0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fcc:	f7fe fd28 	bl	8004a20 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d803      	bhi.n	8005fe4 <HAL_SPI_Transmit+0x168>
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe2:	d102      	bne.n	8005fea <HAL_SPI_Transmit+0x16e>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fee:	e074      	b.n	80060da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1ce      	bne.n	8005f98 <HAL_SPI_Transmit+0x11c>
 8005ffa:	e04c      	b.n	8006096 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_SPI_Transmit+0x18e>
 8006004:	8afb      	ldrh	r3, [r7, #22]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d140      	bne.n	800608c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	330c      	adds	r3, #12
 8006014:	7812      	ldrb	r2, [r2, #0]
 8006016:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006030:	e02c      	b.n	800608c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b02      	cmp	r3, #2
 800603e:	d113      	bne.n	8006068 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	7812      	ldrb	r2, [r2, #0]
 800604c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	86da      	strh	r2, [r3, #54]	; 0x36
 8006066:	e011      	b.n	800608c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006068:	f7fe fcda 	bl	8004a20 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d803      	bhi.n	8006080 <HAL_SPI_Transmit+0x204>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	d102      	bne.n	8006086 <HAL_SPI_Transmit+0x20a>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d102      	bne.n	800608c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	77fb      	strb	r3, [r7, #31]
          goto error;
 800608a:	e026      	b.n	80060da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1cd      	bne.n	8006032 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 fbb8 	bl	8006810 <SPI_EndRxTxTransaction>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060b4:	2300      	movs	r3, #0
 80060b6:	613b      	str	r3, [r7, #16]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	77fb      	strb	r3, [r7, #31]
 80060d6:	e000      	b.n	80060da <HAL_SPI_Transmit+0x25e>
  }

error:
 80060d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3720      	adds	r7, #32
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006110:	d112      	bne.n	8006138 <HAL_SPI_Receive+0x44>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10e      	bne.n	8006138 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2204      	movs	r2, #4
 800611e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006122:	88fa      	ldrh	r2, [r7, #6]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	4613      	mov	r3, r2
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 f8f1 	bl	8006316 <HAL_SPI_TransmitReceive>
 8006134:	4603      	mov	r3, r0
 8006136:	e0ea      	b.n	800630e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_SPI_Receive+0x52>
 8006142:	2302      	movs	r3, #2
 8006144:	e0e3      	b.n	800630e <HAL_SPI_Receive+0x21a>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800614e:	f7fe fc67 	bl	8004a20 <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b01      	cmp	r3, #1
 800615e:	d002      	beq.n	8006166 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006160:	2302      	movs	r3, #2
 8006162:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006164:	e0ca      	b.n	80062fc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_SPI_Receive+0x7e>
 800616c:	88fb      	ldrh	r3, [r7, #6]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d102      	bne.n	8006178 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006176:	e0c1      	b.n	80062fc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2204      	movs	r2, #4
 800617c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	88fa      	ldrh	r2, [r7, #6]
 8006190:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	88fa      	ldrh	r2, [r7, #6]
 8006196:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061be:	d10f      	bne.n	80061e0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061de:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	d007      	beq.n	80061fe <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d162      	bne.n	80062cc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006206:	e02e      	b.n	8006266 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b01      	cmp	r3, #1
 8006214:	d115      	bne.n	8006242 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f103 020c 	add.w	r2, r3, #12
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	7812      	ldrb	r2, [r2, #0]
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006240:	e011      	b.n	8006266 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006242:	f7fe fbed 	bl	8004a20 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d803      	bhi.n	800625a <HAL_SPI_Receive+0x166>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d102      	bne.n	8006260 <HAL_SPI_Receive+0x16c>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d102      	bne.n	8006266 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006264:	e04a      	b.n	80062fc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1cb      	bne.n	8006208 <HAL_SPI_Receive+0x114>
 8006270:	e031      	b.n	80062d6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b01      	cmp	r3, #1
 800627e:	d113      	bne.n	80062a8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	b292      	uxth	r2, r2
 800628c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006292:	1c9a      	adds	r2, r3, #2
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062a6:	e011      	b.n	80062cc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062a8:	f7fe fbba 	bl	8004a20 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d803      	bhi.n	80062c0 <HAL_SPI_Receive+0x1cc>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d102      	bne.n	80062c6 <HAL_SPI_Receive+0x1d2>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80062ca:	e017      	b.n	80062fc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1cd      	bne.n	8006272 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fa46 	bl	800676c <SPI_EndRxTransaction>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2220      	movs	r2, #32
 80062ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	75fb      	strb	r3, [r7, #23]
 80062f8:	e000      	b.n	80062fc <HAL_SPI_Receive+0x208>
  }

error :
 80062fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800630c:	7dfb      	ldrb	r3, [r7, #23]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b08c      	sub	sp, #48	; 0x30
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
 8006322:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006324:	2301      	movs	r3, #1
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_SPI_TransmitReceive+0x26>
 8006338:	2302      	movs	r3, #2
 800633a:	e18a      	b.n	8006652 <HAL_SPI_TransmitReceive+0x33c>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006344:	f7fe fb6c 	bl	8004a20 <HAL_GetTick>
 8006348:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800635a:	887b      	ldrh	r3, [r7, #2]
 800635c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800635e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006362:	2b01      	cmp	r3, #1
 8006364:	d00f      	beq.n	8006386 <HAL_SPI_TransmitReceive+0x70>
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800636c:	d107      	bne.n	800637e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <HAL_SPI_TransmitReceive+0x68>
 8006376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800637a:	2b04      	cmp	r3, #4
 800637c:	d003      	beq.n	8006386 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800637e:	2302      	movs	r3, #2
 8006380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006384:	e15b      	b.n	800663e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_SPI_TransmitReceive+0x82>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <HAL_SPI_TransmitReceive+0x82>
 8006392:	887b      	ldrh	r3, [r7, #2]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d103      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800639e:	e14e      	b.n	800663e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d003      	beq.n	80063b4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2205      	movs	r2, #5
 80063b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	887a      	ldrh	r2, [r7, #2]
 80063c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	887a      	ldrh	r2, [r7, #2]
 80063ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	887a      	ldrh	r2, [r7, #2]
 80063d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	887a      	ldrh	r2, [r7, #2]
 80063dc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f4:	2b40      	cmp	r3, #64	; 0x40
 80063f6:	d007      	beq.n	8006408 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006406:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006410:	d178      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <HAL_SPI_TransmitReceive+0x10a>
 800641a:	8b7b      	ldrh	r3, [r7, #26]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d166      	bne.n	80064ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	881a      	ldrh	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	1c9a      	adds	r2, r3, #2
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006444:	e053      	b.n	80064ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b02      	cmp	r3, #2
 8006452:	d11b      	bne.n	800648c <HAL_SPI_TransmitReceive+0x176>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d016      	beq.n	800648c <HAL_SPI_TransmitReceive+0x176>
 800645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006460:	2b01      	cmp	r3, #1
 8006462:	d113      	bne.n	800648c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	881a      	ldrh	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	1c9a      	adds	r2, r3, #2
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b01      	cmp	r3, #1
 8006498:	d119      	bne.n	80064ce <HAL_SPI_TransmitReceive+0x1b8>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800649e:	b29b      	uxth	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d014      	beq.n	80064ce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ae:	b292      	uxth	r2, r2
 80064b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b6:	1c9a      	adds	r2, r3, #2
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064ca:	2301      	movs	r3, #1
 80064cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064ce:	f7fe faa7 	bl	8004a20 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064da:	429a      	cmp	r2, r3
 80064dc:	d807      	bhi.n	80064ee <HAL_SPI_TransmitReceive+0x1d8>
 80064de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e4:	d003      	beq.n	80064ee <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064ec:	e0a7      	b.n	800663e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1a6      	bne.n	8006446 <HAL_SPI_TransmitReceive+0x130>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1a1      	bne.n	8006446 <HAL_SPI_TransmitReceive+0x130>
 8006502:	e07c      	b.n	80065fe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <HAL_SPI_TransmitReceive+0x1fc>
 800650c:	8b7b      	ldrh	r3, [r7, #26]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d16b      	bne.n	80065ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	330c      	adds	r3, #12
 800651c:	7812      	ldrb	r2, [r2, #0]
 800651e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006538:	e057      	b.n	80065ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b02      	cmp	r3, #2
 8006546:	d11c      	bne.n	8006582 <HAL_SPI_TransmitReceive+0x26c>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800654c:	b29b      	uxth	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d017      	beq.n	8006582 <HAL_SPI_TransmitReceive+0x26c>
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006554:	2b01      	cmp	r3, #1
 8006556:	d114      	bne.n	8006582 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	330c      	adds	r3, #12
 8006562:	7812      	ldrb	r2, [r2, #0]
 8006564:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b01      	cmp	r3, #1
 800658e:	d119      	bne.n	80065c4 <HAL_SPI_TransmitReceive+0x2ae>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d014      	beq.n	80065c4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065c0:	2301      	movs	r3, #1
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065c4:	f7fe fa2c 	bl	8004a20 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d803      	bhi.n	80065dc <HAL_SPI_TransmitReceive+0x2c6>
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065da:	d102      	bne.n	80065e2 <HAL_SPI_TransmitReceive+0x2cc>
 80065dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d103      	bne.n	80065ea <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80065e8:	e029      	b.n	800663e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1a2      	bne.n	800653a <HAL_SPI_TransmitReceive+0x224>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d19d      	bne.n	800653a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006600:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f904 	bl	8006810 <SPI_EndRxTxTransaction>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d006      	beq.n	800661c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800661a:	e010      	b.n	800663e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10b      	bne.n	800663c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006624:	2300      	movs	r3, #0
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	e000      	b.n	800663e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800663c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800664e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006652:	4618      	mov	r0, r3
 8006654:	3730      	adds	r7, #48	; 0x30
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	4613      	mov	r3, r2
 800666a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800666c:	f7fe f9d8 	bl	8004a20 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	4413      	add	r3, r2
 800667a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800667c:	f7fe f9d0 	bl	8004a20 <HAL_GetTick>
 8006680:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006682:	4b39      	ldr	r3, [pc, #228]	; (8006768 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	015b      	lsls	r3, r3, #5
 8006688:	0d1b      	lsrs	r3, r3, #20
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	fb02 f303 	mul.w	r3, r2, r3
 8006690:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006692:	e054      	b.n	800673e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669a:	d050      	beq.n	800673e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800669c:	f7fe f9c0 	bl	8004a20 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	69fa      	ldr	r2, [r7, #28]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d902      	bls.n	80066b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d13d      	bne.n	800672e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ca:	d111      	bne.n	80066f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d4:	d004      	beq.n	80066e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066de:	d107      	bne.n	80066f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f8:	d10f      	bne.n	800671a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006718:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e017      	b.n	800675e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	3b01      	subs	r3, #1
 800673c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	4013      	ands	r3, r2
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	429a      	cmp	r2, r3
 800674c:	bf0c      	ite	eq
 800674e:	2301      	moveq	r3, #1
 8006750:	2300      	movne	r3, #0
 8006752:	b2db      	uxtb	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	79fb      	ldrb	r3, [r7, #7]
 8006758:	429a      	cmp	r2, r3
 800675a:	d19b      	bne.n	8006694 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3720      	adds	r7, #32
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000060 	.word	0x20000060

0800676c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af02      	add	r7, sp, #8
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006780:	d111      	bne.n	80067a6 <SPI_EndRxTransaction+0x3a>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800678a:	d004      	beq.n	8006796 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006794:	d107      	bne.n	80067a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ae:	d117      	bne.n	80067e0 <SPI_EndRxTransaction+0x74>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b8:	d112      	bne.n	80067e0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2200      	movs	r2, #0
 80067c2:	2101      	movs	r1, #1
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7ff ff49 	bl	800665c <SPI_WaitFlagStateUntilTimeout>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d01a      	beq.n	8006806 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d4:	f043 0220 	orr.w	r2, r3, #32
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e013      	b.n	8006808 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2200      	movs	r2, #0
 80067e8:	2180      	movs	r1, #128	; 0x80
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f7ff ff36 	bl	800665c <SPI_WaitFlagStateUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d007      	beq.n	8006806 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fa:	f043 0220 	orr.w	r2, r3, #32
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e000      	b.n	8006808 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2200      	movs	r2, #0
 8006824:	2180      	movs	r1, #128	; 0x80
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f7ff ff18 	bl	800665c <SPI_WaitFlagStateUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d007      	beq.n	8006842 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006836:	f043 0220 	orr.w	r2, r3, #32
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e000      	b.n	8006844 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e041      	b.n	80068e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7fb fbe8 	bl	8002048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3304      	adds	r3, #4
 8006888:	4619      	mov	r1, r3
 800688a:	4610      	mov	r0, r2
 800688c:	f000 fa80 	bl	8006d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d001      	beq.n	8006904 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e03c      	b.n	800697e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a1d      	ldr	r2, [pc, #116]	; (8006988 <HAL_TIM_Base_Start+0x9c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d018      	beq.n	8006948 <HAL_TIM_Base_Start+0x5c>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a1c      	ldr	r2, [pc, #112]	; (800698c <HAL_TIM_Base_Start+0xa0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d013      	beq.n	8006948 <HAL_TIM_Base_Start+0x5c>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006928:	d00e      	beq.n	8006948 <HAL_TIM_Base_Start+0x5c>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a18      	ldr	r2, [pc, #96]	; (8006990 <HAL_TIM_Base_Start+0xa4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d009      	beq.n	8006948 <HAL_TIM_Base_Start+0x5c>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a16      	ldr	r2, [pc, #88]	; (8006994 <HAL_TIM_Base_Start+0xa8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d004      	beq.n	8006948 <HAL_TIM_Base_Start+0x5c>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a15      	ldr	r2, [pc, #84]	; (8006998 <HAL_TIM_Base_Start+0xac>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d111      	bne.n	800696c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b06      	cmp	r3, #6
 8006958:	d010      	beq.n	800697c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0201 	orr.w	r2, r2, #1
 8006968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696a:	e007      	b.n	800697c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0201 	orr.w	r2, r2, #1
 800697a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr
 8006988:	40012c00 	.word	0x40012c00
 800698c:	40013400 	.word	0x40013400
 8006990:	40000400 	.word	0x40000400
 8006994:	40000800 	.word	0x40000800
 8006998:	40000c00 	.word	0x40000c00

0800699c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d122      	bne.n	80069f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d11b      	bne.n	80069f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f06f 0202 	mvn.w	r2, #2
 80069c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f9ba 	bl	8006d58 <HAL_TIM_IC_CaptureCallback>
 80069e4:	e005      	b.n	80069f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f9ad 	bl	8006d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f9bc 	bl	8006d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d122      	bne.n	8006a4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d11b      	bne.n	8006a4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f06f 0204 	mvn.w	r2, #4
 8006a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2202      	movs	r2, #2
 8006a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f990 	bl	8006d58 <HAL_TIM_IC_CaptureCallback>
 8006a38:	e005      	b.n	8006a46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f983 	bl	8006d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f992 	bl	8006d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	d122      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d11b      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0208 	mvn.w	r2, #8
 8006a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2204      	movs	r2, #4
 8006a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f966 	bl	8006d58 <HAL_TIM_IC_CaptureCallback>
 8006a8c:	e005      	b.n	8006a9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f959 	bl	8006d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f968 	bl	8006d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0310 	and.w	r3, r3, #16
 8006aaa:	2b10      	cmp	r3, #16
 8006aac:	d122      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f003 0310 	and.w	r3, r3, #16
 8006ab8:	2b10      	cmp	r3, #16
 8006aba:	d11b      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f06f 0210 	mvn.w	r2, #16
 8006ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2208      	movs	r2, #8
 8006aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f93c 	bl	8006d58 <HAL_TIM_IC_CaptureCallback>
 8006ae0:	e005      	b.n	8006aee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f92f 	bl	8006d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f93e 	bl	8006d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d10e      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d107      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0201 	mvn.w	r2, #1
 8006b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f90a 	bl	8006d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2a:	2b80      	cmp	r3, #128	; 0x80
 8006b2c:	d10e      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b38:	2b80      	cmp	r3, #128	; 0x80
 8006b3a:	d107      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 faa7 	bl	800709a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b56:	2b40      	cmp	r3, #64	; 0x40
 8006b58:	d10e      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b64:	2b40      	cmp	r3, #64	; 0x40
 8006b66:	d107      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f902 	bl	8006d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d10e      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d107      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0220 	mvn.w	r2, #32
 8006b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa72 	bl	8007088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d101      	bne.n	8006bc4 <HAL_TIM_ConfigClockSource+0x18>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e0b3      	b.n	8006d2c <HAL_TIM_ConfigClockSource+0x180>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006be2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bfc:	d03e      	beq.n	8006c7c <HAL_TIM_ConfigClockSource+0xd0>
 8006bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c02:	f200 8087 	bhi.w	8006d14 <HAL_TIM_ConfigClockSource+0x168>
 8006c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0a:	f000 8085 	beq.w	8006d18 <HAL_TIM_ConfigClockSource+0x16c>
 8006c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c12:	d87f      	bhi.n	8006d14 <HAL_TIM_ConfigClockSource+0x168>
 8006c14:	2b70      	cmp	r3, #112	; 0x70
 8006c16:	d01a      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0xa2>
 8006c18:	2b70      	cmp	r3, #112	; 0x70
 8006c1a:	d87b      	bhi.n	8006d14 <HAL_TIM_ConfigClockSource+0x168>
 8006c1c:	2b60      	cmp	r3, #96	; 0x60
 8006c1e:	d050      	beq.n	8006cc2 <HAL_TIM_ConfigClockSource+0x116>
 8006c20:	2b60      	cmp	r3, #96	; 0x60
 8006c22:	d877      	bhi.n	8006d14 <HAL_TIM_ConfigClockSource+0x168>
 8006c24:	2b50      	cmp	r3, #80	; 0x50
 8006c26:	d03c      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0xf6>
 8006c28:	2b50      	cmp	r3, #80	; 0x50
 8006c2a:	d873      	bhi.n	8006d14 <HAL_TIM_ConfigClockSource+0x168>
 8006c2c:	2b40      	cmp	r3, #64	; 0x40
 8006c2e:	d058      	beq.n	8006ce2 <HAL_TIM_ConfigClockSource+0x136>
 8006c30:	2b40      	cmp	r3, #64	; 0x40
 8006c32:	d86f      	bhi.n	8006d14 <HAL_TIM_ConfigClockSource+0x168>
 8006c34:	2b30      	cmp	r3, #48	; 0x30
 8006c36:	d064      	beq.n	8006d02 <HAL_TIM_ConfigClockSource+0x156>
 8006c38:	2b30      	cmp	r3, #48	; 0x30
 8006c3a:	d86b      	bhi.n	8006d14 <HAL_TIM_ConfigClockSource+0x168>
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	d060      	beq.n	8006d02 <HAL_TIM_ConfigClockSource+0x156>
 8006c40:	2b20      	cmp	r3, #32
 8006c42:	d867      	bhi.n	8006d14 <HAL_TIM_ConfigClockSource+0x168>
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d05c      	beq.n	8006d02 <HAL_TIM_ConfigClockSource+0x156>
 8006c48:	2b10      	cmp	r3, #16
 8006c4a:	d05a      	beq.n	8006d02 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006c4c:	e062      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6818      	ldr	r0, [r3, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	6899      	ldr	r1, [r3, #8]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f000 f988 	bl	8006f72 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	609a      	str	r2, [r3, #8]
      break;
 8006c7a:	e04e      	b.n	8006d1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	6899      	ldr	r1, [r3, #8]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f000 f971 	bl	8006f72 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689a      	ldr	r2, [r3, #8]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c9e:	609a      	str	r2, [r3, #8]
      break;
 8006ca0:	e03b      	b.n	8006d1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6818      	ldr	r0, [r3, #0]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	6859      	ldr	r1, [r3, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f000 f8e8 	bl	8006e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2150      	movs	r1, #80	; 0x50
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 f93f 	bl	8006f3e <TIM_ITRx_SetConfig>
      break;
 8006cc0:	e02b      	b.n	8006d1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6818      	ldr	r0, [r3, #0]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	6859      	ldr	r1, [r3, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f000 f906 	bl	8006ee0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2160      	movs	r1, #96	; 0x60
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 f92f 	bl	8006f3e <TIM_ITRx_SetConfig>
      break;
 8006ce0:	e01b      	b.n	8006d1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	6859      	ldr	r1, [r3, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f000 f8c8 	bl	8006e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2140      	movs	r1, #64	; 0x40
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 f91f 	bl	8006f3e <TIM_ITRx_SetConfig>
      break;
 8006d00:	e00b      	b.n	8006d1a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	f000 f916 	bl	8006f3e <TIM_ITRx_SetConfig>
        break;
 8006d12:	e002      	b.n	8006d1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006d14:	bf00      	nop
 8006d16:	e000      	b.n	8006d1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006d18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr

08006d46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr

08006d6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d72:	bf00      	nop
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bc80      	pop	{r7}
 8006d7a:	4770      	bx	lr

08006d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr
	...

08006d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a33      	ldr	r2, [pc, #204]	; (8006e70 <TIM_Base_SetConfig+0xe0>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d013      	beq.n	8006dd0 <TIM_Base_SetConfig+0x40>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a32      	ldr	r2, [pc, #200]	; (8006e74 <TIM_Base_SetConfig+0xe4>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d00f      	beq.n	8006dd0 <TIM_Base_SetConfig+0x40>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db6:	d00b      	beq.n	8006dd0 <TIM_Base_SetConfig+0x40>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a2f      	ldr	r2, [pc, #188]	; (8006e78 <TIM_Base_SetConfig+0xe8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d007      	beq.n	8006dd0 <TIM_Base_SetConfig+0x40>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a2e      	ldr	r2, [pc, #184]	; (8006e7c <TIM_Base_SetConfig+0xec>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d003      	beq.n	8006dd0 <TIM_Base_SetConfig+0x40>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a2d      	ldr	r2, [pc, #180]	; (8006e80 <TIM_Base_SetConfig+0xf0>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d108      	bne.n	8006de2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a22      	ldr	r2, [pc, #136]	; (8006e70 <TIM_Base_SetConfig+0xe0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d013      	beq.n	8006e12 <TIM_Base_SetConfig+0x82>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a21      	ldr	r2, [pc, #132]	; (8006e74 <TIM_Base_SetConfig+0xe4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00f      	beq.n	8006e12 <TIM_Base_SetConfig+0x82>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df8:	d00b      	beq.n	8006e12 <TIM_Base_SetConfig+0x82>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a1e      	ldr	r2, [pc, #120]	; (8006e78 <TIM_Base_SetConfig+0xe8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d007      	beq.n	8006e12 <TIM_Base_SetConfig+0x82>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a1d      	ldr	r2, [pc, #116]	; (8006e7c <TIM_Base_SetConfig+0xec>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d003      	beq.n	8006e12 <TIM_Base_SetConfig+0x82>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a1c      	ldr	r2, [pc, #112]	; (8006e80 <TIM_Base_SetConfig+0xf0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d108      	bne.n	8006e24 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a09      	ldr	r2, [pc, #36]	; (8006e70 <TIM_Base_SetConfig+0xe0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_Base_SetConfig+0xc8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a08      	ldr	r2, [pc, #32]	; (8006e74 <TIM_Base_SetConfig+0xe4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d103      	bne.n	8006e60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	691a      	ldr	r2, [r3, #16]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	615a      	str	r2, [r3, #20]
}
 8006e66:	bf00      	nop
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bc80      	pop	{r7}
 8006e6e:	4770      	bx	lr
 8006e70:	40012c00 	.word	0x40012c00
 8006e74:	40013400 	.word	0x40013400
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40000c00 	.word	0x40000c00

08006e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f023 0201 	bic.w	r2, r3, #1
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f023 030a 	bic.w	r3, r3, #10
 8006ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr

08006ee0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	f023 0210 	bic.w	r2, r3, #16
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	031b      	lsls	r3, r3, #12
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	011b      	lsls	r3, r3, #4
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	621a      	str	r2, [r3, #32]
}
 8006f34:	bf00      	nop
 8006f36:	371c      	adds	r7, #28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bc80      	pop	{r7}
 8006f3c:	4770      	bx	lr

08006f3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b085      	sub	sp, #20
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f043 0307 	orr.w	r3, r3, #7
 8006f60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	609a      	str	r2, [r3, #8]
}
 8006f68:	bf00      	nop
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr

08006f72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b087      	sub	sp, #28
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	021a      	lsls	r2, r3, #8
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	431a      	orrs	r2, r3
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	609a      	str	r2, [r3, #8]
}
 8006fa6:	bf00      	nop
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bc80      	pop	{r7}
 8006fae:	4770      	bx	lr

08006fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e050      	b.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1b      	ldr	r2, [pc, #108]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d018      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a19      	ldr	r2, [pc, #100]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701e:	d00e      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a15      	ldr	r2, [pc, #84]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a14      	ldr	r2, [pc, #80]	; (8007080 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a12      	ldr	r2, [pc, #72]	; (8007084 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d10c      	bne.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	4313      	orrs	r3, r2
 800704e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr
 8007074:	40012c00 	.word	0x40012c00
 8007078:	40013400 	.word	0x40013400
 800707c:	40000400 	.word	0x40000400
 8007080:	40000800 	.word	0x40000800
 8007084:	40000c00 	.word	0x40000c00

08007088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	bc80      	pop	{r7}
 8007098:	4770      	bx	lr

0800709a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr

080070ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e03f      	b.n	800713e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7fb f844 	bl	8002160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2224      	movs	r2, #36	; 0x24
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fc25 	bl	8007940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	691a      	ldr	r2, [r3, #16]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	695a      	ldr	r2, [r3, #20]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2220      	movs	r2, #32
 8007138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b08a      	sub	sp, #40	; 0x28
 800714a:	af02      	add	r7, sp, #8
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	603b      	str	r3, [r7, #0]
 8007152:	4613      	mov	r3, r2
 8007154:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b20      	cmp	r3, #32
 8007164:	d17c      	bne.n	8007260 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <HAL_UART_Transmit+0x2c>
 800716c:	88fb      	ldrh	r3, [r7, #6]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e075      	b.n	8007262 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <HAL_UART_Transmit+0x3e>
 8007180:	2302      	movs	r3, #2
 8007182:	e06e      	b.n	8007262 <HAL_UART_Transmit+0x11c>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2221      	movs	r2, #33	; 0x21
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800719a:	f7fd fc41 	bl	8004a20 <HAL_GetTick>
 800719e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	88fa      	ldrh	r2, [r7, #6]
 80071a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	88fa      	ldrh	r2, [r7, #6]
 80071aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b4:	d108      	bne.n	80071c8 <HAL_UART_Transmit+0x82>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d104      	bne.n	80071c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	e003      	b.n	80071d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071d8:	e02a      	b.n	8007230 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2200      	movs	r2, #0
 80071e2:	2180      	movs	r1, #128	; 0x80
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 fa11 	bl	800760c <UART_WaitOnFlagUntilTimeout>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e036      	b.n	8007262 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10b      	bne.n	8007212 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007208:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	3302      	adds	r3, #2
 800720e:	61bb      	str	r3, [r7, #24]
 8007210:	e007      	b.n	8007222 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	781a      	ldrb	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	3301      	adds	r3, #1
 8007220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007226:	b29b      	uxth	r3, r3
 8007228:	3b01      	subs	r3, #1
 800722a:	b29a      	uxth	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1cf      	bne.n	80071da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2200      	movs	r2, #0
 8007242:	2140      	movs	r1, #64	; 0x40
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 f9e1 	bl	800760c <UART_WaitOnFlagUntilTimeout>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e006      	b.n	8007262 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2220      	movs	r2, #32
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	e000      	b.n	8007262 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007260:	2302      	movs	r3, #2
  }
}
 8007262:	4618      	mov	r0, r3
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08a      	sub	sp, #40	; 0x28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800728c:	2300      	movs	r3, #0
 800728e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007290:	2300      	movs	r3, #0
 8007292:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	f003 030f 	and.w	r3, r3, #15
 800729a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10d      	bne.n	80072be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d008      	beq.n	80072be <HAL_UART_IRQHandler+0x52>
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fa99 	bl	80077ee <UART_Receive_IT>
      return;
 80072bc:	e17b      	b.n	80075b6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 80b1 	beq.w	8007428 <HAL_UART_IRQHandler+0x1bc>
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d105      	bne.n	80072dc <HAL_UART_IRQHandler+0x70>
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 80a6 	beq.w	8007428 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00a      	beq.n	80072fc <HAL_UART_IRQHandler+0x90>
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f4:	f043 0201 	orr.w	r2, r3, #1
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	f003 0304 	and.w	r3, r3, #4
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00a      	beq.n	800731c <HAL_UART_IRQHandler+0xb0>
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007314:	f043 0202 	orr.w	r2, r3, #2
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <HAL_UART_IRQHandler+0xd0>
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	f043 0204 	orr.w	r2, r3, #4
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	f003 0308 	and.w	r3, r3, #8
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00f      	beq.n	8007366 <HAL_UART_IRQHandler+0xfa>
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	f003 0320 	and.w	r3, r3, #32
 800734c:	2b00      	cmp	r3, #0
 800734e:	d104      	bne.n	800735a <HAL_UART_IRQHandler+0xee>
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735e:	f043 0208 	orr.w	r2, r3, #8
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 811e 	beq.w	80075ac <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d007      	beq.n	800738a <HAL_UART_IRQHandler+0x11e>
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	f003 0320 	and.w	r3, r3, #32
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fa32 	bl	80077ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	bf14      	ite	ne
 8007398:	2301      	movne	r3, #1
 800739a:	2300      	moveq	r3, #0
 800739c:	b2db      	uxtb	r3, r3
 800739e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d102      	bne.n	80073b2 <HAL_UART_IRQHandler+0x146>
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d031      	beq.n	8007416 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f974 	bl	80076a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d023      	beq.n	800740e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	695a      	ldr	r2, [r3, #20]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d013      	beq.n	8007406 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	4a76      	ldr	r2, [pc, #472]	; (80075bc <HAL_UART_IRQHandler+0x350>)
 80073e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fd fc8e 	bl	8004d0c <HAL_DMA_Abort_IT>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d016      	beq.n	8007424 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007400:	4610      	mov	r0, r2
 8007402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007404:	e00e      	b.n	8007424 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f8ec 	bl	80075e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800740c:	e00a      	b.n	8007424 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f8e8 	bl	80075e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007414:	e006      	b.n	8007424 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f8e4 	bl	80075e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007422:	e0c3      	b.n	80075ac <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007424:	bf00      	nop
    return;
 8007426:	e0c1      	b.n	80075ac <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742c:	2b01      	cmp	r3, #1
 800742e:	f040 80a1 	bne.w	8007574 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	f003 0310 	and.w	r3, r3, #16
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 809b 	beq.w	8007574 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	f003 0310 	and.w	r3, r3, #16
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 8095 	beq.w	8007574 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800744a:	2300      	movs	r3, #0
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	60fb      	str	r3, [r7, #12]
 800745e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d04e      	beq.n	800750c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007478:	8a3b      	ldrh	r3, [r7, #16]
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 8098 	beq.w	80075b0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007484:	8a3a      	ldrh	r2, [r7, #16]
 8007486:	429a      	cmp	r2, r3
 8007488:	f080 8092 	bcs.w	80075b0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	8a3a      	ldrh	r2, [r7, #16]
 8007490:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	2b20      	cmp	r3, #32
 800749a:	d02b      	beq.n	80074f4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074aa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	695a      	ldr	r2, [r3, #20]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0201 	bic.w	r2, r2, #1
 80074ba:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695a      	ldr	r2, [r3, #20]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0210 	bic.w	r2, r2, #16
 80074e8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fd fbd1 	bl	8004c96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	b29b      	uxth	r3, r3
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f876 	bl	80075f6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800750a:	e051      	b.n	80075b0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007514:	b29b      	uxth	r3, r3
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800751e:	b29b      	uxth	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d047      	beq.n	80075b4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007524:	8a7b      	ldrh	r3, [r7, #18]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d044      	beq.n	80075b4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007538:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	695a      	ldr	r2, [r3, #20]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 0201 	bic.w	r2, r2, #1
 8007548:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2220      	movs	r2, #32
 800754e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 0210 	bic.w	r2, r2, #16
 8007566:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007568:	8a7b      	ldrh	r3, [r7, #18]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f842 	bl	80075f6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007572:	e01f      	b.n	80075b4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800757a:	2b00      	cmp	r3, #0
 800757c:	d008      	beq.n	8007590 <HAL_UART_IRQHandler+0x324>
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f8c9 	bl	8007720 <UART_Transmit_IT>
    return;
 800758e:	e012      	b.n	80075b6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00d      	beq.n	80075b6 <HAL_UART_IRQHandler+0x34a>
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d008      	beq.n	80075b6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f90a 	bl	80077be <UART_EndTransmit_IT>
    return;
 80075aa:	e004      	b.n	80075b6 <HAL_UART_IRQHandler+0x34a>
    return;
 80075ac:	bf00      	nop
 80075ae:	e002      	b.n	80075b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80075b0:	bf00      	nop
 80075b2:	e000      	b.n	80075b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80075b4:	bf00      	nop
  }
}
 80075b6:	3728      	adds	r7, #40	; 0x28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	080076f9 	.word	0x080076f9

080075c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr

080075d2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr

080075e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bc80      	pop	{r7}
 80075f4:	4770      	bx	lr

080075f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	460b      	mov	r3, r1
 8007600:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr

0800760c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800761c:	e02c      	b.n	8007678 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d028      	beq.n	8007678 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <UART_WaitOnFlagUntilTimeout+0x30>
 800762c:	f7fd f9f8 	bl	8004a20 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	429a      	cmp	r2, r3
 800763a:	d21d      	bcs.n	8007678 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800764a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	695a      	ldr	r2, [r3, #20]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0201 	bic.w	r2, r2, #1
 800765a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2220      	movs	r2, #32
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2220      	movs	r2, #32
 8007668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e00f      	b.n	8007698 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	4013      	ands	r3, r2
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	429a      	cmp	r2, r3
 8007686:	bf0c      	ite	eq
 8007688:	2301      	moveq	r3, #1
 800768a:	2300      	movne	r3, #0
 800768c:	b2db      	uxtb	r3, r3
 800768e:	461a      	mov	r2, r3
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	429a      	cmp	r2, r3
 8007694:	d0c3      	beq.n	800761e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695a      	ldr	r2, [r3, #20]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0201 	bic.w	r2, r2, #1
 80076c6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d107      	bne.n	80076e0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0210 	bic.w	r2, r2, #16
 80076de:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bc80      	pop	{r7}
 80076f6:	4770      	bx	lr

080076f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007704:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f7ff ff66 	bl	80075e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007718:	bf00      	nop
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b21      	cmp	r3, #33	; 0x21
 8007732:	d13e      	bne.n	80077b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800773c:	d114      	bne.n	8007768 <UART_Transmit_IT+0x48>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d110      	bne.n	8007768 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	461a      	mov	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800775a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	1c9a      	adds	r2, r3, #2
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	621a      	str	r2, [r3, #32]
 8007766:	e008      	b.n	800777a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	1c59      	adds	r1, r3, #1
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6211      	str	r1, [r2, #32]
 8007772:	781a      	ldrb	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800777e:	b29b      	uxth	r3, r3
 8007780:	3b01      	subs	r3, #1
 8007782:	b29b      	uxth	r3, r3
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	4619      	mov	r1, r3
 8007788:	84d1      	strh	r1, [r2, #38]	; 0x26
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10f      	bne.n	80077ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800779c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	e000      	b.n	80077b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077b2:	2302      	movs	r3, #2
  }
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bc80      	pop	{r7}
 80077bc:	4770      	bx	lr

080077be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b082      	sub	sp, #8
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2220      	movs	r2, #32
 80077da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7ff feee 	bl	80075c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b086      	sub	sp, #24
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b22      	cmp	r3, #34	; 0x22
 8007800:	f040 8099 	bne.w	8007936 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780c:	d117      	bne.n	800783e <UART_Receive_IT+0x50>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d113      	bne.n	800783e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007816:	2300      	movs	r3, #0
 8007818:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	b29b      	uxth	r3, r3
 8007828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782c:	b29a      	uxth	r2, r3
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	1c9a      	adds	r2, r3, #2
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	629a      	str	r2, [r3, #40]	; 0x28
 800783c:	e026      	b.n	800788c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007842:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007844:	2300      	movs	r3, #0
 8007846:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007850:	d007      	beq.n	8007862 <UART_Receive_IT+0x74>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <UART_Receive_IT+0x82>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	b2da      	uxtb	r2, r3
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	e008      	b.n	8007882 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	b2db      	uxtb	r3, r3
 8007878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800787c:	b2da      	uxtb	r2, r3
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007890:	b29b      	uxth	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	b29b      	uxth	r3, r3
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	4619      	mov	r1, r3
 800789a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800789c:	2b00      	cmp	r3, #0
 800789e:	d148      	bne.n	8007932 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0220 	bic.w	r2, r2, #32
 80078ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695a      	ldr	r2, [r3, #20]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0201 	bic.w	r2, r2, #1
 80078ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d123      	bne.n	8007928 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 0210 	bic.w	r2, r2, #16
 80078f4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0310 	and.w	r3, r3, #16
 8007900:	2b10      	cmp	r3, #16
 8007902:	d10a      	bne.n	800791a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007904:	2300      	movs	r3, #0
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff fe68 	bl	80075f6 <HAL_UARTEx_RxEventCallback>
 8007926:	e002      	b.n	800792e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7ff fe52 	bl	80075d2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	e002      	b.n	8007938 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	e000      	b.n	8007938 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007936:	2302      	movs	r3, #2
  }
}
 8007938:	4618      	mov	r0, r3
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68da      	ldr	r2, [r3, #12]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	431a      	orrs	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	4313      	orrs	r3, r2
 800796e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800797a:	f023 030c 	bic.w	r3, r3, #12
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6812      	ldr	r2, [r2, #0]
 8007982:	68b9      	ldr	r1, [r7, #8]
 8007984:	430b      	orrs	r3, r1
 8007986:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	699a      	ldr	r2, [r3, #24]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a2c      	ldr	r2, [pc, #176]	; (8007a54 <UART_SetConfig+0x114>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d103      	bne.n	80079b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80079a8:	f7fe f9b2 	bl	8005d10 <HAL_RCC_GetPCLK2Freq>
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	e002      	b.n	80079b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80079b0:	f7fe f99a 	bl	8005ce8 <HAL_RCC_GetPCLK1Freq>
 80079b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	009a      	lsls	r2, r3, #2
 80079c0:	441a      	add	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079cc:	4a22      	ldr	r2, [pc, #136]	; (8007a58 <UART_SetConfig+0x118>)
 80079ce:	fba2 2303 	umull	r2, r3, r2, r3
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	0119      	lsls	r1, r3, #4
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	4613      	mov	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	009a      	lsls	r2, r3, #2
 80079e0:	441a      	add	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80079ec:	4b1a      	ldr	r3, [pc, #104]	; (8007a58 <UART_SetConfig+0x118>)
 80079ee:	fba3 0302 	umull	r0, r3, r3, r2
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	2064      	movs	r0, #100	; 0x64
 80079f6:	fb00 f303 	mul.w	r3, r0, r3
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	011b      	lsls	r3, r3, #4
 80079fe:	3332      	adds	r3, #50	; 0x32
 8007a00:	4a15      	ldr	r2, [pc, #84]	; (8007a58 <UART_SetConfig+0x118>)
 8007a02:	fba2 2303 	umull	r2, r3, r2, r3
 8007a06:	095b      	lsrs	r3, r3, #5
 8007a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a0c:	4419      	add	r1, r3
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	4613      	mov	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	009a      	lsls	r2, r3, #2
 8007a18:	441a      	add	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a24:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <UART_SetConfig+0x118>)
 8007a26:	fba3 0302 	umull	r0, r3, r3, r2
 8007a2a:	095b      	lsrs	r3, r3, #5
 8007a2c:	2064      	movs	r0, #100	; 0x64
 8007a2e:	fb00 f303 	mul.w	r3, r0, r3
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	3332      	adds	r3, #50	; 0x32
 8007a38:	4a07      	ldr	r2, [pc, #28]	; (8007a58 <UART_SetConfig+0x118>)
 8007a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3e:	095b      	lsrs	r3, r3, #5
 8007a40:	f003 020f 	and.w	r2, r3, #15
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	440a      	add	r2, r1
 8007a4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a4c:	bf00      	nop
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	40013800 	.word	0x40013800
 8007a58:	51eb851f 	.word	0x51eb851f

08007a5c <__errno>:
 8007a5c:	4b01      	ldr	r3, [pc, #4]	; (8007a64 <__errno+0x8>)
 8007a5e:	6818      	ldr	r0, [r3, #0]
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	20000080 	.word	0x20000080

08007a68 <__libc_init_array>:
 8007a68:	b570      	push	{r4, r5, r6, lr}
 8007a6a:	2600      	movs	r6, #0
 8007a6c:	4d0c      	ldr	r5, [pc, #48]	; (8007aa0 <__libc_init_array+0x38>)
 8007a6e:	4c0d      	ldr	r4, [pc, #52]	; (8007aa4 <__libc_init_array+0x3c>)
 8007a70:	1b64      	subs	r4, r4, r5
 8007a72:	10a4      	asrs	r4, r4, #2
 8007a74:	42a6      	cmp	r6, r4
 8007a76:	d109      	bne.n	8007a8c <__libc_init_array+0x24>
 8007a78:	f002 fefe 	bl	800a878 <_init>
 8007a7c:	2600      	movs	r6, #0
 8007a7e:	4d0a      	ldr	r5, [pc, #40]	; (8007aa8 <__libc_init_array+0x40>)
 8007a80:	4c0a      	ldr	r4, [pc, #40]	; (8007aac <__libc_init_array+0x44>)
 8007a82:	1b64      	subs	r4, r4, r5
 8007a84:	10a4      	asrs	r4, r4, #2
 8007a86:	42a6      	cmp	r6, r4
 8007a88:	d105      	bne.n	8007a96 <__libc_init_array+0x2e>
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}
 8007a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a90:	4798      	blx	r3
 8007a92:	3601      	adds	r6, #1
 8007a94:	e7ee      	b.n	8007a74 <__libc_init_array+0xc>
 8007a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a9a:	4798      	blx	r3
 8007a9c:	3601      	adds	r6, #1
 8007a9e:	e7f2      	b.n	8007a86 <__libc_init_array+0x1e>
 8007aa0:	0800adfc 	.word	0x0800adfc
 8007aa4:	0800adfc 	.word	0x0800adfc
 8007aa8:	0800adfc 	.word	0x0800adfc
 8007aac:	0800ae00 	.word	0x0800ae00

08007ab0 <memcpy>:
 8007ab0:	440a      	add	r2, r1
 8007ab2:	4291      	cmp	r1, r2
 8007ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ab8:	d100      	bne.n	8007abc <memcpy+0xc>
 8007aba:	4770      	bx	lr
 8007abc:	b510      	push	{r4, lr}
 8007abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ac2:	4291      	cmp	r1, r2
 8007ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ac8:	d1f9      	bne.n	8007abe <memcpy+0xe>
 8007aca:	bd10      	pop	{r4, pc}

08007acc <memset>:
 8007acc:	4603      	mov	r3, r0
 8007ace:	4402      	add	r2, r0
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d100      	bne.n	8007ad6 <memset+0xa>
 8007ad4:	4770      	bx	lr
 8007ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8007ada:	e7f9      	b.n	8007ad0 <memset+0x4>

08007adc <__cvt>:
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae2:	461f      	mov	r7, r3
 8007ae4:	bfbb      	ittet	lt
 8007ae6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007aea:	461f      	movlt	r7, r3
 8007aec:	2300      	movge	r3, #0
 8007aee:	232d      	movlt	r3, #45	; 0x2d
 8007af0:	b088      	sub	sp, #32
 8007af2:	4614      	mov	r4, r2
 8007af4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007af6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007af8:	7013      	strb	r3, [r2, #0]
 8007afa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007afc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007b00:	f023 0820 	bic.w	r8, r3, #32
 8007b04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b08:	d005      	beq.n	8007b16 <__cvt+0x3a>
 8007b0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b0e:	d100      	bne.n	8007b12 <__cvt+0x36>
 8007b10:	3501      	adds	r5, #1
 8007b12:	2302      	movs	r3, #2
 8007b14:	e000      	b.n	8007b18 <__cvt+0x3c>
 8007b16:	2303      	movs	r3, #3
 8007b18:	aa07      	add	r2, sp, #28
 8007b1a:	9204      	str	r2, [sp, #16]
 8007b1c:	aa06      	add	r2, sp, #24
 8007b1e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007b22:	e9cd 3500 	strd	r3, r5, [sp]
 8007b26:	4622      	mov	r2, r4
 8007b28:	463b      	mov	r3, r7
 8007b2a:	f000 fcf1 	bl	8008510 <_dtoa_r>
 8007b2e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b32:	4606      	mov	r6, r0
 8007b34:	d102      	bne.n	8007b3c <__cvt+0x60>
 8007b36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b38:	07db      	lsls	r3, r3, #31
 8007b3a:	d522      	bpl.n	8007b82 <__cvt+0xa6>
 8007b3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b40:	eb06 0905 	add.w	r9, r6, r5
 8007b44:	d110      	bne.n	8007b68 <__cvt+0x8c>
 8007b46:	7833      	ldrb	r3, [r6, #0]
 8007b48:	2b30      	cmp	r3, #48	; 0x30
 8007b4a:	d10a      	bne.n	8007b62 <__cvt+0x86>
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2300      	movs	r3, #0
 8007b50:	4620      	mov	r0, r4
 8007b52:	4639      	mov	r1, r7
 8007b54:	f7f8 ff94 	bl	8000a80 <__aeabi_dcmpeq>
 8007b58:	b918      	cbnz	r0, 8007b62 <__cvt+0x86>
 8007b5a:	f1c5 0501 	rsb	r5, r5, #1
 8007b5e:	f8ca 5000 	str.w	r5, [sl]
 8007b62:	f8da 3000 	ldr.w	r3, [sl]
 8007b66:	4499      	add	r9, r3
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	4639      	mov	r1, r7
 8007b70:	f7f8 ff86 	bl	8000a80 <__aeabi_dcmpeq>
 8007b74:	b108      	cbz	r0, 8007b7a <__cvt+0x9e>
 8007b76:	f8cd 901c 	str.w	r9, [sp, #28]
 8007b7a:	2230      	movs	r2, #48	; 0x30
 8007b7c:	9b07      	ldr	r3, [sp, #28]
 8007b7e:	454b      	cmp	r3, r9
 8007b80:	d307      	bcc.n	8007b92 <__cvt+0xb6>
 8007b82:	4630      	mov	r0, r6
 8007b84:	9b07      	ldr	r3, [sp, #28]
 8007b86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b88:	1b9b      	subs	r3, r3, r6
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	b008      	add	sp, #32
 8007b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b92:	1c59      	adds	r1, r3, #1
 8007b94:	9107      	str	r1, [sp, #28]
 8007b96:	701a      	strb	r2, [r3, #0]
 8007b98:	e7f0      	b.n	8007b7c <__cvt+0xa0>

08007b9a <__exponent>:
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b9e:	2900      	cmp	r1, #0
 8007ba0:	f803 2b02 	strb.w	r2, [r3], #2
 8007ba4:	bfb6      	itet	lt
 8007ba6:	222d      	movlt	r2, #45	; 0x2d
 8007ba8:	222b      	movge	r2, #43	; 0x2b
 8007baa:	4249      	neglt	r1, r1
 8007bac:	2909      	cmp	r1, #9
 8007bae:	7042      	strb	r2, [r0, #1]
 8007bb0:	dd2b      	ble.n	8007c0a <__exponent+0x70>
 8007bb2:	f10d 0407 	add.w	r4, sp, #7
 8007bb6:	46a4      	mov	ip, r4
 8007bb8:	270a      	movs	r7, #10
 8007bba:	fb91 f6f7 	sdiv	r6, r1, r7
 8007bbe:	460a      	mov	r2, r1
 8007bc0:	46a6      	mov	lr, r4
 8007bc2:	fb07 1516 	mls	r5, r7, r6, r1
 8007bc6:	2a63      	cmp	r2, #99	; 0x63
 8007bc8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007bcc:	4631      	mov	r1, r6
 8007bce:	f104 34ff 	add.w	r4, r4, #4294967295
 8007bd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007bd6:	dcf0      	bgt.n	8007bba <__exponent+0x20>
 8007bd8:	3130      	adds	r1, #48	; 0x30
 8007bda:	f1ae 0502 	sub.w	r5, lr, #2
 8007bde:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007be2:	4629      	mov	r1, r5
 8007be4:	1c44      	adds	r4, r0, #1
 8007be6:	4561      	cmp	r1, ip
 8007be8:	d30a      	bcc.n	8007c00 <__exponent+0x66>
 8007bea:	f10d 0209 	add.w	r2, sp, #9
 8007bee:	eba2 020e 	sub.w	r2, r2, lr
 8007bf2:	4565      	cmp	r5, ip
 8007bf4:	bf88      	it	hi
 8007bf6:	2200      	movhi	r2, #0
 8007bf8:	4413      	add	r3, r2
 8007bfa:	1a18      	subs	r0, r3, r0
 8007bfc:	b003      	add	sp, #12
 8007bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c04:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c08:	e7ed      	b.n	8007be6 <__exponent+0x4c>
 8007c0a:	2330      	movs	r3, #48	; 0x30
 8007c0c:	3130      	adds	r1, #48	; 0x30
 8007c0e:	7083      	strb	r3, [r0, #2]
 8007c10:	70c1      	strb	r1, [r0, #3]
 8007c12:	1d03      	adds	r3, r0, #4
 8007c14:	e7f1      	b.n	8007bfa <__exponent+0x60>
	...

08007c18 <_printf_float>:
 8007c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	b091      	sub	sp, #68	; 0x44
 8007c1e:	460c      	mov	r4, r1
 8007c20:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007c24:	4616      	mov	r6, r2
 8007c26:	461f      	mov	r7, r3
 8007c28:	4605      	mov	r5, r0
 8007c2a:	f001 fb55 	bl	80092d8 <_localeconv_r>
 8007c2e:	6803      	ldr	r3, [r0, #0]
 8007c30:	4618      	mov	r0, r3
 8007c32:	9309      	str	r3, [sp, #36]	; 0x24
 8007c34:	f7f8 faf8 	bl	8000228 <strlen>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	930e      	str	r3, [sp, #56]	; 0x38
 8007c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c40:	900a      	str	r0, [sp, #40]	; 0x28
 8007c42:	3307      	adds	r3, #7
 8007c44:	f023 0307 	bic.w	r3, r3, #7
 8007c48:	f103 0208 	add.w	r2, r3, #8
 8007c4c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007c50:	f8d4 b000 	ldr.w	fp, [r4]
 8007c54:	f8c8 2000 	str.w	r2, [r8]
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c60:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007c64:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007c68:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c6e:	4640      	mov	r0, r8
 8007c70:	4b9c      	ldr	r3, [pc, #624]	; (8007ee4 <_printf_float+0x2cc>)
 8007c72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c74:	f7f8 ff36 	bl	8000ae4 <__aeabi_dcmpun>
 8007c78:	bb70      	cbnz	r0, 8007cd8 <_printf_float+0xc0>
 8007c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7e:	4640      	mov	r0, r8
 8007c80:	4b98      	ldr	r3, [pc, #608]	; (8007ee4 <_printf_float+0x2cc>)
 8007c82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c84:	f7f8 ff10 	bl	8000aa8 <__aeabi_dcmple>
 8007c88:	bb30      	cbnz	r0, 8007cd8 <_printf_float+0xc0>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4640      	mov	r0, r8
 8007c90:	4651      	mov	r1, sl
 8007c92:	f7f8 feff 	bl	8000a94 <__aeabi_dcmplt>
 8007c96:	b110      	cbz	r0, 8007c9e <_printf_float+0x86>
 8007c98:	232d      	movs	r3, #45	; 0x2d
 8007c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c9e:	4b92      	ldr	r3, [pc, #584]	; (8007ee8 <_printf_float+0x2d0>)
 8007ca0:	4892      	ldr	r0, [pc, #584]	; (8007eec <_printf_float+0x2d4>)
 8007ca2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007ca6:	bf94      	ite	ls
 8007ca8:	4698      	movls	r8, r3
 8007caa:	4680      	movhi	r8, r0
 8007cac:	2303      	movs	r3, #3
 8007cae:	f04f 0a00 	mov.w	sl, #0
 8007cb2:	6123      	str	r3, [r4, #16]
 8007cb4:	f02b 0304 	bic.w	r3, fp, #4
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	4633      	mov	r3, r6
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	9700      	str	r7, [sp, #0]
 8007cc2:	aa0f      	add	r2, sp, #60	; 0x3c
 8007cc4:	f000 f9d4 	bl	8008070 <_printf_common>
 8007cc8:	3001      	adds	r0, #1
 8007cca:	f040 8090 	bne.w	8007dee <_printf_float+0x1d6>
 8007cce:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd2:	b011      	add	sp, #68	; 0x44
 8007cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd8:	4642      	mov	r2, r8
 8007cda:	4653      	mov	r3, sl
 8007cdc:	4640      	mov	r0, r8
 8007cde:	4651      	mov	r1, sl
 8007ce0:	f7f8 ff00 	bl	8000ae4 <__aeabi_dcmpun>
 8007ce4:	b148      	cbz	r0, 8007cfa <_printf_float+0xe2>
 8007ce6:	f1ba 0f00 	cmp.w	sl, #0
 8007cea:	bfb8      	it	lt
 8007cec:	232d      	movlt	r3, #45	; 0x2d
 8007cee:	4880      	ldr	r0, [pc, #512]	; (8007ef0 <_printf_float+0x2d8>)
 8007cf0:	bfb8      	it	lt
 8007cf2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007cf6:	4b7f      	ldr	r3, [pc, #508]	; (8007ef4 <_printf_float+0x2dc>)
 8007cf8:	e7d3      	b.n	8007ca2 <_printf_float+0x8a>
 8007cfa:	6863      	ldr	r3, [r4, #4]
 8007cfc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007d00:	1c5a      	adds	r2, r3, #1
 8007d02:	d142      	bne.n	8007d8a <_printf_float+0x172>
 8007d04:	2306      	movs	r3, #6
 8007d06:	6063      	str	r3, [r4, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	9206      	str	r2, [sp, #24]
 8007d0c:	aa0e      	add	r2, sp, #56	; 0x38
 8007d0e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007d12:	aa0d      	add	r2, sp, #52	; 0x34
 8007d14:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007d18:	9203      	str	r2, [sp, #12]
 8007d1a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007d1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007d22:	6023      	str	r3, [r4, #0]
 8007d24:	6863      	ldr	r3, [r4, #4]
 8007d26:	4642      	mov	r2, r8
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	4653      	mov	r3, sl
 8007d2e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007d30:	f7ff fed4 	bl	8007adc <__cvt>
 8007d34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d36:	4680      	mov	r8, r0
 8007d38:	2947      	cmp	r1, #71	; 0x47
 8007d3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d3c:	d108      	bne.n	8007d50 <_printf_float+0x138>
 8007d3e:	1cc8      	adds	r0, r1, #3
 8007d40:	db02      	blt.n	8007d48 <_printf_float+0x130>
 8007d42:	6863      	ldr	r3, [r4, #4]
 8007d44:	4299      	cmp	r1, r3
 8007d46:	dd40      	ble.n	8007dca <_printf_float+0x1b2>
 8007d48:	f1a9 0902 	sub.w	r9, r9, #2
 8007d4c:	fa5f f989 	uxtb.w	r9, r9
 8007d50:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007d54:	d81f      	bhi.n	8007d96 <_printf_float+0x17e>
 8007d56:	464a      	mov	r2, r9
 8007d58:	3901      	subs	r1, #1
 8007d5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d5e:	910d      	str	r1, [sp, #52]	; 0x34
 8007d60:	f7ff ff1b 	bl	8007b9a <__exponent>
 8007d64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d66:	4682      	mov	sl, r0
 8007d68:	1813      	adds	r3, r2, r0
 8007d6a:	2a01      	cmp	r2, #1
 8007d6c:	6123      	str	r3, [r4, #16]
 8007d6e:	dc02      	bgt.n	8007d76 <_printf_float+0x15e>
 8007d70:	6822      	ldr	r2, [r4, #0]
 8007d72:	07d2      	lsls	r2, r2, #31
 8007d74:	d501      	bpl.n	8007d7a <_printf_float+0x162>
 8007d76:	3301      	adds	r3, #1
 8007d78:	6123      	str	r3, [r4, #16]
 8007d7a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d09b      	beq.n	8007cba <_printf_float+0xa2>
 8007d82:	232d      	movs	r3, #45	; 0x2d
 8007d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d88:	e797      	b.n	8007cba <_printf_float+0xa2>
 8007d8a:	2947      	cmp	r1, #71	; 0x47
 8007d8c:	d1bc      	bne.n	8007d08 <_printf_float+0xf0>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1ba      	bne.n	8007d08 <_printf_float+0xf0>
 8007d92:	2301      	movs	r3, #1
 8007d94:	e7b7      	b.n	8007d06 <_printf_float+0xee>
 8007d96:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007d9a:	d118      	bne.n	8007dce <_printf_float+0x1b6>
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	6863      	ldr	r3, [r4, #4]
 8007da0:	dd0b      	ble.n	8007dba <_printf_float+0x1a2>
 8007da2:	6121      	str	r1, [r4, #16]
 8007da4:	b913      	cbnz	r3, 8007dac <_printf_float+0x194>
 8007da6:	6822      	ldr	r2, [r4, #0]
 8007da8:	07d0      	lsls	r0, r2, #31
 8007daa:	d502      	bpl.n	8007db2 <_printf_float+0x19a>
 8007dac:	3301      	adds	r3, #1
 8007dae:	440b      	add	r3, r1
 8007db0:	6123      	str	r3, [r4, #16]
 8007db2:	f04f 0a00 	mov.w	sl, #0
 8007db6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007db8:	e7df      	b.n	8007d7a <_printf_float+0x162>
 8007dba:	b913      	cbnz	r3, 8007dc2 <_printf_float+0x1aa>
 8007dbc:	6822      	ldr	r2, [r4, #0]
 8007dbe:	07d2      	lsls	r2, r2, #31
 8007dc0:	d501      	bpl.n	8007dc6 <_printf_float+0x1ae>
 8007dc2:	3302      	adds	r3, #2
 8007dc4:	e7f4      	b.n	8007db0 <_printf_float+0x198>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e7f2      	b.n	8007db0 <_printf_float+0x198>
 8007dca:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dd0:	4299      	cmp	r1, r3
 8007dd2:	db05      	blt.n	8007de0 <_printf_float+0x1c8>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	6121      	str	r1, [r4, #16]
 8007dd8:	07d8      	lsls	r0, r3, #31
 8007dda:	d5ea      	bpl.n	8007db2 <_printf_float+0x19a>
 8007ddc:	1c4b      	adds	r3, r1, #1
 8007dde:	e7e7      	b.n	8007db0 <_printf_float+0x198>
 8007de0:	2900      	cmp	r1, #0
 8007de2:	bfcc      	ite	gt
 8007de4:	2201      	movgt	r2, #1
 8007de6:	f1c1 0202 	rsble	r2, r1, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	e7e0      	b.n	8007db0 <_printf_float+0x198>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	055a      	lsls	r2, r3, #21
 8007df2:	d407      	bmi.n	8007e04 <_printf_float+0x1ec>
 8007df4:	6923      	ldr	r3, [r4, #16]
 8007df6:	4642      	mov	r2, r8
 8007df8:	4631      	mov	r1, r6
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	47b8      	blx	r7
 8007dfe:	3001      	adds	r0, #1
 8007e00:	d12b      	bne.n	8007e5a <_printf_float+0x242>
 8007e02:	e764      	b.n	8007cce <_printf_float+0xb6>
 8007e04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007e08:	f240 80dd 	bls.w	8007fc6 <_printf_float+0x3ae>
 8007e0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e10:	2200      	movs	r2, #0
 8007e12:	2300      	movs	r3, #0
 8007e14:	f7f8 fe34 	bl	8000a80 <__aeabi_dcmpeq>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d033      	beq.n	8007e84 <_printf_float+0x26c>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	4631      	mov	r1, r6
 8007e20:	4628      	mov	r0, r5
 8007e22:	4a35      	ldr	r2, [pc, #212]	; (8007ef8 <_printf_float+0x2e0>)
 8007e24:	47b8      	blx	r7
 8007e26:	3001      	adds	r0, #1
 8007e28:	f43f af51 	beq.w	8007cce <_printf_float+0xb6>
 8007e2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007e30:	429a      	cmp	r2, r3
 8007e32:	db02      	blt.n	8007e3a <_printf_float+0x222>
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	07d8      	lsls	r0, r3, #31
 8007e38:	d50f      	bpl.n	8007e5a <_printf_float+0x242>
 8007e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e3e:	4631      	mov	r1, r6
 8007e40:	4628      	mov	r0, r5
 8007e42:	47b8      	blx	r7
 8007e44:	3001      	adds	r0, #1
 8007e46:	f43f af42 	beq.w	8007cce <_printf_float+0xb6>
 8007e4a:	f04f 0800 	mov.w	r8, #0
 8007e4e:	f104 091a 	add.w	r9, r4, #26
 8007e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e54:	3b01      	subs	r3, #1
 8007e56:	4543      	cmp	r3, r8
 8007e58:	dc09      	bgt.n	8007e6e <_printf_float+0x256>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	079b      	lsls	r3, r3, #30
 8007e5e:	f100 8102 	bmi.w	8008066 <_printf_float+0x44e>
 8007e62:	68e0      	ldr	r0, [r4, #12]
 8007e64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e66:	4298      	cmp	r0, r3
 8007e68:	bfb8      	it	lt
 8007e6a:	4618      	movlt	r0, r3
 8007e6c:	e731      	b.n	8007cd2 <_printf_float+0xba>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	464a      	mov	r2, r9
 8007e72:	4631      	mov	r1, r6
 8007e74:	4628      	mov	r0, r5
 8007e76:	47b8      	blx	r7
 8007e78:	3001      	adds	r0, #1
 8007e7a:	f43f af28 	beq.w	8007cce <_printf_float+0xb6>
 8007e7e:	f108 0801 	add.w	r8, r8, #1
 8007e82:	e7e6      	b.n	8007e52 <_printf_float+0x23a>
 8007e84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	dc38      	bgt.n	8007efc <_printf_float+0x2e4>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4628      	mov	r0, r5
 8007e90:	4a19      	ldr	r2, [pc, #100]	; (8007ef8 <_printf_float+0x2e0>)
 8007e92:	47b8      	blx	r7
 8007e94:	3001      	adds	r0, #1
 8007e96:	f43f af1a 	beq.w	8007cce <_printf_float+0xb6>
 8007e9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	d102      	bne.n	8007ea8 <_printf_float+0x290>
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	07d9      	lsls	r1, r3, #31
 8007ea6:	d5d8      	bpl.n	8007e5a <_printf_float+0x242>
 8007ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eac:	4631      	mov	r1, r6
 8007eae:	4628      	mov	r0, r5
 8007eb0:	47b8      	blx	r7
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	f43f af0b 	beq.w	8007cce <_printf_float+0xb6>
 8007eb8:	f04f 0900 	mov.w	r9, #0
 8007ebc:	f104 0a1a 	add.w	sl, r4, #26
 8007ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ec2:	425b      	negs	r3, r3
 8007ec4:	454b      	cmp	r3, r9
 8007ec6:	dc01      	bgt.n	8007ecc <_printf_float+0x2b4>
 8007ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eca:	e794      	b.n	8007df6 <_printf_float+0x1de>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	4652      	mov	r2, sl
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	47b8      	blx	r7
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	f43f aef9 	beq.w	8007cce <_printf_float+0xb6>
 8007edc:	f109 0901 	add.w	r9, r9, #1
 8007ee0:	e7ee      	b.n	8007ec0 <_printf_float+0x2a8>
 8007ee2:	bf00      	nop
 8007ee4:	7fefffff 	.word	0x7fefffff
 8007ee8:	0800aa28 	.word	0x0800aa28
 8007eec:	0800aa2c 	.word	0x0800aa2c
 8007ef0:	0800aa34 	.word	0x0800aa34
 8007ef4:	0800aa30 	.word	0x0800aa30
 8007ef8:	0800aa38 	.word	0x0800aa38
 8007efc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007efe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f00:	429a      	cmp	r2, r3
 8007f02:	bfa8      	it	ge
 8007f04:	461a      	movge	r2, r3
 8007f06:	2a00      	cmp	r2, #0
 8007f08:	4691      	mov	r9, r2
 8007f0a:	dc37      	bgt.n	8007f7c <_printf_float+0x364>
 8007f0c:	f04f 0b00 	mov.w	fp, #0
 8007f10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f14:	f104 021a 	add.w	r2, r4, #26
 8007f18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007f1c:	ebaa 0309 	sub.w	r3, sl, r9
 8007f20:	455b      	cmp	r3, fp
 8007f22:	dc33      	bgt.n	8007f8c <_printf_float+0x374>
 8007f24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	db3b      	blt.n	8007fa4 <_printf_float+0x38c>
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	07da      	lsls	r2, r3, #31
 8007f30:	d438      	bmi.n	8007fa4 <_printf_float+0x38c>
 8007f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f36:	eba3 020a 	sub.w	r2, r3, sl
 8007f3a:	eba3 0901 	sub.w	r9, r3, r1
 8007f3e:	4591      	cmp	r9, r2
 8007f40:	bfa8      	it	ge
 8007f42:	4691      	movge	r9, r2
 8007f44:	f1b9 0f00 	cmp.w	r9, #0
 8007f48:	dc34      	bgt.n	8007fb4 <_printf_float+0x39c>
 8007f4a:	f04f 0800 	mov.w	r8, #0
 8007f4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f52:	f104 0a1a 	add.w	sl, r4, #26
 8007f56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f5a:	1a9b      	subs	r3, r3, r2
 8007f5c:	eba3 0309 	sub.w	r3, r3, r9
 8007f60:	4543      	cmp	r3, r8
 8007f62:	f77f af7a 	ble.w	8007e5a <_printf_float+0x242>
 8007f66:	2301      	movs	r3, #1
 8007f68:	4652      	mov	r2, sl
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	47b8      	blx	r7
 8007f70:	3001      	adds	r0, #1
 8007f72:	f43f aeac 	beq.w	8007cce <_printf_float+0xb6>
 8007f76:	f108 0801 	add.w	r8, r8, #1
 8007f7a:	e7ec      	b.n	8007f56 <_printf_float+0x33e>
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	4631      	mov	r1, r6
 8007f80:	4642      	mov	r2, r8
 8007f82:	4628      	mov	r0, r5
 8007f84:	47b8      	blx	r7
 8007f86:	3001      	adds	r0, #1
 8007f88:	d1c0      	bne.n	8007f0c <_printf_float+0x2f4>
 8007f8a:	e6a0      	b.n	8007cce <_printf_float+0xb6>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4628      	mov	r0, r5
 8007f92:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f94:	47b8      	blx	r7
 8007f96:	3001      	adds	r0, #1
 8007f98:	f43f ae99 	beq.w	8007cce <_printf_float+0xb6>
 8007f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f9e:	f10b 0b01 	add.w	fp, fp, #1
 8007fa2:	e7b9      	b.n	8007f18 <_printf_float+0x300>
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007faa:	4628      	mov	r0, r5
 8007fac:	47b8      	blx	r7
 8007fae:	3001      	adds	r0, #1
 8007fb0:	d1bf      	bne.n	8007f32 <_printf_float+0x31a>
 8007fb2:	e68c      	b.n	8007cce <_printf_float+0xb6>
 8007fb4:	464b      	mov	r3, r9
 8007fb6:	4631      	mov	r1, r6
 8007fb8:	4628      	mov	r0, r5
 8007fba:	eb08 020a 	add.w	r2, r8, sl
 8007fbe:	47b8      	blx	r7
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	d1c2      	bne.n	8007f4a <_printf_float+0x332>
 8007fc4:	e683      	b.n	8007cce <_printf_float+0xb6>
 8007fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fc8:	2a01      	cmp	r2, #1
 8007fca:	dc01      	bgt.n	8007fd0 <_printf_float+0x3b8>
 8007fcc:	07db      	lsls	r3, r3, #31
 8007fce:	d537      	bpl.n	8008040 <_printf_float+0x428>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	4642      	mov	r2, r8
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	47b8      	blx	r7
 8007fda:	3001      	adds	r0, #1
 8007fdc:	f43f ae77 	beq.w	8007cce <_printf_float+0xb6>
 8007fe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fe4:	4631      	mov	r1, r6
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	47b8      	blx	r7
 8007fea:	3001      	adds	r0, #1
 8007fec:	f43f ae6f 	beq.w	8007cce <_printf_float+0xb6>
 8007ff0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	f7f8 fd42 	bl	8000a80 <__aeabi_dcmpeq>
 8007ffc:	b9d8      	cbnz	r0, 8008036 <_printf_float+0x41e>
 8007ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008000:	f108 0201 	add.w	r2, r8, #1
 8008004:	3b01      	subs	r3, #1
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	47b8      	blx	r7
 800800c:	3001      	adds	r0, #1
 800800e:	d10e      	bne.n	800802e <_printf_float+0x416>
 8008010:	e65d      	b.n	8007cce <_printf_float+0xb6>
 8008012:	2301      	movs	r3, #1
 8008014:	464a      	mov	r2, r9
 8008016:	4631      	mov	r1, r6
 8008018:	4628      	mov	r0, r5
 800801a:	47b8      	blx	r7
 800801c:	3001      	adds	r0, #1
 800801e:	f43f ae56 	beq.w	8007cce <_printf_float+0xb6>
 8008022:	f108 0801 	add.w	r8, r8, #1
 8008026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008028:	3b01      	subs	r3, #1
 800802a:	4543      	cmp	r3, r8
 800802c:	dcf1      	bgt.n	8008012 <_printf_float+0x3fa>
 800802e:	4653      	mov	r3, sl
 8008030:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008034:	e6e0      	b.n	8007df8 <_printf_float+0x1e0>
 8008036:	f04f 0800 	mov.w	r8, #0
 800803a:	f104 091a 	add.w	r9, r4, #26
 800803e:	e7f2      	b.n	8008026 <_printf_float+0x40e>
 8008040:	2301      	movs	r3, #1
 8008042:	4642      	mov	r2, r8
 8008044:	e7df      	b.n	8008006 <_printf_float+0x3ee>
 8008046:	2301      	movs	r3, #1
 8008048:	464a      	mov	r2, r9
 800804a:	4631      	mov	r1, r6
 800804c:	4628      	mov	r0, r5
 800804e:	47b8      	blx	r7
 8008050:	3001      	adds	r0, #1
 8008052:	f43f ae3c 	beq.w	8007cce <_printf_float+0xb6>
 8008056:	f108 0801 	add.w	r8, r8, #1
 800805a:	68e3      	ldr	r3, [r4, #12]
 800805c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800805e:	1a5b      	subs	r3, r3, r1
 8008060:	4543      	cmp	r3, r8
 8008062:	dcf0      	bgt.n	8008046 <_printf_float+0x42e>
 8008064:	e6fd      	b.n	8007e62 <_printf_float+0x24a>
 8008066:	f04f 0800 	mov.w	r8, #0
 800806a:	f104 0919 	add.w	r9, r4, #25
 800806e:	e7f4      	b.n	800805a <_printf_float+0x442>

08008070 <_printf_common>:
 8008070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008074:	4616      	mov	r6, r2
 8008076:	4699      	mov	r9, r3
 8008078:	688a      	ldr	r2, [r1, #8]
 800807a:	690b      	ldr	r3, [r1, #16]
 800807c:	4607      	mov	r7, r0
 800807e:	4293      	cmp	r3, r2
 8008080:	bfb8      	it	lt
 8008082:	4613      	movlt	r3, r2
 8008084:	6033      	str	r3, [r6, #0]
 8008086:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800808a:	460c      	mov	r4, r1
 800808c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008090:	b10a      	cbz	r2, 8008096 <_printf_common+0x26>
 8008092:	3301      	adds	r3, #1
 8008094:	6033      	str	r3, [r6, #0]
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	0699      	lsls	r1, r3, #26
 800809a:	bf42      	ittt	mi
 800809c:	6833      	ldrmi	r3, [r6, #0]
 800809e:	3302      	addmi	r3, #2
 80080a0:	6033      	strmi	r3, [r6, #0]
 80080a2:	6825      	ldr	r5, [r4, #0]
 80080a4:	f015 0506 	ands.w	r5, r5, #6
 80080a8:	d106      	bne.n	80080b8 <_printf_common+0x48>
 80080aa:	f104 0a19 	add.w	sl, r4, #25
 80080ae:	68e3      	ldr	r3, [r4, #12]
 80080b0:	6832      	ldr	r2, [r6, #0]
 80080b2:	1a9b      	subs	r3, r3, r2
 80080b4:	42ab      	cmp	r3, r5
 80080b6:	dc28      	bgt.n	800810a <_printf_common+0x9a>
 80080b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080bc:	1e13      	subs	r3, r2, #0
 80080be:	6822      	ldr	r2, [r4, #0]
 80080c0:	bf18      	it	ne
 80080c2:	2301      	movne	r3, #1
 80080c4:	0692      	lsls	r2, r2, #26
 80080c6:	d42d      	bmi.n	8008124 <_printf_common+0xb4>
 80080c8:	4649      	mov	r1, r9
 80080ca:	4638      	mov	r0, r7
 80080cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080d0:	47c0      	blx	r8
 80080d2:	3001      	adds	r0, #1
 80080d4:	d020      	beq.n	8008118 <_printf_common+0xa8>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	68e5      	ldr	r5, [r4, #12]
 80080da:	f003 0306 	and.w	r3, r3, #6
 80080de:	2b04      	cmp	r3, #4
 80080e0:	bf18      	it	ne
 80080e2:	2500      	movne	r5, #0
 80080e4:	6832      	ldr	r2, [r6, #0]
 80080e6:	f04f 0600 	mov.w	r6, #0
 80080ea:	68a3      	ldr	r3, [r4, #8]
 80080ec:	bf08      	it	eq
 80080ee:	1aad      	subeq	r5, r5, r2
 80080f0:	6922      	ldr	r2, [r4, #16]
 80080f2:	bf08      	it	eq
 80080f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080f8:	4293      	cmp	r3, r2
 80080fa:	bfc4      	itt	gt
 80080fc:	1a9b      	subgt	r3, r3, r2
 80080fe:	18ed      	addgt	r5, r5, r3
 8008100:	341a      	adds	r4, #26
 8008102:	42b5      	cmp	r5, r6
 8008104:	d11a      	bne.n	800813c <_printf_common+0xcc>
 8008106:	2000      	movs	r0, #0
 8008108:	e008      	b.n	800811c <_printf_common+0xac>
 800810a:	2301      	movs	r3, #1
 800810c:	4652      	mov	r2, sl
 800810e:	4649      	mov	r1, r9
 8008110:	4638      	mov	r0, r7
 8008112:	47c0      	blx	r8
 8008114:	3001      	adds	r0, #1
 8008116:	d103      	bne.n	8008120 <_printf_common+0xb0>
 8008118:	f04f 30ff 	mov.w	r0, #4294967295
 800811c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008120:	3501      	adds	r5, #1
 8008122:	e7c4      	b.n	80080ae <_printf_common+0x3e>
 8008124:	2030      	movs	r0, #48	; 0x30
 8008126:	18e1      	adds	r1, r4, r3
 8008128:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008132:	4422      	add	r2, r4
 8008134:	3302      	adds	r3, #2
 8008136:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800813a:	e7c5      	b.n	80080c8 <_printf_common+0x58>
 800813c:	2301      	movs	r3, #1
 800813e:	4622      	mov	r2, r4
 8008140:	4649      	mov	r1, r9
 8008142:	4638      	mov	r0, r7
 8008144:	47c0      	blx	r8
 8008146:	3001      	adds	r0, #1
 8008148:	d0e6      	beq.n	8008118 <_printf_common+0xa8>
 800814a:	3601      	adds	r6, #1
 800814c:	e7d9      	b.n	8008102 <_printf_common+0x92>
	...

08008150 <_printf_i>:
 8008150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008154:	7e0f      	ldrb	r7, [r1, #24]
 8008156:	4691      	mov	r9, r2
 8008158:	2f78      	cmp	r7, #120	; 0x78
 800815a:	4680      	mov	r8, r0
 800815c:	460c      	mov	r4, r1
 800815e:	469a      	mov	sl, r3
 8008160:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008162:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008166:	d807      	bhi.n	8008178 <_printf_i+0x28>
 8008168:	2f62      	cmp	r7, #98	; 0x62
 800816a:	d80a      	bhi.n	8008182 <_printf_i+0x32>
 800816c:	2f00      	cmp	r7, #0
 800816e:	f000 80d9 	beq.w	8008324 <_printf_i+0x1d4>
 8008172:	2f58      	cmp	r7, #88	; 0x58
 8008174:	f000 80a4 	beq.w	80082c0 <_printf_i+0x170>
 8008178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800817c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008180:	e03a      	b.n	80081f8 <_printf_i+0xa8>
 8008182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008186:	2b15      	cmp	r3, #21
 8008188:	d8f6      	bhi.n	8008178 <_printf_i+0x28>
 800818a:	a101      	add	r1, pc, #4	; (adr r1, 8008190 <_printf_i+0x40>)
 800818c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008190:	080081e9 	.word	0x080081e9
 8008194:	080081fd 	.word	0x080081fd
 8008198:	08008179 	.word	0x08008179
 800819c:	08008179 	.word	0x08008179
 80081a0:	08008179 	.word	0x08008179
 80081a4:	08008179 	.word	0x08008179
 80081a8:	080081fd 	.word	0x080081fd
 80081ac:	08008179 	.word	0x08008179
 80081b0:	08008179 	.word	0x08008179
 80081b4:	08008179 	.word	0x08008179
 80081b8:	08008179 	.word	0x08008179
 80081bc:	0800830b 	.word	0x0800830b
 80081c0:	0800822d 	.word	0x0800822d
 80081c4:	080082ed 	.word	0x080082ed
 80081c8:	08008179 	.word	0x08008179
 80081cc:	08008179 	.word	0x08008179
 80081d0:	0800832d 	.word	0x0800832d
 80081d4:	08008179 	.word	0x08008179
 80081d8:	0800822d 	.word	0x0800822d
 80081dc:	08008179 	.word	0x08008179
 80081e0:	08008179 	.word	0x08008179
 80081e4:	080082f5 	.word	0x080082f5
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	1d1a      	adds	r2, r3, #4
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	602a      	str	r2, [r5, #0]
 80081f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081f8:	2301      	movs	r3, #1
 80081fa:	e0a4      	b.n	8008346 <_printf_i+0x1f6>
 80081fc:	6820      	ldr	r0, [r4, #0]
 80081fe:	6829      	ldr	r1, [r5, #0]
 8008200:	0606      	lsls	r6, r0, #24
 8008202:	f101 0304 	add.w	r3, r1, #4
 8008206:	d50a      	bpl.n	800821e <_printf_i+0xce>
 8008208:	680e      	ldr	r6, [r1, #0]
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	2e00      	cmp	r6, #0
 800820e:	da03      	bge.n	8008218 <_printf_i+0xc8>
 8008210:	232d      	movs	r3, #45	; 0x2d
 8008212:	4276      	negs	r6, r6
 8008214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008218:	230a      	movs	r3, #10
 800821a:	485e      	ldr	r0, [pc, #376]	; (8008394 <_printf_i+0x244>)
 800821c:	e019      	b.n	8008252 <_printf_i+0x102>
 800821e:	680e      	ldr	r6, [r1, #0]
 8008220:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008224:	602b      	str	r3, [r5, #0]
 8008226:	bf18      	it	ne
 8008228:	b236      	sxthne	r6, r6
 800822a:	e7ef      	b.n	800820c <_printf_i+0xbc>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	6820      	ldr	r0, [r4, #0]
 8008230:	1d19      	adds	r1, r3, #4
 8008232:	6029      	str	r1, [r5, #0]
 8008234:	0601      	lsls	r1, r0, #24
 8008236:	d501      	bpl.n	800823c <_printf_i+0xec>
 8008238:	681e      	ldr	r6, [r3, #0]
 800823a:	e002      	b.n	8008242 <_printf_i+0xf2>
 800823c:	0646      	lsls	r6, r0, #25
 800823e:	d5fb      	bpl.n	8008238 <_printf_i+0xe8>
 8008240:	881e      	ldrh	r6, [r3, #0]
 8008242:	2f6f      	cmp	r7, #111	; 0x6f
 8008244:	bf0c      	ite	eq
 8008246:	2308      	moveq	r3, #8
 8008248:	230a      	movne	r3, #10
 800824a:	4852      	ldr	r0, [pc, #328]	; (8008394 <_printf_i+0x244>)
 800824c:	2100      	movs	r1, #0
 800824e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008252:	6865      	ldr	r5, [r4, #4]
 8008254:	2d00      	cmp	r5, #0
 8008256:	bfa8      	it	ge
 8008258:	6821      	ldrge	r1, [r4, #0]
 800825a:	60a5      	str	r5, [r4, #8]
 800825c:	bfa4      	itt	ge
 800825e:	f021 0104 	bicge.w	r1, r1, #4
 8008262:	6021      	strge	r1, [r4, #0]
 8008264:	b90e      	cbnz	r6, 800826a <_printf_i+0x11a>
 8008266:	2d00      	cmp	r5, #0
 8008268:	d04d      	beq.n	8008306 <_printf_i+0x1b6>
 800826a:	4615      	mov	r5, r2
 800826c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008270:	fb03 6711 	mls	r7, r3, r1, r6
 8008274:	5dc7      	ldrb	r7, [r0, r7]
 8008276:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800827a:	4637      	mov	r7, r6
 800827c:	42bb      	cmp	r3, r7
 800827e:	460e      	mov	r6, r1
 8008280:	d9f4      	bls.n	800826c <_printf_i+0x11c>
 8008282:	2b08      	cmp	r3, #8
 8008284:	d10b      	bne.n	800829e <_printf_i+0x14e>
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	07de      	lsls	r6, r3, #31
 800828a:	d508      	bpl.n	800829e <_printf_i+0x14e>
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	6861      	ldr	r1, [r4, #4]
 8008290:	4299      	cmp	r1, r3
 8008292:	bfde      	ittt	le
 8008294:	2330      	movle	r3, #48	; 0x30
 8008296:	f805 3c01 	strble.w	r3, [r5, #-1]
 800829a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800829e:	1b52      	subs	r2, r2, r5
 80082a0:	6122      	str	r2, [r4, #16]
 80082a2:	464b      	mov	r3, r9
 80082a4:	4621      	mov	r1, r4
 80082a6:	4640      	mov	r0, r8
 80082a8:	f8cd a000 	str.w	sl, [sp]
 80082ac:	aa03      	add	r2, sp, #12
 80082ae:	f7ff fedf 	bl	8008070 <_printf_common>
 80082b2:	3001      	adds	r0, #1
 80082b4:	d14c      	bne.n	8008350 <_printf_i+0x200>
 80082b6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ba:	b004      	add	sp, #16
 80082bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c0:	4834      	ldr	r0, [pc, #208]	; (8008394 <_printf_i+0x244>)
 80082c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082c6:	6829      	ldr	r1, [r5, #0]
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80082ce:	6029      	str	r1, [r5, #0]
 80082d0:	061d      	lsls	r5, r3, #24
 80082d2:	d514      	bpl.n	80082fe <_printf_i+0x1ae>
 80082d4:	07df      	lsls	r7, r3, #31
 80082d6:	bf44      	itt	mi
 80082d8:	f043 0320 	orrmi.w	r3, r3, #32
 80082dc:	6023      	strmi	r3, [r4, #0]
 80082de:	b91e      	cbnz	r6, 80082e8 <_printf_i+0x198>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	f023 0320 	bic.w	r3, r3, #32
 80082e6:	6023      	str	r3, [r4, #0]
 80082e8:	2310      	movs	r3, #16
 80082ea:	e7af      	b.n	800824c <_printf_i+0xfc>
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	f043 0320 	orr.w	r3, r3, #32
 80082f2:	6023      	str	r3, [r4, #0]
 80082f4:	2378      	movs	r3, #120	; 0x78
 80082f6:	4828      	ldr	r0, [pc, #160]	; (8008398 <_printf_i+0x248>)
 80082f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082fc:	e7e3      	b.n	80082c6 <_printf_i+0x176>
 80082fe:	0659      	lsls	r1, r3, #25
 8008300:	bf48      	it	mi
 8008302:	b2b6      	uxthmi	r6, r6
 8008304:	e7e6      	b.n	80082d4 <_printf_i+0x184>
 8008306:	4615      	mov	r5, r2
 8008308:	e7bb      	b.n	8008282 <_printf_i+0x132>
 800830a:	682b      	ldr	r3, [r5, #0]
 800830c:	6826      	ldr	r6, [r4, #0]
 800830e:	1d18      	adds	r0, r3, #4
 8008310:	6961      	ldr	r1, [r4, #20]
 8008312:	6028      	str	r0, [r5, #0]
 8008314:	0635      	lsls	r5, r6, #24
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	d501      	bpl.n	800831e <_printf_i+0x1ce>
 800831a:	6019      	str	r1, [r3, #0]
 800831c:	e002      	b.n	8008324 <_printf_i+0x1d4>
 800831e:	0670      	lsls	r0, r6, #25
 8008320:	d5fb      	bpl.n	800831a <_printf_i+0x1ca>
 8008322:	8019      	strh	r1, [r3, #0]
 8008324:	2300      	movs	r3, #0
 8008326:	4615      	mov	r5, r2
 8008328:	6123      	str	r3, [r4, #16]
 800832a:	e7ba      	b.n	80082a2 <_printf_i+0x152>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	2100      	movs	r1, #0
 8008330:	1d1a      	adds	r2, r3, #4
 8008332:	602a      	str	r2, [r5, #0]
 8008334:	681d      	ldr	r5, [r3, #0]
 8008336:	6862      	ldr	r2, [r4, #4]
 8008338:	4628      	mov	r0, r5
 800833a:	f000 ffdd 	bl	80092f8 <memchr>
 800833e:	b108      	cbz	r0, 8008344 <_printf_i+0x1f4>
 8008340:	1b40      	subs	r0, r0, r5
 8008342:	6060      	str	r0, [r4, #4]
 8008344:	6863      	ldr	r3, [r4, #4]
 8008346:	6123      	str	r3, [r4, #16]
 8008348:	2300      	movs	r3, #0
 800834a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800834e:	e7a8      	b.n	80082a2 <_printf_i+0x152>
 8008350:	462a      	mov	r2, r5
 8008352:	4649      	mov	r1, r9
 8008354:	4640      	mov	r0, r8
 8008356:	6923      	ldr	r3, [r4, #16]
 8008358:	47d0      	blx	sl
 800835a:	3001      	adds	r0, #1
 800835c:	d0ab      	beq.n	80082b6 <_printf_i+0x166>
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	079b      	lsls	r3, r3, #30
 8008362:	d413      	bmi.n	800838c <_printf_i+0x23c>
 8008364:	68e0      	ldr	r0, [r4, #12]
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	4298      	cmp	r0, r3
 800836a:	bfb8      	it	lt
 800836c:	4618      	movlt	r0, r3
 800836e:	e7a4      	b.n	80082ba <_printf_i+0x16a>
 8008370:	2301      	movs	r3, #1
 8008372:	4632      	mov	r2, r6
 8008374:	4649      	mov	r1, r9
 8008376:	4640      	mov	r0, r8
 8008378:	47d0      	blx	sl
 800837a:	3001      	adds	r0, #1
 800837c:	d09b      	beq.n	80082b6 <_printf_i+0x166>
 800837e:	3501      	adds	r5, #1
 8008380:	68e3      	ldr	r3, [r4, #12]
 8008382:	9903      	ldr	r1, [sp, #12]
 8008384:	1a5b      	subs	r3, r3, r1
 8008386:	42ab      	cmp	r3, r5
 8008388:	dcf2      	bgt.n	8008370 <_printf_i+0x220>
 800838a:	e7eb      	b.n	8008364 <_printf_i+0x214>
 800838c:	2500      	movs	r5, #0
 800838e:	f104 0619 	add.w	r6, r4, #25
 8008392:	e7f5      	b.n	8008380 <_printf_i+0x230>
 8008394:	0800aa3a 	.word	0x0800aa3a
 8008398:	0800aa4b 	.word	0x0800aa4b

0800839c <iprintf>:
 800839c:	b40f      	push	{r0, r1, r2, r3}
 800839e:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <iprintf+0x2c>)
 80083a0:	b513      	push	{r0, r1, r4, lr}
 80083a2:	681c      	ldr	r4, [r3, #0]
 80083a4:	b124      	cbz	r4, 80083b0 <iprintf+0x14>
 80083a6:	69a3      	ldr	r3, [r4, #24]
 80083a8:	b913      	cbnz	r3, 80083b0 <iprintf+0x14>
 80083aa:	4620      	mov	r0, r4
 80083ac:	f000 fef6 	bl	800919c <__sinit>
 80083b0:	ab05      	add	r3, sp, #20
 80083b2:	4620      	mov	r0, r4
 80083b4:	9a04      	ldr	r2, [sp, #16]
 80083b6:	68a1      	ldr	r1, [r4, #8]
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	f001 fc45 	bl	8009c48 <_vfiprintf_r>
 80083be:	b002      	add	sp, #8
 80083c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083c4:	b004      	add	sp, #16
 80083c6:	4770      	bx	lr
 80083c8:	20000080 	.word	0x20000080

080083cc <strstr>:
 80083cc:	780a      	ldrb	r2, [r1, #0]
 80083ce:	b570      	push	{r4, r5, r6, lr}
 80083d0:	b96a      	cbnz	r2, 80083ee <strstr+0x22>
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d109      	bne.n	80083ec <strstr+0x20>
 80083d8:	460c      	mov	r4, r1
 80083da:	4605      	mov	r5, r0
 80083dc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0f6      	beq.n	80083d2 <strstr+0x6>
 80083e4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80083e8:	429e      	cmp	r6, r3
 80083ea:	d0f7      	beq.n	80083dc <strstr+0x10>
 80083ec:	3001      	adds	r0, #1
 80083ee:	7803      	ldrb	r3, [r0, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1ef      	bne.n	80083d4 <strstr+0x8>
 80083f4:	4618      	mov	r0, r3
 80083f6:	e7ec      	b.n	80083d2 <strstr+0x6>

080083f8 <quorem>:
 80083f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	6903      	ldr	r3, [r0, #16]
 80083fe:	690c      	ldr	r4, [r1, #16]
 8008400:	4607      	mov	r7, r0
 8008402:	42a3      	cmp	r3, r4
 8008404:	f2c0 8082 	blt.w	800850c <quorem+0x114>
 8008408:	3c01      	subs	r4, #1
 800840a:	f100 0514 	add.w	r5, r0, #20
 800840e:	f101 0814 	add.w	r8, r1, #20
 8008412:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008416:	9301      	str	r3, [sp, #4]
 8008418:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800841c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008420:	3301      	adds	r3, #1
 8008422:	429a      	cmp	r2, r3
 8008424:	fbb2 f6f3 	udiv	r6, r2, r3
 8008428:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800842c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008430:	d331      	bcc.n	8008496 <quorem+0x9e>
 8008432:	f04f 0e00 	mov.w	lr, #0
 8008436:	4640      	mov	r0, r8
 8008438:	46ac      	mov	ip, r5
 800843a:	46f2      	mov	sl, lr
 800843c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008440:	b293      	uxth	r3, r2
 8008442:	fb06 e303 	mla	r3, r6, r3, lr
 8008446:	0c12      	lsrs	r2, r2, #16
 8008448:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800844c:	b29b      	uxth	r3, r3
 800844e:	fb06 e202 	mla	r2, r6, r2, lr
 8008452:	ebaa 0303 	sub.w	r3, sl, r3
 8008456:	f8dc a000 	ldr.w	sl, [ip]
 800845a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800845e:	fa1f fa8a 	uxth.w	sl, sl
 8008462:	4453      	add	r3, sl
 8008464:	f8dc a000 	ldr.w	sl, [ip]
 8008468:	b292      	uxth	r2, r2
 800846a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800846e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008472:	b29b      	uxth	r3, r3
 8008474:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008478:	4581      	cmp	r9, r0
 800847a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800847e:	f84c 3b04 	str.w	r3, [ip], #4
 8008482:	d2db      	bcs.n	800843c <quorem+0x44>
 8008484:	f855 300b 	ldr.w	r3, [r5, fp]
 8008488:	b92b      	cbnz	r3, 8008496 <quorem+0x9e>
 800848a:	9b01      	ldr	r3, [sp, #4]
 800848c:	3b04      	subs	r3, #4
 800848e:	429d      	cmp	r5, r3
 8008490:	461a      	mov	r2, r3
 8008492:	d32f      	bcc.n	80084f4 <quorem+0xfc>
 8008494:	613c      	str	r4, [r7, #16]
 8008496:	4638      	mov	r0, r7
 8008498:	f001 f9ba 	bl	8009810 <__mcmp>
 800849c:	2800      	cmp	r0, #0
 800849e:	db25      	blt.n	80084ec <quorem+0xf4>
 80084a0:	4628      	mov	r0, r5
 80084a2:	f04f 0c00 	mov.w	ip, #0
 80084a6:	3601      	adds	r6, #1
 80084a8:	f858 1b04 	ldr.w	r1, [r8], #4
 80084ac:	f8d0 e000 	ldr.w	lr, [r0]
 80084b0:	b28b      	uxth	r3, r1
 80084b2:	ebac 0303 	sub.w	r3, ip, r3
 80084b6:	fa1f f28e 	uxth.w	r2, lr
 80084ba:	4413      	add	r3, r2
 80084bc:	0c0a      	lsrs	r2, r1, #16
 80084be:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80084c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084cc:	45c1      	cmp	r9, r8
 80084ce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80084d2:	f840 3b04 	str.w	r3, [r0], #4
 80084d6:	d2e7      	bcs.n	80084a8 <quorem+0xb0>
 80084d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084e0:	b922      	cbnz	r2, 80084ec <quorem+0xf4>
 80084e2:	3b04      	subs	r3, #4
 80084e4:	429d      	cmp	r5, r3
 80084e6:	461a      	mov	r2, r3
 80084e8:	d30a      	bcc.n	8008500 <quorem+0x108>
 80084ea:	613c      	str	r4, [r7, #16]
 80084ec:	4630      	mov	r0, r6
 80084ee:	b003      	add	sp, #12
 80084f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f4:	6812      	ldr	r2, [r2, #0]
 80084f6:	3b04      	subs	r3, #4
 80084f8:	2a00      	cmp	r2, #0
 80084fa:	d1cb      	bne.n	8008494 <quorem+0x9c>
 80084fc:	3c01      	subs	r4, #1
 80084fe:	e7c6      	b.n	800848e <quorem+0x96>
 8008500:	6812      	ldr	r2, [r2, #0]
 8008502:	3b04      	subs	r3, #4
 8008504:	2a00      	cmp	r2, #0
 8008506:	d1f0      	bne.n	80084ea <quorem+0xf2>
 8008508:	3c01      	subs	r4, #1
 800850a:	e7eb      	b.n	80084e4 <quorem+0xec>
 800850c:	2000      	movs	r0, #0
 800850e:	e7ee      	b.n	80084ee <quorem+0xf6>

08008510 <_dtoa_r>:
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	4616      	mov	r6, r2
 8008516:	461f      	mov	r7, r3
 8008518:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800851a:	b099      	sub	sp, #100	; 0x64
 800851c:	4605      	mov	r5, r0
 800851e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008522:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008526:	b974      	cbnz	r4, 8008546 <_dtoa_r+0x36>
 8008528:	2010      	movs	r0, #16
 800852a:	f000 fedd 	bl	80092e8 <malloc>
 800852e:	4602      	mov	r2, r0
 8008530:	6268      	str	r0, [r5, #36]	; 0x24
 8008532:	b920      	cbnz	r0, 800853e <_dtoa_r+0x2e>
 8008534:	21ea      	movs	r1, #234	; 0xea
 8008536:	4ba8      	ldr	r3, [pc, #672]	; (80087d8 <_dtoa_r+0x2c8>)
 8008538:	48a8      	ldr	r0, [pc, #672]	; (80087dc <_dtoa_r+0x2cc>)
 800853a:	f001 fddb 	bl	800a0f4 <__assert_func>
 800853e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008542:	6004      	str	r4, [r0, #0]
 8008544:	60c4      	str	r4, [r0, #12]
 8008546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008548:	6819      	ldr	r1, [r3, #0]
 800854a:	b151      	cbz	r1, 8008562 <_dtoa_r+0x52>
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	2301      	movs	r3, #1
 8008550:	4093      	lsls	r3, r2
 8008552:	604a      	str	r2, [r1, #4]
 8008554:	608b      	str	r3, [r1, #8]
 8008556:	4628      	mov	r0, r5
 8008558:	f000 ff1c 	bl	8009394 <_Bfree>
 800855c:	2200      	movs	r2, #0
 800855e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	1e3b      	subs	r3, r7, #0
 8008564:	bfaf      	iteee	ge
 8008566:	2300      	movge	r3, #0
 8008568:	2201      	movlt	r2, #1
 800856a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800856e:	9305      	strlt	r3, [sp, #20]
 8008570:	bfa8      	it	ge
 8008572:	f8c8 3000 	strge.w	r3, [r8]
 8008576:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800857a:	4b99      	ldr	r3, [pc, #612]	; (80087e0 <_dtoa_r+0x2d0>)
 800857c:	bfb8      	it	lt
 800857e:	f8c8 2000 	strlt.w	r2, [r8]
 8008582:	ea33 0309 	bics.w	r3, r3, r9
 8008586:	d119      	bne.n	80085bc <_dtoa_r+0xac>
 8008588:	f242 730f 	movw	r3, #9999	; 0x270f
 800858c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008594:	4333      	orrs	r3, r6
 8008596:	f000 857f 	beq.w	8009098 <_dtoa_r+0xb88>
 800859a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800859c:	b953      	cbnz	r3, 80085b4 <_dtoa_r+0xa4>
 800859e:	4b91      	ldr	r3, [pc, #580]	; (80087e4 <_dtoa_r+0x2d4>)
 80085a0:	e022      	b.n	80085e8 <_dtoa_r+0xd8>
 80085a2:	4b91      	ldr	r3, [pc, #580]	; (80087e8 <_dtoa_r+0x2d8>)
 80085a4:	9303      	str	r3, [sp, #12]
 80085a6:	3308      	adds	r3, #8
 80085a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80085aa:	6013      	str	r3, [r2, #0]
 80085ac:	9803      	ldr	r0, [sp, #12]
 80085ae:	b019      	add	sp, #100	; 0x64
 80085b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b4:	4b8b      	ldr	r3, [pc, #556]	; (80087e4 <_dtoa_r+0x2d4>)
 80085b6:	9303      	str	r3, [sp, #12]
 80085b8:	3303      	adds	r3, #3
 80085ba:	e7f5      	b.n	80085a8 <_dtoa_r+0x98>
 80085bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80085c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80085c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085c8:	2200      	movs	r2, #0
 80085ca:	2300      	movs	r3, #0
 80085cc:	f7f8 fa58 	bl	8000a80 <__aeabi_dcmpeq>
 80085d0:	4680      	mov	r8, r0
 80085d2:	b158      	cbz	r0, 80085ec <_dtoa_r+0xdc>
 80085d4:	2301      	movs	r3, #1
 80085d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 8558 	beq.w	8009092 <_dtoa_r+0xb82>
 80085e2:	4882      	ldr	r0, [pc, #520]	; (80087ec <_dtoa_r+0x2dc>)
 80085e4:	6018      	str	r0, [r3, #0]
 80085e6:	1e43      	subs	r3, r0, #1
 80085e8:	9303      	str	r3, [sp, #12]
 80085ea:	e7df      	b.n	80085ac <_dtoa_r+0x9c>
 80085ec:	ab16      	add	r3, sp, #88	; 0x58
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	ab17      	add	r3, sp, #92	; 0x5c
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	4628      	mov	r0, r5
 80085f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80085fa:	f001 f9b1 	bl	8009960 <__d2b>
 80085fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008602:	4683      	mov	fp, r0
 8008604:	2c00      	cmp	r4, #0
 8008606:	d07f      	beq.n	8008708 <_dtoa_r+0x1f8>
 8008608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800860c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800860e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008612:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008616:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800861a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800861e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008622:	2200      	movs	r2, #0
 8008624:	4b72      	ldr	r3, [pc, #456]	; (80087f0 <_dtoa_r+0x2e0>)
 8008626:	f7f7 fe0b 	bl	8000240 <__aeabi_dsub>
 800862a:	a365      	add	r3, pc, #404	; (adr r3, 80087c0 <_dtoa_r+0x2b0>)
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f7f7 ffbe 	bl	80005b0 <__aeabi_dmul>
 8008634:	a364      	add	r3, pc, #400	; (adr r3, 80087c8 <_dtoa_r+0x2b8>)
 8008636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863a:	f7f7 fe03 	bl	8000244 <__adddf3>
 800863e:	4606      	mov	r6, r0
 8008640:	4620      	mov	r0, r4
 8008642:	460f      	mov	r7, r1
 8008644:	f7f7 ff4a 	bl	80004dc <__aeabi_i2d>
 8008648:	a361      	add	r3, pc, #388	; (adr r3, 80087d0 <_dtoa_r+0x2c0>)
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	f7f7 ffaf 	bl	80005b0 <__aeabi_dmul>
 8008652:	4602      	mov	r2, r0
 8008654:	460b      	mov	r3, r1
 8008656:	4630      	mov	r0, r6
 8008658:	4639      	mov	r1, r7
 800865a:	f7f7 fdf3 	bl	8000244 <__adddf3>
 800865e:	4606      	mov	r6, r0
 8008660:	460f      	mov	r7, r1
 8008662:	f7f8 fa55 	bl	8000b10 <__aeabi_d2iz>
 8008666:	2200      	movs	r2, #0
 8008668:	4682      	mov	sl, r0
 800866a:	2300      	movs	r3, #0
 800866c:	4630      	mov	r0, r6
 800866e:	4639      	mov	r1, r7
 8008670:	f7f8 fa10 	bl	8000a94 <__aeabi_dcmplt>
 8008674:	b148      	cbz	r0, 800868a <_dtoa_r+0x17a>
 8008676:	4650      	mov	r0, sl
 8008678:	f7f7 ff30 	bl	80004dc <__aeabi_i2d>
 800867c:	4632      	mov	r2, r6
 800867e:	463b      	mov	r3, r7
 8008680:	f7f8 f9fe 	bl	8000a80 <__aeabi_dcmpeq>
 8008684:	b908      	cbnz	r0, 800868a <_dtoa_r+0x17a>
 8008686:	f10a 3aff 	add.w	sl, sl, #4294967295
 800868a:	f1ba 0f16 	cmp.w	sl, #22
 800868e:	d858      	bhi.n	8008742 <_dtoa_r+0x232>
 8008690:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008694:	4b57      	ldr	r3, [pc, #348]	; (80087f4 <_dtoa_r+0x2e4>)
 8008696:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f7f8 f9f9 	bl	8000a94 <__aeabi_dcmplt>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d04f      	beq.n	8008746 <_dtoa_r+0x236>
 80086a6:	2300      	movs	r3, #0
 80086a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80086ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80086b0:	1b1c      	subs	r4, r3, r4
 80086b2:	1e63      	subs	r3, r4, #1
 80086b4:	9309      	str	r3, [sp, #36]	; 0x24
 80086b6:	bf49      	itett	mi
 80086b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80086bc:	2300      	movpl	r3, #0
 80086be:	9306      	strmi	r3, [sp, #24]
 80086c0:	2300      	movmi	r3, #0
 80086c2:	bf54      	ite	pl
 80086c4:	9306      	strpl	r3, [sp, #24]
 80086c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80086c8:	f1ba 0f00 	cmp.w	sl, #0
 80086cc:	db3d      	blt.n	800874a <_dtoa_r+0x23a>
 80086ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80086d4:	4453      	add	r3, sl
 80086d6:	9309      	str	r3, [sp, #36]	; 0x24
 80086d8:	2300      	movs	r3, #0
 80086da:	930a      	str	r3, [sp, #40]	; 0x28
 80086dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086de:	2b09      	cmp	r3, #9
 80086e0:	f200 808c 	bhi.w	80087fc <_dtoa_r+0x2ec>
 80086e4:	2b05      	cmp	r3, #5
 80086e6:	bfc4      	itt	gt
 80086e8:	3b04      	subgt	r3, #4
 80086ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 80086ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086ee:	bfc8      	it	gt
 80086f0:	2400      	movgt	r4, #0
 80086f2:	f1a3 0302 	sub.w	r3, r3, #2
 80086f6:	bfd8      	it	le
 80086f8:	2401      	movle	r4, #1
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	f200 808a 	bhi.w	8008814 <_dtoa_r+0x304>
 8008700:	e8df f003 	tbb	[pc, r3]
 8008704:	5b4d4f2d 	.word	0x5b4d4f2d
 8008708:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800870c:	441c      	add	r4, r3
 800870e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008712:	2b20      	cmp	r3, #32
 8008714:	bfc3      	ittte	gt
 8008716:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800871a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800871e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008722:	f1c3 0320 	rsble	r3, r3, #32
 8008726:	bfc6      	itte	gt
 8008728:	fa26 f000 	lsrgt.w	r0, r6, r0
 800872c:	4318      	orrgt	r0, r3
 800872e:	fa06 f003 	lslle.w	r0, r6, r3
 8008732:	f7f7 fec3 	bl	80004bc <__aeabi_ui2d>
 8008736:	2301      	movs	r3, #1
 8008738:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800873c:	3c01      	subs	r4, #1
 800873e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008740:	e76f      	b.n	8008622 <_dtoa_r+0x112>
 8008742:	2301      	movs	r3, #1
 8008744:	e7b2      	b.n	80086ac <_dtoa_r+0x19c>
 8008746:	900f      	str	r0, [sp, #60]	; 0x3c
 8008748:	e7b1      	b.n	80086ae <_dtoa_r+0x19e>
 800874a:	9b06      	ldr	r3, [sp, #24]
 800874c:	eba3 030a 	sub.w	r3, r3, sl
 8008750:	9306      	str	r3, [sp, #24]
 8008752:	f1ca 0300 	rsb	r3, sl, #0
 8008756:	930a      	str	r3, [sp, #40]	; 0x28
 8008758:	2300      	movs	r3, #0
 800875a:	930e      	str	r3, [sp, #56]	; 0x38
 800875c:	e7be      	b.n	80086dc <_dtoa_r+0x1cc>
 800875e:	2300      	movs	r3, #0
 8008760:	930b      	str	r3, [sp, #44]	; 0x2c
 8008762:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008764:	2b00      	cmp	r3, #0
 8008766:	dc58      	bgt.n	800881a <_dtoa_r+0x30a>
 8008768:	f04f 0901 	mov.w	r9, #1
 800876c:	464b      	mov	r3, r9
 800876e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008772:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008776:	2200      	movs	r2, #0
 8008778:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800877a:	6042      	str	r2, [r0, #4]
 800877c:	2204      	movs	r2, #4
 800877e:	f102 0614 	add.w	r6, r2, #20
 8008782:	429e      	cmp	r6, r3
 8008784:	6841      	ldr	r1, [r0, #4]
 8008786:	d94e      	bls.n	8008826 <_dtoa_r+0x316>
 8008788:	4628      	mov	r0, r5
 800878a:	f000 fdc3 	bl	8009314 <_Balloc>
 800878e:	9003      	str	r0, [sp, #12]
 8008790:	2800      	cmp	r0, #0
 8008792:	d14c      	bne.n	800882e <_dtoa_r+0x31e>
 8008794:	4602      	mov	r2, r0
 8008796:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800879a:	4b17      	ldr	r3, [pc, #92]	; (80087f8 <_dtoa_r+0x2e8>)
 800879c:	e6cc      	b.n	8008538 <_dtoa_r+0x28>
 800879e:	2301      	movs	r3, #1
 80087a0:	e7de      	b.n	8008760 <_dtoa_r+0x250>
 80087a2:	2300      	movs	r3, #0
 80087a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80087a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087a8:	eb0a 0903 	add.w	r9, sl, r3
 80087ac:	f109 0301 	add.w	r3, r9, #1
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	9308      	str	r3, [sp, #32]
 80087b4:	bfb8      	it	lt
 80087b6:	2301      	movlt	r3, #1
 80087b8:	e7dd      	b.n	8008776 <_dtoa_r+0x266>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e7f2      	b.n	80087a4 <_dtoa_r+0x294>
 80087be:	bf00      	nop
 80087c0:	636f4361 	.word	0x636f4361
 80087c4:	3fd287a7 	.word	0x3fd287a7
 80087c8:	8b60c8b3 	.word	0x8b60c8b3
 80087cc:	3fc68a28 	.word	0x3fc68a28
 80087d0:	509f79fb 	.word	0x509f79fb
 80087d4:	3fd34413 	.word	0x3fd34413
 80087d8:	0800aa69 	.word	0x0800aa69
 80087dc:	0800aa80 	.word	0x0800aa80
 80087e0:	7ff00000 	.word	0x7ff00000
 80087e4:	0800aa65 	.word	0x0800aa65
 80087e8:	0800aa5c 	.word	0x0800aa5c
 80087ec:	0800aa39 	.word	0x0800aa39
 80087f0:	3ff80000 	.word	0x3ff80000
 80087f4:	0800abd0 	.word	0x0800abd0
 80087f8:	0800aadb 	.word	0x0800aadb
 80087fc:	2401      	movs	r4, #1
 80087fe:	2300      	movs	r3, #0
 8008800:	940b      	str	r4, [sp, #44]	; 0x2c
 8008802:	9322      	str	r3, [sp, #136]	; 0x88
 8008804:	f04f 39ff 	mov.w	r9, #4294967295
 8008808:	2200      	movs	r2, #0
 800880a:	2312      	movs	r3, #18
 800880c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008810:	9223      	str	r2, [sp, #140]	; 0x8c
 8008812:	e7b0      	b.n	8008776 <_dtoa_r+0x266>
 8008814:	2301      	movs	r3, #1
 8008816:	930b      	str	r3, [sp, #44]	; 0x2c
 8008818:	e7f4      	b.n	8008804 <_dtoa_r+0x2f4>
 800881a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800881e:	464b      	mov	r3, r9
 8008820:	f8cd 9020 	str.w	r9, [sp, #32]
 8008824:	e7a7      	b.n	8008776 <_dtoa_r+0x266>
 8008826:	3101      	adds	r1, #1
 8008828:	6041      	str	r1, [r0, #4]
 800882a:	0052      	lsls	r2, r2, #1
 800882c:	e7a7      	b.n	800877e <_dtoa_r+0x26e>
 800882e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008830:	9a03      	ldr	r2, [sp, #12]
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	9b08      	ldr	r3, [sp, #32]
 8008836:	2b0e      	cmp	r3, #14
 8008838:	f200 80a8 	bhi.w	800898c <_dtoa_r+0x47c>
 800883c:	2c00      	cmp	r4, #0
 800883e:	f000 80a5 	beq.w	800898c <_dtoa_r+0x47c>
 8008842:	f1ba 0f00 	cmp.w	sl, #0
 8008846:	dd34      	ble.n	80088b2 <_dtoa_r+0x3a2>
 8008848:	4a9a      	ldr	r2, [pc, #616]	; (8008ab4 <_dtoa_r+0x5a4>)
 800884a:	f00a 030f 	and.w	r3, sl, #15
 800884e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008852:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008856:	e9d3 3400 	ldrd	r3, r4, [r3]
 800885a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800885e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008862:	d016      	beq.n	8008892 <_dtoa_r+0x382>
 8008864:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008868:	4b93      	ldr	r3, [pc, #588]	; (8008ab8 <_dtoa_r+0x5a8>)
 800886a:	2703      	movs	r7, #3
 800886c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008870:	f7f7 ffc8 	bl	8000804 <__aeabi_ddiv>
 8008874:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008878:	f004 040f 	and.w	r4, r4, #15
 800887c:	4e8e      	ldr	r6, [pc, #568]	; (8008ab8 <_dtoa_r+0x5a8>)
 800887e:	b954      	cbnz	r4, 8008896 <_dtoa_r+0x386>
 8008880:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008888:	f7f7 ffbc 	bl	8000804 <__aeabi_ddiv>
 800888c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008890:	e029      	b.n	80088e6 <_dtoa_r+0x3d6>
 8008892:	2702      	movs	r7, #2
 8008894:	e7f2      	b.n	800887c <_dtoa_r+0x36c>
 8008896:	07e1      	lsls	r1, r4, #31
 8008898:	d508      	bpl.n	80088ac <_dtoa_r+0x39c>
 800889a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800889e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088a2:	f7f7 fe85 	bl	80005b0 <__aeabi_dmul>
 80088a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088aa:	3701      	adds	r7, #1
 80088ac:	1064      	asrs	r4, r4, #1
 80088ae:	3608      	adds	r6, #8
 80088b0:	e7e5      	b.n	800887e <_dtoa_r+0x36e>
 80088b2:	f000 80a5 	beq.w	8008a00 <_dtoa_r+0x4f0>
 80088b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088ba:	f1ca 0400 	rsb	r4, sl, #0
 80088be:	4b7d      	ldr	r3, [pc, #500]	; (8008ab4 <_dtoa_r+0x5a4>)
 80088c0:	f004 020f 	and.w	r2, r4, #15
 80088c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088cc:	f7f7 fe70 	bl	80005b0 <__aeabi_dmul>
 80088d0:	2702      	movs	r7, #2
 80088d2:	2300      	movs	r3, #0
 80088d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088d8:	4e77      	ldr	r6, [pc, #476]	; (8008ab8 <_dtoa_r+0x5a8>)
 80088da:	1124      	asrs	r4, r4, #4
 80088dc:	2c00      	cmp	r4, #0
 80088de:	f040 8084 	bne.w	80089ea <_dtoa_r+0x4da>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1d2      	bne.n	800888c <_dtoa_r+0x37c>
 80088e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 808b 	beq.w	8008a04 <_dtoa_r+0x4f4>
 80088ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80088f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80088f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80088fa:	2200      	movs	r2, #0
 80088fc:	4b6f      	ldr	r3, [pc, #444]	; (8008abc <_dtoa_r+0x5ac>)
 80088fe:	f7f8 f8c9 	bl	8000a94 <__aeabi_dcmplt>
 8008902:	2800      	cmp	r0, #0
 8008904:	d07e      	beq.n	8008a04 <_dtoa_r+0x4f4>
 8008906:	9b08      	ldr	r3, [sp, #32]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d07b      	beq.n	8008a04 <_dtoa_r+0x4f4>
 800890c:	f1b9 0f00 	cmp.w	r9, #0
 8008910:	dd38      	ble.n	8008984 <_dtoa_r+0x474>
 8008912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008916:	2200      	movs	r2, #0
 8008918:	4b69      	ldr	r3, [pc, #420]	; (8008ac0 <_dtoa_r+0x5b0>)
 800891a:	f7f7 fe49 	bl	80005b0 <__aeabi_dmul>
 800891e:	464c      	mov	r4, r9
 8008920:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008924:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008928:	3701      	adds	r7, #1
 800892a:	4638      	mov	r0, r7
 800892c:	f7f7 fdd6 	bl	80004dc <__aeabi_i2d>
 8008930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008934:	f7f7 fe3c 	bl	80005b0 <__aeabi_dmul>
 8008938:	2200      	movs	r2, #0
 800893a:	4b62      	ldr	r3, [pc, #392]	; (8008ac4 <_dtoa_r+0x5b4>)
 800893c:	f7f7 fc82 	bl	8000244 <__adddf3>
 8008940:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008944:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008948:	9611      	str	r6, [sp, #68]	; 0x44
 800894a:	2c00      	cmp	r4, #0
 800894c:	d15d      	bne.n	8008a0a <_dtoa_r+0x4fa>
 800894e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008952:	2200      	movs	r2, #0
 8008954:	4b5c      	ldr	r3, [pc, #368]	; (8008ac8 <_dtoa_r+0x5b8>)
 8008956:	f7f7 fc73 	bl	8000240 <__aeabi_dsub>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008962:	4633      	mov	r3, r6
 8008964:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008966:	f7f8 f8b3 	bl	8000ad0 <__aeabi_dcmpgt>
 800896a:	2800      	cmp	r0, #0
 800896c:	f040 829c 	bne.w	8008ea8 <_dtoa_r+0x998>
 8008970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008974:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008976:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800897a:	f7f8 f88b 	bl	8000a94 <__aeabi_dcmplt>
 800897e:	2800      	cmp	r0, #0
 8008980:	f040 8290 	bne.w	8008ea4 <_dtoa_r+0x994>
 8008984:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008988:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800898c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800898e:	2b00      	cmp	r3, #0
 8008990:	f2c0 8152 	blt.w	8008c38 <_dtoa_r+0x728>
 8008994:	f1ba 0f0e 	cmp.w	sl, #14
 8008998:	f300 814e 	bgt.w	8008c38 <_dtoa_r+0x728>
 800899c:	4b45      	ldr	r3, [pc, #276]	; (8008ab4 <_dtoa_r+0x5a4>)
 800899e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80089aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f280 80db 	bge.w	8008b68 <_dtoa_r+0x658>
 80089b2:	9b08      	ldr	r3, [sp, #32]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f300 80d7 	bgt.w	8008b68 <_dtoa_r+0x658>
 80089ba:	f040 8272 	bne.w	8008ea2 <_dtoa_r+0x992>
 80089be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089c2:	2200      	movs	r2, #0
 80089c4:	4b40      	ldr	r3, [pc, #256]	; (8008ac8 <_dtoa_r+0x5b8>)
 80089c6:	f7f7 fdf3 	bl	80005b0 <__aeabi_dmul>
 80089ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ce:	f7f8 f875 	bl	8000abc <__aeabi_dcmpge>
 80089d2:	9c08      	ldr	r4, [sp, #32]
 80089d4:	4626      	mov	r6, r4
 80089d6:	2800      	cmp	r0, #0
 80089d8:	f040 8248 	bne.w	8008e6c <_dtoa_r+0x95c>
 80089dc:	2331      	movs	r3, #49	; 0x31
 80089de:	9f03      	ldr	r7, [sp, #12]
 80089e0:	f10a 0a01 	add.w	sl, sl, #1
 80089e4:	f807 3b01 	strb.w	r3, [r7], #1
 80089e8:	e244      	b.n	8008e74 <_dtoa_r+0x964>
 80089ea:	07e2      	lsls	r2, r4, #31
 80089ec:	d505      	bpl.n	80089fa <_dtoa_r+0x4ea>
 80089ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089f2:	f7f7 fddd 	bl	80005b0 <__aeabi_dmul>
 80089f6:	2301      	movs	r3, #1
 80089f8:	3701      	adds	r7, #1
 80089fa:	1064      	asrs	r4, r4, #1
 80089fc:	3608      	adds	r6, #8
 80089fe:	e76d      	b.n	80088dc <_dtoa_r+0x3cc>
 8008a00:	2702      	movs	r7, #2
 8008a02:	e770      	b.n	80088e6 <_dtoa_r+0x3d6>
 8008a04:	46d0      	mov	r8, sl
 8008a06:	9c08      	ldr	r4, [sp, #32]
 8008a08:	e78f      	b.n	800892a <_dtoa_r+0x41a>
 8008a0a:	9903      	ldr	r1, [sp, #12]
 8008a0c:	4b29      	ldr	r3, [pc, #164]	; (8008ab4 <_dtoa_r+0x5a4>)
 8008a0e:	4421      	add	r1, r4
 8008a10:	9112      	str	r1, [sp, #72]	; 0x48
 8008a12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a18:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008a1c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a20:	2900      	cmp	r1, #0
 8008a22:	d055      	beq.n	8008ad0 <_dtoa_r+0x5c0>
 8008a24:	2000      	movs	r0, #0
 8008a26:	4929      	ldr	r1, [pc, #164]	; (8008acc <_dtoa_r+0x5bc>)
 8008a28:	f7f7 feec 	bl	8000804 <__aeabi_ddiv>
 8008a2c:	463b      	mov	r3, r7
 8008a2e:	4632      	mov	r2, r6
 8008a30:	f7f7 fc06 	bl	8000240 <__aeabi_dsub>
 8008a34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008a38:	9f03      	ldr	r7, [sp, #12]
 8008a3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a3e:	f7f8 f867 	bl	8000b10 <__aeabi_d2iz>
 8008a42:	4604      	mov	r4, r0
 8008a44:	f7f7 fd4a 	bl	80004dc <__aeabi_i2d>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a50:	f7f7 fbf6 	bl	8000240 <__aeabi_dsub>
 8008a54:	4602      	mov	r2, r0
 8008a56:	460b      	mov	r3, r1
 8008a58:	3430      	adds	r4, #48	; 0x30
 8008a5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a62:	f807 4b01 	strb.w	r4, [r7], #1
 8008a66:	f7f8 f815 	bl	8000a94 <__aeabi_dcmplt>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d174      	bne.n	8008b58 <_dtoa_r+0x648>
 8008a6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a72:	2000      	movs	r0, #0
 8008a74:	4911      	ldr	r1, [pc, #68]	; (8008abc <_dtoa_r+0x5ac>)
 8008a76:	f7f7 fbe3 	bl	8000240 <__aeabi_dsub>
 8008a7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a7e:	f7f8 f809 	bl	8000a94 <__aeabi_dcmplt>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	f040 80b7 	bne.w	8008bf6 <_dtoa_r+0x6e6>
 8008a88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a8a:	429f      	cmp	r7, r3
 8008a8c:	f43f af7a 	beq.w	8008984 <_dtoa_r+0x474>
 8008a90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a94:	2200      	movs	r2, #0
 8008a96:	4b0a      	ldr	r3, [pc, #40]	; (8008ac0 <_dtoa_r+0x5b0>)
 8008a98:	f7f7 fd8a 	bl	80005b0 <__aeabi_dmul>
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008aa6:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <_dtoa_r+0x5b0>)
 8008aa8:	f7f7 fd82 	bl	80005b0 <__aeabi_dmul>
 8008aac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ab0:	e7c3      	b.n	8008a3a <_dtoa_r+0x52a>
 8008ab2:	bf00      	nop
 8008ab4:	0800abd0 	.word	0x0800abd0
 8008ab8:	0800aba8 	.word	0x0800aba8
 8008abc:	3ff00000 	.word	0x3ff00000
 8008ac0:	40240000 	.word	0x40240000
 8008ac4:	401c0000 	.word	0x401c0000
 8008ac8:	40140000 	.word	0x40140000
 8008acc:	3fe00000 	.word	0x3fe00000
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	4639      	mov	r1, r7
 8008ad4:	f7f7 fd6c 	bl	80005b0 <__aeabi_dmul>
 8008ad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ada:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ade:	9c03      	ldr	r4, [sp, #12]
 8008ae0:	9314      	str	r3, [sp, #80]	; 0x50
 8008ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ae6:	f7f8 f813 	bl	8000b10 <__aeabi_d2iz>
 8008aea:	9015      	str	r0, [sp, #84]	; 0x54
 8008aec:	f7f7 fcf6 	bl	80004dc <__aeabi_i2d>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008af8:	f7f7 fba2 	bl	8000240 <__aeabi_dsub>
 8008afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008afe:	4606      	mov	r6, r0
 8008b00:	3330      	adds	r3, #48	; 0x30
 8008b02:	f804 3b01 	strb.w	r3, [r4], #1
 8008b06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b08:	460f      	mov	r7, r1
 8008b0a:	429c      	cmp	r4, r3
 8008b0c:	f04f 0200 	mov.w	r2, #0
 8008b10:	d124      	bne.n	8008b5c <_dtoa_r+0x64c>
 8008b12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b16:	4bb0      	ldr	r3, [pc, #704]	; (8008dd8 <_dtoa_r+0x8c8>)
 8008b18:	f7f7 fb94 	bl	8000244 <__adddf3>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	460b      	mov	r3, r1
 8008b20:	4630      	mov	r0, r6
 8008b22:	4639      	mov	r1, r7
 8008b24:	f7f7 ffd4 	bl	8000ad0 <__aeabi_dcmpgt>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d163      	bne.n	8008bf4 <_dtoa_r+0x6e4>
 8008b2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b30:	2000      	movs	r0, #0
 8008b32:	49a9      	ldr	r1, [pc, #676]	; (8008dd8 <_dtoa_r+0x8c8>)
 8008b34:	f7f7 fb84 	bl	8000240 <__aeabi_dsub>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	4639      	mov	r1, r7
 8008b40:	f7f7 ffa8 	bl	8000a94 <__aeabi_dcmplt>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	f43f af1d 	beq.w	8008984 <_dtoa_r+0x474>
 8008b4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008b4c:	1e7b      	subs	r3, r7, #1
 8008b4e:	9314      	str	r3, [sp, #80]	; 0x50
 8008b50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008b54:	2b30      	cmp	r3, #48	; 0x30
 8008b56:	d0f8      	beq.n	8008b4a <_dtoa_r+0x63a>
 8008b58:	46c2      	mov	sl, r8
 8008b5a:	e03b      	b.n	8008bd4 <_dtoa_r+0x6c4>
 8008b5c:	4b9f      	ldr	r3, [pc, #636]	; (8008ddc <_dtoa_r+0x8cc>)
 8008b5e:	f7f7 fd27 	bl	80005b0 <__aeabi_dmul>
 8008b62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b66:	e7bc      	b.n	8008ae2 <_dtoa_r+0x5d2>
 8008b68:	9f03      	ldr	r7, [sp, #12]
 8008b6a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008b6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b72:	4640      	mov	r0, r8
 8008b74:	4649      	mov	r1, r9
 8008b76:	f7f7 fe45 	bl	8000804 <__aeabi_ddiv>
 8008b7a:	f7f7 ffc9 	bl	8000b10 <__aeabi_d2iz>
 8008b7e:	4604      	mov	r4, r0
 8008b80:	f7f7 fcac 	bl	80004dc <__aeabi_i2d>
 8008b84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b88:	f7f7 fd12 	bl	80005b0 <__aeabi_dmul>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4640      	mov	r0, r8
 8008b92:	4649      	mov	r1, r9
 8008b94:	f7f7 fb54 	bl	8000240 <__aeabi_dsub>
 8008b98:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008b9c:	f807 6b01 	strb.w	r6, [r7], #1
 8008ba0:	9e03      	ldr	r6, [sp, #12]
 8008ba2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008ba6:	1bbe      	subs	r6, r7, r6
 8008ba8:	45b4      	cmp	ip, r6
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	d136      	bne.n	8008c1e <_dtoa_r+0x70e>
 8008bb0:	f7f7 fb48 	bl	8000244 <__adddf3>
 8008bb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bb8:	4680      	mov	r8, r0
 8008bba:	4689      	mov	r9, r1
 8008bbc:	f7f7 ff88 	bl	8000ad0 <__aeabi_dcmpgt>
 8008bc0:	bb58      	cbnz	r0, 8008c1a <_dtoa_r+0x70a>
 8008bc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	4649      	mov	r1, r9
 8008bca:	f7f7 ff59 	bl	8000a80 <__aeabi_dcmpeq>
 8008bce:	b108      	cbz	r0, 8008bd4 <_dtoa_r+0x6c4>
 8008bd0:	07e1      	lsls	r1, r4, #31
 8008bd2:	d422      	bmi.n	8008c1a <_dtoa_r+0x70a>
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	4659      	mov	r1, fp
 8008bd8:	f000 fbdc 	bl	8009394 <_Bfree>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	703b      	strb	r3, [r7, #0]
 8008be0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008be2:	f10a 0001 	add.w	r0, sl, #1
 8008be6:	6018      	str	r0, [r3, #0]
 8008be8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f43f acde 	beq.w	80085ac <_dtoa_r+0x9c>
 8008bf0:	601f      	str	r7, [r3, #0]
 8008bf2:	e4db      	b.n	80085ac <_dtoa_r+0x9c>
 8008bf4:	4627      	mov	r7, r4
 8008bf6:	463b      	mov	r3, r7
 8008bf8:	461f      	mov	r7, r3
 8008bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bfe:	2a39      	cmp	r2, #57	; 0x39
 8008c00:	d107      	bne.n	8008c12 <_dtoa_r+0x702>
 8008c02:	9a03      	ldr	r2, [sp, #12]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d1f7      	bne.n	8008bf8 <_dtoa_r+0x6e8>
 8008c08:	2230      	movs	r2, #48	; 0x30
 8008c0a:	9903      	ldr	r1, [sp, #12]
 8008c0c:	f108 0801 	add.w	r8, r8, #1
 8008c10:	700a      	strb	r2, [r1, #0]
 8008c12:	781a      	ldrb	r2, [r3, #0]
 8008c14:	3201      	adds	r2, #1
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	e79e      	b.n	8008b58 <_dtoa_r+0x648>
 8008c1a:	46d0      	mov	r8, sl
 8008c1c:	e7eb      	b.n	8008bf6 <_dtoa_r+0x6e6>
 8008c1e:	2200      	movs	r2, #0
 8008c20:	4b6e      	ldr	r3, [pc, #440]	; (8008ddc <_dtoa_r+0x8cc>)
 8008c22:	f7f7 fcc5 	bl	80005b0 <__aeabi_dmul>
 8008c26:	2200      	movs	r2, #0
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4680      	mov	r8, r0
 8008c2c:	4689      	mov	r9, r1
 8008c2e:	f7f7 ff27 	bl	8000a80 <__aeabi_dcmpeq>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d09b      	beq.n	8008b6e <_dtoa_r+0x65e>
 8008c36:	e7cd      	b.n	8008bd4 <_dtoa_r+0x6c4>
 8008c38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c3a:	2a00      	cmp	r2, #0
 8008c3c:	f000 80d0 	beq.w	8008de0 <_dtoa_r+0x8d0>
 8008c40:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008c42:	2a01      	cmp	r2, #1
 8008c44:	f300 80ae 	bgt.w	8008da4 <_dtoa_r+0x894>
 8008c48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c4a:	2a00      	cmp	r2, #0
 8008c4c:	f000 80a6 	beq.w	8008d9c <_dtoa_r+0x88c>
 8008c50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c56:	9f06      	ldr	r7, [sp, #24]
 8008c58:	9a06      	ldr	r2, [sp, #24]
 8008c5a:	2101      	movs	r1, #1
 8008c5c:	441a      	add	r2, r3
 8008c5e:	9206      	str	r2, [sp, #24]
 8008c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c62:	4628      	mov	r0, r5
 8008c64:	441a      	add	r2, r3
 8008c66:	9209      	str	r2, [sp, #36]	; 0x24
 8008c68:	f000 fc4a 	bl	8009500 <__i2b>
 8008c6c:	4606      	mov	r6, r0
 8008c6e:	2f00      	cmp	r7, #0
 8008c70:	dd0c      	ble.n	8008c8c <_dtoa_r+0x77c>
 8008c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	dd09      	ble.n	8008c8c <_dtoa_r+0x77c>
 8008c78:	42bb      	cmp	r3, r7
 8008c7a:	bfa8      	it	ge
 8008c7c:	463b      	movge	r3, r7
 8008c7e:	9a06      	ldr	r2, [sp, #24]
 8008c80:	1aff      	subs	r7, r7, r3
 8008c82:	1ad2      	subs	r2, r2, r3
 8008c84:	9206      	str	r2, [sp, #24]
 8008c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c8e:	b1f3      	cbz	r3, 8008cce <_dtoa_r+0x7be>
 8008c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 80a8 	beq.w	8008de8 <_dtoa_r+0x8d8>
 8008c98:	2c00      	cmp	r4, #0
 8008c9a:	dd10      	ble.n	8008cbe <_dtoa_r+0x7ae>
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	4622      	mov	r2, r4
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f000 fceb 	bl	800967c <__pow5mult>
 8008ca6:	465a      	mov	r2, fp
 8008ca8:	4601      	mov	r1, r0
 8008caa:	4606      	mov	r6, r0
 8008cac:	4628      	mov	r0, r5
 8008cae:	f000 fc3d 	bl	800952c <__multiply>
 8008cb2:	4680      	mov	r8, r0
 8008cb4:	4659      	mov	r1, fp
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f000 fb6c 	bl	8009394 <_Bfree>
 8008cbc:	46c3      	mov	fp, r8
 8008cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc0:	1b1a      	subs	r2, r3, r4
 8008cc2:	d004      	beq.n	8008cce <_dtoa_r+0x7be>
 8008cc4:	4659      	mov	r1, fp
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f000 fcd8 	bl	800967c <__pow5mult>
 8008ccc:	4683      	mov	fp, r0
 8008cce:	2101      	movs	r1, #1
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	f000 fc15 	bl	8009500 <__i2b>
 8008cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cd8:	4604      	mov	r4, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f340 8086 	ble.w	8008dec <_dtoa_r+0x8dc>
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4601      	mov	r1, r0
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	f000 fcc9 	bl	800967c <__pow5mult>
 8008cea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cec:	4604      	mov	r4, r0
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	dd7f      	ble.n	8008df2 <_dtoa_r+0x8e2>
 8008cf2:	f04f 0800 	mov.w	r8, #0
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cfc:	6918      	ldr	r0, [r3, #16]
 8008cfe:	f000 fbb1 	bl	8009464 <__hi0bits>
 8008d02:	f1c0 0020 	rsb	r0, r0, #32
 8008d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d08:	4418      	add	r0, r3
 8008d0a:	f010 001f 	ands.w	r0, r0, #31
 8008d0e:	f000 8092 	beq.w	8008e36 <_dtoa_r+0x926>
 8008d12:	f1c0 0320 	rsb	r3, r0, #32
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	f340 808a 	ble.w	8008e30 <_dtoa_r+0x920>
 8008d1c:	f1c0 001c 	rsb	r0, r0, #28
 8008d20:	9b06      	ldr	r3, [sp, #24]
 8008d22:	4407      	add	r7, r0
 8008d24:	4403      	add	r3, r0
 8008d26:	9306      	str	r3, [sp, #24]
 8008d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d2a:	4403      	add	r3, r0
 8008d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2e:	9b06      	ldr	r3, [sp, #24]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	dd05      	ble.n	8008d40 <_dtoa_r+0x830>
 8008d34:	4659      	mov	r1, fp
 8008d36:	461a      	mov	r2, r3
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f000 fcf9 	bl	8009730 <__lshift>
 8008d3e:	4683      	mov	fp, r0
 8008d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dd05      	ble.n	8008d52 <_dtoa_r+0x842>
 8008d46:	4621      	mov	r1, r4
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f000 fcf0 	bl	8009730 <__lshift>
 8008d50:	4604      	mov	r4, r0
 8008d52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d070      	beq.n	8008e3a <_dtoa_r+0x92a>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4658      	mov	r0, fp
 8008d5c:	f000 fd58 	bl	8009810 <__mcmp>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	da6a      	bge.n	8008e3a <_dtoa_r+0x92a>
 8008d64:	2300      	movs	r3, #0
 8008d66:	4659      	mov	r1, fp
 8008d68:	220a      	movs	r2, #10
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f000 fb34 	bl	80093d8 <__multadd>
 8008d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d72:	4683      	mov	fp, r0
 8008d74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 8194 	beq.w	80090a6 <_dtoa_r+0xb96>
 8008d7e:	4631      	mov	r1, r6
 8008d80:	2300      	movs	r3, #0
 8008d82:	220a      	movs	r2, #10
 8008d84:	4628      	mov	r0, r5
 8008d86:	f000 fb27 	bl	80093d8 <__multadd>
 8008d8a:	f1b9 0f00 	cmp.w	r9, #0
 8008d8e:	4606      	mov	r6, r0
 8008d90:	f300 8093 	bgt.w	8008eba <_dtoa_r+0x9aa>
 8008d94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	dc57      	bgt.n	8008e4a <_dtoa_r+0x93a>
 8008d9a:	e08e      	b.n	8008eba <_dtoa_r+0x9aa>
 8008d9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008d9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008da2:	e757      	b.n	8008c54 <_dtoa_r+0x744>
 8008da4:	9b08      	ldr	r3, [sp, #32]
 8008da6:	1e5c      	subs	r4, r3, #1
 8008da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008daa:	42a3      	cmp	r3, r4
 8008dac:	bfb7      	itett	lt
 8008dae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008db0:	1b1c      	subge	r4, r3, r4
 8008db2:	1ae2      	sublt	r2, r4, r3
 8008db4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008db6:	bfbe      	ittt	lt
 8008db8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008dba:	189b      	addlt	r3, r3, r2
 8008dbc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008dbe:	9b08      	ldr	r3, [sp, #32]
 8008dc0:	bfb8      	it	lt
 8008dc2:	2400      	movlt	r4, #0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	bfbb      	ittet	lt
 8008dc8:	9b06      	ldrlt	r3, [sp, #24]
 8008dca:	9a08      	ldrlt	r2, [sp, #32]
 8008dcc:	9f06      	ldrge	r7, [sp, #24]
 8008dce:	1a9f      	sublt	r7, r3, r2
 8008dd0:	bfac      	ite	ge
 8008dd2:	9b08      	ldrge	r3, [sp, #32]
 8008dd4:	2300      	movlt	r3, #0
 8008dd6:	e73f      	b.n	8008c58 <_dtoa_r+0x748>
 8008dd8:	3fe00000 	.word	0x3fe00000
 8008ddc:	40240000 	.word	0x40240000
 8008de0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008de2:	9f06      	ldr	r7, [sp, #24]
 8008de4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008de6:	e742      	b.n	8008c6e <_dtoa_r+0x75e>
 8008de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dea:	e76b      	b.n	8008cc4 <_dtoa_r+0x7b4>
 8008dec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	dc19      	bgt.n	8008e26 <_dtoa_r+0x916>
 8008df2:	9b04      	ldr	r3, [sp, #16]
 8008df4:	b9bb      	cbnz	r3, 8008e26 <_dtoa_r+0x916>
 8008df6:	9b05      	ldr	r3, [sp, #20]
 8008df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dfc:	b99b      	cbnz	r3, 8008e26 <_dtoa_r+0x916>
 8008dfe:	9b05      	ldr	r3, [sp, #20]
 8008e00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e04:	0d1b      	lsrs	r3, r3, #20
 8008e06:	051b      	lsls	r3, r3, #20
 8008e08:	b183      	cbz	r3, 8008e2c <_dtoa_r+0x91c>
 8008e0a:	f04f 0801 	mov.w	r8, #1
 8008e0e:	9b06      	ldr	r3, [sp, #24]
 8008e10:	3301      	adds	r3, #1
 8008e12:	9306      	str	r3, [sp, #24]
 8008e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e16:	3301      	adds	r3, #1
 8008e18:	9309      	str	r3, [sp, #36]	; 0x24
 8008e1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f47f af6a 	bne.w	8008cf6 <_dtoa_r+0x7e6>
 8008e22:	2001      	movs	r0, #1
 8008e24:	e76f      	b.n	8008d06 <_dtoa_r+0x7f6>
 8008e26:	f04f 0800 	mov.w	r8, #0
 8008e2a:	e7f6      	b.n	8008e1a <_dtoa_r+0x90a>
 8008e2c:	4698      	mov	r8, r3
 8008e2e:	e7f4      	b.n	8008e1a <_dtoa_r+0x90a>
 8008e30:	f43f af7d 	beq.w	8008d2e <_dtoa_r+0x81e>
 8008e34:	4618      	mov	r0, r3
 8008e36:	301c      	adds	r0, #28
 8008e38:	e772      	b.n	8008d20 <_dtoa_r+0x810>
 8008e3a:	9b08      	ldr	r3, [sp, #32]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	dc36      	bgt.n	8008eae <_dtoa_r+0x99e>
 8008e40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	dd33      	ble.n	8008eae <_dtoa_r+0x99e>
 8008e46:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e4a:	f1b9 0f00 	cmp.w	r9, #0
 8008e4e:	d10d      	bne.n	8008e6c <_dtoa_r+0x95c>
 8008e50:	4621      	mov	r1, r4
 8008e52:	464b      	mov	r3, r9
 8008e54:	2205      	movs	r2, #5
 8008e56:	4628      	mov	r0, r5
 8008e58:	f000 fabe 	bl	80093d8 <__multadd>
 8008e5c:	4601      	mov	r1, r0
 8008e5e:	4604      	mov	r4, r0
 8008e60:	4658      	mov	r0, fp
 8008e62:	f000 fcd5 	bl	8009810 <__mcmp>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	f73f adb8 	bgt.w	80089dc <_dtoa_r+0x4cc>
 8008e6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e6e:	9f03      	ldr	r7, [sp, #12]
 8008e70:	ea6f 0a03 	mvn.w	sl, r3
 8008e74:	f04f 0800 	mov.w	r8, #0
 8008e78:	4621      	mov	r1, r4
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	f000 fa8a 	bl	8009394 <_Bfree>
 8008e80:	2e00      	cmp	r6, #0
 8008e82:	f43f aea7 	beq.w	8008bd4 <_dtoa_r+0x6c4>
 8008e86:	f1b8 0f00 	cmp.w	r8, #0
 8008e8a:	d005      	beq.n	8008e98 <_dtoa_r+0x988>
 8008e8c:	45b0      	cmp	r8, r6
 8008e8e:	d003      	beq.n	8008e98 <_dtoa_r+0x988>
 8008e90:	4641      	mov	r1, r8
 8008e92:	4628      	mov	r0, r5
 8008e94:	f000 fa7e 	bl	8009394 <_Bfree>
 8008e98:	4631      	mov	r1, r6
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f000 fa7a 	bl	8009394 <_Bfree>
 8008ea0:	e698      	b.n	8008bd4 <_dtoa_r+0x6c4>
 8008ea2:	2400      	movs	r4, #0
 8008ea4:	4626      	mov	r6, r4
 8008ea6:	e7e1      	b.n	8008e6c <_dtoa_r+0x95c>
 8008ea8:	46c2      	mov	sl, r8
 8008eaa:	4626      	mov	r6, r4
 8008eac:	e596      	b.n	80089dc <_dtoa_r+0x4cc>
 8008eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f000 80fd 	beq.w	80090b4 <_dtoa_r+0xba4>
 8008eba:	2f00      	cmp	r7, #0
 8008ebc:	dd05      	ble.n	8008eca <_dtoa_r+0x9ba>
 8008ebe:	4631      	mov	r1, r6
 8008ec0:	463a      	mov	r2, r7
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	f000 fc34 	bl	8009730 <__lshift>
 8008ec8:	4606      	mov	r6, r0
 8008eca:	f1b8 0f00 	cmp.w	r8, #0
 8008ece:	d05c      	beq.n	8008f8a <_dtoa_r+0xa7a>
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	6871      	ldr	r1, [r6, #4]
 8008ed4:	f000 fa1e 	bl	8009314 <_Balloc>
 8008ed8:	4607      	mov	r7, r0
 8008eda:	b928      	cbnz	r0, 8008ee8 <_dtoa_r+0x9d8>
 8008edc:	4602      	mov	r2, r0
 8008ede:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ee2:	4b7f      	ldr	r3, [pc, #508]	; (80090e0 <_dtoa_r+0xbd0>)
 8008ee4:	f7ff bb28 	b.w	8008538 <_dtoa_r+0x28>
 8008ee8:	6932      	ldr	r2, [r6, #16]
 8008eea:	f106 010c 	add.w	r1, r6, #12
 8008eee:	3202      	adds	r2, #2
 8008ef0:	0092      	lsls	r2, r2, #2
 8008ef2:	300c      	adds	r0, #12
 8008ef4:	f7fe fddc 	bl	8007ab0 <memcpy>
 8008ef8:	2201      	movs	r2, #1
 8008efa:	4639      	mov	r1, r7
 8008efc:	4628      	mov	r0, r5
 8008efe:	f000 fc17 	bl	8009730 <__lshift>
 8008f02:	46b0      	mov	r8, r6
 8008f04:	4606      	mov	r6, r0
 8008f06:	9b03      	ldr	r3, [sp, #12]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	9308      	str	r3, [sp, #32]
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	444b      	add	r3, r9
 8008f10:	930a      	str	r3, [sp, #40]	; 0x28
 8008f12:	9b04      	ldr	r3, [sp, #16]
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	9309      	str	r3, [sp, #36]	; 0x24
 8008f1a:	9b08      	ldr	r3, [sp, #32]
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	4658      	mov	r0, fp
 8008f22:	9304      	str	r3, [sp, #16]
 8008f24:	f7ff fa68 	bl	80083f8 <quorem>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	4641      	mov	r1, r8
 8008f2c:	3330      	adds	r3, #48	; 0x30
 8008f2e:	9006      	str	r0, [sp, #24]
 8008f30:	4658      	mov	r0, fp
 8008f32:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f34:	f000 fc6c 	bl	8009810 <__mcmp>
 8008f38:	4632      	mov	r2, r6
 8008f3a:	4681      	mov	r9, r0
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	4628      	mov	r0, r5
 8008f40:	f000 fc82 	bl	8009848 <__mdiff>
 8008f44:	68c2      	ldr	r2, [r0, #12]
 8008f46:	4607      	mov	r7, r0
 8008f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f4a:	bb02      	cbnz	r2, 8008f8e <_dtoa_r+0xa7e>
 8008f4c:	4601      	mov	r1, r0
 8008f4e:	4658      	mov	r0, fp
 8008f50:	f000 fc5e 	bl	8009810 <__mcmp>
 8008f54:	4602      	mov	r2, r0
 8008f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f58:	4639      	mov	r1, r7
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008f60:	f000 fa18 	bl	8009394 <_Bfree>
 8008f64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f68:	9f08      	ldr	r7, [sp, #32]
 8008f6a:	ea43 0102 	orr.w	r1, r3, r2
 8008f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f70:	430b      	orrs	r3, r1
 8008f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f74:	d10d      	bne.n	8008f92 <_dtoa_r+0xa82>
 8008f76:	2b39      	cmp	r3, #57	; 0x39
 8008f78:	d029      	beq.n	8008fce <_dtoa_r+0xabe>
 8008f7a:	f1b9 0f00 	cmp.w	r9, #0
 8008f7e:	dd01      	ble.n	8008f84 <_dtoa_r+0xa74>
 8008f80:	9b06      	ldr	r3, [sp, #24]
 8008f82:	3331      	adds	r3, #49	; 0x31
 8008f84:	9a04      	ldr	r2, [sp, #16]
 8008f86:	7013      	strb	r3, [r2, #0]
 8008f88:	e776      	b.n	8008e78 <_dtoa_r+0x968>
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	e7b9      	b.n	8008f02 <_dtoa_r+0x9f2>
 8008f8e:	2201      	movs	r2, #1
 8008f90:	e7e2      	b.n	8008f58 <_dtoa_r+0xa48>
 8008f92:	f1b9 0f00 	cmp.w	r9, #0
 8008f96:	db06      	blt.n	8008fa6 <_dtoa_r+0xa96>
 8008f98:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008f9a:	ea41 0909 	orr.w	r9, r1, r9
 8008f9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fa0:	ea59 0101 	orrs.w	r1, r9, r1
 8008fa4:	d120      	bne.n	8008fe8 <_dtoa_r+0xad8>
 8008fa6:	2a00      	cmp	r2, #0
 8008fa8:	ddec      	ble.n	8008f84 <_dtoa_r+0xa74>
 8008faa:	4659      	mov	r1, fp
 8008fac:	2201      	movs	r2, #1
 8008fae:	4628      	mov	r0, r5
 8008fb0:	9308      	str	r3, [sp, #32]
 8008fb2:	f000 fbbd 	bl	8009730 <__lshift>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4683      	mov	fp, r0
 8008fba:	f000 fc29 	bl	8009810 <__mcmp>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	9b08      	ldr	r3, [sp, #32]
 8008fc2:	dc02      	bgt.n	8008fca <_dtoa_r+0xaba>
 8008fc4:	d1de      	bne.n	8008f84 <_dtoa_r+0xa74>
 8008fc6:	07da      	lsls	r2, r3, #31
 8008fc8:	d5dc      	bpl.n	8008f84 <_dtoa_r+0xa74>
 8008fca:	2b39      	cmp	r3, #57	; 0x39
 8008fcc:	d1d8      	bne.n	8008f80 <_dtoa_r+0xa70>
 8008fce:	2339      	movs	r3, #57	; 0x39
 8008fd0:	9a04      	ldr	r2, [sp, #16]
 8008fd2:	7013      	strb	r3, [r2, #0]
 8008fd4:	463b      	mov	r3, r7
 8008fd6:	461f      	mov	r7, r3
 8008fd8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	2a39      	cmp	r2, #57	; 0x39
 8008fe0:	d050      	beq.n	8009084 <_dtoa_r+0xb74>
 8008fe2:	3201      	adds	r2, #1
 8008fe4:	701a      	strb	r2, [r3, #0]
 8008fe6:	e747      	b.n	8008e78 <_dtoa_r+0x968>
 8008fe8:	2a00      	cmp	r2, #0
 8008fea:	dd03      	ble.n	8008ff4 <_dtoa_r+0xae4>
 8008fec:	2b39      	cmp	r3, #57	; 0x39
 8008fee:	d0ee      	beq.n	8008fce <_dtoa_r+0xabe>
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	e7c7      	b.n	8008f84 <_dtoa_r+0xa74>
 8008ff4:	9a08      	ldr	r2, [sp, #32]
 8008ff6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ff8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ffc:	428a      	cmp	r2, r1
 8008ffe:	d02a      	beq.n	8009056 <_dtoa_r+0xb46>
 8009000:	4659      	mov	r1, fp
 8009002:	2300      	movs	r3, #0
 8009004:	220a      	movs	r2, #10
 8009006:	4628      	mov	r0, r5
 8009008:	f000 f9e6 	bl	80093d8 <__multadd>
 800900c:	45b0      	cmp	r8, r6
 800900e:	4683      	mov	fp, r0
 8009010:	f04f 0300 	mov.w	r3, #0
 8009014:	f04f 020a 	mov.w	r2, #10
 8009018:	4641      	mov	r1, r8
 800901a:	4628      	mov	r0, r5
 800901c:	d107      	bne.n	800902e <_dtoa_r+0xb1e>
 800901e:	f000 f9db 	bl	80093d8 <__multadd>
 8009022:	4680      	mov	r8, r0
 8009024:	4606      	mov	r6, r0
 8009026:	9b08      	ldr	r3, [sp, #32]
 8009028:	3301      	adds	r3, #1
 800902a:	9308      	str	r3, [sp, #32]
 800902c:	e775      	b.n	8008f1a <_dtoa_r+0xa0a>
 800902e:	f000 f9d3 	bl	80093d8 <__multadd>
 8009032:	4631      	mov	r1, r6
 8009034:	4680      	mov	r8, r0
 8009036:	2300      	movs	r3, #0
 8009038:	220a      	movs	r2, #10
 800903a:	4628      	mov	r0, r5
 800903c:	f000 f9cc 	bl	80093d8 <__multadd>
 8009040:	4606      	mov	r6, r0
 8009042:	e7f0      	b.n	8009026 <_dtoa_r+0xb16>
 8009044:	f1b9 0f00 	cmp.w	r9, #0
 8009048:	bfcc      	ite	gt
 800904a:	464f      	movgt	r7, r9
 800904c:	2701      	movle	r7, #1
 800904e:	f04f 0800 	mov.w	r8, #0
 8009052:	9a03      	ldr	r2, [sp, #12]
 8009054:	4417      	add	r7, r2
 8009056:	4659      	mov	r1, fp
 8009058:	2201      	movs	r2, #1
 800905a:	4628      	mov	r0, r5
 800905c:	9308      	str	r3, [sp, #32]
 800905e:	f000 fb67 	bl	8009730 <__lshift>
 8009062:	4621      	mov	r1, r4
 8009064:	4683      	mov	fp, r0
 8009066:	f000 fbd3 	bl	8009810 <__mcmp>
 800906a:	2800      	cmp	r0, #0
 800906c:	dcb2      	bgt.n	8008fd4 <_dtoa_r+0xac4>
 800906e:	d102      	bne.n	8009076 <_dtoa_r+0xb66>
 8009070:	9b08      	ldr	r3, [sp, #32]
 8009072:	07db      	lsls	r3, r3, #31
 8009074:	d4ae      	bmi.n	8008fd4 <_dtoa_r+0xac4>
 8009076:	463b      	mov	r3, r7
 8009078:	461f      	mov	r7, r3
 800907a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800907e:	2a30      	cmp	r2, #48	; 0x30
 8009080:	d0fa      	beq.n	8009078 <_dtoa_r+0xb68>
 8009082:	e6f9      	b.n	8008e78 <_dtoa_r+0x968>
 8009084:	9a03      	ldr	r2, [sp, #12]
 8009086:	429a      	cmp	r2, r3
 8009088:	d1a5      	bne.n	8008fd6 <_dtoa_r+0xac6>
 800908a:	2331      	movs	r3, #49	; 0x31
 800908c:	f10a 0a01 	add.w	sl, sl, #1
 8009090:	e779      	b.n	8008f86 <_dtoa_r+0xa76>
 8009092:	4b14      	ldr	r3, [pc, #80]	; (80090e4 <_dtoa_r+0xbd4>)
 8009094:	f7ff baa8 	b.w	80085e8 <_dtoa_r+0xd8>
 8009098:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800909a:	2b00      	cmp	r3, #0
 800909c:	f47f aa81 	bne.w	80085a2 <_dtoa_r+0x92>
 80090a0:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <_dtoa_r+0xbd8>)
 80090a2:	f7ff baa1 	b.w	80085e8 <_dtoa_r+0xd8>
 80090a6:	f1b9 0f00 	cmp.w	r9, #0
 80090aa:	dc03      	bgt.n	80090b4 <_dtoa_r+0xba4>
 80090ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	f73f aecb 	bgt.w	8008e4a <_dtoa_r+0x93a>
 80090b4:	9f03      	ldr	r7, [sp, #12]
 80090b6:	4621      	mov	r1, r4
 80090b8:	4658      	mov	r0, fp
 80090ba:	f7ff f99d 	bl	80083f8 <quorem>
 80090be:	9a03      	ldr	r2, [sp, #12]
 80090c0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80090c4:	f807 3b01 	strb.w	r3, [r7], #1
 80090c8:	1aba      	subs	r2, r7, r2
 80090ca:	4591      	cmp	r9, r2
 80090cc:	ddba      	ble.n	8009044 <_dtoa_r+0xb34>
 80090ce:	4659      	mov	r1, fp
 80090d0:	2300      	movs	r3, #0
 80090d2:	220a      	movs	r2, #10
 80090d4:	4628      	mov	r0, r5
 80090d6:	f000 f97f 	bl	80093d8 <__multadd>
 80090da:	4683      	mov	fp, r0
 80090dc:	e7eb      	b.n	80090b6 <_dtoa_r+0xba6>
 80090de:	bf00      	nop
 80090e0:	0800aadb 	.word	0x0800aadb
 80090e4:	0800aa38 	.word	0x0800aa38
 80090e8:	0800aa5c 	.word	0x0800aa5c

080090ec <std>:
 80090ec:	2300      	movs	r3, #0
 80090ee:	b510      	push	{r4, lr}
 80090f0:	4604      	mov	r4, r0
 80090f2:	e9c0 3300 	strd	r3, r3, [r0]
 80090f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090fa:	6083      	str	r3, [r0, #8]
 80090fc:	8181      	strh	r1, [r0, #12]
 80090fe:	6643      	str	r3, [r0, #100]	; 0x64
 8009100:	81c2      	strh	r2, [r0, #14]
 8009102:	6183      	str	r3, [r0, #24]
 8009104:	4619      	mov	r1, r3
 8009106:	2208      	movs	r2, #8
 8009108:	305c      	adds	r0, #92	; 0x5c
 800910a:	f7fe fcdf 	bl	8007acc <memset>
 800910e:	4b05      	ldr	r3, [pc, #20]	; (8009124 <std+0x38>)
 8009110:	6224      	str	r4, [r4, #32]
 8009112:	6263      	str	r3, [r4, #36]	; 0x24
 8009114:	4b04      	ldr	r3, [pc, #16]	; (8009128 <std+0x3c>)
 8009116:	62a3      	str	r3, [r4, #40]	; 0x28
 8009118:	4b04      	ldr	r3, [pc, #16]	; (800912c <std+0x40>)
 800911a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800911c:	4b04      	ldr	r3, [pc, #16]	; (8009130 <std+0x44>)
 800911e:	6323      	str	r3, [r4, #48]	; 0x30
 8009120:	bd10      	pop	{r4, pc}
 8009122:	bf00      	nop
 8009124:	08009ec9 	.word	0x08009ec9
 8009128:	08009eeb 	.word	0x08009eeb
 800912c:	08009f23 	.word	0x08009f23
 8009130:	08009f47 	.word	0x08009f47

08009134 <_cleanup_r>:
 8009134:	4901      	ldr	r1, [pc, #4]	; (800913c <_cleanup_r+0x8>)
 8009136:	f000 b8af 	b.w	8009298 <_fwalk_reent>
 800913a:	bf00      	nop
 800913c:	0800a255 	.word	0x0800a255

08009140 <__sfmoreglue>:
 8009140:	2268      	movs	r2, #104	; 0x68
 8009142:	b570      	push	{r4, r5, r6, lr}
 8009144:	1e4d      	subs	r5, r1, #1
 8009146:	4355      	muls	r5, r2
 8009148:	460e      	mov	r6, r1
 800914a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800914e:	f000 fcdf 	bl	8009b10 <_malloc_r>
 8009152:	4604      	mov	r4, r0
 8009154:	b140      	cbz	r0, 8009168 <__sfmoreglue+0x28>
 8009156:	2100      	movs	r1, #0
 8009158:	e9c0 1600 	strd	r1, r6, [r0]
 800915c:	300c      	adds	r0, #12
 800915e:	60a0      	str	r0, [r4, #8]
 8009160:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009164:	f7fe fcb2 	bl	8007acc <memset>
 8009168:	4620      	mov	r0, r4
 800916a:	bd70      	pop	{r4, r5, r6, pc}

0800916c <__sfp_lock_acquire>:
 800916c:	4801      	ldr	r0, [pc, #4]	; (8009174 <__sfp_lock_acquire+0x8>)
 800916e:	f000 b8b8 	b.w	80092e2 <__retarget_lock_acquire_recursive>
 8009172:	bf00      	nop
 8009174:	200004c9 	.word	0x200004c9

08009178 <__sfp_lock_release>:
 8009178:	4801      	ldr	r0, [pc, #4]	; (8009180 <__sfp_lock_release+0x8>)
 800917a:	f000 b8b3 	b.w	80092e4 <__retarget_lock_release_recursive>
 800917e:	bf00      	nop
 8009180:	200004c9 	.word	0x200004c9

08009184 <__sinit_lock_acquire>:
 8009184:	4801      	ldr	r0, [pc, #4]	; (800918c <__sinit_lock_acquire+0x8>)
 8009186:	f000 b8ac 	b.w	80092e2 <__retarget_lock_acquire_recursive>
 800918a:	bf00      	nop
 800918c:	200004ca 	.word	0x200004ca

08009190 <__sinit_lock_release>:
 8009190:	4801      	ldr	r0, [pc, #4]	; (8009198 <__sinit_lock_release+0x8>)
 8009192:	f000 b8a7 	b.w	80092e4 <__retarget_lock_release_recursive>
 8009196:	bf00      	nop
 8009198:	200004ca 	.word	0x200004ca

0800919c <__sinit>:
 800919c:	b510      	push	{r4, lr}
 800919e:	4604      	mov	r4, r0
 80091a0:	f7ff fff0 	bl	8009184 <__sinit_lock_acquire>
 80091a4:	69a3      	ldr	r3, [r4, #24]
 80091a6:	b11b      	cbz	r3, 80091b0 <__sinit+0x14>
 80091a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ac:	f7ff bff0 	b.w	8009190 <__sinit_lock_release>
 80091b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091b4:	6523      	str	r3, [r4, #80]	; 0x50
 80091b6:	4b13      	ldr	r3, [pc, #76]	; (8009204 <__sinit+0x68>)
 80091b8:	4a13      	ldr	r2, [pc, #76]	; (8009208 <__sinit+0x6c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80091be:	42a3      	cmp	r3, r4
 80091c0:	bf08      	it	eq
 80091c2:	2301      	moveq	r3, #1
 80091c4:	4620      	mov	r0, r4
 80091c6:	bf08      	it	eq
 80091c8:	61a3      	streq	r3, [r4, #24]
 80091ca:	f000 f81f 	bl	800920c <__sfp>
 80091ce:	6060      	str	r0, [r4, #4]
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 f81b 	bl	800920c <__sfp>
 80091d6:	60a0      	str	r0, [r4, #8]
 80091d8:	4620      	mov	r0, r4
 80091da:	f000 f817 	bl	800920c <__sfp>
 80091de:	2200      	movs	r2, #0
 80091e0:	2104      	movs	r1, #4
 80091e2:	60e0      	str	r0, [r4, #12]
 80091e4:	6860      	ldr	r0, [r4, #4]
 80091e6:	f7ff ff81 	bl	80090ec <std>
 80091ea:	2201      	movs	r2, #1
 80091ec:	2109      	movs	r1, #9
 80091ee:	68a0      	ldr	r0, [r4, #8]
 80091f0:	f7ff ff7c 	bl	80090ec <std>
 80091f4:	2202      	movs	r2, #2
 80091f6:	2112      	movs	r1, #18
 80091f8:	68e0      	ldr	r0, [r4, #12]
 80091fa:	f7ff ff77 	bl	80090ec <std>
 80091fe:	2301      	movs	r3, #1
 8009200:	61a3      	str	r3, [r4, #24]
 8009202:	e7d1      	b.n	80091a8 <__sinit+0xc>
 8009204:	0800aa24 	.word	0x0800aa24
 8009208:	08009135 	.word	0x08009135

0800920c <__sfp>:
 800920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920e:	4607      	mov	r7, r0
 8009210:	f7ff ffac 	bl	800916c <__sfp_lock_acquire>
 8009214:	4b1e      	ldr	r3, [pc, #120]	; (8009290 <__sfp+0x84>)
 8009216:	681e      	ldr	r6, [r3, #0]
 8009218:	69b3      	ldr	r3, [r6, #24]
 800921a:	b913      	cbnz	r3, 8009222 <__sfp+0x16>
 800921c:	4630      	mov	r0, r6
 800921e:	f7ff ffbd 	bl	800919c <__sinit>
 8009222:	3648      	adds	r6, #72	; 0x48
 8009224:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009228:	3b01      	subs	r3, #1
 800922a:	d503      	bpl.n	8009234 <__sfp+0x28>
 800922c:	6833      	ldr	r3, [r6, #0]
 800922e:	b30b      	cbz	r3, 8009274 <__sfp+0x68>
 8009230:	6836      	ldr	r6, [r6, #0]
 8009232:	e7f7      	b.n	8009224 <__sfp+0x18>
 8009234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009238:	b9d5      	cbnz	r5, 8009270 <__sfp+0x64>
 800923a:	4b16      	ldr	r3, [pc, #88]	; (8009294 <__sfp+0x88>)
 800923c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009240:	60e3      	str	r3, [r4, #12]
 8009242:	6665      	str	r5, [r4, #100]	; 0x64
 8009244:	f000 f84c 	bl	80092e0 <__retarget_lock_init_recursive>
 8009248:	f7ff ff96 	bl	8009178 <__sfp_lock_release>
 800924c:	2208      	movs	r2, #8
 800924e:	4629      	mov	r1, r5
 8009250:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009254:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009258:	6025      	str	r5, [r4, #0]
 800925a:	61a5      	str	r5, [r4, #24]
 800925c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009260:	f7fe fc34 	bl	8007acc <memset>
 8009264:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009268:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800926c:	4620      	mov	r0, r4
 800926e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009270:	3468      	adds	r4, #104	; 0x68
 8009272:	e7d9      	b.n	8009228 <__sfp+0x1c>
 8009274:	2104      	movs	r1, #4
 8009276:	4638      	mov	r0, r7
 8009278:	f7ff ff62 	bl	8009140 <__sfmoreglue>
 800927c:	4604      	mov	r4, r0
 800927e:	6030      	str	r0, [r6, #0]
 8009280:	2800      	cmp	r0, #0
 8009282:	d1d5      	bne.n	8009230 <__sfp+0x24>
 8009284:	f7ff ff78 	bl	8009178 <__sfp_lock_release>
 8009288:	230c      	movs	r3, #12
 800928a:	603b      	str	r3, [r7, #0]
 800928c:	e7ee      	b.n	800926c <__sfp+0x60>
 800928e:	bf00      	nop
 8009290:	0800aa24 	.word	0x0800aa24
 8009294:	ffff0001 	.word	0xffff0001

08009298 <_fwalk_reent>:
 8009298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800929c:	4606      	mov	r6, r0
 800929e:	4688      	mov	r8, r1
 80092a0:	2700      	movs	r7, #0
 80092a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092aa:	f1b9 0901 	subs.w	r9, r9, #1
 80092ae:	d505      	bpl.n	80092bc <_fwalk_reent+0x24>
 80092b0:	6824      	ldr	r4, [r4, #0]
 80092b2:	2c00      	cmp	r4, #0
 80092b4:	d1f7      	bne.n	80092a6 <_fwalk_reent+0xe>
 80092b6:	4638      	mov	r0, r7
 80092b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092bc:	89ab      	ldrh	r3, [r5, #12]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d907      	bls.n	80092d2 <_fwalk_reent+0x3a>
 80092c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092c6:	3301      	adds	r3, #1
 80092c8:	d003      	beq.n	80092d2 <_fwalk_reent+0x3a>
 80092ca:	4629      	mov	r1, r5
 80092cc:	4630      	mov	r0, r6
 80092ce:	47c0      	blx	r8
 80092d0:	4307      	orrs	r7, r0
 80092d2:	3568      	adds	r5, #104	; 0x68
 80092d4:	e7e9      	b.n	80092aa <_fwalk_reent+0x12>
	...

080092d8 <_localeconv_r>:
 80092d8:	4800      	ldr	r0, [pc, #0]	; (80092dc <_localeconv_r+0x4>)
 80092da:	4770      	bx	lr
 80092dc:	200001d4 	.word	0x200001d4

080092e0 <__retarget_lock_init_recursive>:
 80092e0:	4770      	bx	lr

080092e2 <__retarget_lock_acquire_recursive>:
 80092e2:	4770      	bx	lr

080092e4 <__retarget_lock_release_recursive>:
 80092e4:	4770      	bx	lr
	...

080092e8 <malloc>:
 80092e8:	4b02      	ldr	r3, [pc, #8]	; (80092f4 <malloc+0xc>)
 80092ea:	4601      	mov	r1, r0
 80092ec:	6818      	ldr	r0, [r3, #0]
 80092ee:	f000 bc0f 	b.w	8009b10 <_malloc_r>
 80092f2:	bf00      	nop
 80092f4:	20000080 	.word	0x20000080

080092f8 <memchr>:
 80092f8:	4603      	mov	r3, r0
 80092fa:	b510      	push	{r4, lr}
 80092fc:	b2c9      	uxtb	r1, r1
 80092fe:	4402      	add	r2, r0
 8009300:	4293      	cmp	r3, r2
 8009302:	4618      	mov	r0, r3
 8009304:	d101      	bne.n	800930a <memchr+0x12>
 8009306:	2000      	movs	r0, #0
 8009308:	e003      	b.n	8009312 <memchr+0x1a>
 800930a:	7804      	ldrb	r4, [r0, #0]
 800930c:	3301      	adds	r3, #1
 800930e:	428c      	cmp	r4, r1
 8009310:	d1f6      	bne.n	8009300 <memchr+0x8>
 8009312:	bd10      	pop	{r4, pc}

08009314 <_Balloc>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009318:	4604      	mov	r4, r0
 800931a:	460d      	mov	r5, r1
 800931c:	b976      	cbnz	r6, 800933c <_Balloc+0x28>
 800931e:	2010      	movs	r0, #16
 8009320:	f7ff ffe2 	bl	80092e8 <malloc>
 8009324:	4602      	mov	r2, r0
 8009326:	6260      	str	r0, [r4, #36]	; 0x24
 8009328:	b920      	cbnz	r0, 8009334 <_Balloc+0x20>
 800932a:	2166      	movs	r1, #102	; 0x66
 800932c:	4b17      	ldr	r3, [pc, #92]	; (800938c <_Balloc+0x78>)
 800932e:	4818      	ldr	r0, [pc, #96]	; (8009390 <_Balloc+0x7c>)
 8009330:	f000 fee0 	bl	800a0f4 <__assert_func>
 8009334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009338:	6006      	str	r6, [r0, #0]
 800933a:	60c6      	str	r6, [r0, #12]
 800933c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800933e:	68f3      	ldr	r3, [r6, #12]
 8009340:	b183      	cbz	r3, 8009364 <_Balloc+0x50>
 8009342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800934a:	b9b8      	cbnz	r0, 800937c <_Balloc+0x68>
 800934c:	2101      	movs	r1, #1
 800934e:	fa01 f605 	lsl.w	r6, r1, r5
 8009352:	1d72      	adds	r2, r6, #5
 8009354:	4620      	mov	r0, r4
 8009356:	0092      	lsls	r2, r2, #2
 8009358:	f000 fb5e 	bl	8009a18 <_calloc_r>
 800935c:	b160      	cbz	r0, 8009378 <_Balloc+0x64>
 800935e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009362:	e00e      	b.n	8009382 <_Balloc+0x6e>
 8009364:	2221      	movs	r2, #33	; 0x21
 8009366:	2104      	movs	r1, #4
 8009368:	4620      	mov	r0, r4
 800936a:	f000 fb55 	bl	8009a18 <_calloc_r>
 800936e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009370:	60f0      	str	r0, [r6, #12]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1e4      	bne.n	8009342 <_Balloc+0x2e>
 8009378:	2000      	movs	r0, #0
 800937a:	bd70      	pop	{r4, r5, r6, pc}
 800937c:	6802      	ldr	r2, [r0, #0]
 800937e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009382:	2300      	movs	r3, #0
 8009384:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009388:	e7f7      	b.n	800937a <_Balloc+0x66>
 800938a:	bf00      	nop
 800938c:	0800aa69 	.word	0x0800aa69
 8009390:	0800ab4c 	.word	0x0800ab4c

08009394 <_Bfree>:
 8009394:	b570      	push	{r4, r5, r6, lr}
 8009396:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009398:	4605      	mov	r5, r0
 800939a:	460c      	mov	r4, r1
 800939c:	b976      	cbnz	r6, 80093bc <_Bfree+0x28>
 800939e:	2010      	movs	r0, #16
 80093a0:	f7ff ffa2 	bl	80092e8 <malloc>
 80093a4:	4602      	mov	r2, r0
 80093a6:	6268      	str	r0, [r5, #36]	; 0x24
 80093a8:	b920      	cbnz	r0, 80093b4 <_Bfree+0x20>
 80093aa:	218a      	movs	r1, #138	; 0x8a
 80093ac:	4b08      	ldr	r3, [pc, #32]	; (80093d0 <_Bfree+0x3c>)
 80093ae:	4809      	ldr	r0, [pc, #36]	; (80093d4 <_Bfree+0x40>)
 80093b0:	f000 fea0 	bl	800a0f4 <__assert_func>
 80093b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093b8:	6006      	str	r6, [r0, #0]
 80093ba:	60c6      	str	r6, [r0, #12]
 80093bc:	b13c      	cbz	r4, 80093ce <_Bfree+0x3a>
 80093be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093c0:	6862      	ldr	r2, [r4, #4]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093c8:	6021      	str	r1, [r4, #0]
 80093ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093ce:	bd70      	pop	{r4, r5, r6, pc}
 80093d0:	0800aa69 	.word	0x0800aa69
 80093d4:	0800ab4c 	.word	0x0800ab4c

080093d8 <__multadd>:
 80093d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093dc:	4607      	mov	r7, r0
 80093de:	460c      	mov	r4, r1
 80093e0:	461e      	mov	r6, r3
 80093e2:	2000      	movs	r0, #0
 80093e4:	690d      	ldr	r5, [r1, #16]
 80093e6:	f101 0c14 	add.w	ip, r1, #20
 80093ea:	f8dc 3000 	ldr.w	r3, [ip]
 80093ee:	3001      	adds	r0, #1
 80093f0:	b299      	uxth	r1, r3
 80093f2:	fb02 6101 	mla	r1, r2, r1, r6
 80093f6:	0c1e      	lsrs	r6, r3, #16
 80093f8:	0c0b      	lsrs	r3, r1, #16
 80093fa:	fb02 3306 	mla	r3, r2, r6, r3
 80093fe:	b289      	uxth	r1, r1
 8009400:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009404:	4285      	cmp	r5, r0
 8009406:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800940a:	f84c 1b04 	str.w	r1, [ip], #4
 800940e:	dcec      	bgt.n	80093ea <__multadd+0x12>
 8009410:	b30e      	cbz	r6, 8009456 <__multadd+0x7e>
 8009412:	68a3      	ldr	r3, [r4, #8]
 8009414:	42ab      	cmp	r3, r5
 8009416:	dc19      	bgt.n	800944c <__multadd+0x74>
 8009418:	6861      	ldr	r1, [r4, #4]
 800941a:	4638      	mov	r0, r7
 800941c:	3101      	adds	r1, #1
 800941e:	f7ff ff79 	bl	8009314 <_Balloc>
 8009422:	4680      	mov	r8, r0
 8009424:	b928      	cbnz	r0, 8009432 <__multadd+0x5a>
 8009426:	4602      	mov	r2, r0
 8009428:	21b5      	movs	r1, #181	; 0xb5
 800942a:	4b0c      	ldr	r3, [pc, #48]	; (800945c <__multadd+0x84>)
 800942c:	480c      	ldr	r0, [pc, #48]	; (8009460 <__multadd+0x88>)
 800942e:	f000 fe61 	bl	800a0f4 <__assert_func>
 8009432:	6922      	ldr	r2, [r4, #16]
 8009434:	f104 010c 	add.w	r1, r4, #12
 8009438:	3202      	adds	r2, #2
 800943a:	0092      	lsls	r2, r2, #2
 800943c:	300c      	adds	r0, #12
 800943e:	f7fe fb37 	bl	8007ab0 <memcpy>
 8009442:	4621      	mov	r1, r4
 8009444:	4638      	mov	r0, r7
 8009446:	f7ff ffa5 	bl	8009394 <_Bfree>
 800944a:	4644      	mov	r4, r8
 800944c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009450:	3501      	adds	r5, #1
 8009452:	615e      	str	r6, [r3, #20]
 8009454:	6125      	str	r5, [r4, #16]
 8009456:	4620      	mov	r0, r4
 8009458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800945c:	0800aadb 	.word	0x0800aadb
 8009460:	0800ab4c 	.word	0x0800ab4c

08009464 <__hi0bits>:
 8009464:	0c02      	lsrs	r2, r0, #16
 8009466:	0412      	lsls	r2, r2, #16
 8009468:	4603      	mov	r3, r0
 800946a:	b9ca      	cbnz	r2, 80094a0 <__hi0bits+0x3c>
 800946c:	0403      	lsls	r3, r0, #16
 800946e:	2010      	movs	r0, #16
 8009470:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009474:	bf04      	itt	eq
 8009476:	021b      	lsleq	r3, r3, #8
 8009478:	3008      	addeq	r0, #8
 800947a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800947e:	bf04      	itt	eq
 8009480:	011b      	lsleq	r3, r3, #4
 8009482:	3004      	addeq	r0, #4
 8009484:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009488:	bf04      	itt	eq
 800948a:	009b      	lsleq	r3, r3, #2
 800948c:	3002      	addeq	r0, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	db05      	blt.n	800949e <__hi0bits+0x3a>
 8009492:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009496:	f100 0001 	add.w	r0, r0, #1
 800949a:	bf08      	it	eq
 800949c:	2020      	moveq	r0, #32
 800949e:	4770      	bx	lr
 80094a0:	2000      	movs	r0, #0
 80094a2:	e7e5      	b.n	8009470 <__hi0bits+0xc>

080094a4 <__lo0bits>:
 80094a4:	6803      	ldr	r3, [r0, #0]
 80094a6:	4602      	mov	r2, r0
 80094a8:	f013 0007 	ands.w	r0, r3, #7
 80094ac:	d00b      	beq.n	80094c6 <__lo0bits+0x22>
 80094ae:	07d9      	lsls	r1, r3, #31
 80094b0:	d421      	bmi.n	80094f6 <__lo0bits+0x52>
 80094b2:	0798      	lsls	r0, r3, #30
 80094b4:	bf49      	itett	mi
 80094b6:	085b      	lsrmi	r3, r3, #1
 80094b8:	089b      	lsrpl	r3, r3, #2
 80094ba:	2001      	movmi	r0, #1
 80094bc:	6013      	strmi	r3, [r2, #0]
 80094be:	bf5c      	itt	pl
 80094c0:	2002      	movpl	r0, #2
 80094c2:	6013      	strpl	r3, [r2, #0]
 80094c4:	4770      	bx	lr
 80094c6:	b299      	uxth	r1, r3
 80094c8:	b909      	cbnz	r1, 80094ce <__lo0bits+0x2a>
 80094ca:	2010      	movs	r0, #16
 80094cc:	0c1b      	lsrs	r3, r3, #16
 80094ce:	b2d9      	uxtb	r1, r3
 80094d0:	b909      	cbnz	r1, 80094d6 <__lo0bits+0x32>
 80094d2:	3008      	adds	r0, #8
 80094d4:	0a1b      	lsrs	r3, r3, #8
 80094d6:	0719      	lsls	r1, r3, #28
 80094d8:	bf04      	itt	eq
 80094da:	091b      	lsreq	r3, r3, #4
 80094dc:	3004      	addeq	r0, #4
 80094de:	0799      	lsls	r1, r3, #30
 80094e0:	bf04      	itt	eq
 80094e2:	089b      	lsreq	r3, r3, #2
 80094e4:	3002      	addeq	r0, #2
 80094e6:	07d9      	lsls	r1, r3, #31
 80094e8:	d403      	bmi.n	80094f2 <__lo0bits+0x4e>
 80094ea:	085b      	lsrs	r3, r3, #1
 80094ec:	f100 0001 	add.w	r0, r0, #1
 80094f0:	d003      	beq.n	80094fa <__lo0bits+0x56>
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	4770      	bx	lr
 80094f6:	2000      	movs	r0, #0
 80094f8:	4770      	bx	lr
 80094fa:	2020      	movs	r0, #32
 80094fc:	4770      	bx	lr
	...

08009500 <__i2b>:
 8009500:	b510      	push	{r4, lr}
 8009502:	460c      	mov	r4, r1
 8009504:	2101      	movs	r1, #1
 8009506:	f7ff ff05 	bl	8009314 <_Balloc>
 800950a:	4602      	mov	r2, r0
 800950c:	b928      	cbnz	r0, 800951a <__i2b+0x1a>
 800950e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009512:	4b04      	ldr	r3, [pc, #16]	; (8009524 <__i2b+0x24>)
 8009514:	4804      	ldr	r0, [pc, #16]	; (8009528 <__i2b+0x28>)
 8009516:	f000 fded 	bl	800a0f4 <__assert_func>
 800951a:	2301      	movs	r3, #1
 800951c:	6144      	str	r4, [r0, #20]
 800951e:	6103      	str	r3, [r0, #16]
 8009520:	bd10      	pop	{r4, pc}
 8009522:	bf00      	nop
 8009524:	0800aadb 	.word	0x0800aadb
 8009528:	0800ab4c 	.word	0x0800ab4c

0800952c <__multiply>:
 800952c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009530:	4691      	mov	r9, r2
 8009532:	690a      	ldr	r2, [r1, #16]
 8009534:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009538:	460c      	mov	r4, r1
 800953a:	429a      	cmp	r2, r3
 800953c:	bfbe      	ittt	lt
 800953e:	460b      	movlt	r3, r1
 8009540:	464c      	movlt	r4, r9
 8009542:	4699      	movlt	r9, r3
 8009544:	6927      	ldr	r7, [r4, #16]
 8009546:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800954a:	68a3      	ldr	r3, [r4, #8]
 800954c:	6861      	ldr	r1, [r4, #4]
 800954e:	eb07 060a 	add.w	r6, r7, sl
 8009552:	42b3      	cmp	r3, r6
 8009554:	b085      	sub	sp, #20
 8009556:	bfb8      	it	lt
 8009558:	3101      	addlt	r1, #1
 800955a:	f7ff fedb 	bl	8009314 <_Balloc>
 800955e:	b930      	cbnz	r0, 800956e <__multiply+0x42>
 8009560:	4602      	mov	r2, r0
 8009562:	f240 115d 	movw	r1, #349	; 0x15d
 8009566:	4b43      	ldr	r3, [pc, #268]	; (8009674 <__multiply+0x148>)
 8009568:	4843      	ldr	r0, [pc, #268]	; (8009678 <__multiply+0x14c>)
 800956a:	f000 fdc3 	bl	800a0f4 <__assert_func>
 800956e:	f100 0514 	add.w	r5, r0, #20
 8009572:	462b      	mov	r3, r5
 8009574:	2200      	movs	r2, #0
 8009576:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800957a:	4543      	cmp	r3, r8
 800957c:	d321      	bcc.n	80095c2 <__multiply+0x96>
 800957e:	f104 0314 	add.w	r3, r4, #20
 8009582:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009586:	f109 0314 	add.w	r3, r9, #20
 800958a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800958e:	9202      	str	r2, [sp, #8]
 8009590:	1b3a      	subs	r2, r7, r4
 8009592:	3a15      	subs	r2, #21
 8009594:	f022 0203 	bic.w	r2, r2, #3
 8009598:	3204      	adds	r2, #4
 800959a:	f104 0115 	add.w	r1, r4, #21
 800959e:	428f      	cmp	r7, r1
 80095a0:	bf38      	it	cc
 80095a2:	2204      	movcc	r2, #4
 80095a4:	9201      	str	r2, [sp, #4]
 80095a6:	9a02      	ldr	r2, [sp, #8]
 80095a8:	9303      	str	r3, [sp, #12]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d80c      	bhi.n	80095c8 <__multiply+0x9c>
 80095ae:	2e00      	cmp	r6, #0
 80095b0:	dd03      	ble.n	80095ba <__multiply+0x8e>
 80095b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d059      	beq.n	800966e <__multiply+0x142>
 80095ba:	6106      	str	r6, [r0, #16]
 80095bc:	b005      	add	sp, #20
 80095be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c2:	f843 2b04 	str.w	r2, [r3], #4
 80095c6:	e7d8      	b.n	800957a <__multiply+0x4e>
 80095c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80095cc:	f1ba 0f00 	cmp.w	sl, #0
 80095d0:	d023      	beq.n	800961a <__multiply+0xee>
 80095d2:	46a9      	mov	r9, r5
 80095d4:	f04f 0c00 	mov.w	ip, #0
 80095d8:	f104 0e14 	add.w	lr, r4, #20
 80095dc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80095e0:	f8d9 1000 	ldr.w	r1, [r9]
 80095e4:	fa1f fb82 	uxth.w	fp, r2
 80095e8:	b289      	uxth	r1, r1
 80095ea:	fb0a 110b 	mla	r1, sl, fp, r1
 80095ee:	4461      	add	r1, ip
 80095f0:	f8d9 c000 	ldr.w	ip, [r9]
 80095f4:	0c12      	lsrs	r2, r2, #16
 80095f6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80095fa:	fb0a c202 	mla	r2, sl, r2, ip
 80095fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009602:	b289      	uxth	r1, r1
 8009604:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009608:	4577      	cmp	r7, lr
 800960a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800960e:	f849 1b04 	str.w	r1, [r9], #4
 8009612:	d8e3      	bhi.n	80095dc <__multiply+0xb0>
 8009614:	9a01      	ldr	r2, [sp, #4]
 8009616:	f845 c002 	str.w	ip, [r5, r2]
 800961a:	9a03      	ldr	r2, [sp, #12]
 800961c:	3304      	adds	r3, #4
 800961e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009622:	f1b9 0f00 	cmp.w	r9, #0
 8009626:	d020      	beq.n	800966a <__multiply+0x13e>
 8009628:	46ae      	mov	lr, r5
 800962a:	f04f 0a00 	mov.w	sl, #0
 800962e:	6829      	ldr	r1, [r5, #0]
 8009630:	f104 0c14 	add.w	ip, r4, #20
 8009634:	f8bc b000 	ldrh.w	fp, [ip]
 8009638:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800963c:	b289      	uxth	r1, r1
 800963e:	fb09 220b 	mla	r2, r9, fp, r2
 8009642:	4492      	add	sl, r2
 8009644:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009648:	f84e 1b04 	str.w	r1, [lr], #4
 800964c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009650:	f8be 1000 	ldrh.w	r1, [lr]
 8009654:	0c12      	lsrs	r2, r2, #16
 8009656:	fb09 1102 	mla	r1, r9, r2, r1
 800965a:	4567      	cmp	r7, ip
 800965c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009664:	d8e6      	bhi.n	8009634 <__multiply+0x108>
 8009666:	9a01      	ldr	r2, [sp, #4]
 8009668:	50a9      	str	r1, [r5, r2]
 800966a:	3504      	adds	r5, #4
 800966c:	e79b      	b.n	80095a6 <__multiply+0x7a>
 800966e:	3e01      	subs	r6, #1
 8009670:	e79d      	b.n	80095ae <__multiply+0x82>
 8009672:	bf00      	nop
 8009674:	0800aadb 	.word	0x0800aadb
 8009678:	0800ab4c 	.word	0x0800ab4c

0800967c <__pow5mult>:
 800967c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009680:	4615      	mov	r5, r2
 8009682:	f012 0203 	ands.w	r2, r2, #3
 8009686:	4606      	mov	r6, r0
 8009688:	460f      	mov	r7, r1
 800968a:	d007      	beq.n	800969c <__pow5mult+0x20>
 800968c:	4c25      	ldr	r4, [pc, #148]	; (8009724 <__pow5mult+0xa8>)
 800968e:	3a01      	subs	r2, #1
 8009690:	2300      	movs	r3, #0
 8009692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009696:	f7ff fe9f 	bl	80093d8 <__multadd>
 800969a:	4607      	mov	r7, r0
 800969c:	10ad      	asrs	r5, r5, #2
 800969e:	d03d      	beq.n	800971c <__pow5mult+0xa0>
 80096a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096a2:	b97c      	cbnz	r4, 80096c4 <__pow5mult+0x48>
 80096a4:	2010      	movs	r0, #16
 80096a6:	f7ff fe1f 	bl	80092e8 <malloc>
 80096aa:	4602      	mov	r2, r0
 80096ac:	6270      	str	r0, [r6, #36]	; 0x24
 80096ae:	b928      	cbnz	r0, 80096bc <__pow5mult+0x40>
 80096b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096b4:	4b1c      	ldr	r3, [pc, #112]	; (8009728 <__pow5mult+0xac>)
 80096b6:	481d      	ldr	r0, [pc, #116]	; (800972c <__pow5mult+0xb0>)
 80096b8:	f000 fd1c 	bl	800a0f4 <__assert_func>
 80096bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096c0:	6004      	str	r4, [r0, #0]
 80096c2:	60c4      	str	r4, [r0, #12]
 80096c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096cc:	b94c      	cbnz	r4, 80096e2 <__pow5mult+0x66>
 80096ce:	f240 2171 	movw	r1, #625	; 0x271
 80096d2:	4630      	mov	r0, r6
 80096d4:	f7ff ff14 	bl	8009500 <__i2b>
 80096d8:	2300      	movs	r3, #0
 80096da:	4604      	mov	r4, r0
 80096dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80096e0:	6003      	str	r3, [r0, #0]
 80096e2:	f04f 0900 	mov.w	r9, #0
 80096e6:	07eb      	lsls	r3, r5, #31
 80096e8:	d50a      	bpl.n	8009700 <__pow5mult+0x84>
 80096ea:	4639      	mov	r1, r7
 80096ec:	4622      	mov	r2, r4
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7ff ff1c 	bl	800952c <__multiply>
 80096f4:	4680      	mov	r8, r0
 80096f6:	4639      	mov	r1, r7
 80096f8:	4630      	mov	r0, r6
 80096fa:	f7ff fe4b 	bl	8009394 <_Bfree>
 80096fe:	4647      	mov	r7, r8
 8009700:	106d      	asrs	r5, r5, #1
 8009702:	d00b      	beq.n	800971c <__pow5mult+0xa0>
 8009704:	6820      	ldr	r0, [r4, #0]
 8009706:	b938      	cbnz	r0, 8009718 <__pow5mult+0x9c>
 8009708:	4622      	mov	r2, r4
 800970a:	4621      	mov	r1, r4
 800970c:	4630      	mov	r0, r6
 800970e:	f7ff ff0d 	bl	800952c <__multiply>
 8009712:	6020      	str	r0, [r4, #0]
 8009714:	f8c0 9000 	str.w	r9, [r0]
 8009718:	4604      	mov	r4, r0
 800971a:	e7e4      	b.n	80096e6 <__pow5mult+0x6a>
 800971c:	4638      	mov	r0, r7
 800971e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009722:	bf00      	nop
 8009724:	0800ac98 	.word	0x0800ac98
 8009728:	0800aa69 	.word	0x0800aa69
 800972c:	0800ab4c 	.word	0x0800ab4c

08009730 <__lshift>:
 8009730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009734:	460c      	mov	r4, r1
 8009736:	4607      	mov	r7, r0
 8009738:	4691      	mov	r9, r2
 800973a:	6923      	ldr	r3, [r4, #16]
 800973c:	6849      	ldr	r1, [r1, #4]
 800973e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009742:	68a3      	ldr	r3, [r4, #8]
 8009744:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009748:	f108 0601 	add.w	r6, r8, #1
 800974c:	42b3      	cmp	r3, r6
 800974e:	db0b      	blt.n	8009768 <__lshift+0x38>
 8009750:	4638      	mov	r0, r7
 8009752:	f7ff fddf 	bl	8009314 <_Balloc>
 8009756:	4605      	mov	r5, r0
 8009758:	b948      	cbnz	r0, 800976e <__lshift+0x3e>
 800975a:	4602      	mov	r2, r0
 800975c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009760:	4b29      	ldr	r3, [pc, #164]	; (8009808 <__lshift+0xd8>)
 8009762:	482a      	ldr	r0, [pc, #168]	; (800980c <__lshift+0xdc>)
 8009764:	f000 fcc6 	bl	800a0f4 <__assert_func>
 8009768:	3101      	adds	r1, #1
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	e7ee      	b.n	800974c <__lshift+0x1c>
 800976e:	2300      	movs	r3, #0
 8009770:	f100 0114 	add.w	r1, r0, #20
 8009774:	f100 0210 	add.w	r2, r0, #16
 8009778:	4618      	mov	r0, r3
 800977a:	4553      	cmp	r3, sl
 800977c:	db37      	blt.n	80097ee <__lshift+0xbe>
 800977e:	6920      	ldr	r0, [r4, #16]
 8009780:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009784:	f104 0314 	add.w	r3, r4, #20
 8009788:	f019 091f 	ands.w	r9, r9, #31
 800978c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009790:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009794:	d02f      	beq.n	80097f6 <__lshift+0xc6>
 8009796:	468a      	mov	sl, r1
 8009798:	f04f 0c00 	mov.w	ip, #0
 800979c:	f1c9 0e20 	rsb	lr, r9, #32
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	fa02 f209 	lsl.w	r2, r2, r9
 80097a6:	ea42 020c 	orr.w	r2, r2, ip
 80097aa:	f84a 2b04 	str.w	r2, [sl], #4
 80097ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b2:	4298      	cmp	r0, r3
 80097b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80097b8:	d8f2      	bhi.n	80097a0 <__lshift+0x70>
 80097ba:	1b03      	subs	r3, r0, r4
 80097bc:	3b15      	subs	r3, #21
 80097be:	f023 0303 	bic.w	r3, r3, #3
 80097c2:	3304      	adds	r3, #4
 80097c4:	f104 0215 	add.w	r2, r4, #21
 80097c8:	4290      	cmp	r0, r2
 80097ca:	bf38      	it	cc
 80097cc:	2304      	movcc	r3, #4
 80097ce:	f841 c003 	str.w	ip, [r1, r3]
 80097d2:	f1bc 0f00 	cmp.w	ip, #0
 80097d6:	d001      	beq.n	80097dc <__lshift+0xac>
 80097d8:	f108 0602 	add.w	r6, r8, #2
 80097dc:	3e01      	subs	r6, #1
 80097de:	4638      	mov	r0, r7
 80097e0:	4621      	mov	r1, r4
 80097e2:	612e      	str	r6, [r5, #16]
 80097e4:	f7ff fdd6 	bl	8009394 <_Bfree>
 80097e8:	4628      	mov	r0, r5
 80097ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80097f2:	3301      	adds	r3, #1
 80097f4:	e7c1      	b.n	800977a <__lshift+0x4a>
 80097f6:	3904      	subs	r1, #4
 80097f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097fc:	4298      	cmp	r0, r3
 80097fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8009802:	d8f9      	bhi.n	80097f8 <__lshift+0xc8>
 8009804:	e7ea      	b.n	80097dc <__lshift+0xac>
 8009806:	bf00      	nop
 8009808:	0800aadb 	.word	0x0800aadb
 800980c:	0800ab4c 	.word	0x0800ab4c

08009810 <__mcmp>:
 8009810:	4603      	mov	r3, r0
 8009812:	690a      	ldr	r2, [r1, #16]
 8009814:	6900      	ldr	r0, [r0, #16]
 8009816:	b530      	push	{r4, r5, lr}
 8009818:	1a80      	subs	r0, r0, r2
 800981a:	d10d      	bne.n	8009838 <__mcmp+0x28>
 800981c:	3314      	adds	r3, #20
 800981e:	3114      	adds	r1, #20
 8009820:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009824:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009828:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800982c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009830:	4295      	cmp	r5, r2
 8009832:	d002      	beq.n	800983a <__mcmp+0x2a>
 8009834:	d304      	bcc.n	8009840 <__mcmp+0x30>
 8009836:	2001      	movs	r0, #1
 8009838:	bd30      	pop	{r4, r5, pc}
 800983a:	42a3      	cmp	r3, r4
 800983c:	d3f4      	bcc.n	8009828 <__mcmp+0x18>
 800983e:	e7fb      	b.n	8009838 <__mcmp+0x28>
 8009840:	f04f 30ff 	mov.w	r0, #4294967295
 8009844:	e7f8      	b.n	8009838 <__mcmp+0x28>
	...

08009848 <__mdiff>:
 8009848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	460d      	mov	r5, r1
 800984e:	4607      	mov	r7, r0
 8009850:	4611      	mov	r1, r2
 8009852:	4628      	mov	r0, r5
 8009854:	4614      	mov	r4, r2
 8009856:	f7ff ffdb 	bl	8009810 <__mcmp>
 800985a:	1e06      	subs	r6, r0, #0
 800985c:	d111      	bne.n	8009882 <__mdiff+0x3a>
 800985e:	4631      	mov	r1, r6
 8009860:	4638      	mov	r0, r7
 8009862:	f7ff fd57 	bl	8009314 <_Balloc>
 8009866:	4602      	mov	r2, r0
 8009868:	b928      	cbnz	r0, 8009876 <__mdiff+0x2e>
 800986a:	f240 2132 	movw	r1, #562	; 0x232
 800986e:	4b3a      	ldr	r3, [pc, #232]	; (8009958 <__mdiff+0x110>)
 8009870:	483a      	ldr	r0, [pc, #232]	; (800995c <__mdiff+0x114>)
 8009872:	f000 fc3f 	bl	800a0f4 <__assert_func>
 8009876:	2301      	movs	r3, #1
 8009878:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800987c:	4610      	mov	r0, r2
 800987e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009882:	bfa4      	itt	ge
 8009884:	4623      	movge	r3, r4
 8009886:	462c      	movge	r4, r5
 8009888:	4638      	mov	r0, r7
 800988a:	6861      	ldr	r1, [r4, #4]
 800988c:	bfa6      	itte	ge
 800988e:	461d      	movge	r5, r3
 8009890:	2600      	movge	r6, #0
 8009892:	2601      	movlt	r6, #1
 8009894:	f7ff fd3e 	bl	8009314 <_Balloc>
 8009898:	4602      	mov	r2, r0
 800989a:	b918      	cbnz	r0, 80098a4 <__mdiff+0x5c>
 800989c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098a0:	4b2d      	ldr	r3, [pc, #180]	; (8009958 <__mdiff+0x110>)
 80098a2:	e7e5      	b.n	8009870 <__mdiff+0x28>
 80098a4:	f102 0814 	add.w	r8, r2, #20
 80098a8:	46c2      	mov	sl, r8
 80098aa:	f04f 0c00 	mov.w	ip, #0
 80098ae:	6927      	ldr	r7, [r4, #16]
 80098b0:	60c6      	str	r6, [r0, #12]
 80098b2:	692e      	ldr	r6, [r5, #16]
 80098b4:	f104 0014 	add.w	r0, r4, #20
 80098b8:	f105 0914 	add.w	r9, r5, #20
 80098bc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80098c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098c4:	3410      	adds	r4, #16
 80098c6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80098ca:	f859 3b04 	ldr.w	r3, [r9], #4
 80098ce:	fa1f f18b 	uxth.w	r1, fp
 80098d2:	448c      	add	ip, r1
 80098d4:	b299      	uxth	r1, r3
 80098d6:	0c1b      	lsrs	r3, r3, #16
 80098d8:	ebac 0101 	sub.w	r1, ip, r1
 80098dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098e0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80098e4:	b289      	uxth	r1, r1
 80098e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80098ea:	454e      	cmp	r6, r9
 80098ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80098f0:	f84a 3b04 	str.w	r3, [sl], #4
 80098f4:	d8e7      	bhi.n	80098c6 <__mdiff+0x7e>
 80098f6:	1b73      	subs	r3, r6, r5
 80098f8:	3b15      	subs	r3, #21
 80098fa:	f023 0303 	bic.w	r3, r3, #3
 80098fe:	3515      	adds	r5, #21
 8009900:	3304      	adds	r3, #4
 8009902:	42ae      	cmp	r6, r5
 8009904:	bf38      	it	cc
 8009906:	2304      	movcc	r3, #4
 8009908:	4418      	add	r0, r3
 800990a:	4443      	add	r3, r8
 800990c:	461e      	mov	r6, r3
 800990e:	4605      	mov	r5, r0
 8009910:	4575      	cmp	r5, lr
 8009912:	d30e      	bcc.n	8009932 <__mdiff+0xea>
 8009914:	f10e 0103 	add.w	r1, lr, #3
 8009918:	1a09      	subs	r1, r1, r0
 800991a:	f021 0103 	bic.w	r1, r1, #3
 800991e:	3803      	subs	r0, #3
 8009920:	4586      	cmp	lr, r0
 8009922:	bf38      	it	cc
 8009924:	2100      	movcc	r1, #0
 8009926:	4419      	add	r1, r3
 8009928:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800992c:	b18b      	cbz	r3, 8009952 <__mdiff+0x10a>
 800992e:	6117      	str	r7, [r2, #16]
 8009930:	e7a4      	b.n	800987c <__mdiff+0x34>
 8009932:	f855 8b04 	ldr.w	r8, [r5], #4
 8009936:	fa1f f188 	uxth.w	r1, r8
 800993a:	4461      	add	r1, ip
 800993c:	140c      	asrs	r4, r1, #16
 800993e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009942:	b289      	uxth	r1, r1
 8009944:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009948:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800994c:	f846 1b04 	str.w	r1, [r6], #4
 8009950:	e7de      	b.n	8009910 <__mdiff+0xc8>
 8009952:	3f01      	subs	r7, #1
 8009954:	e7e8      	b.n	8009928 <__mdiff+0xe0>
 8009956:	bf00      	nop
 8009958:	0800aadb 	.word	0x0800aadb
 800995c:	0800ab4c 	.word	0x0800ab4c

08009960 <__d2b>:
 8009960:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009964:	2101      	movs	r1, #1
 8009966:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800996a:	4690      	mov	r8, r2
 800996c:	461d      	mov	r5, r3
 800996e:	f7ff fcd1 	bl	8009314 <_Balloc>
 8009972:	4604      	mov	r4, r0
 8009974:	b930      	cbnz	r0, 8009984 <__d2b+0x24>
 8009976:	4602      	mov	r2, r0
 8009978:	f240 310a 	movw	r1, #778	; 0x30a
 800997c:	4b24      	ldr	r3, [pc, #144]	; (8009a10 <__d2b+0xb0>)
 800997e:	4825      	ldr	r0, [pc, #148]	; (8009a14 <__d2b+0xb4>)
 8009980:	f000 fbb8 	bl	800a0f4 <__assert_func>
 8009984:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009988:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800998c:	bb2d      	cbnz	r5, 80099da <__d2b+0x7a>
 800998e:	9301      	str	r3, [sp, #4]
 8009990:	f1b8 0300 	subs.w	r3, r8, #0
 8009994:	d026      	beq.n	80099e4 <__d2b+0x84>
 8009996:	4668      	mov	r0, sp
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	f7ff fd83 	bl	80094a4 <__lo0bits>
 800999e:	9900      	ldr	r1, [sp, #0]
 80099a0:	b1f0      	cbz	r0, 80099e0 <__d2b+0x80>
 80099a2:	9a01      	ldr	r2, [sp, #4]
 80099a4:	f1c0 0320 	rsb	r3, r0, #32
 80099a8:	fa02 f303 	lsl.w	r3, r2, r3
 80099ac:	430b      	orrs	r3, r1
 80099ae:	40c2      	lsrs	r2, r0
 80099b0:	6163      	str	r3, [r4, #20]
 80099b2:	9201      	str	r2, [sp, #4]
 80099b4:	9b01      	ldr	r3, [sp, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	bf14      	ite	ne
 80099ba:	2102      	movne	r1, #2
 80099bc:	2101      	moveq	r1, #1
 80099be:	61a3      	str	r3, [r4, #24]
 80099c0:	6121      	str	r1, [r4, #16]
 80099c2:	b1c5      	cbz	r5, 80099f6 <__d2b+0x96>
 80099c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80099c8:	4405      	add	r5, r0
 80099ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099ce:	603d      	str	r5, [r7, #0]
 80099d0:	6030      	str	r0, [r6, #0]
 80099d2:	4620      	mov	r0, r4
 80099d4:	b002      	add	sp, #8
 80099d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099de:	e7d6      	b.n	800998e <__d2b+0x2e>
 80099e0:	6161      	str	r1, [r4, #20]
 80099e2:	e7e7      	b.n	80099b4 <__d2b+0x54>
 80099e4:	a801      	add	r0, sp, #4
 80099e6:	f7ff fd5d 	bl	80094a4 <__lo0bits>
 80099ea:	2101      	movs	r1, #1
 80099ec:	9b01      	ldr	r3, [sp, #4]
 80099ee:	6121      	str	r1, [r4, #16]
 80099f0:	6163      	str	r3, [r4, #20]
 80099f2:	3020      	adds	r0, #32
 80099f4:	e7e5      	b.n	80099c2 <__d2b+0x62>
 80099f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80099fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099fe:	6038      	str	r0, [r7, #0]
 8009a00:	6918      	ldr	r0, [r3, #16]
 8009a02:	f7ff fd2f 	bl	8009464 <__hi0bits>
 8009a06:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009a0a:	6031      	str	r1, [r6, #0]
 8009a0c:	e7e1      	b.n	80099d2 <__d2b+0x72>
 8009a0e:	bf00      	nop
 8009a10:	0800aadb 	.word	0x0800aadb
 8009a14:	0800ab4c 	.word	0x0800ab4c

08009a18 <_calloc_r>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	fba1 5402 	umull	r5, r4, r1, r2
 8009a1e:	b934      	cbnz	r4, 8009a2e <_calloc_r+0x16>
 8009a20:	4629      	mov	r1, r5
 8009a22:	f000 f875 	bl	8009b10 <_malloc_r>
 8009a26:	4606      	mov	r6, r0
 8009a28:	b928      	cbnz	r0, 8009a36 <_calloc_r+0x1e>
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	bd70      	pop	{r4, r5, r6, pc}
 8009a2e:	220c      	movs	r2, #12
 8009a30:	2600      	movs	r6, #0
 8009a32:	6002      	str	r2, [r0, #0]
 8009a34:	e7f9      	b.n	8009a2a <_calloc_r+0x12>
 8009a36:	462a      	mov	r2, r5
 8009a38:	4621      	mov	r1, r4
 8009a3a:	f7fe f847 	bl	8007acc <memset>
 8009a3e:	e7f4      	b.n	8009a2a <_calloc_r+0x12>

08009a40 <_free_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4605      	mov	r5, r0
 8009a44:	2900      	cmp	r1, #0
 8009a46:	d040      	beq.n	8009aca <_free_r+0x8a>
 8009a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a4c:	1f0c      	subs	r4, r1, #4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	bfb8      	it	lt
 8009a52:	18e4      	addlt	r4, r4, r3
 8009a54:	f000 fcd6 	bl	800a404 <__malloc_lock>
 8009a58:	4a1c      	ldr	r2, [pc, #112]	; (8009acc <_free_r+0x8c>)
 8009a5a:	6813      	ldr	r3, [r2, #0]
 8009a5c:	b933      	cbnz	r3, 8009a6c <_free_r+0x2c>
 8009a5e:	6063      	str	r3, [r4, #4]
 8009a60:	6014      	str	r4, [r2, #0]
 8009a62:	4628      	mov	r0, r5
 8009a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a68:	f000 bcd2 	b.w	800a410 <__malloc_unlock>
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	d908      	bls.n	8009a82 <_free_r+0x42>
 8009a70:	6820      	ldr	r0, [r4, #0]
 8009a72:	1821      	adds	r1, r4, r0
 8009a74:	428b      	cmp	r3, r1
 8009a76:	bf01      	itttt	eq
 8009a78:	6819      	ldreq	r1, [r3, #0]
 8009a7a:	685b      	ldreq	r3, [r3, #4]
 8009a7c:	1809      	addeq	r1, r1, r0
 8009a7e:	6021      	streq	r1, [r4, #0]
 8009a80:	e7ed      	b.n	8009a5e <_free_r+0x1e>
 8009a82:	461a      	mov	r2, r3
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	b10b      	cbz	r3, 8009a8c <_free_r+0x4c>
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	d9fa      	bls.n	8009a82 <_free_r+0x42>
 8009a8c:	6811      	ldr	r1, [r2, #0]
 8009a8e:	1850      	adds	r0, r2, r1
 8009a90:	42a0      	cmp	r0, r4
 8009a92:	d10b      	bne.n	8009aac <_free_r+0x6c>
 8009a94:	6820      	ldr	r0, [r4, #0]
 8009a96:	4401      	add	r1, r0
 8009a98:	1850      	adds	r0, r2, r1
 8009a9a:	4283      	cmp	r3, r0
 8009a9c:	6011      	str	r1, [r2, #0]
 8009a9e:	d1e0      	bne.n	8009a62 <_free_r+0x22>
 8009aa0:	6818      	ldr	r0, [r3, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	4401      	add	r1, r0
 8009aa6:	6011      	str	r1, [r2, #0]
 8009aa8:	6053      	str	r3, [r2, #4]
 8009aaa:	e7da      	b.n	8009a62 <_free_r+0x22>
 8009aac:	d902      	bls.n	8009ab4 <_free_r+0x74>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	602b      	str	r3, [r5, #0]
 8009ab2:	e7d6      	b.n	8009a62 <_free_r+0x22>
 8009ab4:	6820      	ldr	r0, [r4, #0]
 8009ab6:	1821      	adds	r1, r4, r0
 8009ab8:	428b      	cmp	r3, r1
 8009aba:	bf01      	itttt	eq
 8009abc:	6819      	ldreq	r1, [r3, #0]
 8009abe:	685b      	ldreq	r3, [r3, #4]
 8009ac0:	1809      	addeq	r1, r1, r0
 8009ac2:	6021      	streq	r1, [r4, #0]
 8009ac4:	6063      	str	r3, [r4, #4]
 8009ac6:	6054      	str	r4, [r2, #4]
 8009ac8:	e7cb      	b.n	8009a62 <_free_r+0x22>
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	200004cc 	.word	0x200004cc

08009ad0 <sbrk_aligned>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	4e0e      	ldr	r6, [pc, #56]	; (8009b0c <sbrk_aligned+0x3c>)
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	6831      	ldr	r1, [r6, #0]
 8009ad8:	4605      	mov	r5, r0
 8009ada:	b911      	cbnz	r1, 8009ae2 <sbrk_aligned+0x12>
 8009adc:	f000 f9e4 	bl	8009ea8 <_sbrk_r>
 8009ae0:	6030      	str	r0, [r6, #0]
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f000 f9df 	bl	8009ea8 <_sbrk_r>
 8009aea:	1c43      	adds	r3, r0, #1
 8009aec:	d00a      	beq.n	8009b04 <sbrk_aligned+0x34>
 8009aee:	1cc4      	adds	r4, r0, #3
 8009af0:	f024 0403 	bic.w	r4, r4, #3
 8009af4:	42a0      	cmp	r0, r4
 8009af6:	d007      	beq.n	8009b08 <sbrk_aligned+0x38>
 8009af8:	1a21      	subs	r1, r4, r0
 8009afa:	4628      	mov	r0, r5
 8009afc:	f000 f9d4 	bl	8009ea8 <_sbrk_r>
 8009b00:	3001      	adds	r0, #1
 8009b02:	d101      	bne.n	8009b08 <sbrk_aligned+0x38>
 8009b04:	f04f 34ff 	mov.w	r4, #4294967295
 8009b08:	4620      	mov	r0, r4
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	200004d0 	.word	0x200004d0

08009b10 <_malloc_r>:
 8009b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b14:	1ccd      	adds	r5, r1, #3
 8009b16:	f025 0503 	bic.w	r5, r5, #3
 8009b1a:	3508      	adds	r5, #8
 8009b1c:	2d0c      	cmp	r5, #12
 8009b1e:	bf38      	it	cc
 8009b20:	250c      	movcc	r5, #12
 8009b22:	2d00      	cmp	r5, #0
 8009b24:	4607      	mov	r7, r0
 8009b26:	db01      	blt.n	8009b2c <_malloc_r+0x1c>
 8009b28:	42a9      	cmp	r1, r5
 8009b2a:	d905      	bls.n	8009b38 <_malloc_r+0x28>
 8009b2c:	230c      	movs	r3, #12
 8009b2e:	2600      	movs	r6, #0
 8009b30:	603b      	str	r3, [r7, #0]
 8009b32:	4630      	mov	r0, r6
 8009b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b38:	4e2e      	ldr	r6, [pc, #184]	; (8009bf4 <_malloc_r+0xe4>)
 8009b3a:	f000 fc63 	bl	800a404 <__malloc_lock>
 8009b3e:	6833      	ldr	r3, [r6, #0]
 8009b40:	461c      	mov	r4, r3
 8009b42:	bb34      	cbnz	r4, 8009b92 <_malloc_r+0x82>
 8009b44:	4629      	mov	r1, r5
 8009b46:	4638      	mov	r0, r7
 8009b48:	f7ff ffc2 	bl	8009ad0 <sbrk_aligned>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	4604      	mov	r4, r0
 8009b50:	d14d      	bne.n	8009bee <_malloc_r+0xde>
 8009b52:	6834      	ldr	r4, [r6, #0]
 8009b54:	4626      	mov	r6, r4
 8009b56:	2e00      	cmp	r6, #0
 8009b58:	d140      	bne.n	8009bdc <_malloc_r+0xcc>
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	4638      	mov	r0, r7
 8009b60:	eb04 0803 	add.w	r8, r4, r3
 8009b64:	f000 f9a0 	bl	8009ea8 <_sbrk_r>
 8009b68:	4580      	cmp	r8, r0
 8009b6a:	d13a      	bne.n	8009be2 <_malloc_r+0xd2>
 8009b6c:	6821      	ldr	r1, [r4, #0]
 8009b6e:	3503      	adds	r5, #3
 8009b70:	1a6d      	subs	r5, r5, r1
 8009b72:	f025 0503 	bic.w	r5, r5, #3
 8009b76:	3508      	adds	r5, #8
 8009b78:	2d0c      	cmp	r5, #12
 8009b7a:	bf38      	it	cc
 8009b7c:	250c      	movcc	r5, #12
 8009b7e:	4638      	mov	r0, r7
 8009b80:	4629      	mov	r1, r5
 8009b82:	f7ff ffa5 	bl	8009ad0 <sbrk_aligned>
 8009b86:	3001      	adds	r0, #1
 8009b88:	d02b      	beq.n	8009be2 <_malloc_r+0xd2>
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	442b      	add	r3, r5
 8009b8e:	6023      	str	r3, [r4, #0]
 8009b90:	e00e      	b.n	8009bb0 <_malloc_r+0xa0>
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	1b52      	subs	r2, r2, r5
 8009b96:	d41e      	bmi.n	8009bd6 <_malloc_r+0xc6>
 8009b98:	2a0b      	cmp	r2, #11
 8009b9a:	d916      	bls.n	8009bca <_malloc_r+0xba>
 8009b9c:	1961      	adds	r1, r4, r5
 8009b9e:	42a3      	cmp	r3, r4
 8009ba0:	6025      	str	r5, [r4, #0]
 8009ba2:	bf18      	it	ne
 8009ba4:	6059      	strne	r1, [r3, #4]
 8009ba6:	6863      	ldr	r3, [r4, #4]
 8009ba8:	bf08      	it	eq
 8009baa:	6031      	streq	r1, [r6, #0]
 8009bac:	5162      	str	r2, [r4, r5]
 8009bae:	604b      	str	r3, [r1, #4]
 8009bb0:	4638      	mov	r0, r7
 8009bb2:	f104 060b 	add.w	r6, r4, #11
 8009bb6:	f000 fc2b 	bl	800a410 <__malloc_unlock>
 8009bba:	f026 0607 	bic.w	r6, r6, #7
 8009bbe:	1d23      	adds	r3, r4, #4
 8009bc0:	1af2      	subs	r2, r6, r3
 8009bc2:	d0b6      	beq.n	8009b32 <_malloc_r+0x22>
 8009bc4:	1b9b      	subs	r3, r3, r6
 8009bc6:	50a3      	str	r3, [r4, r2]
 8009bc8:	e7b3      	b.n	8009b32 <_malloc_r+0x22>
 8009bca:	6862      	ldr	r2, [r4, #4]
 8009bcc:	42a3      	cmp	r3, r4
 8009bce:	bf0c      	ite	eq
 8009bd0:	6032      	streq	r2, [r6, #0]
 8009bd2:	605a      	strne	r2, [r3, #4]
 8009bd4:	e7ec      	b.n	8009bb0 <_malloc_r+0xa0>
 8009bd6:	4623      	mov	r3, r4
 8009bd8:	6864      	ldr	r4, [r4, #4]
 8009bda:	e7b2      	b.n	8009b42 <_malloc_r+0x32>
 8009bdc:	4634      	mov	r4, r6
 8009bde:	6876      	ldr	r6, [r6, #4]
 8009be0:	e7b9      	b.n	8009b56 <_malloc_r+0x46>
 8009be2:	230c      	movs	r3, #12
 8009be4:	4638      	mov	r0, r7
 8009be6:	603b      	str	r3, [r7, #0]
 8009be8:	f000 fc12 	bl	800a410 <__malloc_unlock>
 8009bec:	e7a1      	b.n	8009b32 <_malloc_r+0x22>
 8009bee:	6025      	str	r5, [r4, #0]
 8009bf0:	e7de      	b.n	8009bb0 <_malloc_r+0xa0>
 8009bf2:	bf00      	nop
 8009bf4:	200004cc 	.word	0x200004cc

08009bf8 <__sfputc_r>:
 8009bf8:	6893      	ldr	r3, [r2, #8]
 8009bfa:	b410      	push	{r4}
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	6093      	str	r3, [r2, #8]
 8009c02:	da07      	bge.n	8009c14 <__sfputc_r+0x1c>
 8009c04:	6994      	ldr	r4, [r2, #24]
 8009c06:	42a3      	cmp	r3, r4
 8009c08:	db01      	blt.n	8009c0e <__sfputc_r+0x16>
 8009c0a:	290a      	cmp	r1, #10
 8009c0c:	d102      	bne.n	8009c14 <__sfputc_r+0x1c>
 8009c0e:	bc10      	pop	{r4}
 8009c10:	f000 b99e 	b.w	8009f50 <__swbuf_r>
 8009c14:	6813      	ldr	r3, [r2, #0]
 8009c16:	1c58      	adds	r0, r3, #1
 8009c18:	6010      	str	r0, [r2, #0]
 8009c1a:	7019      	strb	r1, [r3, #0]
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	bc10      	pop	{r4}
 8009c20:	4770      	bx	lr

08009c22 <__sfputs_r>:
 8009c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c24:	4606      	mov	r6, r0
 8009c26:	460f      	mov	r7, r1
 8009c28:	4614      	mov	r4, r2
 8009c2a:	18d5      	adds	r5, r2, r3
 8009c2c:	42ac      	cmp	r4, r5
 8009c2e:	d101      	bne.n	8009c34 <__sfputs_r+0x12>
 8009c30:	2000      	movs	r0, #0
 8009c32:	e007      	b.n	8009c44 <__sfputs_r+0x22>
 8009c34:	463a      	mov	r2, r7
 8009c36:	4630      	mov	r0, r6
 8009c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3c:	f7ff ffdc 	bl	8009bf8 <__sfputc_r>
 8009c40:	1c43      	adds	r3, r0, #1
 8009c42:	d1f3      	bne.n	8009c2c <__sfputs_r+0xa>
 8009c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c48 <_vfiprintf_r>:
 8009c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4c:	460d      	mov	r5, r1
 8009c4e:	4614      	mov	r4, r2
 8009c50:	4698      	mov	r8, r3
 8009c52:	4606      	mov	r6, r0
 8009c54:	b09d      	sub	sp, #116	; 0x74
 8009c56:	b118      	cbz	r0, 8009c60 <_vfiprintf_r+0x18>
 8009c58:	6983      	ldr	r3, [r0, #24]
 8009c5a:	b90b      	cbnz	r3, 8009c60 <_vfiprintf_r+0x18>
 8009c5c:	f7ff fa9e 	bl	800919c <__sinit>
 8009c60:	4b89      	ldr	r3, [pc, #548]	; (8009e88 <_vfiprintf_r+0x240>)
 8009c62:	429d      	cmp	r5, r3
 8009c64:	d11b      	bne.n	8009c9e <_vfiprintf_r+0x56>
 8009c66:	6875      	ldr	r5, [r6, #4]
 8009c68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c6a:	07d9      	lsls	r1, r3, #31
 8009c6c:	d405      	bmi.n	8009c7a <_vfiprintf_r+0x32>
 8009c6e:	89ab      	ldrh	r3, [r5, #12]
 8009c70:	059a      	lsls	r2, r3, #22
 8009c72:	d402      	bmi.n	8009c7a <_vfiprintf_r+0x32>
 8009c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c76:	f7ff fb34 	bl	80092e2 <__retarget_lock_acquire_recursive>
 8009c7a:	89ab      	ldrh	r3, [r5, #12]
 8009c7c:	071b      	lsls	r3, r3, #28
 8009c7e:	d501      	bpl.n	8009c84 <_vfiprintf_r+0x3c>
 8009c80:	692b      	ldr	r3, [r5, #16]
 8009c82:	b9eb      	cbnz	r3, 8009cc0 <_vfiprintf_r+0x78>
 8009c84:	4629      	mov	r1, r5
 8009c86:	4630      	mov	r0, r6
 8009c88:	f000 f9c6 	bl	800a018 <__swsetup_r>
 8009c8c:	b1c0      	cbz	r0, 8009cc0 <_vfiprintf_r+0x78>
 8009c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c90:	07dc      	lsls	r4, r3, #31
 8009c92:	d50e      	bpl.n	8009cb2 <_vfiprintf_r+0x6a>
 8009c94:	f04f 30ff 	mov.w	r0, #4294967295
 8009c98:	b01d      	add	sp, #116	; 0x74
 8009c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9e:	4b7b      	ldr	r3, [pc, #492]	; (8009e8c <_vfiprintf_r+0x244>)
 8009ca0:	429d      	cmp	r5, r3
 8009ca2:	d101      	bne.n	8009ca8 <_vfiprintf_r+0x60>
 8009ca4:	68b5      	ldr	r5, [r6, #8]
 8009ca6:	e7df      	b.n	8009c68 <_vfiprintf_r+0x20>
 8009ca8:	4b79      	ldr	r3, [pc, #484]	; (8009e90 <_vfiprintf_r+0x248>)
 8009caa:	429d      	cmp	r5, r3
 8009cac:	bf08      	it	eq
 8009cae:	68f5      	ldreq	r5, [r6, #12]
 8009cb0:	e7da      	b.n	8009c68 <_vfiprintf_r+0x20>
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	0598      	lsls	r0, r3, #22
 8009cb6:	d4ed      	bmi.n	8009c94 <_vfiprintf_r+0x4c>
 8009cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cba:	f7ff fb13 	bl	80092e4 <__retarget_lock_release_recursive>
 8009cbe:	e7e9      	b.n	8009c94 <_vfiprintf_r+0x4c>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc4:	2320      	movs	r3, #32
 8009cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cca:	2330      	movs	r3, #48	; 0x30
 8009ccc:	f04f 0901 	mov.w	r9, #1
 8009cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cd4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009e94 <_vfiprintf_r+0x24c>
 8009cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cdc:	4623      	mov	r3, r4
 8009cde:	469a      	mov	sl, r3
 8009ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ce4:	b10a      	cbz	r2, 8009cea <_vfiprintf_r+0xa2>
 8009ce6:	2a25      	cmp	r2, #37	; 0x25
 8009ce8:	d1f9      	bne.n	8009cde <_vfiprintf_r+0x96>
 8009cea:	ebba 0b04 	subs.w	fp, sl, r4
 8009cee:	d00b      	beq.n	8009d08 <_vfiprintf_r+0xc0>
 8009cf0:	465b      	mov	r3, fp
 8009cf2:	4622      	mov	r2, r4
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7ff ff93 	bl	8009c22 <__sfputs_r>
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	f000 80aa 	beq.w	8009e56 <_vfiprintf_r+0x20e>
 8009d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d04:	445a      	add	r2, fp
 8009d06:	9209      	str	r2, [sp, #36]	; 0x24
 8009d08:	f89a 3000 	ldrb.w	r3, [sl]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 80a2 	beq.w	8009e56 <_vfiprintf_r+0x20e>
 8009d12:	2300      	movs	r3, #0
 8009d14:	f04f 32ff 	mov.w	r2, #4294967295
 8009d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d1c:	f10a 0a01 	add.w	sl, sl, #1
 8009d20:	9304      	str	r3, [sp, #16]
 8009d22:	9307      	str	r3, [sp, #28]
 8009d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d28:	931a      	str	r3, [sp, #104]	; 0x68
 8009d2a:	4654      	mov	r4, sl
 8009d2c:	2205      	movs	r2, #5
 8009d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d32:	4858      	ldr	r0, [pc, #352]	; (8009e94 <_vfiprintf_r+0x24c>)
 8009d34:	f7ff fae0 	bl	80092f8 <memchr>
 8009d38:	9a04      	ldr	r2, [sp, #16]
 8009d3a:	b9d8      	cbnz	r0, 8009d74 <_vfiprintf_r+0x12c>
 8009d3c:	06d1      	lsls	r1, r2, #27
 8009d3e:	bf44      	itt	mi
 8009d40:	2320      	movmi	r3, #32
 8009d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d46:	0713      	lsls	r3, r2, #28
 8009d48:	bf44      	itt	mi
 8009d4a:	232b      	movmi	r3, #43	; 0x2b
 8009d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d50:	f89a 3000 	ldrb.w	r3, [sl]
 8009d54:	2b2a      	cmp	r3, #42	; 0x2a
 8009d56:	d015      	beq.n	8009d84 <_vfiprintf_r+0x13c>
 8009d58:	4654      	mov	r4, sl
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	f04f 0c0a 	mov.w	ip, #10
 8009d60:	9a07      	ldr	r2, [sp, #28]
 8009d62:	4621      	mov	r1, r4
 8009d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d68:	3b30      	subs	r3, #48	; 0x30
 8009d6a:	2b09      	cmp	r3, #9
 8009d6c:	d94e      	bls.n	8009e0c <_vfiprintf_r+0x1c4>
 8009d6e:	b1b0      	cbz	r0, 8009d9e <_vfiprintf_r+0x156>
 8009d70:	9207      	str	r2, [sp, #28]
 8009d72:	e014      	b.n	8009d9e <_vfiprintf_r+0x156>
 8009d74:	eba0 0308 	sub.w	r3, r0, r8
 8009d78:	fa09 f303 	lsl.w	r3, r9, r3
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	46a2      	mov	sl, r4
 8009d80:	9304      	str	r3, [sp, #16]
 8009d82:	e7d2      	b.n	8009d2a <_vfiprintf_r+0xe2>
 8009d84:	9b03      	ldr	r3, [sp, #12]
 8009d86:	1d19      	adds	r1, r3, #4
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	9103      	str	r1, [sp, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	bfbb      	ittet	lt
 8009d90:	425b      	neglt	r3, r3
 8009d92:	f042 0202 	orrlt.w	r2, r2, #2
 8009d96:	9307      	strge	r3, [sp, #28]
 8009d98:	9307      	strlt	r3, [sp, #28]
 8009d9a:	bfb8      	it	lt
 8009d9c:	9204      	strlt	r2, [sp, #16]
 8009d9e:	7823      	ldrb	r3, [r4, #0]
 8009da0:	2b2e      	cmp	r3, #46	; 0x2e
 8009da2:	d10c      	bne.n	8009dbe <_vfiprintf_r+0x176>
 8009da4:	7863      	ldrb	r3, [r4, #1]
 8009da6:	2b2a      	cmp	r3, #42	; 0x2a
 8009da8:	d135      	bne.n	8009e16 <_vfiprintf_r+0x1ce>
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	3402      	adds	r4, #2
 8009dae:	1d1a      	adds	r2, r3, #4
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	9203      	str	r2, [sp, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bfb8      	it	lt
 8009db8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dbc:	9305      	str	r3, [sp, #20]
 8009dbe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009e98 <_vfiprintf_r+0x250>
 8009dc2:	2203      	movs	r2, #3
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	7821      	ldrb	r1, [r4, #0]
 8009dc8:	f7ff fa96 	bl	80092f8 <memchr>
 8009dcc:	b140      	cbz	r0, 8009de0 <_vfiprintf_r+0x198>
 8009dce:	2340      	movs	r3, #64	; 0x40
 8009dd0:	eba0 000a 	sub.w	r0, r0, sl
 8009dd4:	fa03 f000 	lsl.w	r0, r3, r0
 8009dd8:	9b04      	ldr	r3, [sp, #16]
 8009dda:	3401      	adds	r4, #1
 8009ddc:	4303      	orrs	r3, r0
 8009dde:	9304      	str	r3, [sp, #16]
 8009de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de4:	2206      	movs	r2, #6
 8009de6:	482d      	ldr	r0, [pc, #180]	; (8009e9c <_vfiprintf_r+0x254>)
 8009de8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dec:	f7ff fa84 	bl	80092f8 <memchr>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d03f      	beq.n	8009e74 <_vfiprintf_r+0x22c>
 8009df4:	4b2a      	ldr	r3, [pc, #168]	; (8009ea0 <_vfiprintf_r+0x258>)
 8009df6:	bb1b      	cbnz	r3, 8009e40 <_vfiprintf_r+0x1f8>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	3307      	adds	r3, #7
 8009dfc:	f023 0307 	bic.w	r3, r3, #7
 8009e00:	3308      	adds	r3, #8
 8009e02:	9303      	str	r3, [sp, #12]
 8009e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e06:	443b      	add	r3, r7
 8009e08:	9309      	str	r3, [sp, #36]	; 0x24
 8009e0a:	e767      	b.n	8009cdc <_vfiprintf_r+0x94>
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	2001      	movs	r0, #1
 8009e10:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e14:	e7a5      	b.n	8009d62 <_vfiprintf_r+0x11a>
 8009e16:	2300      	movs	r3, #0
 8009e18:	f04f 0c0a 	mov.w	ip, #10
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	3401      	adds	r4, #1
 8009e20:	9305      	str	r3, [sp, #20]
 8009e22:	4620      	mov	r0, r4
 8009e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e28:	3a30      	subs	r2, #48	; 0x30
 8009e2a:	2a09      	cmp	r2, #9
 8009e2c:	d903      	bls.n	8009e36 <_vfiprintf_r+0x1ee>
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d0c5      	beq.n	8009dbe <_vfiprintf_r+0x176>
 8009e32:	9105      	str	r1, [sp, #20]
 8009e34:	e7c3      	b.n	8009dbe <_vfiprintf_r+0x176>
 8009e36:	4604      	mov	r4, r0
 8009e38:	2301      	movs	r3, #1
 8009e3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e3e:	e7f0      	b.n	8009e22 <_vfiprintf_r+0x1da>
 8009e40:	ab03      	add	r3, sp, #12
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	462a      	mov	r2, r5
 8009e46:	4630      	mov	r0, r6
 8009e48:	4b16      	ldr	r3, [pc, #88]	; (8009ea4 <_vfiprintf_r+0x25c>)
 8009e4a:	a904      	add	r1, sp, #16
 8009e4c:	f7fd fee4 	bl	8007c18 <_printf_float>
 8009e50:	4607      	mov	r7, r0
 8009e52:	1c78      	adds	r0, r7, #1
 8009e54:	d1d6      	bne.n	8009e04 <_vfiprintf_r+0x1bc>
 8009e56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e58:	07d9      	lsls	r1, r3, #31
 8009e5a:	d405      	bmi.n	8009e68 <_vfiprintf_r+0x220>
 8009e5c:	89ab      	ldrh	r3, [r5, #12]
 8009e5e:	059a      	lsls	r2, r3, #22
 8009e60:	d402      	bmi.n	8009e68 <_vfiprintf_r+0x220>
 8009e62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e64:	f7ff fa3e 	bl	80092e4 <__retarget_lock_release_recursive>
 8009e68:	89ab      	ldrh	r3, [r5, #12]
 8009e6a:	065b      	lsls	r3, r3, #25
 8009e6c:	f53f af12 	bmi.w	8009c94 <_vfiprintf_r+0x4c>
 8009e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e72:	e711      	b.n	8009c98 <_vfiprintf_r+0x50>
 8009e74:	ab03      	add	r3, sp, #12
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	462a      	mov	r2, r5
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <_vfiprintf_r+0x25c>)
 8009e7e:	a904      	add	r1, sp, #16
 8009e80:	f7fe f966 	bl	8008150 <_printf_i>
 8009e84:	e7e4      	b.n	8009e50 <_vfiprintf_r+0x208>
 8009e86:	bf00      	nop
 8009e88:	0800ab0c 	.word	0x0800ab0c
 8009e8c:	0800ab2c 	.word	0x0800ab2c
 8009e90:	0800aaec 	.word	0x0800aaec
 8009e94:	0800aca4 	.word	0x0800aca4
 8009e98:	0800acaa 	.word	0x0800acaa
 8009e9c:	0800acae 	.word	0x0800acae
 8009ea0:	08007c19 	.word	0x08007c19
 8009ea4:	08009c23 	.word	0x08009c23

08009ea8 <_sbrk_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	2300      	movs	r3, #0
 8009eac:	4d05      	ldr	r5, [pc, #20]	; (8009ec4 <_sbrk_r+0x1c>)
 8009eae:	4604      	mov	r4, r0
 8009eb0:	4608      	mov	r0, r1
 8009eb2:	602b      	str	r3, [r5, #0]
 8009eb4:	f7f7 fff0 	bl	8001e98 <_sbrk>
 8009eb8:	1c43      	adds	r3, r0, #1
 8009eba:	d102      	bne.n	8009ec2 <_sbrk_r+0x1a>
 8009ebc:	682b      	ldr	r3, [r5, #0]
 8009ebe:	b103      	cbz	r3, 8009ec2 <_sbrk_r+0x1a>
 8009ec0:	6023      	str	r3, [r4, #0]
 8009ec2:	bd38      	pop	{r3, r4, r5, pc}
 8009ec4:	200004d4 	.word	0x200004d4

08009ec8 <__sread>:
 8009ec8:	b510      	push	{r4, lr}
 8009eca:	460c      	mov	r4, r1
 8009ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed0:	f000 faa4 	bl	800a41c <_read_r>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	bfab      	itete	ge
 8009ed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009eda:	89a3      	ldrhlt	r3, [r4, #12]
 8009edc:	181b      	addge	r3, r3, r0
 8009ede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ee2:	bfac      	ite	ge
 8009ee4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ee6:	81a3      	strhlt	r3, [r4, #12]
 8009ee8:	bd10      	pop	{r4, pc}

08009eea <__swrite>:
 8009eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eee:	461f      	mov	r7, r3
 8009ef0:	898b      	ldrh	r3, [r1, #12]
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	05db      	lsls	r3, r3, #23
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	4616      	mov	r6, r2
 8009efa:	d505      	bpl.n	8009f08 <__swrite+0x1e>
 8009efc:	2302      	movs	r3, #2
 8009efe:	2200      	movs	r2, #0
 8009f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f04:	f000 f9f4 	bl	800a2f0 <_lseek_r>
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	4632      	mov	r2, r6
 8009f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f10:	81a3      	strh	r3, [r4, #12]
 8009f12:	4628      	mov	r0, r5
 8009f14:	463b      	mov	r3, r7
 8009f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1e:	f000 b869 	b.w	8009ff4 <_write_r>

08009f22 <__sseek>:
 8009f22:	b510      	push	{r4, lr}
 8009f24:	460c      	mov	r4, r1
 8009f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f2a:	f000 f9e1 	bl	800a2f0 <_lseek_r>
 8009f2e:	1c43      	adds	r3, r0, #1
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	bf15      	itete	ne
 8009f34:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f3e:	81a3      	strheq	r3, [r4, #12]
 8009f40:	bf18      	it	ne
 8009f42:	81a3      	strhne	r3, [r4, #12]
 8009f44:	bd10      	pop	{r4, pc}

08009f46 <__sclose>:
 8009f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f4a:	f000 b8f1 	b.w	800a130 <_close_r>
	...

08009f50 <__swbuf_r>:
 8009f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f52:	460e      	mov	r6, r1
 8009f54:	4614      	mov	r4, r2
 8009f56:	4605      	mov	r5, r0
 8009f58:	b118      	cbz	r0, 8009f62 <__swbuf_r+0x12>
 8009f5a:	6983      	ldr	r3, [r0, #24]
 8009f5c:	b90b      	cbnz	r3, 8009f62 <__swbuf_r+0x12>
 8009f5e:	f7ff f91d 	bl	800919c <__sinit>
 8009f62:	4b21      	ldr	r3, [pc, #132]	; (8009fe8 <__swbuf_r+0x98>)
 8009f64:	429c      	cmp	r4, r3
 8009f66:	d12b      	bne.n	8009fc0 <__swbuf_r+0x70>
 8009f68:	686c      	ldr	r4, [r5, #4]
 8009f6a:	69a3      	ldr	r3, [r4, #24]
 8009f6c:	60a3      	str	r3, [r4, #8]
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	071a      	lsls	r2, r3, #28
 8009f72:	d52f      	bpl.n	8009fd4 <__swbuf_r+0x84>
 8009f74:	6923      	ldr	r3, [r4, #16]
 8009f76:	b36b      	cbz	r3, 8009fd4 <__swbuf_r+0x84>
 8009f78:	6923      	ldr	r3, [r4, #16]
 8009f7a:	6820      	ldr	r0, [r4, #0]
 8009f7c:	b2f6      	uxtb	r6, r6
 8009f7e:	1ac0      	subs	r0, r0, r3
 8009f80:	6963      	ldr	r3, [r4, #20]
 8009f82:	4637      	mov	r7, r6
 8009f84:	4283      	cmp	r3, r0
 8009f86:	dc04      	bgt.n	8009f92 <__swbuf_r+0x42>
 8009f88:	4621      	mov	r1, r4
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f000 f962 	bl	800a254 <_fflush_r>
 8009f90:	bb30      	cbnz	r0, 8009fe0 <__swbuf_r+0x90>
 8009f92:	68a3      	ldr	r3, [r4, #8]
 8009f94:	3001      	adds	r0, #1
 8009f96:	3b01      	subs	r3, #1
 8009f98:	60a3      	str	r3, [r4, #8]
 8009f9a:	6823      	ldr	r3, [r4, #0]
 8009f9c:	1c5a      	adds	r2, r3, #1
 8009f9e:	6022      	str	r2, [r4, #0]
 8009fa0:	701e      	strb	r6, [r3, #0]
 8009fa2:	6963      	ldr	r3, [r4, #20]
 8009fa4:	4283      	cmp	r3, r0
 8009fa6:	d004      	beq.n	8009fb2 <__swbuf_r+0x62>
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	07db      	lsls	r3, r3, #31
 8009fac:	d506      	bpl.n	8009fbc <__swbuf_r+0x6c>
 8009fae:	2e0a      	cmp	r6, #10
 8009fb0:	d104      	bne.n	8009fbc <__swbuf_r+0x6c>
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	f000 f94d 	bl	800a254 <_fflush_r>
 8009fba:	b988      	cbnz	r0, 8009fe0 <__swbuf_r+0x90>
 8009fbc:	4638      	mov	r0, r7
 8009fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fc0:	4b0a      	ldr	r3, [pc, #40]	; (8009fec <__swbuf_r+0x9c>)
 8009fc2:	429c      	cmp	r4, r3
 8009fc4:	d101      	bne.n	8009fca <__swbuf_r+0x7a>
 8009fc6:	68ac      	ldr	r4, [r5, #8]
 8009fc8:	e7cf      	b.n	8009f6a <__swbuf_r+0x1a>
 8009fca:	4b09      	ldr	r3, [pc, #36]	; (8009ff0 <__swbuf_r+0xa0>)
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	bf08      	it	eq
 8009fd0:	68ec      	ldreq	r4, [r5, #12]
 8009fd2:	e7ca      	b.n	8009f6a <__swbuf_r+0x1a>
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	f000 f81e 	bl	800a018 <__swsetup_r>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d0cb      	beq.n	8009f78 <__swbuf_r+0x28>
 8009fe0:	f04f 37ff 	mov.w	r7, #4294967295
 8009fe4:	e7ea      	b.n	8009fbc <__swbuf_r+0x6c>
 8009fe6:	bf00      	nop
 8009fe8:	0800ab0c 	.word	0x0800ab0c
 8009fec:	0800ab2c 	.word	0x0800ab2c
 8009ff0:	0800aaec 	.word	0x0800aaec

08009ff4 <_write_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	4608      	mov	r0, r1
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	4d05      	ldr	r5, [pc, #20]	; (800a014 <_write_r+0x20>)
 800a000:	602a      	str	r2, [r5, #0]
 800a002:	461a      	mov	r2, r3
 800a004:	f7f7 fefc 	bl	8001e00 <_write>
 800a008:	1c43      	adds	r3, r0, #1
 800a00a:	d102      	bne.n	800a012 <_write_r+0x1e>
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	b103      	cbz	r3, 800a012 <_write_r+0x1e>
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	bd38      	pop	{r3, r4, r5, pc}
 800a014:	200004d4 	.word	0x200004d4

0800a018 <__swsetup_r>:
 800a018:	4b32      	ldr	r3, [pc, #200]	; (800a0e4 <__swsetup_r+0xcc>)
 800a01a:	b570      	push	{r4, r5, r6, lr}
 800a01c:	681d      	ldr	r5, [r3, #0]
 800a01e:	4606      	mov	r6, r0
 800a020:	460c      	mov	r4, r1
 800a022:	b125      	cbz	r5, 800a02e <__swsetup_r+0x16>
 800a024:	69ab      	ldr	r3, [r5, #24]
 800a026:	b913      	cbnz	r3, 800a02e <__swsetup_r+0x16>
 800a028:	4628      	mov	r0, r5
 800a02a:	f7ff f8b7 	bl	800919c <__sinit>
 800a02e:	4b2e      	ldr	r3, [pc, #184]	; (800a0e8 <__swsetup_r+0xd0>)
 800a030:	429c      	cmp	r4, r3
 800a032:	d10f      	bne.n	800a054 <__swsetup_r+0x3c>
 800a034:	686c      	ldr	r4, [r5, #4]
 800a036:	89a3      	ldrh	r3, [r4, #12]
 800a038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a03c:	0719      	lsls	r1, r3, #28
 800a03e:	d42c      	bmi.n	800a09a <__swsetup_r+0x82>
 800a040:	06dd      	lsls	r5, r3, #27
 800a042:	d411      	bmi.n	800a068 <__swsetup_r+0x50>
 800a044:	2309      	movs	r3, #9
 800a046:	6033      	str	r3, [r6, #0]
 800a048:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295
 800a050:	81a3      	strh	r3, [r4, #12]
 800a052:	e03e      	b.n	800a0d2 <__swsetup_r+0xba>
 800a054:	4b25      	ldr	r3, [pc, #148]	; (800a0ec <__swsetup_r+0xd4>)
 800a056:	429c      	cmp	r4, r3
 800a058:	d101      	bne.n	800a05e <__swsetup_r+0x46>
 800a05a:	68ac      	ldr	r4, [r5, #8]
 800a05c:	e7eb      	b.n	800a036 <__swsetup_r+0x1e>
 800a05e:	4b24      	ldr	r3, [pc, #144]	; (800a0f0 <__swsetup_r+0xd8>)
 800a060:	429c      	cmp	r4, r3
 800a062:	bf08      	it	eq
 800a064:	68ec      	ldreq	r4, [r5, #12]
 800a066:	e7e6      	b.n	800a036 <__swsetup_r+0x1e>
 800a068:	0758      	lsls	r0, r3, #29
 800a06a:	d512      	bpl.n	800a092 <__swsetup_r+0x7a>
 800a06c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a06e:	b141      	cbz	r1, 800a082 <__swsetup_r+0x6a>
 800a070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a074:	4299      	cmp	r1, r3
 800a076:	d002      	beq.n	800a07e <__swsetup_r+0x66>
 800a078:	4630      	mov	r0, r6
 800a07a:	f7ff fce1 	bl	8009a40 <_free_r>
 800a07e:	2300      	movs	r3, #0
 800a080:	6363      	str	r3, [r4, #52]	; 0x34
 800a082:	89a3      	ldrh	r3, [r4, #12]
 800a084:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a088:	81a3      	strh	r3, [r4, #12]
 800a08a:	2300      	movs	r3, #0
 800a08c:	6063      	str	r3, [r4, #4]
 800a08e:	6923      	ldr	r3, [r4, #16]
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	f043 0308 	orr.w	r3, r3, #8
 800a098:	81a3      	strh	r3, [r4, #12]
 800a09a:	6923      	ldr	r3, [r4, #16]
 800a09c:	b94b      	cbnz	r3, 800a0b2 <__swsetup_r+0x9a>
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0a8:	d003      	beq.n	800a0b2 <__swsetup_r+0x9a>
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f000 f957 	bl	800a360 <__smakebuf_r>
 800a0b2:	89a0      	ldrh	r0, [r4, #12]
 800a0b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0b8:	f010 0301 	ands.w	r3, r0, #1
 800a0bc:	d00a      	beq.n	800a0d4 <__swsetup_r+0xbc>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	60a3      	str	r3, [r4, #8]
 800a0c2:	6963      	ldr	r3, [r4, #20]
 800a0c4:	425b      	negs	r3, r3
 800a0c6:	61a3      	str	r3, [r4, #24]
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	b943      	cbnz	r3, 800a0de <__swsetup_r+0xc6>
 800a0cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0d0:	d1ba      	bne.n	800a048 <__swsetup_r+0x30>
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}
 800a0d4:	0781      	lsls	r1, r0, #30
 800a0d6:	bf58      	it	pl
 800a0d8:	6963      	ldrpl	r3, [r4, #20]
 800a0da:	60a3      	str	r3, [r4, #8]
 800a0dc:	e7f4      	b.n	800a0c8 <__swsetup_r+0xb0>
 800a0de:	2000      	movs	r0, #0
 800a0e0:	e7f7      	b.n	800a0d2 <__swsetup_r+0xba>
 800a0e2:	bf00      	nop
 800a0e4:	20000080 	.word	0x20000080
 800a0e8:	0800ab0c 	.word	0x0800ab0c
 800a0ec:	0800ab2c 	.word	0x0800ab2c
 800a0f0:	0800aaec 	.word	0x0800aaec

0800a0f4 <__assert_func>:
 800a0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0f6:	4614      	mov	r4, r2
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	4b09      	ldr	r3, [pc, #36]	; (800a120 <__assert_func+0x2c>)
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68d8      	ldr	r0, [r3, #12]
 800a102:	b14c      	cbz	r4, 800a118 <__assert_func+0x24>
 800a104:	4b07      	ldr	r3, [pc, #28]	; (800a124 <__assert_func+0x30>)
 800a106:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a10a:	9100      	str	r1, [sp, #0]
 800a10c:	462b      	mov	r3, r5
 800a10e:	4906      	ldr	r1, [pc, #24]	; (800a128 <__assert_func+0x34>)
 800a110:	f000 f8dc 	bl	800a2cc <fiprintf>
 800a114:	f000 f9a1 	bl	800a45a <abort>
 800a118:	4b04      	ldr	r3, [pc, #16]	; (800a12c <__assert_func+0x38>)
 800a11a:	461c      	mov	r4, r3
 800a11c:	e7f3      	b.n	800a106 <__assert_func+0x12>
 800a11e:	bf00      	nop
 800a120:	20000080 	.word	0x20000080
 800a124:	0800acb5 	.word	0x0800acb5
 800a128:	0800acc2 	.word	0x0800acc2
 800a12c:	0800acf0 	.word	0x0800acf0

0800a130 <_close_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	2300      	movs	r3, #0
 800a134:	4d05      	ldr	r5, [pc, #20]	; (800a14c <_close_r+0x1c>)
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	602b      	str	r3, [r5, #0]
 800a13c:	f7f7 fe7c 	bl	8001e38 <_close>
 800a140:	1c43      	adds	r3, r0, #1
 800a142:	d102      	bne.n	800a14a <_close_r+0x1a>
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	b103      	cbz	r3, 800a14a <_close_r+0x1a>
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	200004d4 	.word	0x200004d4

0800a150 <__sflush_r>:
 800a150:	898a      	ldrh	r2, [r1, #12]
 800a152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a154:	4605      	mov	r5, r0
 800a156:	0710      	lsls	r0, r2, #28
 800a158:	460c      	mov	r4, r1
 800a15a:	d457      	bmi.n	800a20c <__sflush_r+0xbc>
 800a15c:	684b      	ldr	r3, [r1, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	dc04      	bgt.n	800a16c <__sflush_r+0x1c>
 800a162:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a164:	2b00      	cmp	r3, #0
 800a166:	dc01      	bgt.n	800a16c <__sflush_r+0x1c>
 800a168:	2000      	movs	r0, #0
 800a16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a16c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a16e:	2e00      	cmp	r6, #0
 800a170:	d0fa      	beq.n	800a168 <__sflush_r+0x18>
 800a172:	2300      	movs	r3, #0
 800a174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a178:	682f      	ldr	r7, [r5, #0]
 800a17a:	602b      	str	r3, [r5, #0]
 800a17c:	d032      	beq.n	800a1e4 <__sflush_r+0x94>
 800a17e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	075a      	lsls	r2, r3, #29
 800a184:	d505      	bpl.n	800a192 <__sflush_r+0x42>
 800a186:	6863      	ldr	r3, [r4, #4]
 800a188:	1ac0      	subs	r0, r0, r3
 800a18a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a18c:	b10b      	cbz	r3, 800a192 <__sflush_r+0x42>
 800a18e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a190:	1ac0      	subs	r0, r0, r3
 800a192:	2300      	movs	r3, #0
 800a194:	4602      	mov	r2, r0
 800a196:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a198:	4628      	mov	r0, r5
 800a19a:	6a21      	ldr	r1, [r4, #32]
 800a19c:	47b0      	blx	r6
 800a19e:	1c43      	adds	r3, r0, #1
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	d106      	bne.n	800a1b2 <__sflush_r+0x62>
 800a1a4:	6829      	ldr	r1, [r5, #0]
 800a1a6:	291d      	cmp	r1, #29
 800a1a8:	d82c      	bhi.n	800a204 <__sflush_r+0xb4>
 800a1aa:	4a29      	ldr	r2, [pc, #164]	; (800a250 <__sflush_r+0x100>)
 800a1ac:	40ca      	lsrs	r2, r1
 800a1ae:	07d6      	lsls	r6, r2, #31
 800a1b0:	d528      	bpl.n	800a204 <__sflush_r+0xb4>
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	6062      	str	r2, [r4, #4]
 800a1b6:	6922      	ldr	r2, [r4, #16]
 800a1b8:	04d9      	lsls	r1, r3, #19
 800a1ba:	6022      	str	r2, [r4, #0]
 800a1bc:	d504      	bpl.n	800a1c8 <__sflush_r+0x78>
 800a1be:	1c42      	adds	r2, r0, #1
 800a1c0:	d101      	bne.n	800a1c6 <__sflush_r+0x76>
 800a1c2:	682b      	ldr	r3, [r5, #0]
 800a1c4:	b903      	cbnz	r3, 800a1c8 <__sflush_r+0x78>
 800a1c6:	6560      	str	r0, [r4, #84]	; 0x54
 800a1c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1ca:	602f      	str	r7, [r5, #0]
 800a1cc:	2900      	cmp	r1, #0
 800a1ce:	d0cb      	beq.n	800a168 <__sflush_r+0x18>
 800a1d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1d4:	4299      	cmp	r1, r3
 800a1d6:	d002      	beq.n	800a1de <__sflush_r+0x8e>
 800a1d8:	4628      	mov	r0, r5
 800a1da:	f7ff fc31 	bl	8009a40 <_free_r>
 800a1de:	2000      	movs	r0, #0
 800a1e0:	6360      	str	r0, [r4, #52]	; 0x34
 800a1e2:	e7c2      	b.n	800a16a <__sflush_r+0x1a>
 800a1e4:	6a21      	ldr	r1, [r4, #32]
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	47b0      	blx	r6
 800a1ec:	1c41      	adds	r1, r0, #1
 800a1ee:	d1c7      	bne.n	800a180 <__sflush_r+0x30>
 800a1f0:	682b      	ldr	r3, [r5, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d0c4      	beq.n	800a180 <__sflush_r+0x30>
 800a1f6:	2b1d      	cmp	r3, #29
 800a1f8:	d001      	beq.n	800a1fe <__sflush_r+0xae>
 800a1fa:	2b16      	cmp	r3, #22
 800a1fc:	d101      	bne.n	800a202 <__sflush_r+0xb2>
 800a1fe:	602f      	str	r7, [r5, #0]
 800a200:	e7b2      	b.n	800a168 <__sflush_r+0x18>
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a208:	81a3      	strh	r3, [r4, #12]
 800a20a:	e7ae      	b.n	800a16a <__sflush_r+0x1a>
 800a20c:	690f      	ldr	r7, [r1, #16]
 800a20e:	2f00      	cmp	r7, #0
 800a210:	d0aa      	beq.n	800a168 <__sflush_r+0x18>
 800a212:	0793      	lsls	r3, r2, #30
 800a214:	bf18      	it	ne
 800a216:	2300      	movne	r3, #0
 800a218:	680e      	ldr	r6, [r1, #0]
 800a21a:	bf08      	it	eq
 800a21c:	694b      	ldreq	r3, [r1, #20]
 800a21e:	1bf6      	subs	r6, r6, r7
 800a220:	600f      	str	r7, [r1, #0]
 800a222:	608b      	str	r3, [r1, #8]
 800a224:	2e00      	cmp	r6, #0
 800a226:	dd9f      	ble.n	800a168 <__sflush_r+0x18>
 800a228:	4633      	mov	r3, r6
 800a22a:	463a      	mov	r2, r7
 800a22c:	4628      	mov	r0, r5
 800a22e:	6a21      	ldr	r1, [r4, #32]
 800a230:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a234:	47e0      	blx	ip
 800a236:	2800      	cmp	r0, #0
 800a238:	dc06      	bgt.n	800a248 <__sflush_r+0xf8>
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295
 800a240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a244:	81a3      	strh	r3, [r4, #12]
 800a246:	e790      	b.n	800a16a <__sflush_r+0x1a>
 800a248:	4407      	add	r7, r0
 800a24a:	1a36      	subs	r6, r6, r0
 800a24c:	e7ea      	b.n	800a224 <__sflush_r+0xd4>
 800a24e:	bf00      	nop
 800a250:	20400001 	.word	0x20400001

0800a254 <_fflush_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	690b      	ldr	r3, [r1, #16]
 800a258:	4605      	mov	r5, r0
 800a25a:	460c      	mov	r4, r1
 800a25c:	b913      	cbnz	r3, 800a264 <_fflush_r+0x10>
 800a25e:	2500      	movs	r5, #0
 800a260:	4628      	mov	r0, r5
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	b118      	cbz	r0, 800a26e <_fflush_r+0x1a>
 800a266:	6983      	ldr	r3, [r0, #24]
 800a268:	b90b      	cbnz	r3, 800a26e <_fflush_r+0x1a>
 800a26a:	f7fe ff97 	bl	800919c <__sinit>
 800a26e:	4b14      	ldr	r3, [pc, #80]	; (800a2c0 <_fflush_r+0x6c>)
 800a270:	429c      	cmp	r4, r3
 800a272:	d11b      	bne.n	800a2ac <_fflush_r+0x58>
 800a274:	686c      	ldr	r4, [r5, #4]
 800a276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0ef      	beq.n	800a25e <_fflush_r+0xa>
 800a27e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a280:	07d0      	lsls	r0, r2, #31
 800a282:	d404      	bmi.n	800a28e <_fflush_r+0x3a>
 800a284:	0599      	lsls	r1, r3, #22
 800a286:	d402      	bmi.n	800a28e <_fflush_r+0x3a>
 800a288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a28a:	f7ff f82a 	bl	80092e2 <__retarget_lock_acquire_recursive>
 800a28e:	4628      	mov	r0, r5
 800a290:	4621      	mov	r1, r4
 800a292:	f7ff ff5d 	bl	800a150 <__sflush_r>
 800a296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a298:	4605      	mov	r5, r0
 800a29a:	07da      	lsls	r2, r3, #31
 800a29c:	d4e0      	bmi.n	800a260 <_fflush_r+0xc>
 800a29e:	89a3      	ldrh	r3, [r4, #12]
 800a2a0:	059b      	lsls	r3, r3, #22
 800a2a2:	d4dd      	bmi.n	800a260 <_fflush_r+0xc>
 800a2a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2a6:	f7ff f81d 	bl	80092e4 <__retarget_lock_release_recursive>
 800a2aa:	e7d9      	b.n	800a260 <_fflush_r+0xc>
 800a2ac:	4b05      	ldr	r3, [pc, #20]	; (800a2c4 <_fflush_r+0x70>)
 800a2ae:	429c      	cmp	r4, r3
 800a2b0:	d101      	bne.n	800a2b6 <_fflush_r+0x62>
 800a2b2:	68ac      	ldr	r4, [r5, #8]
 800a2b4:	e7df      	b.n	800a276 <_fflush_r+0x22>
 800a2b6:	4b04      	ldr	r3, [pc, #16]	; (800a2c8 <_fflush_r+0x74>)
 800a2b8:	429c      	cmp	r4, r3
 800a2ba:	bf08      	it	eq
 800a2bc:	68ec      	ldreq	r4, [r5, #12]
 800a2be:	e7da      	b.n	800a276 <_fflush_r+0x22>
 800a2c0:	0800ab0c 	.word	0x0800ab0c
 800a2c4:	0800ab2c 	.word	0x0800ab2c
 800a2c8:	0800aaec 	.word	0x0800aaec

0800a2cc <fiprintf>:
 800a2cc:	b40e      	push	{r1, r2, r3}
 800a2ce:	b503      	push	{r0, r1, lr}
 800a2d0:	4601      	mov	r1, r0
 800a2d2:	ab03      	add	r3, sp, #12
 800a2d4:	4805      	ldr	r0, [pc, #20]	; (800a2ec <fiprintf+0x20>)
 800a2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	f7ff fcb3 	bl	8009c48 <_vfiprintf_r>
 800a2e2:	b002      	add	sp, #8
 800a2e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2e8:	b003      	add	sp, #12
 800a2ea:	4770      	bx	lr
 800a2ec:	20000080 	.word	0x20000080

0800a2f0 <_lseek_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	4608      	mov	r0, r1
 800a2f6:	4611      	mov	r1, r2
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	4d05      	ldr	r5, [pc, #20]	; (800a310 <_lseek_r+0x20>)
 800a2fc:	602a      	str	r2, [r5, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	f7f7 fdbe 	bl	8001e80 <_lseek>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_lseek_r+0x1e>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_lseek_r+0x1e>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	200004d4 	.word	0x200004d4

0800a314 <__swhatbuf_r>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	460e      	mov	r6, r1
 800a318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31c:	4614      	mov	r4, r2
 800a31e:	2900      	cmp	r1, #0
 800a320:	461d      	mov	r5, r3
 800a322:	b096      	sub	sp, #88	; 0x58
 800a324:	da08      	bge.n	800a338 <__swhatbuf_r+0x24>
 800a326:	2200      	movs	r2, #0
 800a328:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a32c:	602a      	str	r2, [r5, #0]
 800a32e:	061a      	lsls	r2, r3, #24
 800a330:	d410      	bmi.n	800a354 <__swhatbuf_r+0x40>
 800a332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a336:	e00e      	b.n	800a356 <__swhatbuf_r+0x42>
 800a338:	466a      	mov	r2, sp
 800a33a:	f000 f895 	bl	800a468 <_fstat_r>
 800a33e:	2800      	cmp	r0, #0
 800a340:	dbf1      	blt.n	800a326 <__swhatbuf_r+0x12>
 800a342:	9a01      	ldr	r2, [sp, #4]
 800a344:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a348:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a34c:	425a      	negs	r2, r3
 800a34e:	415a      	adcs	r2, r3
 800a350:	602a      	str	r2, [r5, #0]
 800a352:	e7ee      	b.n	800a332 <__swhatbuf_r+0x1e>
 800a354:	2340      	movs	r3, #64	; 0x40
 800a356:	2000      	movs	r0, #0
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	b016      	add	sp, #88	; 0x58
 800a35c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a360 <__smakebuf_r>:
 800a360:	898b      	ldrh	r3, [r1, #12]
 800a362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a364:	079d      	lsls	r5, r3, #30
 800a366:	4606      	mov	r6, r0
 800a368:	460c      	mov	r4, r1
 800a36a:	d507      	bpl.n	800a37c <__smakebuf_r+0x1c>
 800a36c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	6123      	str	r3, [r4, #16]
 800a374:	2301      	movs	r3, #1
 800a376:	6163      	str	r3, [r4, #20]
 800a378:	b002      	add	sp, #8
 800a37a:	bd70      	pop	{r4, r5, r6, pc}
 800a37c:	466a      	mov	r2, sp
 800a37e:	ab01      	add	r3, sp, #4
 800a380:	f7ff ffc8 	bl	800a314 <__swhatbuf_r>
 800a384:	9900      	ldr	r1, [sp, #0]
 800a386:	4605      	mov	r5, r0
 800a388:	4630      	mov	r0, r6
 800a38a:	f7ff fbc1 	bl	8009b10 <_malloc_r>
 800a38e:	b948      	cbnz	r0, 800a3a4 <__smakebuf_r+0x44>
 800a390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a394:	059a      	lsls	r2, r3, #22
 800a396:	d4ef      	bmi.n	800a378 <__smakebuf_r+0x18>
 800a398:	f023 0303 	bic.w	r3, r3, #3
 800a39c:	f043 0302 	orr.w	r3, r3, #2
 800a3a0:	81a3      	strh	r3, [r4, #12]
 800a3a2:	e7e3      	b.n	800a36c <__smakebuf_r+0xc>
 800a3a4:	4b0d      	ldr	r3, [pc, #52]	; (800a3dc <__smakebuf_r+0x7c>)
 800a3a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	6020      	str	r0, [r4, #0]
 800a3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	9b00      	ldr	r3, [sp, #0]
 800a3b4:	6120      	str	r0, [r4, #16]
 800a3b6:	6163      	str	r3, [r4, #20]
 800a3b8:	9b01      	ldr	r3, [sp, #4]
 800a3ba:	b15b      	cbz	r3, 800a3d4 <__smakebuf_r+0x74>
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3c2:	f000 f863 	bl	800a48c <_isatty_r>
 800a3c6:	b128      	cbz	r0, 800a3d4 <__smakebuf_r+0x74>
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	f023 0303 	bic.w	r3, r3, #3
 800a3ce:	f043 0301 	orr.w	r3, r3, #1
 800a3d2:	81a3      	strh	r3, [r4, #12]
 800a3d4:	89a0      	ldrh	r0, [r4, #12]
 800a3d6:	4305      	orrs	r5, r0
 800a3d8:	81a5      	strh	r5, [r4, #12]
 800a3da:	e7cd      	b.n	800a378 <__smakebuf_r+0x18>
 800a3dc:	08009135 	.word	0x08009135

0800a3e0 <__ascii_mbtowc>:
 800a3e0:	b082      	sub	sp, #8
 800a3e2:	b901      	cbnz	r1, 800a3e6 <__ascii_mbtowc+0x6>
 800a3e4:	a901      	add	r1, sp, #4
 800a3e6:	b142      	cbz	r2, 800a3fa <__ascii_mbtowc+0x1a>
 800a3e8:	b14b      	cbz	r3, 800a3fe <__ascii_mbtowc+0x1e>
 800a3ea:	7813      	ldrb	r3, [r2, #0]
 800a3ec:	600b      	str	r3, [r1, #0]
 800a3ee:	7812      	ldrb	r2, [r2, #0]
 800a3f0:	1e10      	subs	r0, r2, #0
 800a3f2:	bf18      	it	ne
 800a3f4:	2001      	movne	r0, #1
 800a3f6:	b002      	add	sp, #8
 800a3f8:	4770      	bx	lr
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	e7fb      	b.n	800a3f6 <__ascii_mbtowc+0x16>
 800a3fe:	f06f 0001 	mvn.w	r0, #1
 800a402:	e7f8      	b.n	800a3f6 <__ascii_mbtowc+0x16>

0800a404 <__malloc_lock>:
 800a404:	4801      	ldr	r0, [pc, #4]	; (800a40c <__malloc_lock+0x8>)
 800a406:	f7fe bf6c 	b.w	80092e2 <__retarget_lock_acquire_recursive>
 800a40a:	bf00      	nop
 800a40c:	200004c8 	.word	0x200004c8

0800a410 <__malloc_unlock>:
 800a410:	4801      	ldr	r0, [pc, #4]	; (800a418 <__malloc_unlock+0x8>)
 800a412:	f7fe bf67 	b.w	80092e4 <__retarget_lock_release_recursive>
 800a416:	bf00      	nop
 800a418:	200004c8 	.word	0x200004c8

0800a41c <_read_r>:
 800a41c:	b538      	push	{r3, r4, r5, lr}
 800a41e:	4604      	mov	r4, r0
 800a420:	4608      	mov	r0, r1
 800a422:	4611      	mov	r1, r2
 800a424:	2200      	movs	r2, #0
 800a426:	4d05      	ldr	r5, [pc, #20]	; (800a43c <_read_r+0x20>)
 800a428:	602a      	str	r2, [r5, #0]
 800a42a:	461a      	mov	r2, r3
 800a42c:	f7f7 fccb 	bl	8001dc6 <_read>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_read_r+0x1e>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	b103      	cbz	r3, 800a43a <_read_r+0x1e>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	200004d4 	.word	0x200004d4

0800a440 <__ascii_wctomb>:
 800a440:	4603      	mov	r3, r0
 800a442:	4608      	mov	r0, r1
 800a444:	b141      	cbz	r1, 800a458 <__ascii_wctomb+0x18>
 800a446:	2aff      	cmp	r2, #255	; 0xff
 800a448:	d904      	bls.n	800a454 <__ascii_wctomb+0x14>
 800a44a:	228a      	movs	r2, #138	; 0x8a
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	4770      	bx	lr
 800a454:	2001      	movs	r0, #1
 800a456:	700a      	strb	r2, [r1, #0]
 800a458:	4770      	bx	lr

0800a45a <abort>:
 800a45a:	2006      	movs	r0, #6
 800a45c:	b508      	push	{r3, lr}
 800a45e:	f000 f84d 	bl	800a4fc <raise>
 800a462:	2001      	movs	r0, #1
 800a464:	f7f7 fca5 	bl	8001db2 <_exit>

0800a468 <_fstat_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	2300      	movs	r3, #0
 800a46c:	4d06      	ldr	r5, [pc, #24]	; (800a488 <_fstat_r+0x20>)
 800a46e:	4604      	mov	r4, r0
 800a470:	4608      	mov	r0, r1
 800a472:	4611      	mov	r1, r2
 800a474:	602b      	str	r3, [r5, #0]
 800a476:	f7f7 fcea 	bl	8001e4e <_fstat>
 800a47a:	1c43      	adds	r3, r0, #1
 800a47c:	d102      	bne.n	800a484 <_fstat_r+0x1c>
 800a47e:	682b      	ldr	r3, [r5, #0]
 800a480:	b103      	cbz	r3, 800a484 <_fstat_r+0x1c>
 800a482:	6023      	str	r3, [r4, #0]
 800a484:	bd38      	pop	{r3, r4, r5, pc}
 800a486:	bf00      	nop
 800a488:	200004d4 	.word	0x200004d4

0800a48c <_isatty_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	2300      	movs	r3, #0
 800a490:	4d05      	ldr	r5, [pc, #20]	; (800a4a8 <_isatty_r+0x1c>)
 800a492:	4604      	mov	r4, r0
 800a494:	4608      	mov	r0, r1
 800a496:	602b      	str	r3, [r5, #0]
 800a498:	f7f7 fce8 	bl	8001e6c <_isatty>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <_isatty_r+0x1a>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	b103      	cbz	r3, 800a4a6 <_isatty_r+0x1a>
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	200004d4 	.word	0x200004d4

0800a4ac <_raise_r>:
 800a4ac:	291f      	cmp	r1, #31
 800a4ae:	b538      	push	{r3, r4, r5, lr}
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	460d      	mov	r5, r1
 800a4b4:	d904      	bls.n	800a4c0 <_raise_r+0x14>
 800a4b6:	2316      	movs	r3, #22
 800a4b8:	6003      	str	r3, [r0, #0]
 800a4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4c2:	b112      	cbz	r2, 800a4ca <_raise_r+0x1e>
 800a4c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4c8:	b94b      	cbnz	r3, 800a4de <_raise_r+0x32>
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 f830 	bl	800a530 <_getpid_r>
 800a4d0:	462a      	mov	r2, r5
 800a4d2:	4601      	mov	r1, r0
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4da:	f000 b817 	b.w	800a50c <_kill_r>
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d00a      	beq.n	800a4f8 <_raise_r+0x4c>
 800a4e2:	1c59      	adds	r1, r3, #1
 800a4e4:	d103      	bne.n	800a4ee <_raise_r+0x42>
 800a4e6:	2316      	movs	r3, #22
 800a4e8:	6003      	str	r3, [r0, #0]
 800a4ea:	2001      	movs	r0, #1
 800a4ec:	e7e7      	b.n	800a4be <_raise_r+0x12>
 800a4ee:	2400      	movs	r4, #0
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4f6:	4798      	blx	r3
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	e7e0      	b.n	800a4be <_raise_r+0x12>

0800a4fc <raise>:
 800a4fc:	4b02      	ldr	r3, [pc, #8]	; (800a508 <raise+0xc>)
 800a4fe:	4601      	mov	r1, r0
 800a500:	6818      	ldr	r0, [r3, #0]
 800a502:	f7ff bfd3 	b.w	800a4ac <_raise_r>
 800a506:	bf00      	nop
 800a508:	20000080 	.word	0x20000080

0800a50c <_kill_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	2300      	movs	r3, #0
 800a510:	4d06      	ldr	r5, [pc, #24]	; (800a52c <_kill_r+0x20>)
 800a512:	4604      	mov	r4, r0
 800a514:	4608      	mov	r0, r1
 800a516:	4611      	mov	r1, r2
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	f7f7 fc3a 	bl	8001d92 <_kill>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	d102      	bne.n	800a528 <_kill_r+0x1c>
 800a522:	682b      	ldr	r3, [r5, #0]
 800a524:	b103      	cbz	r3, 800a528 <_kill_r+0x1c>
 800a526:	6023      	str	r3, [r4, #0]
 800a528:	bd38      	pop	{r3, r4, r5, pc}
 800a52a:	bf00      	nop
 800a52c:	200004d4 	.word	0x200004d4

0800a530 <_getpid_r>:
 800a530:	f7f7 bc28 	b.w	8001d84 <_getpid>

0800a534 <log10f>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4604      	mov	r4, r0
 800a538:	f000 f824 	bl	800a584 <__ieee754_log10f>
 800a53c:	4621      	mov	r1, r4
 800a53e:	4605      	mov	r5, r0
 800a540:	4620      	mov	r0, r4
 800a542:	f7f6 fde1 	bl	8001108 <__aeabi_fcmpun>
 800a546:	b970      	cbnz	r0, 800a566 <log10f+0x32>
 800a548:	2100      	movs	r1, #0
 800a54a:	4620      	mov	r0, r4
 800a54c:	f7f6 fdbe 	bl	80010cc <__aeabi_fcmple>
 800a550:	b148      	cbz	r0, 800a566 <log10f+0x32>
 800a552:	2100      	movs	r1, #0
 800a554:	4620      	mov	r0, r4
 800a556:	f7f6 fda5 	bl	80010a4 <__aeabi_fcmpeq>
 800a55a:	b130      	cbz	r0, 800a56a <log10f+0x36>
 800a55c:	f7fd fa7e 	bl	8007a5c <__errno>
 800a560:	2322      	movs	r3, #34	; 0x22
 800a562:	4d06      	ldr	r5, [pc, #24]	; (800a57c <log10f+0x48>)
 800a564:	6003      	str	r3, [r0, #0]
 800a566:	4628      	mov	r0, r5
 800a568:	bd38      	pop	{r3, r4, r5, pc}
 800a56a:	f7fd fa77 	bl	8007a5c <__errno>
 800a56e:	2321      	movs	r3, #33	; 0x21
 800a570:	6003      	str	r3, [r0, #0]
 800a572:	4803      	ldr	r0, [pc, #12]	; (800a580 <log10f+0x4c>)
 800a574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a578:	f000 b856 	b.w	800a628 <nanf>
 800a57c:	ff800000 	.word	0xff800000
 800a580:	0800acf0 	.word	0x0800acf0

0800a584 <__ieee754_log10f>:
 800a584:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800a588:	4601      	mov	r1, r0
 800a58a:	4603      	mov	r3, r0
 800a58c:	b570      	push	{r4, r5, r6, lr}
 800a58e:	d105      	bne.n	800a59c <__ieee754_log10f+0x18>
 800a590:	2100      	movs	r1, #0
 800a592:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 800a596:	f7f6 fca5 	bl	8000ee4 <__aeabi_fdiv>
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
 800a59c:	2800      	cmp	r0, #0
 800a59e:	da03      	bge.n	800a5a8 <__ieee754_log10f+0x24>
 800a5a0:	f7f6 fae2 	bl	8000b68 <__aeabi_fsub>
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	e7f6      	b.n	800a596 <__ieee754_log10f+0x12>
 800a5a8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a5ac:	db02      	blt.n	800a5b4 <__ieee754_log10f+0x30>
 800a5ae:	f7f6 fadd 	bl	8000b6c <__addsf3>
 800a5b2:	e7f2      	b.n	800a59a <__ieee754_log10f+0x16>
 800a5b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800a5b8:	da2d      	bge.n	800a616 <__ieee754_log10f+0x92>
 800a5ba:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800a5be:	f7f6 fbdd 	bl	8000d7c <__aeabi_fmul>
 800a5c2:	f06f 0218 	mvn.w	r2, #24
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	15d8      	asrs	r0, r3, #23
 800a5ca:	387f      	subs	r0, #127	; 0x7f
 800a5cc:	4410      	add	r0, r2
 800a5ce:	0fc6      	lsrs	r6, r0, #31
 800a5d0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800a5d4:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800a5d8:	f7f6 fb7c 	bl	8000cd4 <__aeabi_i2f>
 800a5dc:	4605      	mov	r5, r0
 800a5de:	f1c6 007f 	rsb	r0, r6, #127	; 0x7f
 800a5e2:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800a5e6:	f000 f823 	bl	800a630 <__ieee754_logf>
 800a5ea:	490c      	ldr	r1, [pc, #48]	; (800a61c <__ieee754_log10f+0x98>)
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f7f6 fbc4 	bl	8000d7c <__aeabi_fmul>
 800a5f4:	490a      	ldr	r1, [pc, #40]	; (800a620 <__ieee754_log10f+0x9c>)
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f7f6 fbbf 	bl	8000d7c <__aeabi_fmul>
 800a5fe:	4601      	mov	r1, r0
 800a600:	4620      	mov	r0, r4
 800a602:	f7f6 fab3 	bl	8000b6c <__addsf3>
 800a606:	4907      	ldr	r1, [pc, #28]	; (800a624 <__ieee754_log10f+0xa0>)
 800a608:	4604      	mov	r4, r0
 800a60a:	4628      	mov	r0, r5
 800a60c:	f7f6 fbb6 	bl	8000d7c <__aeabi_fmul>
 800a610:	4601      	mov	r1, r0
 800a612:	4620      	mov	r0, r4
 800a614:	e7cb      	b.n	800a5ae <__ieee754_log10f+0x2a>
 800a616:	2200      	movs	r2, #0
 800a618:	e7d6      	b.n	800a5c8 <__ieee754_log10f+0x44>
 800a61a:	bf00      	nop
 800a61c:	355427db 	.word	0x355427db
 800a620:	3ede5bd9 	.word	0x3ede5bd9
 800a624:	3e9a2080 	.word	0x3e9a2080

0800a628 <nanf>:
 800a628:	4800      	ldr	r0, [pc, #0]	; (800a62c <nanf+0x4>)
 800a62a:	4770      	bx	lr
 800a62c:	7fc00000 	.word	0x7fc00000

0800a630 <__ieee754_logf>:
 800a630:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800a634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a638:	4601      	mov	r1, r0
 800a63a:	4603      	mov	r3, r0
 800a63c:	d106      	bne.n	800a64c <__ieee754_logf+0x1c>
 800a63e:	2100      	movs	r1, #0
 800a640:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 800a644:	f7f6 fc4e 	bl	8000ee4 <__aeabi_fdiv>
 800a648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64c:	2800      	cmp	r0, #0
 800a64e:	da03      	bge.n	800a658 <__ieee754_logf+0x28>
 800a650:	f7f6 fa8a 	bl	8000b68 <__aeabi_fsub>
 800a654:	2100      	movs	r1, #0
 800a656:	e7f5      	b.n	800a644 <__ieee754_logf+0x14>
 800a658:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a65c:	db02      	blt.n	800a664 <__ieee754_logf+0x34>
 800a65e:	f7f6 fa85 	bl	8000b6c <__addsf3>
 800a662:	e7f1      	b.n	800a648 <__ieee754_logf+0x18>
 800a664:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800a668:	da35      	bge.n	800a6d6 <__ieee754_logf+0xa6>
 800a66a:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800a66e:	f7f6 fb85 	bl	8000d7c <__aeabi_fmul>
 800a672:	f06f 0218 	mvn.w	r2, #24
 800a676:	4603      	mov	r3, r0
 800a678:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800a67c:	15de      	asrs	r6, r3, #23
 800a67e:	4b71      	ldr	r3, [pc, #452]	; (800a844 <__ieee754_logf+0x214>)
 800a680:	3e7f      	subs	r6, #127	; 0x7f
 800a682:	4423      	add	r3, r4
 800a684:	f403 0000 	and.w	r0, r3, #8388608	; 0x800000
 800a688:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 800a68c:	4416      	add	r6, r2
 800a68e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a692:	4320      	orrs	r0, r4
 800a694:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 800a698:	f7f6 fa66 	bl	8000b68 <__aeabi_fsub>
 800a69c:	4b6a      	ldr	r3, [pc, #424]	; (800a848 <__ieee754_logf+0x218>)
 800a69e:	f104 020f 	add.w	r2, r4, #15
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d13a      	bne.n	800a720 <__ieee754_logf+0xf0>
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	f7f6 fcfa 	bl	80010a4 <__aeabi_fcmpeq>
 800a6b0:	b198      	cbz	r0, 800a6da <__ieee754_logf+0xaa>
 800a6b2:	2e00      	cmp	r6, #0
 800a6b4:	f000 80c4 	beq.w	800a840 <__ieee754_logf+0x210>
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	f7f6 fb0b 	bl	8000cd4 <__aeabi_i2f>
 800a6be:	4963      	ldr	r1, [pc, #396]	; (800a84c <__ieee754_logf+0x21c>)
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	f7f6 fb5b 	bl	8000d7c <__aeabi_fmul>
 800a6c6:	4962      	ldr	r1, [pc, #392]	; (800a850 <__ieee754_logf+0x220>)
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f7f6 fb56 	bl	8000d7c <__aeabi_fmul>
 800a6d0:	4601      	mov	r1, r0
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	e7c3      	b.n	800a65e <__ieee754_logf+0x2e>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	e7ce      	b.n	800a678 <__ieee754_logf+0x48>
 800a6da:	495e      	ldr	r1, [pc, #376]	; (800a854 <__ieee754_logf+0x224>)
 800a6dc:	4628      	mov	r0, r5
 800a6de:	f7f6 fb4d 	bl	8000d7c <__aeabi_fmul>
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800a6e8:	f7f6 fa3e 	bl	8000b68 <__aeabi_fsub>
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f7f6 fb43 	bl	8000d7c <__aeabi_fmul>
 800a6f6:	4601      	mov	r1, r0
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f7f6 fb3f 	bl	8000d7c <__aeabi_fmul>
 800a6fe:	4604      	mov	r4, r0
 800a700:	b90e      	cbnz	r6, 800a706 <__ieee754_logf+0xd6>
 800a702:	4621      	mov	r1, r4
 800a704:	e06f      	b.n	800a7e6 <__ieee754_logf+0x1b6>
 800a706:	4630      	mov	r0, r6
 800a708:	f7f6 fae4 	bl	8000cd4 <__aeabi_i2f>
 800a70c:	494f      	ldr	r1, [pc, #316]	; (800a84c <__ieee754_logf+0x21c>)
 800a70e:	4607      	mov	r7, r0
 800a710:	f7f6 fb34 	bl	8000d7c <__aeabi_fmul>
 800a714:	4606      	mov	r6, r0
 800a716:	4638      	mov	r0, r7
 800a718:	494d      	ldr	r1, [pc, #308]	; (800a850 <__ieee754_logf+0x220>)
 800a71a:	f7f6 fb2f 	bl	8000d7c <__aeabi_fmul>
 800a71e:	e072      	b.n	800a806 <__ieee754_logf+0x1d6>
 800a720:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a724:	f7f6 fa22 	bl	8000b6c <__addsf3>
 800a728:	4601      	mov	r1, r0
 800a72a:	4628      	mov	r0, r5
 800a72c:	f7f6 fbda 	bl	8000ee4 <__aeabi_fdiv>
 800a730:	4681      	mov	r9, r0
 800a732:	4630      	mov	r0, r6
 800a734:	f7f6 face 	bl	8000cd4 <__aeabi_i2f>
 800a738:	4649      	mov	r1, r9
 800a73a:	4680      	mov	r8, r0
 800a73c:	4648      	mov	r0, r9
 800a73e:	f7f6 fb1d 	bl	8000d7c <__aeabi_fmul>
 800a742:	4601      	mov	r1, r0
 800a744:	4683      	mov	fp, r0
 800a746:	f7f6 fb19 	bl	8000d7c <__aeabi_fmul>
 800a74a:	4607      	mov	r7, r0
 800a74c:	4942      	ldr	r1, [pc, #264]	; (800a858 <__ieee754_logf+0x228>)
 800a74e:	f7f6 fb15 	bl	8000d7c <__aeabi_fmul>
 800a752:	4942      	ldr	r1, [pc, #264]	; (800a85c <__ieee754_logf+0x22c>)
 800a754:	f7f6 fa0a 	bl	8000b6c <__addsf3>
 800a758:	4639      	mov	r1, r7
 800a75a:	f7f6 fb0f 	bl	8000d7c <__aeabi_fmul>
 800a75e:	4940      	ldr	r1, [pc, #256]	; (800a860 <__ieee754_logf+0x230>)
 800a760:	f7f6 fa04 	bl	8000b6c <__addsf3>
 800a764:	4639      	mov	r1, r7
 800a766:	f7f6 fb09 	bl	8000d7c <__aeabi_fmul>
 800a76a:	493e      	ldr	r1, [pc, #248]	; (800a864 <__ieee754_logf+0x234>)
 800a76c:	f7f6 f9fe 	bl	8000b6c <__addsf3>
 800a770:	4659      	mov	r1, fp
 800a772:	f7f6 fb03 	bl	8000d7c <__aeabi_fmul>
 800a776:	493c      	ldr	r1, [pc, #240]	; (800a868 <__ieee754_logf+0x238>)
 800a778:	4683      	mov	fp, r0
 800a77a:	4638      	mov	r0, r7
 800a77c:	f7f6 fafe 	bl	8000d7c <__aeabi_fmul>
 800a780:	493a      	ldr	r1, [pc, #232]	; (800a86c <__ieee754_logf+0x23c>)
 800a782:	f7f6 f9f3 	bl	8000b6c <__addsf3>
 800a786:	4639      	mov	r1, r7
 800a788:	f7f6 faf8 	bl	8000d7c <__aeabi_fmul>
 800a78c:	4938      	ldr	r1, [pc, #224]	; (800a870 <__ieee754_logf+0x240>)
 800a78e:	f7f6 f9ed 	bl	8000b6c <__addsf3>
 800a792:	4639      	mov	r1, r7
 800a794:	f7f6 faf2 	bl	8000d7c <__aeabi_fmul>
 800a798:	4601      	mov	r1, r0
 800a79a:	4658      	mov	r0, fp
 800a79c:	f7f6 f9e6 	bl	8000b6c <__addsf3>
 800a7a0:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800a874 <__ieee754_logf+0x244>
 800a7a4:	f5c4 1357 	rsb	r3, r4, #3522560	; 0x35c000
 800a7a8:	44a2      	add	sl, r4
 800a7aa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a7ae:	ea43 030a 	orr.w	r3, r3, sl
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	4607      	mov	r7, r0
 800a7b6:	dd30      	ble.n	800a81a <__ieee754_logf+0x1ea>
 800a7b8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f7f6 fadd 	bl	8000d7c <__aeabi_fmul>
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	f7f6 fada 	bl	8000d7c <__aeabi_fmul>
 800a7c8:	4601      	mov	r1, r0
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	4638      	mov	r0, r7
 800a7ce:	f7f6 f9cd 	bl	8000b6c <__addsf3>
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	f7f6 fad2 	bl	8000d7c <__aeabi_fmul>
 800a7d8:	4607      	mov	r7, r0
 800a7da:	b946      	cbnz	r6, 800a7ee <__ieee754_logf+0x1be>
 800a7dc:	4601      	mov	r1, r0
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f7f6 f9c2 	bl	8000b68 <__aeabi_fsub>
 800a7e4:	4601      	mov	r1, r0
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	f7f6 f9be 	bl	8000b68 <__aeabi_fsub>
 800a7ec:	e72c      	b.n	800a648 <__ieee754_logf+0x18>
 800a7ee:	4917      	ldr	r1, [pc, #92]	; (800a84c <__ieee754_logf+0x21c>)
 800a7f0:	4640      	mov	r0, r8
 800a7f2:	f7f6 fac3 	bl	8000d7c <__aeabi_fmul>
 800a7f6:	4916      	ldr	r1, [pc, #88]	; (800a850 <__ieee754_logf+0x220>)
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	4640      	mov	r0, r8
 800a7fc:	f7f6 fabe 	bl	8000d7c <__aeabi_fmul>
 800a800:	4639      	mov	r1, r7
 800a802:	f7f6 f9b3 	bl	8000b6c <__addsf3>
 800a806:	4601      	mov	r1, r0
 800a808:	4620      	mov	r0, r4
 800a80a:	f7f6 f9ad 	bl	8000b68 <__aeabi_fsub>
 800a80e:	4629      	mov	r1, r5
 800a810:	f7f6 f9aa 	bl	8000b68 <__aeabi_fsub>
 800a814:	4601      	mov	r1, r0
 800a816:	4630      	mov	r0, r6
 800a818:	e7e6      	b.n	800a7e8 <__ieee754_logf+0x1b8>
 800a81a:	4601      	mov	r1, r0
 800a81c:	4628      	mov	r0, r5
 800a81e:	f7f6 f9a3 	bl	8000b68 <__aeabi_fsub>
 800a822:	4649      	mov	r1, r9
 800a824:	f7f6 faaa 	bl	8000d7c <__aeabi_fmul>
 800a828:	4604      	mov	r4, r0
 800a82a:	2e00      	cmp	r6, #0
 800a82c:	f43f af69 	beq.w	800a702 <__ieee754_logf+0xd2>
 800a830:	4906      	ldr	r1, [pc, #24]	; (800a84c <__ieee754_logf+0x21c>)
 800a832:	4640      	mov	r0, r8
 800a834:	f7f6 faa2 	bl	8000d7c <__aeabi_fmul>
 800a838:	4905      	ldr	r1, [pc, #20]	; (800a850 <__ieee754_logf+0x220>)
 800a83a:	4606      	mov	r6, r0
 800a83c:	4640      	mov	r0, r8
 800a83e:	e76c      	b.n	800a71a <__ieee754_logf+0xea>
 800a840:	2000      	movs	r0, #0
 800a842:	e701      	b.n	800a648 <__ieee754_logf+0x18>
 800a844:	004afb20 	.word	0x004afb20
 800a848:	007ffff0 	.word	0x007ffff0
 800a84c:	3f317180 	.word	0x3f317180
 800a850:	3717f7d1 	.word	0x3717f7d1
 800a854:	3eaaaaab 	.word	0x3eaaaaab
 800a858:	3e178897 	.word	0x3e178897
 800a85c:	3e3a3325 	.word	0x3e3a3325
 800a860:	3e924925 	.word	0x3e924925
 800a864:	3f2aaaab 	.word	0x3f2aaaab
 800a868:	3e1cd04f 	.word	0x3e1cd04f
 800a86c:	3e638e29 	.word	0x3e638e29
 800a870:	3ecccccd 	.word	0x3ecccccd
 800a874:	ffcf5c30 	.word	0xffcf5c30

0800a878 <_init>:
 800a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87a:	bf00      	nop
 800a87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87e:	bc08      	pop	{r3}
 800a880:	469e      	mov	lr, r3
 800a882:	4770      	bx	lr

0800a884 <_fini>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	bf00      	nop
 800a888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a88a:	bc08      	pop	{r3}
 800a88c:	469e      	mov	lr, r3
 800a88e:	4770      	bx	lr
