/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>
#include "decawave/dw_api.h"
#include "log/log.h"
#include "mac/mac.h"
#include "message_types.h"
#include "rtls_types.h"
#include "uart_types.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1);
  return ch;
}
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
dwDeviceTypes_t device = {
    .extendedFrameLength = FRAME_LENGTH_NORMAL,
    .pacSize = PAC_SIZE_8,
    .pulseFrequency = TX_PULSE_FREQ_64MHZ,
    .dataRate = TRX_RATE_6800KBPS,
    .preambleLength = TX_PREAMBLE_LEN_128,
    .preambleCode = PREAMBLE_CODE_64MHZ_9,
    .channel = CHANNEL_2,
    .smartPower = true,
    .frameCheck = true,
    .permanentReceive = false,
    .deviceMode = IDLE_MODE,
    .forceTxPower = false,
};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dwInteruptHandler(void)
{
  // dwReadSystemEventStatusRegister(&device);
  if (dwIsTransmitDone(&device))
  {
    dwClearTransmitStatus(&device);
  }
  if (dwIsReceiveTimestampAvailable(&device))
  {
    dwClearReceiveTimestampAvailableStatus(&device);
  }
  if (dwIsReceiveFailed(&device))
  {
    dwClearReceiveStatus(&device);
    dwRxSoftReset(&device);
  }
  if (dwIsReceiveTimeout(&device))
  {
    dwClearReceiveStatus(&device);
    dwRxSoftReset(&device);
  }
  if (dwIsReceiveDone(&device))
  {
    dwClearReceiveStatus(&device);
  }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  packet_t bufPacket = {0};
  beaconHandle_t beaconHandle = {0};
  locMess_t locMess = {0};
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  logi("SNIFFER START");
  dwInit(&device);
  if (dwConfigure(&device) == DW_ERROR_OK)
  {
    dwEnableAllLeds(&device);
  }
  else
  {
    loge("Configure failed");
    while (1)
      ;
  }
  dwNewConfiguration(&device);
  dwSetDefaults(&device);
  dwCommitConfiguration(&device);
  TIM1->CNT = 0;
  HAL_TIM_Base_Start(&htim1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    dwNewReceive(&device);
    dwSetDefaults(&device);
    dwStartReceive(&device);
    do
    {
      dwReadSystemEventStatusRegister(&device);
    } while (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))));
    dwInteruptHandler();
    if (device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8))
    {
      int length = dwGetDataLength(&device);
      if (length > 0)
      {
        memset(&bufPacket, 0, sizeof(bufPacket));
        dwGetData(&device, (uint8_t *)&bufPacket, length);
        if (bufPacket.payload[0] == TYPE_BEAC)
        {
          if (bufPacket.payload[BEAC_FLAG])
            printf("[%d] B Src%02x%02x F%02x SF%d BCN%d Tag%02x%02x TWR%d\r\n", TIM1->CNT,
                   bufPacket.sourceAddress[0],
                   bufPacket.sourceAddress[1],
                   bufPacket.payload[BEAC_FLAG],
                   bufPacket.payload[BEAC_SF_NUM],
                   bufPacket.payload[BEAC_BCN_SLOT_NUM],
                   bufPacket.payload[BEAC_EXT_TAG_ADDR],
                   bufPacket.payload[BEAC_EXT_TAG_ADDR + 1],
                   bufPacket.payload[BEAC_TWR_SLOT_NUM]);
          else
            printf("[%d] B Src%02x%02x SF%d BCN%d\r\n",  TIM1->CNT,
                   bufPacket.sourceAddress[0],
                   bufPacket.sourceAddress[1],
                   bufPacket.payload[BEAC_SF_NUM],
                   bufPacket.payload[BEAC_BCN_SLOT_NUM]);
        }
        else if (bufPacket.payload[0] == TYPE_POLL)
        {
          printf("[%d] P Src%02x%02x TWR%d Des%02x%02x%02x%02x\r\n", TIM1->CNT,
                 bufPacket.sourceAddress[0],
                 bufPacket.sourceAddress[1],
                 bufPacket.payload[POLL_TWR_SLOT_NUM],
                 bufPacket.payload[POLL_ANCHOR_ADDR],
//                 bufPacket.payload[POLL_ANCHOR_ADDR + 1],
                 bufPacket.payload[POLL_ANCHOR_ADDR + 2],
//                 bufPacket.payload[POLL_ANCHOR_ADDR + 3],
                 bufPacket.payload[POLL_ANCHOR_ADDR + 4],
//                 bufPacket.payload[POLL_ANCHOR_ADDR + 5],
                 bufPacket.payload[POLL_ANCHOR_ADDR + 6]);
//                 bufPacket.payload[POLL_ANCHOR_ADDR + 7]);
        }
        else if (bufPacket.payload[0] == TYPE_RESP)
        {
          printf("[%d] R Src%02x%02x\r\n", TIM1->CNT, bufPacket.sourceAddress[0], bufPacket.sourceAddress[1]);
        }
        else if (bufPacket.payload[0] == TYPE_LOC)
        {
          memset(&locMess, 0, sizeof(locMess));
          memcpy(&locMess, bufPacket.payload, sizeof(bufPacket.payload));
          printf("[%d] L Src%02x%02x TWR%d X%0.2f Y%0.2f\r\n", TIM1->CNT, bufPacket.sourceAddress[0], bufPacket.sourceAddress[1], locMess.twrSlotNumber, locMess.x.xVal, locMess.y.yVal);
        }
      }
    }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
