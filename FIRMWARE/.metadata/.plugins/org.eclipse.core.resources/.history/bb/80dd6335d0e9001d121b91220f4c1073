/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>
#include "decawave/dw_api.h"
#include "log/log.h"
#include "mac/mac.h"
#include "message_types.h"
#include "rtls_types.h"
#include "uart_types.h"
#include "kalman_filter.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define RX_BEACON_TIMEOUT 600
#define RX_POLL_TIMEOUT 600
#define RX_RESP_TIMEOUT 800
#define RX_LOC_TIMEOUT 500
#define RESP_DELAY 360
#define US_TO_DECAWAVE_TICK 63898
#define SPEED_OF_LIGHT 299702547
#define HERTZ_TO_PPM_MULTIPLIER_CHAN_1 (-1.0e6 / 3494.4e6)
#define HERTZ_TO_PPM_MULTIPLIER_CHAN_2 (-1.0e6 / 3993.6e6)
#define HERTZ_TO_PPM_MULTIPLIER_CHAN_3 (-1.0e6 / 4492.8e6)
#define HERTZ_TO_PPM_MULTIPLIER_CHAN_5 (-1.0e6 / 6489.6e6)
#define FREQ_OFFSET_MULTIPLIER (998.4e6 / 2.0 / 1024.0 / 131072.0)

#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1);
  return ch;
}

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
const double dwFreq = 499.2e6 * 128;
static const uint8_t tagBaseAddr[2] = {0x21, 0x05};
dwDeviceTypes_t device = {
    .extendedFrameLength = FRAME_LENGTH_NORMAL,
    .pacSize = PAC_SIZE_8,
    .pulseFrequency = TX_PULSE_FREQ_64MHZ,
    .dataRate = TRX_RATE_6800KBPS,
    .preambleLength = TX_PREAMBLE_LEN_128,
    .preambleCode = PREAMBLE_CODE_64MHZ_9,
    .channel = CHANNEL_2,
    .smartPower = true,
    .frameCheck = true,
    .permanentReceive = false,
    .deviceMode = IDLE_MODE,
    .forceTxPower = false,
};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dwInteruptHandler(void)
{
  // dwReadSystemEventStatusRegister(&device);
  if (dwIsTransmitDone(&device))
  {
    dwClearTransmitStatus(&device);
  }
  if (dwIsReceiveTimestampAvailable(&device))
  {
    dwClearReceiveTimestampAvailableStatus(&device);
  }
  if (dwIsReceiveFailed(&device))
  {
    dwClearReceiveStatus(&device);
    dwRxSoftReset(&device);
  }
  if (dwIsReceiveTimeout(&device))
  {
    dwClearReceiveStatus(&device);
    dwRxSoftReset(&device);
  }
  if (dwIsReceiveDone(&device))
  {
    dwClearReceiveStatus(&device);
  }
}
/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
  /* USER CODE BEGIN 1 */
  uint32_t ANTENNA_DELAY = 32000;
  double distanceRef = 8.15;
  pollHandle_t pollHandle = {0};
  respHandle_t respHandle = {0};
  packet_t pollPacket = {0};
  packet_t respPacket = {0};
  double clockOffsetRatio = 0.0;
  double sumDistance = 0.0;
  int cnt = 0;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  dwInit(&device);
  if (dwConfigure(&device) == DW_ERROR_OK)
  {
    dwEnableAllLeds(&device);
  }
  else
  {
    loge("Configure failed");
    while (1)
      ;
  }
  dwNewConfiguration(&device);
  dwSetDefaults(&device);
  dwCommitConfiguration(&device);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    memset(&pollHandle, 0, sizeof(pollHandle));
    memset(&pollPacket, 0, sizeof(pollPacket));
    pollHandle.pollMess.messID = TYPE_POLL;
    MAC80215_PACKET_INIT(pollPacket, MAC802154_TYPE_DATA);
    memset(pollPacket.destAddress, 0xFF, sizeof(pollPacket.destAddress));
//    memcpy(pollPacket.sourceAddress, myTag.tagAddress, sizeof(myTag.tagAddress));
    memcpy(pollPacket.payload, (uint8_t *)&pollHandle.pollMess, sizeof(pollHandle.pollMess));
    dwNewTransmit(&device);
    dwSetDefaults(&device);
    dwSetData(&device, (uint8_t *)&pollPacket, MAC802154_HEADER_LENGTH + sizeof(pollHandle.pollMess));
    dwStartTransmit(&device, false);
    do
    {
      dwReadSystemEventStatusRegister(&device);
    } while (!(device.sysstatus[0] & (1 << TXFRS_BIT)));
    dwInteruptHandler();
    dwGetTransmitTimestamp(&device, &pollHandle.timestamp);
    pollHandle.timestamp.timeFull += (ANTENNA_DELAY / 2);
    dwSetReceiveWaitTimeout(&device, RX_RESP_TIMEOUT);
    dwWriteSystemConfigurationRegister(&device);
    dwNewReceive(&device);
    dwSetDefaults(&device);
    dwStartReceive(&device);
    do
    {
      dwReadSystemEventStatusRegister(&device);
    } while (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))));
    dwInteruptHandler();
    if (device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8))
    {
      memcpy(&respHandle.respMess, respPacket.payload, sizeof(respHandle.respMess));
      dwGetReceiveTimestamp(&device, &respHandle.timestamp);
      respHandle.timestamp.timeFull -= (ANTENNA_DELAY / 2);
      clockOffsetRatio = (dwReadCarrierIntegrator(&device) * (FREQ_OFFSET_MULTIPLIER * HERTZ_TO_PPM_MULTIPLIER_CHAN_2 / 1.0e6));
      dwTimestamp_t timeRx, timeTx;
      memcpy(timeRx.timeRaw, respHandle.respMess.rxTimestamp.timeRaw, sizeof(respHandle.respMess.rxTimestamp.timeRaw));
      memcpy(timeTx.timeRaw, respHandle.respMess.txTimestamp.timeRaw, sizeof(respHandle.respMess.txTimestamp.timeRaw));
      timeRx.timeFull -= (ANTENNA_DELAY / 2);
      timeTx.timeFull += (ANTENNA_DELAY / 2);
      uint32_t timeInit = respHandle.timestamp.timeLow32 - pollHandle.timestamp.timeLow32;
      uint32_t timeResp = timeTx.timeLow32 - timeRx.timeLow32;
      double tof = (timeInit - timeResp * (1 - clockOffsetRatio)) / 2.0;
      double distance = tof * SPEED_OF_LIGHT / dwFreq;
      sumDistance += distance;
      cnt++;
      if (cnt == 100)
      {
        double disAverage = sumDistance / (double)cnt;
        if (disAverage > distanceRef)
        {
          ANTENNA_DELAY += 10;
        }
        else
        {
          ANTENNA_DELAY -= 10;
        }
        printf("disAverage: %0.2f, antenna delay: %d\r\n", (float)disAverage, ANTENNA_DELAY);
        sumDistance = 0;
        cnt = 0;
      }
    }
    HAL_Delay(10);
  }
  /* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
