
rtls_tag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f234  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800f3c8  0800f3c8  0001f3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f980  0800f980  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f980  0800f980  0001f980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f988  0800f988  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f988  0800f988  0001f988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f98c  0800f98c  0001f98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800f990  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002025c  2**0
                  CONTENTS
 10 .bss          0000041c  20000260  20000260  00020260  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000067c  2000067c  00020260  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166dd  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003085  00000000  00000000  00036969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  000399f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012b8  00000000  00000000  0003ae00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002527b  00000000  00000000  0003c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173ae  00000000  00000000  00061333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de00f  00000000  00000000  000786e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001566f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e24  00000000  00000000  00156740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f3ac 	.word	0x0800f3ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	0800f3ac 	.word	0x0800f3ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC1_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC1_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC1_Init+0x98>)
 8001012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001016:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC1_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC1_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC1_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC1_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC1_Init+0x98>)
 800105a:	f005 fbf1 	bl	8006840 <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001064:	f002 fa4e 	bl	8003504 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001068:	2308      	movs	r3, #8
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC1_Init+0x98>)
 800107a:	f005 fc25 	bl	80068c8 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001084:	f002 fa3e 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000027c 	.word	0x2000027c
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f005 ff27 	bl	8006f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020400 	.word	0x40020400

08001124 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b42      	ldr	r3, [pc, #264]	; (8001248 <MX_GPIO_Init+0x124>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a41      	ldr	r2, [pc, #260]	; (8001248 <MX_GPIO_Init+0x124>)
 8001144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b3f      	ldr	r3, [pc, #252]	; (8001248 <MX_GPIO_Init+0x124>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <MX_GPIO_Init+0x124>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a3a      	ldr	r2, [pc, #232]	; (8001248 <MX_GPIO_Init+0x124>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b38      	ldr	r3, [pc, #224]	; (8001248 <MX_GPIO_Init+0x124>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b34      	ldr	r3, [pc, #208]	; (8001248 <MX_GPIO_Init+0x124>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a33      	ldr	r2, [pc, #204]	; (8001248 <MX_GPIO_Init+0x124>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <MX_GPIO_Init+0x124>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <MX_GPIO_Init+0x124>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a2c      	ldr	r2, [pc, #176]	; (8001248 <MX_GPIO_Init+0x124>)
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <MX_GPIO_Init+0x124>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UWB_CS_GPIO_Port, UWB_CS_Pin, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2110      	movs	r1, #16
 80011ae:	4827      	ldr	r0, [pc, #156]	; (800124c <MX_GPIO_Init+0x128>)
 80011b0:	f006 f870 	bl	8007294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ba:	4825      	ldr	r0, [pc, #148]	; (8001250 <MX_GPIO_Init+0x12c>)
 80011bc:	f006 f86a 	bl	8007294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80011c6:	4823      	ldr	r0, [pc, #140]	; (8001254 <MX_GPIO_Init+0x130>)
 80011c8:	f006 f864 	bl	8007294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB_CS_Pin;
 80011cc:	2310      	movs	r3, #16
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d8:	2302      	movs	r3, #2
 80011da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UWB_CS_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	481a      	ldr	r0, [pc, #104]	; (800124c <MX_GPIO_Init+0x128>)
 80011e4:	f005 feba 	bl	8006f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f6:	2302      	movs	r3, #2
 80011f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_GPIO_Init+0x12c>)
 8001202:	f005 feab 	bl	8006f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001206:	f44f 7340 	mov.w	r3, #768	; 0x300
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001214:	2302      	movs	r3, #2
 8001216:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_GPIO_Init+0x130>)
 8001220:	f005 fe9c 	bl	8006f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED3_Pin|BUT_Pin;
 8001224:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800122a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_GPIO_Init+0x130>)
 800123c:	f005 fe8e 	bl	8006f5c <HAL_GPIO_Init>

}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	40020000 	.word	0x40020000
 8001250:	40020400 	.word	0x40020400
 8001254:	40020c00 	.word	0x40020c00

08001258 <kalman_init>:
#include "kalman_filter.h"
#include "math.h"

void kalman_init(kalmanFilter *obj, float mea_e, float est_e, float q, float _last_estimate)
{
 8001258:	b480      	push	{r7}
 800125a:	b087      	sub	sp, #28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6178      	str	r0, [r7, #20]
 8001260:	ed87 0a04 	vstr	s0, [r7, #16]
 8001264:	edc7 0a03 	vstr	s1, [r7, #12]
 8001268:	ed87 1a02 	vstr	s2, [r7, #8]
 800126c:	edc7 1a01 	vstr	s3, [r7, #4]
	obj->_err_measure = mea_e;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	601a      	str	r2, [r3, #0]
	obj->_err_estimate = est_e;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	605a      	str	r2, [r3, #4]
	obj->_last_estimate = _last_estimate;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	611a      	str	r2, [r3, #16]
	obj->_q = q;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	609a      	str	r2, [r3, #8]
}
 8001288:	bf00      	nop
 800128a:	371c      	adds	r7, #28
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <updateEstimate>:
float updateEstimate(kalmanFilter *obj, float mea)
{
 8001294:	b5b0      	push	{r4, r5, r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	ed87 0a00 	vstr	s0, [r7]
	obj->_err_estimate += obj->_q;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	edc3 7a01 	vstr	s15, [r3, #4]
	obj->_kalman_gain = obj->_err_estimate / (obj->_err_estimate + obj->_err_measure);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	ed93 7a01 	vldr	s14, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	edc3 7a05 	vstr	s15, [r3, #20]
	obj->_current_estimate = obj->_last_estimate + obj->_kalman_gain * (mea - obj->_last_estimate);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	ed93 7a04 	vldr	s14, [r3, #16]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	edd3 6a05 	vldr	s13, [r3, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80012e8:	ed97 6a00 	vldr	s12, [r7]
 80012ec:	ee76 7a67 	vsub.f32	s15, s12, s15
 80012f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	edc3 7a03 	vstr	s15, [r3, #12]
	obj->_err_estimate = (1.0 - obj->_kalman_gain) * obj->_err_estimate;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f920 	bl	8000548 <__aeabi_f2d>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	f04f 0000 	mov.w	r0, #0
 8001310:	4913      	ldr	r1, [pc, #76]	; (8001360 <updateEstimate+0xcc>)
 8001312:	f7fe ffb9 	bl	8000288 <__aeabi_dsub>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4614      	mov	r4, r2
 800131c:	461d      	mov	r5, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f910 	bl	8000548 <__aeabi_f2d>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4620      	mov	r0, r4
 800132e:	4629      	mov	r1, r5
 8001330:	f7ff f962 	bl	80005f8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fc54 	bl	8000be8 <__aeabi_d2f>
 8001340:	4602      	mov	r2, r0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	605a      	str	r2, [r3, #4]
	obj->_last_estimate = obj->_current_estimate;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	611a      	str	r2, [r3, #16]
	return obj->_current_estimate;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	ee07 3a90 	vmov	s15, r3
}
 8001356:	eeb0 0a67 	vmov.f32	s0, s15
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bdb0      	pop	{r4, r5, r7, pc}
 8001360:	3ff00000 	.word	0x3ff00000

08001364 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1);
 800136c:	1d39      	adds	r1, r7, #4
 800136e:	2301      	movs	r3, #1
 8001370:	2201      	movs	r2, #1
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <__io_putchar+0x20>)
 8001374:	f007 ff1f 	bl	80091b6 <HAL_UART_Transmit>
  return ch;
 8001378:	687b      	ldr	r3, [r7, #4]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200005a4 	.word	0x200005a4

08001388 <dwInteruptHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dwInteruptHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  // dwReadSystemEventStatusRegister(&device);
  if (dwIsTransmitDone(&device))
 800138c:	481a      	ldr	r0, [pc, #104]	; (80013f8 <dwInteruptHandler+0x70>)
 800138e:	f003 fe55 	bl	800503c <dwIsTransmitDone>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <dwInteruptHandler+0x16>
  {
    dwClearTransmitStatus(&device);
 8001398:	4817      	ldr	r0, [pc, #92]	; (80013f8 <dwInteruptHandler+0x70>)
 800139a:	f003 ff21 	bl	80051e0 <dwClearTransmitStatus>
  }
  if (dwIsReceiveTimestampAvailable(&device))
 800139e:	4816      	ldr	r0, [pc, #88]	; (80013f8 <dwInteruptHandler+0x70>)
 80013a0:	f003 fe5c 	bl	800505c <dwIsReceiveTimestampAvailable>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <dwInteruptHandler+0x28>
  {
    dwClearReceiveTimestampAvailableStatus(&device);
 80013aa:	4813      	ldr	r0, [pc, #76]	; (80013f8 <dwInteruptHandler+0x70>)
 80013ac:	f003 feea 	bl	8005184 <dwClearReceiveTimestampAvailableStatus>
  }
  if (dwIsReceiveFailed(&device))
 80013b0:	4811      	ldr	r0, [pc, #68]	; (80013f8 <dwInteruptHandler+0x70>)
 80013b2:	f003 fe81 	bl	80050b8 <dwIsReceiveFailed>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <dwInteruptHandler+0x40>
  {
    dwClearReceiveStatus(&device);
 80013bc:	480e      	ldr	r0, [pc, #56]	; (80013f8 <dwInteruptHandler+0x70>)
 80013be:	f003 fefd 	bl	80051bc <dwClearReceiveStatus>
    dwRxSoftReset(&device);
 80013c2:	480d      	ldr	r0, [pc, #52]	; (80013f8 <dwInteruptHandler+0x70>)
 80013c4:	f002 fea2 	bl	800410c <dwRxSoftReset>
  }
  if (dwIsReceiveTimeout(&device))
 80013c8:	480b      	ldr	r0, [pc, #44]	; (80013f8 <dwInteruptHandler+0x70>)
 80013ca:	f003 fecb 	bl	8005164 <dwIsReceiveTimeout>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <dwInteruptHandler+0x58>
  {
    dwClearReceiveStatus(&device);
 80013d4:	4808      	ldr	r0, [pc, #32]	; (80013f8 <dwInteruptHandler+0x70>)
 80013d6:	f003 fef1 	bl	80051bc <dwClearReceiveStatus>
    dwRxSoftReset(&device);
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <dwInteruptHandler+0x70>)
 80013dc:	f002 fe96 	bl	800410c <dwRxSoftReset>
  }
  if (dwIsReceiveDone(&device))
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <dwInteruptHandler+0x70>)
 80013e2:	f003 fe4b 	bl	800507c <dwIsReceiveDone>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <dwInteruptHandler+0x6a>
  {
    dwClearReceiveStatus(&device);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <dwInteruptHandler+0x70>)
 80013ee:	f003 fee5 	bl	80051bc <dwClearReceiveStatus>
  }
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000010 	.word	0x20000010

080013fc <getFourAnchor>:

void getFourAnchor(beaconHandle_t *beacon, uint16_t *bcnSlotBitmap)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0aa      	sub	sp, #168	; 0xa8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  rssiBuf_t temp;
  rssiBuf_t rssiBuf[BCN_SLOT_TOTAL] = {0};
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f008 fa96 	bl	8009940 <memset>
  int index = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  for (int i = 0; i < BCN_SLOT_TOTAL; i++)
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001420:	e02a      	b.n	8001478 <getFourAnchor+0x7c>
  {
    if (systemHandle.beaconBitmap & (1 << i))
 8001422:	4b5a      	ldr	r3, [pc, #360]	; (800158c <getFourAnchor+0x190>)
 8001424:	8a9b      	ldrh	r3, [r3, #20]
 8001426:	461a      	mov	r2, r3
 8001428:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800142c:	fa42 f303 	asr.w	r3, r2, r3
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01a      	beq.n	800146e <getFourAnchor+0x72>
    {
      rssiBuf[index].rssi = beacon[i].rssi;
 8001438:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	33a8      	adds	r3, #168	; 0xa8
 800144c:	443b      	add	r3, r7
 800144e:	3b9c      	subs	r3, #156	; 0x9c
 8001450:	601a      	str	r2, [r3, #0]
      rssiBuf[index].bcnSlotIndex = i;
 8001452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	33a8      	adds	r3, #168	; 0xa8
 800145a:	443b      	add	r3, r7
 800145c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001460:	f843 2c98 	str.w	r2, [r3, #-152]
      index++;
 8001464:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001468:	3301      	adds	r3, #1
 800146a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for (int i = 0; i < BCN_SLOT_TOTAL; i++)
 800146e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001472:	3301      	adds	r3, #1
 8001474:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001478:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800147c:	2b0f      	cmp	r3, #15
 800147e:	ddd0      	ble.n	8001422 <getFourAnchor+0x26>
    }
  }
  for (int i = 0; i < index - 1; i++)
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001486:	e052      	b.n	800152e <getFourAnchor+0x132>
  {
    for (int j = i + 1; j < index; j++)
 8001488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800148c:	3301      	adds	r3, #1
 800148e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001492:	e041      	b.n	8001518 <getFourAnchor+0x11c>
    {
      if (rssiBuf[i].rssi < rssiBuf[j].rssi)
 8001494:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	33a8      	adds	r3, #168	; 0xa8
 800149c:	443b      	add	r3, r7
 800149e:	3b9c      	subs	r3, #156	; 0x9c
 80014a0:	ed93 7a00 	vldr	s14, [r3]
 80014a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	33a8      	adds	r3, #168	; 0xa8
 80014ac:	443b      	add	r3, r7
 80014ae:	3b9c      	subs	r3, #156	; 0x9c
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014bc:	d527      	bpl.n	800150e <getFourAnchor+0x112>
      {
        memcpy(&temp, &rssiBuf[i], sizeof(rssiBuf[i]));
 80014be:	f107 020c 	add.w	r2, r7, #12
 80014c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	18d1      	adds	r1, r2, r3
 80014ca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014ce:	2208      	movs	r2, #8
 80014d0:	4618      	mov	r0, r3
 80014d2:	f008 fa27 	bl	8009924 <memcpy>
        memcpy(&rssiBuf[i], &rssiBuf[j], sizeof(rssiBuf[j]));
 80014d6:	f107 020c 	add.w	r2, r7, #12
 80014da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	18d0      	adds	r0, r2, r3
 80014e2:	f107 020c 	add.w	r2, r7, #12
 80014e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4413      	add	r3, r2
 80014ee:	2208      	movs	r2, #8
 80014f0:	4619      	mov	r1, r3
 80014f2:	f008 fa17 	bl	8009924 <memcpy>
        memcpy(&rssiBuf[j], &temp, sizeof(temp));
 80014f6:	f107 020c 	add.w	r2, r7, #12
 80014fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4413      	add	r3, r2
 8001502:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001506:	2208      	movs	r2, #8
 8001508:	4618      	mov	r0, r3
 800150a:	f008 fa0b 	bl	8009924 <memcpy>
    for (int j = i + 1; j < index; j++)
 800150e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001512:	3301      	adds	r3, #1
 8001514:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001518:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800151c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001520:	429a      	cmp	r2, r3
 8001522:	dbb7      	blt.n	8001494 <getFourAnchor+0x98>
  for (int i = 0; i < index - 1; i++)
 8001524:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001528:	3301      	adds	r3, #1
 800152a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800152e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001532:	3b01      	subs	r3, #1
 8001534:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001538:	429a      	cmp	r2, r3
 800153a:	dba5      	blt.n	8001488 <getFourAnchor+0x8c>
      }
    }
  }
  *bcnSlotBitmap = 0;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2200      	movs	r2, #0
 8001540:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < 4; i++)
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001548:	e017      	b.n	800157a <getFourAnchor+0x17e>
  {
    *bcnSlotBitmap |= (1 << rssiBuf[i].bcnSlotIndex);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	b21a      	sxth	r2, r3
 8001550:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	33a8      	adds	r3, #168	; 0xa8
 8001558:	443b      	add	r3, r7
 800155a:	f853 3c98 	ldr.w	r3, [r3, #-152]
 800155e:	2101      	movs	r1, #1
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21b      	sxth	r3, r3
 800156a:	b29a      	uxth	r2, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < 4; i++)
 8001570:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001574:	3301      	adds	r3, #1
 8001576:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800157a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800157e:	2b03      	cmp	r3, #3
 8001580:	dde3      	ble.n	800154a <getFourAnchor+0x14e>
  }
}
 8001582:	bf00      	nop
 8001584:	bf00      	nop
 8001586:	37a8      	adds	r7, #168	; 0xa8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200002c8 	.word	0x200002c8

08001590 <getNearAnchor>:

int getNearAnchor(beaconHandle_t *beacon)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b0a8      	sub	sp, #160	; 0xa0
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  rssiBuf_t temp;
  rssiBuf_t rssiBuf[BCN_SLOT_TOTAL] = {0};
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f008 f9cd 	bl	8009940 <memset>
  int index = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  for (int i = 0; i < BCN_SLOT_TOTAL; i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80015b2:	e02a      	b.n	800160a <getNearAnchor+0x7a>
  {
    if (systemHandle.beaconBitmap & (1 << i))
 80015b4:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <getNearAnchor+0x148>)
 80015b6:	8a9b      	ldrh	r3, [r3, #20]
 80015b8:	461a      	mov	r2, r3
 80015ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015be:	fa42 f303 	asr.w	r3, r2, r3
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d01a      	beq.n	8001600 <getNearAnchor+0x70>
    {
      rssiBuf[index].rssi = beacon[i].rssi;
 80015ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	33a0      	adds	r3, #160	; 0xa0
 80015de:	443b      	add	r3, r7
 80015e0:	3b98      	subs	r3, #152	; 0x98
 80015e2:	601a      	str	r2, [r3, #0]
      rssiBuf[index].bcnSlotIndex = i;
 80015e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	33a0      	adds	r3, #160	; 0xa0
 80015ec:	443b      	add	r3, r7
 80015ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80015f2:	f843 2c94 	str.w	r2, [r3, #-148]
      index++;
 80015f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015fa:	3301      	adds	r3, #1
 80015fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  for (int i = 0; i < BCN_SLOT_TOTAL; i++)
 8001600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001604:	3301      	adds	r3, #1
 8001606:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800160a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800160e:	2b0f      	cmp	r3, #15
 8001610:	ddd0      	ble.n	80015b4 <getNearAnchor+0x24>
    }
  }
  for (int i = 0; i < index - 1; i++)
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001618:	e052      	b.n	80016c0 <getNearAnchor+0x130>
  {
    for (int j = i + 1; j < index; j++)
 800161a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800161e:	3301      	adds	r3, #1
 8001620:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001624:	e041      	b.n	80016aa <getNearAnchor+0x11a>
    {
      if (rssiBuf[i].rssi < rssiBuf[j].rssi)
 8001626:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	33a0      	adds	r3, #160	; 0xa0
 800162e:	443b      	add	r3, r7
 8001630:	3b98      	subs	r3, #152	; 0x98
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	33a0      	adds	r3, #160	; 0xa0
 800163e:	443b      	add	r3, r7
 8001640:	3b98      	subs	r3, #152	; 0x98
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	d527      	bpl.n	80016a0 <getNearAnchor+0x110>
      {
        memcpy(&temp, &rssiBuf[i], sizeof(rssiBuf[i]));
 8001650:	f107 0208 	add.w	r2, r7, #8
 8001654:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	18d1      	adds	r1, r2, r3
 800165c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001660:	2208      	movs	r2, #8
 8001662:	4618      	mov	r0, r3
 8001664:	f008 f95e 	bl	8009924 <memcpy>
        memcpy(&rssiBuf[i], &rssiBuf[j], sizeof(rssiBuf[j]));
 8001668:	f107 0208 	add.w	r2, r7, #8
 800166c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	18d0      	adds	r0, r2, r3
 8001674:	f107 0208 	add.w	r2, r7, #8
 8001678:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4413      	add	r3, r2
 8001680:	2208      	movs	r2, #8
 8001682:	4619      	mov	r1, r3
 8001684:	f008 f94e 	bl	8009924 <memcpy>
        memcpy(&rssiBuf[j], &temp, sizeof(temp));
 8001688:	f107 0208 	add.w	r2, r7, #8
 800168c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	4413      	add	r3, r2
 8001694:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001698:	2208      	movs	r2, #8
 800169a:	4618      	mov	r0, r3
 800169c:	f008 f942 	bl	8009924 <memcpy>
    for (int j = i + 1; j < index; j++)
 80016a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016a4:	3301      	adds	r3, #1
 80016a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80016aa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80016ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016b2:	429a      	cmp	r2, r3
 80016b4:	dbb7      	blt.n	8001626 <getNearAnchor+0x96>
  for (int i = 0; i < index - 1; i++)
 80016b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016ba:	3301      	adds	r3, #1
 80016bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016c4:	3b01      	subs	r3, #1
 80016c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80016ca:	429a      	cmp	r2, r3
 80016cc:	dba5      	blt.n	800161a <getNearAnchor+0x8a>
      }
    }
  }
  return rssiBuf[0].bcnSlotIndex;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	37a0      	adds	r7, #160	; 0xa0
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200002c8 	.word	0x200002c8

080016dc <calLocation>:

bool calLocation(float x1, float y1, float x2, float y2, float x3, float y3, float d1, float d2, float d3, float *x, float *y)
{
 80016dc:	b480      	push	{r7}
 80016de:	b093      	sub	sp, #76	; 0x4c
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 80016e6:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 80016ea:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 80016ee:	edc7 1a08 	vstr	s3, [r7, #32]
 80016f2:	ed87 2a07 	vstr	s4, [r7, #28]
 80016f6:	edc7 2a06 	vstr	s5, [r7, #24]
 80016fa:	ed87 3a05 	vstr	s6, [r7, #20]
 80016fe:	edc7 3a04 	vstr	s7, [r7, #16]
 8001702:	ed87 4a03 	vstr	s8, [r7, #12]
 8001706:	60b8      	str	r0, [r7, #8]
 8001708:	6079      	str	r1, [r7, #4]
  float A, B, C, D, E, F;
  if (d1 < 30 && d2 < 30 && d3 < 30 && d1 > 0 && d2 > 0 && d3 > 0)
 800170a:	edd7 7a05 	vldr	s15, [r7, #20]
 800170e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	f140 812f 	bpl.w	800197c <calLocation+0x2a0>
 800171e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001722:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	f140 8125 	bpl.w	800197c <calLocation+0x2a0>
 8001732:	edd7 7a03 	vldr	s15, [r7, #12]
 8001736:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800173a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	f140 811b 	bpl.w	800197c <calLocation+0x2a0>
 8001746:	edd7 7a05 	vldr	s15, [r7, #20]
 800174a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	f340 8113 	ble.w	800197c <calLocation+0x2a0>
 8001756:	edd7 7a04 	vldr	s15, [r7, #16]
 800175a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001762:	f340 810b 	ble.w	800197c <calLocation+0x2a0>
 8001766:	edd7 7a03 	vldr	s15, [r7, #12]
 800176a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	f340 8103 	ble.w	800197c <calLocation+0x2a0>
  {
    A = 2 * (x2 - x1);
 8001776:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800177a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800177e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001782:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001786:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    B = 2 * (y2 - y1);
 800178a:	ed97 7a08 	vldr	s14, [r7, #32]
 800178e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001796:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800179a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    C = d1 * d1 - d2 * d2 - x1 * x1 + x2 * x2 - y1 * y1 + y2 * y2;
 800179e:	edd7 7a05 	vldr	s15, [r7, #20]
 80017a2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80017aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80017c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80017da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    D = 2 * (x3 - x1);
 80017e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80017ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017f6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    E = 2 * (y3 - y1);
 80017fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80017fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001806:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800180a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    F = d1 * d1 - d3 * d3 - x1 * x1 + x3 * x3 - y1 * y1 + y3 * y3;
 800180e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001812:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001816:	edd7 7a03 	vldr	s15, [r7, #12]
 800181a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800181e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001822:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001826:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800182a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800182e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001832:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001836:	ee37 7a27 	vadd.f32	s14, s14, s15
 800183a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800183e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001842:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001846:	edd7 7a06 	vldr	s15, [r7, #24]
 800184a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800184e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001852:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    if (E * A - B * D != 0.0)
 8001856:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800185a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800185e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001862:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001866:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800186a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001872:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187a:	d07d      	beq.n	8001978 <calLocation+0x29c>
    {
      *x = (C * E - F * B) / (E * A - B * D);
 800187c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001880:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001888:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800188c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001894:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001898:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800189c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a4:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 80018a8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018ac:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	edc3 7a00 	vstr	s15, [r3]
      *y = (C * D - A * F) / (B * D - A * E);
 80018be:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80018c2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ca:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80018ce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018da:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80018de:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e6:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 80018ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	edc3 7a00 	vstr	s15, [r3]
      if (!isnan(*x) && !isnan(*y) && !isinf(*x) && !isinf(*y))
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	eef4 7a67 	vcmp.f32	s15, s15
 800190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190e:	d631      	bvs.n	8001974 <calLocation+0x298>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	eef4 7a67 	vcmp.f32	s15, s15
 800191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191e:	d629      	bvs.n	8001974 <calLocation+0x298>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	eef0 7ae7 	vabs.f32	s15, s15
 800192a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800198c <calLocation+0x2b0>
 800192e:	eef4 7a47 	vcmp.f32	s15, s14
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	bfd4      	ite	le
 8001938:	2301      	movle	r3, #1
 800193a:	2300      	movgt	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f083 0301 	eor.w	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d115      	bne.n	8001974 <calLocation+0x298>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	eef0 7ae7 	vabs.f32	s15, s15
 8001952:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800198c <calLocation+0x2b0>
 8001956:	eef4 7a47 	vcmp.f32	s15, s14
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	bfd4      	ite	le
 8001960:	2301      	movle	r3, #1
 8001962:	2300      	movgt	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f083 0301 	eor.w	r3, r3, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <calLocation+0x298>
        return true;
 8001970:	2301      	movs	r3, #1
 8001972:	e004      	b.n	800197e <calLocation+0x2a2>
      else
        return false;
 8001974:	2300      	movs	r3, #0
 8001976:	e002      	b.n	800197e <calLocation+0x2a2>
    }
    return false;
 8001978:	2300      	movs	r3, #0
 800197a:	e000      	b.n	800197e <calLocation+0x2a2>
  }
  else
    return false;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	374c      	adds	r7, #76	; 0x4c
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	7f7fffff 	.word	0x7f7fffff

08001990 <getLocation>:

bool getLocation(respHandle_t *resp, float *x, float *y)
{
 8001990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001994:	b098      	sub	sp, #96	; 0x60
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
  if (systemHandle.respRecvCnt == 4)
 800199e:	4bcd      	ldr	r3, [pc, #820]	; (8001cd4 <getLocation+0x344>)
 80019a0:	7ddb      	ldrb	r3, [r3, #23]
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	f040 819a 	bne.w	8001cdc <getLocation+0x34c>
  {
    bool s[4] = {0};
 80019a8:	2300      	movs	r3, #0
 80019aa:	643b      	str	r3, [r7, #64]	; 0x40
    int cnt = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    float x_sum = 0;
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	65bb      	str	r3, [r7, #88]	; 0x58
    float y_sum = 0;
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	657b      	str	r3, [r7, #84]	; 0x54
    float xVal[4] = {0};
 80019bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
    float yVal[4] = {0};
 80019ca:	f107 0320 	add.w	r3, r7, #32
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
    s[0] = calLocation(resp[0].respMess.x.xVal, resp[0].respMess.y.yVal, resp[1].respMess.x.xVal, resp[1].respMess.y.yVal, resp[2].respMess.x.xVal, resp[2].respMess.y.yVal, resp[0].distance, resp[1].distance, resp[2].distance, &xVal[0], &yVal[0]);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f8d3 4001 	ldr.w	r4, [r3, #1]
 80019de:	4623      	mov	r3, r4
 80019e0:	461c      	mov	r4, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f8d3 5005 	ldr.w	r5, [r3, #5]
 80019e8:	462b      	mov	r3, r5
 80019ea:	461d      	mov	r5, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3338      	adds	r3, #56	; 0x38
 80019f0:	f8d3 6001 	ldr.w	r6, [r3, #1]
 80019f4:	4633      	mov	r3, r6
 80019f6:	461e      	mov	r6, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3338      	adds	r3, #56	; 0x38
 80019fc:	f8d3 c005 	ldr.w	ip, [r3, #5]
 8001a00:	4663      	mov	r3, ip
 8001a02:	469c      	mov	ip, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3370      	adds	r3, #112	; 0x70
 8001a08:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8001a0c:	4673      	mov	r3, lr
 8001a0e:	469e      	mov	lr, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3370      	adds	r3, #112	; 0x70
 8001a14:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8001a18:	4643      	mov	r3, r8
 8001a1a:	4698      	mov	r8, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3338      	adds	r3, #56	; 0x38
 8001a26:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3370      	adds	r3, #112	; 0x70
 8001a2e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001a32:	f107 0220 	add.w	r2, r7, #32
 8001a36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	eeb0 4a66 	vmov.f32	s8, s13
 8001a42:	eef0 3a47 	vmov.f32	s7, s14
 8001a46:	eeb0 3a67 	vmov.f32	s6, s15
 8001a4a:	ee02 8a90 	vmov	s5, r8
 8001a4e:	ee02 ea10 	vmov	s4, lr
 8001a52:	ee01 ca90 	vmov	s3, ip
 8001a56:	ee01 6a10 	vmov	s2, r6
 8001a5a:	ee00 5a90 	vmov	s1, r5
 8001a5e:	ee00 4a10 	vmov	s0, r4
 8001a62:	f7ff fe3b 	bl	80016dc <calLocation>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    s[1] = calLocation(resp[0].respMess.x.xVal, resp[0].respMess.y.yVal, resp[1].respMess.x.xVal, resp[1].respMess.y.yVal, resp[3].respMess.x.xVal, resp[3].respMess.y.yVal, resp[0].distance, resp[1].distance, resp[3].distance, &xVal[1], &yVal[1]);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8001a72:	4623      	mov	r3, r4
 8001a74:	461c      	mov	r4, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f8d3 5005 	ldr.w	r5, [r3, #5]
 8001a7c:	462b      	mov	r3, r5
 8001a7e:	461d      	mov	r5, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3338      	adds	r3, #56	; 0x38
 8001a84:	f8d3 6001 	ldr.w	r6, [r3, #1]
 8001a88:	4633      	mov	r3, r6
 8001a8a:	461e      	mov	r6, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3338      	adds	r3, #56	; 0x38
 8001a90:	f8d3 c005 	ldr.w	ip, [r3, #5]
 8001a94:	4663      	mov	r3, ip
 8001a96:	469c      	mov	ip, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	33a8      	adds	r3, #168	; 0xa8
 8001a9c:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8001aa0:	4673      	mov	r3, lr
 8001aa2:	469e      	mov	lr, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	33a8      	adds	r3, #168	; 0xa8
 8001aa8:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8001aac:	4643      	mov	r3, r8
 8001aae:	4698      	mov	r8, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3338      	adds	r3, #56	; 0x38
 8001aba:	ed93 7a08 	vldr	s14, [r3, #32]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	33a8      	adds	r3, #168	; 0xa8
 8001ac2:	edd3 6a08 	vldr	s13, [r3, #32]
 8001ac6:	f107 0320 	add.w	r3, r7, #32
 8001aca:	1d1a      	adds	r2, r3, #4
 8001acc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	eeb0 4a66 	vmov.f32	s8, s13
 8001ada:	eef0 3a47 	vmov.f32	s7, s14
 8001ade:	eeb0 3a67 	vmov.f32	s6, s15
 8001ae2:	ee02 8a90 	vmov	s5, r8
 8001ae6:	ee02 ea10 	vmov	s4, lr
 8001aea:	ee01 ca90 	vmov	s3, ip
 8001aee:	ee01 6a10 	vmov	s2, r6
 8001af2:	ee00 5a90 	vmov	s1, r5
 8001af6:	ee00 4a10 	vmov	s0, r4
 8001afa:	f7ff fdef 	bl	80016dc <calLocation>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    s[2] = calLocation(resp[3].respMess.x.xVal, resp[3].respMess.y.yVal, resp[1].respMess.x.xVal, resp[1].respMess.y.yVal, resp[2].respMess.x.xVal, resp[2].respMess.y.yVal, resp[3].distance, resp[1].distance, resp[2].distance, &xVal[2], &yVal[2]);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	33a8      	adds	r3, #168	; 0xa8
 8001b08:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8001b0c:	4623      	mov	r3, r4
 8001b0e:	461c      	mov	r4, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	33a8      	adds	r3, #168	; 0xa8
 8001b14:	f8d3 5005 	ldr.w	r5, [r3, #5]
 8001b18:	462b      	mov	r3, r5
 8001b1a:	461d      	mov	r5, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3338      	adds	r3, #56	; 0x38
 8001b20:	f8d3 6001 	ldr.w	r6, [r3, #1]
 8001b24:	4633      	mov	r3, r6
 8001b26:	461e      	mov	r6, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3338      	adds	r3, #56	; 0x38
 8001b2c:	f8d3 c005 	ldr.w	ip, [r3, #5]
 8001b30:	4663      	mov	r3, ip
 8001b32:	469c      	mov	ip, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3370      	adds	r3, #112	; 0x70
 8001b38:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8001b3c:	4673      	mov	r3, lr
 8001b3e:	469e      	mov	lr, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3370      	adds	r3, #112	; 0x70
 8001b44:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8001b48:	4643      	mov	r3, r8
 8001b4a:	4698      	mov	r8, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	33a8      	adds	r3, #168	; 0xa8
 8001b50:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	3338      	adds	r3, #56	; 0x38
 8001b58:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3370      	adds	r3, #112	; 0x70
 8001b60:	edd3 6a08 	vldr	s13, [r3, #32]
 8001b64:	f107 0320 	add.w	r3, r7, #32
 8001b68:	f103 0208 	add.w	r2, r3, #8
 8001b6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b70:	3308      	adds	r3, #8
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	eeb0 4a66 	vmov.f32	s8, s13
 8001b7a:	eef0 3a47 	vmov.f32	s7, s14
 8001b7e:	eeb0 3a67 	vmov.f32	s6, s15
 8001b82:	ee02 8a90 	vmov	s5, r8
 8001b86:	ee02 ea10 	vmov	s4, lr
 8001b8a:	ee01 ca90 	vmov	s3, ip
 8001b8e:	ee01 6a10 	vmov	s2, r6
 8001b92:	ee00 5a90 	vmov	s1, r5
 8001b96:	ee00 4a10 	vmov	s0, r4
 8001b9a:	f7ff fd9f 	bl	80016dc <calLocation>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    s[3] = calLocation(resp[0].respMess.x.xVal, resp[0].respMess.y.yVal, resp[2].respMess.x.xVal, resp[2].respMess.y.yVal, resp[3].respMess.x.xVal, resp[3].respMess.y.yVal, resp[0].distance, resp[2].distance, resp[3].distance, &xVal[3], &yVal[3]);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8001baa:	4623      	mov	r3, r4
 8001bac:	461c      	mov	r4, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f8d3 5005 	ldr.w	r5, [r3, #5]
 8001bb4:	462b      	mov	r3, r5
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3370      	adds	r3, #112	; 0x70
 8001bbc:	f8d3 6001 	ldr.w	r6, [r3, #1]
 8001bc0:	4633      	mov	r3, r6
 8001bc2:	461e      	mov	r6, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3370      	adds	r3, #112	; 0x70
 8001bc8:	f8d3 c005 	ldr.w	ip, [r3, #5]
 8001bcc:	4663      	mov	r3, ip
 8001bce:	469c      	mov	ip, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	33a8      	adds	r3, #168	; 0xa8
 8001bd4:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8001bd8:	4673      	mov	r3, lr
 8001bda:	469e      	mov	lr, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	33a8      	adds	r3, #168	; 0xa8
 8001be0:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8001be4:	4643      	mov	r3, r8
 8001be6:	4698      	mov	r8, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	edd3 7a08 	vldr	s15, [r3, #32]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3370      	adds	r3, #112	; 0x70
 8001bf2:	ed93 7a08 	vldr	s14, [r3, #32]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	33a8      	adds	r3, #168	; 0xa8
 8001bfa:	edd3 6a08 	vldr	s13, [r3, #32]
 8001bfe:	f107 0320 	add.w	r3, r7, #32
 8001c02:	f103 020c 	add.w	r2, r3, #12
 8001c06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c0a:	330c      	adds	r3, #12
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	eeb0 4a66 	vmov.f32	s8, s13
 8001c14:	eef0 3a47 	vmov.f32	s7, s14
 8001c18:	eeb0 3a67 	vmov.f32	s6, s15
 8001c1c:	ee02 8a90 	vmov	s5, r8
 8001c20:	ee02 ea10 	vmov	s4, lr
 8001c24:	ee01 ca90 	vmov	s3, ip
 8001c28:	ee01 6a10 	vmov	s2, r6
 8001c2c:	ee00 5a90 	vmov	s1, r5
 8001c30:	ee00 4a10 	vmov	s0, r4
 8001c34:	f7ff fd52 	bl	80016dc <calLocation>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    for (int i = 0; i < 4; i++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	653b      	str	r3, [r7, #80]	; 0x50
 8001c42:	e026      	b.n	8001c92 <getLocation+0x302>
    {
      if (s[i])
 8001c44:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c4a:	4413      	add	r3, r2
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d01c      	beq.n	8001c8c <getLocation+0x2fc>
      {
        cnt++;
 8001c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c54:	3301      	adds	r3, #1
 8001c56:	65fb      	str	r3, [r7, #92]	; 0x5c
        x_sum += xVal[i];
 8001c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	3360      	adds	r3, #96	; 0x60
 8001c5e:	443b      	add	r3, r7
 8001c60:	3b30      	subs	r3, #48	; 0x30
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        y_sum += yVal[i];
 8001c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	3360      	adds	r3, #96	; 0x60
 8001c78:	443b      	add	r3, r7
 8001c7a:	3b40      	subs	r3, #64	; 0x40
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    for (int i = 0; i < 4; i++)
 8001c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c8e:	3301      	adds	r3, #1
 8001c90:	653b      	str	r3, [r7, #80]	; 0x50
 8001c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	ddd5      	ble.n	8001c44 <getLocation+0x2b4>
      }
    }
    if (cnt > 0)
 8001c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	dd1c      	ble.n	8001cd8 <getLocation+0x348>
    {
      *x = x_sum / (float)cnt;
 8001c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ca0:	ee07 3a90 	vmov	s15, r3
 8001ca4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	edc3 7a00 	vstr	s15, [r3]
      *y = y_sum / (float)cnt;
 8001cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	edc3 7a00 	vstr	s15, [r3]
      return true;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e0bf      	b.n	8001e52 <getLocation+0x4c2>
 8001cd2:	bf00      	nop
 8001cd4:	200002c8 	.word	0x200002c8
    }
    else
      return false;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e0ba      	b.n	8001e52 <getLocation+0x4c2>
  }
  else
  {
    int index[3] = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
    bool s = false;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    int j = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (int i = 0; i < 4; i++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cf6:	e01a      	b.n	8001d2e <getLocation+0x39e>
    {
      if (resp[i].distance > 0)
 8001cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	dd08      	ble.n	8001d28 <getLocation+0x398>
        index[j++] = i;
 8001d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	3360      	adds	r3, #96	; 0x60
 8001d20:	443b      	add	r3, r7
 8001d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d24:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (int i = 0; i < 4; i++)
 8001d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	dde1      	ble.n	8001cf8 <getLocation+0x368>
    }
    s = calLocation(resp[index[0]].respMess.x.xVal, resp[index[0]].respMess.y.yVal, resp[index[1]].respMess.x.xVal, resp[index[1]].respMess.y.yVal, resp[index[2]].respMess.x.xVal, resp[index[2]].respMess.y.yVal, resp[index[0]].distance, resp[index[1]].distance, resp[index[2]].distance, x, y);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	461a      	mov	r2, r3
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	461a      	mov	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	461c      	mov	r4, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f8d3 5005 	ldr.w	r5, [r3, #5]
 8001d64:	462b      	mov	r3, r5
 8001d66:	461d      	mov	r5, r3
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	461a      	mov	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f8d3 6001 	ldr.w	r6, [r3, #1]
 8001d7e:	4633      	mov	r3, r6
 8001d80:	461e      	mov	r6, r3
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	1a9b      	subs	r3, r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	f8d3 c005 	ldr.w	ip, [r3, #5]
 8001d98:	4663      	mov	r3, ip
 8001d9a:	469c      	mov	ip, r3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	461a      	mov	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4413      	add	r3, r2
 8001dae:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8001db2:	4673      	mov	r3, lr
 8001db4:	469e      	mov	lr, r3
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8001dcc:	4643      	mov	r3, r8
 8001dce:	4698      	mov	r8, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	1a9b      	subs	r3, r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	68b8      	ldr	r0, [r7, #8]
 8001e16:	eeb0 4a66 	vmov.f32	s8, s13
 8001e1a:	eef0 3a47 	vmov.f32	s7, s14
 8001e1e:	eeb0 3a67 	vmov.f32	s6, s15
 8001e22:	ee02 8a90 	vmov	s5, r8
 8001e26:	ee02 ea10 	vmov	s4, lr
 8001e2a:	ee01 ca90 	vmov	s3, ip
 8001e2e:	ee01 6a10 	vmov	s2, r6
 8001e32:	ee00 5a90 	vmov	s1, r5
 8001e36:	ee00 4a10 	vmov	s0, r4
 8001e3a:	f7ff fc4f 	bl	80016dc <calLocation>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (s)
 8001e44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <getLocation+0x4c0>
      return true;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <getLocation+0x4c2>
    else
      return false;
 8001e50:	2300      	movs	r3, #0
  }
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3760      	adds	r7, #96	; 0x60
 8001e56:	46bd      	mov	sp, r7
 8001e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e5c:	0000      	movs	r0, r0
	...

08001e60 <HAL_TIM_PeriodElapsedCallback>:
  }
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b5b0      	push	{r4, r5, r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a5c      	ldr	r2, [pc, #368]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	f040 80aa 	bne.w	8001fc8 <HAL_TIM_PeriodElapsedCallback+0x168>
  {
    if (locTimeIndex >= 2)
 8001e74:	4b5b      	ldr	r3, [pc, #364]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	f240 809d 	bls.w	8001fb8 <HAL_TIM_PeriodElapsedCallback+0x158>
    {
      float dis = sqrt(pow(locTime[0].x - locTime[locTimeIndex - 1].x, 2) + pow(locTime[0].y - locTime[locTimeIndex - 1].y, 2));
 8001e7e:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001e80:	ed93 7a00 	vldr	s14, [r3]
 8001e84:	4b57      	ldr	r3, [pc, #348]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	1e5a      	subs	r2, r3, #1
 8001e8a:	4957      	ldr	r1, [pc, #348]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e9e:	ee17 0a90 	vmov	r0, s15
 8001ea2:	f7fe fb51 	bl	8000548 <__aeabi_f2d>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8001fd0 <HAL_TIM_PeriodElapsedCallback+0x170>
 8001eae:	ec43 2b10 	vmov	d0, r2, r3
 8001eb2:	f00c f9bd 	bl	800e230 <pow>
 8001eb6:	ec55 4b10 	vmov	r4, r5, d0
 8001eba:	4b4b      	ldr	r3, [pc, #300]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001ebc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ec0:	4b48      	ldr	r3, [pc, #288]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	1e5a      	subs	r2, r3, #1
 8001ec6:	4948      	ldr	r1, [pc, #288]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001edc:	ee17 0a90 	vmov	r0, s15
 8001ee0:	f7fe fb32 	bl	8000548 <__aeabi_f2d>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001fd0 <HAL_TIM_PeriodElapsedCallback+0x170>
 8001eec:	ec43 2b10 	vmov	d0, r2, r3
 8001ef0:	f00c f99e 	bl	800e230 <pow>
 8001ef4:	ec53 2b10 	vmov	r2, r3, d0
 8001ef8:	4620      	mov	r0, r4
 8001efa:	4629      	mov	r1, r5
 8001efc:	f7fe f9c6 	bl	800028c <__adddf3>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	ec43 2b17 	vmov	d7, r2, r3
 8001f08:	eeb0 0a47 	vmov.f32	s0, s14
 8001f0c:	eef0 0a67 	vmov.f32	s1, s15
 8001f10:	f00c f9fe 	bl	800e310 <sqrt>
 8001f14:	ec53 2b10 	vmov	r2, r3, d0
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7fe fe64 	bl	8000be8 <__aeabi_d2f>
 8001f20:	4603      	mov	r3, r0
 8001f22:	60fb      	str	r3, [r7, #12]
      float t = (locTime[locTimeIndex - 1].time - locTime[0].time) / 1000.0;
 8001f24:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	1e5a      	subs	r2, r3, #1
 8001f2a:	492f      	ldr	r1, [pc, #188]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	3308      	adds	r3, #8
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fadf 	bl	8000504 <__aeabi_ui2d>
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	4b28      	ldr	r3, [pc, #160]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001f4c:	f7fe fc7e 	bl	800084c <__aeabi_ddiv>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7fe fe46 	bl	8000be8 <__aeabi_d2f>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60bb      	str	r3, [r7, #8]
      systemHandle.vTag = (dis / t) * 3.6;
 8001f60:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f64:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f6c:	ee16 0a90 	vmov	r0, s13
 8001f70:	f7fe faea 	bl	8000548 <__aeabi_f2d>
 8001f74:	a318      	add	r3, pc, #96	; (adr r3, 8001fd8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fb3d 	bl	80005f8 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	491b      	ldr	r1, [pc, #108]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001f84:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
      if (systemHandle.vTag < V_THRESHOLD)
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001f8a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001f94:	f7fe fda2 	bl	8000adc <__aeabi_dcmplt>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d004      	beq.n	8001fa8 <HAL_TIM_PeriodElapsedCallback+0x148>
        systemHandle.kalmanUse = true;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8001fa6:	e007      	b.n	8001fb8 <HAL_TIM_PeriodElapsedCallback+0x158>
      else
      {
        systemHandle.kalmanUse = false;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        systemHandle.kalmanInit = false;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
//    else
//    {
//      systemHandle.kalmanUse = false;
//      systemHandle.kalmanInit = false;
//    }
    memset(locTime, 0, sizeof(locTime));
 8001fb8:	22c0      	movs	r2, #192	; 0xc0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	480a      	ldr	r0, [pc, #40]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001fbe:	f007 fcbf 	bl	8009940 <memset>
    locTimeIndex = 0;
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	40000000 	.word	0x40000000
 8001fd8:	cccccccd 	.word	0xcccccccd
 8001fdc:	400ccccc 	.word	0x400ccccc
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	2000046c 	.word	0x2000046c
 8001fe8:	200003ac 	.word	0x200003ac
 8001fec:	408f4000 	.word	0x408f4000
 8001ff0:	200002c8 	.word	0x200002c8
 8001ff4:	40520000 	.word	0x40520000

08001ff8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ffc:	f5ad 6dba 	sub.w	sp, sp, #1488	; 0x5d0
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  beaconHandle_t beaconHandle[BCN_SLOT_TOTAL] = {0};
 8002002:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002006:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800200a:	4618      	mov	r0, r3
 800200c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002010:	461a      	mov	r2, r3
 8002012:	2100      	movs	r1, #0
 8002014:	f007 fc94 	bl	8009940 <memset>
  pollHandle_t pollHandle = {0};
 8002018:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800201c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002020:	461a      	mov	r2, r3
 8002022:	2300      	movs	r3, #0
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	6053      	str	r3, [r2, #4]
 8002028:	6093      	str	r3, [r2, #8]
 800202a:	60d3      	str	r3, [r2, #12]
 800202c:	6113      	str	r3, [r2, #16]
 800202e:	6153      	str	r3, [r2, #20]
  respHandle_t respHandle[4] = {0};
 8002030:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002034:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8002038:	4618      	mov	r0, r3
 800203a:	23e0      	movs	r3, #224	; 0xe0
 800203c:	461a      	mov	r2, r3
 800203e:	2100      	movs	r1, #0
 8002040:	f007 fc7e 	bl	8009940 <memset>
  locMess_t locMess = {0};
 8002044:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002048:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	811a      	strh	r2, [r3, #8]
  packet_t beaconPacket = {0};
 8002054:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002058:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800205c:	4618      	mov	r0, r3
 800205e:	2389      	movs	r3, #137	; 0x89
 8002060:	461a      	mov	r2, r3
 8002062:	2100      	movs	r1, #0
 8002064:	f007 fc6c 	bl	8009940 <memset>
  packet_t pollPacket = {0};
 8002068:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800206c:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8002070:	4618      	mov	r0, r3
 8002072:	2389      	movs	r3, #137	; 0x89
 8002074:	461a      	mov	r2, r3
 8002076:	2100      	movs	r1, #0
 8002078:	f007 fc62 	bl	8009940 <memset>
  packet_t respPacket = {0};
 800207c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002080:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002084:	4618      	mov	r0, r3
 8002086:	2389      	movs	r3, #137	; 0x89
 8002088:	461a      	mov	r2, r3
 800208a:	2100      	movs	r1, #0
 800208c:	f007 fc58 	bl	8009940 <memset>
  packet_t locPacket = {0};
 8002090:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002094:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002098:	4618      	mov	r0, r3
 800209a:	2389      	movs	r3, #137	; 0x89
 800209c:	461a      	mov	r2, r3
 800209e:	2100      	movs	r1, #0
 80020a0:	f007 fc4e 	bl	8009940 <memset>
  packet_t bufPacket = {0};
 80020a4:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80020a8:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 80020ac:	4618      	mov	r0, r3
 80020ae:	2389      	movs	r3, #137	; 0x89
 80020b0:	461a      	mov	r2, r3
 80020b2:	2100      	movs	r1, #0
 80020b4:	f007 fc44 	bl	8009940 <memset>
  float clockOffsetRatio = 0.0;
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 80020c0:	6013      	str	r3, [r2, #0]
  uint32_t bcnTimes[BCN_SLOT_TOTAL] = {0};
 80020c2:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80020c6:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 80020ca:	4618      	mov	r0, r3
 80020cc:	2340      	movs	r3, #64	; 0x40
 80020ce:	461a      	mov	r2, r3
 80020d0:	2100      	movs	r1, #0
 80020d2:	f007 fc35 	bl	8009940 <memset>
  uint32_t twrTimes[TWR_SLOT_TOTAL] = {0};
 80020d6:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80020da:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 80020de:	4618      	mov	r0, r3
 80020e0:	2328      	movs	r3, #40	; 0x28
 80020e2:	461a      	mov	r2, r3
 80020e4:	2100      	movs	r1, #0
 80020e6:	f007 fc2b 	bl	8009940 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ea:	f004 fb13 	bl	8006714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ee:	f001 f99f 	bl	8003430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f2:	f7ff f817 	bl	8001124 <MX_GPIO_Init>
  MX_ADC1_Init();
 80020f6:	f7fe ff7f 	bl	8000ff8 <MX_ADC1_Init>
  MX_SPI1_Init();
 80020fa:	f001 fa09 	bl	8003510 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80020fe:	f001 fcf7 	bl	8003af0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002102:	f001 fbb9 	bl	8003878 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002106:	f001 fc53 	bl	80039b0 <MX_TIM5_Init>
  MX_TIM3_Init();
 800210a:	f001 fc03 	bl	8003914 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  logi("TAG START");
 800210e:	f004 fb67 	bl	80067e0 <HAL_GetTick>
 8002112:	4603      	mov	r3, r0
 8002114:	4619      	mov	r1, r3
 8002116:	48a8      	ldr	r0, [pc, #672]	; (80023b8 <main+0x3c0>)
 8002118:	f008 fb74 	bl	800a804 <iprintf>
  for (uint32_t i = 0; i < superframe.bcnSlotTotal; i++)
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 8002122:	e012      	b.n	800214a <main+0x152>
  {
    bcnTimes[i] = SF_BCN_SLOT_TIME * i;
 8002124:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 8002128:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800212c:	fb02 f103 	mul.w	r1, r2, r3
 8002130:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002134:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8002138:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800213c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint32_t i = 0; i < superframe.bcnSlotTotal; i++)
 8002140:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 8002144:	3301      	adds	r3, #1
 8002146:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800214a:	4b9c      	ldr	r3, [pc, #624]	; (80023bc <main+0x3c4>)
 800214c:	791b      	ldrb	r3, [r3, #4]
 800214e:	461a      	mov	r2, r3
 8002150:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 8002154:	4293      	cmp	r3, r2
 8002156:	d3e5      	bcc.n	8002124 <main+0x12c>
  }
  for (uint32_t j = 0; j < superframe.twrSlotTotal; j++)
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
 800215e:	e01a      	b.n	8002196 <main+0x19e>
  {
    twrTimes[j] = (SF_TWR_SLOT_TIME * j + SF_BCN_SLOT_TIME * superframe.bcnSlotTotal);
 8002160:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 8002164:	f641 42e8 	movw	r2, #7400	; 0x1ce8
 8002168:	fb02 f303 	mul.w	r3, r2, r3
 800216c:	4a93      	ldr	r2, [pc, #588]	; (80023bc <main+0x3c4>)
 800216e:	7912      	ldrb	r2, [r2, #4]
 8002170:	4611      	mov	r1, r2
 8002172:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002176:	fb01 f202 	mul.w	r2, r1, r2
 800217a:	1899      	adds	r1, r3, r2
 800217c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002180:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 8002184:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8002188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint32_t j = 0; j < superframe.twrSlotTotal; j++)
 800218c:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 8002190:	3301      	adds	r3, #1
 8002192:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
 8002196:	4b89      	ldr	r3, [pc, #548]	; (80023bc <main+0x3c4>)
 8002198:	795b      	ldrb	r3, [r3, #5]
 800219a:	461a      	mov	r2, r3
 800219c:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d3dd      	bcc.n	8002160 <main+0x168>
  }

  memcpy(myTag.tagAddress, tagBaseAddr, sizeof(tagBaseAddr));
 80021a4:	4a86      	ldr	r2, [pc, #536]	; (80023c0 <main+0x3c8>)
 80021a6:	4b87      	ldr	r3, [pc, #540]	; (80023c4 <main+0x3cc>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	8013      	strh	r3, [r2, #0]

  dwInit(&device);
 80021ac:	4886      	ldr	r0, [pc, #536]	; (80023c8 <main+0x3d0>)
 80021ae:	f001 fe01 	bl	8003db4 <dwInit>
  if (dwConfigure(&device) == DW_ERROR_OK)
 80021b2:	4885      	ldr	r0, [pc, #532]	; (80023c8 <main+0x3d0>)
 80021b4:	f001 fe22 	bl	8003dfc <dwConfigure>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d11f      	bne.n	80021fe <main+0x206>
  {
    dwEnableAllLeds(&device);
 80021be:	4882      	ldr	r0, [pc, #520]	; (80023c8 <main+0x3d0>)
 80021c0:	f001 feef 	bl	8003fa2 <dwEnableAllLeds>
  {
    loge("Configure failed");
    while (1)
      ;
  }
  dwNewConfiguration(&device);
 80021c4:	4880      	ldr	r0, [pc, #512]	; (80023c8 <main+0x3d0>)
 80021c6:	f002 faaa 	bl	800471e <dwNewConfiguration>
  dwSetDefaults(&device);
 80021ca:	487f      	ldr	r0, [pc, #508]	; (80023c8 <main+0x3d0>)
 80021cc:	f002 fcdc 	bl	8004b88 <dwSetDefaults>
  dwCommitConfiguration(&device);
 80021d0:	487d      	ldr	r0, [pc, #500]	; (80023c8 <main+0x3d0>)
 80021d2:	f002 fabe 	bl	8004752 <dwCommitConfiguration>
  TIM5->CNT = 0;
 80021d6:	4b7d      	ldr	r3, [pc, #500]	; (80023cc <main+0x3d4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(&htim5);
 80021dc:	487c      	ldr	r0, [pc, #496]	; (80023d0 <main+0x3d8>)
 80021de:	f006 fb03 	bl	80087e8 <HAL_TIM_Base_Start>
  TIM3->CNT = 0;
 80021e2:	4b7c      	ldr	r3, [pc, #496]	; (80023d4 <main+0x3dc>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim3);
 80021e8:	487b      	ldr	r0, [pc, #492]	; (80023d8 <main+0x3e0>)
 80021ea:	f006 fb65 	bl	80088b8 <HAL_TIM_Base_Start_IT>
  TIM2->CNT = 0;
 80021ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021f2:	2200      	movs	r2, #0
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(&htim2);
 80021f6:	4879      	ldr	r0, [pc, #484]	; (80023dc <main+0x3e4>)
 80021f8:	f006 faf6 	bl	80087e8 <HAL_TIM_Base_Start>
 80021fc:	e009      	b.n	8002212 <main+0x21a>
    loge("Configure failed");
 80021fe:	f004 faef 	bl	80067e0 <HAL_GetTick>
 8002202:	4601      	mov	r1, r0
 8002204:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8002208:	4a75      	ldr	r2, [pc, #468]	; (80023e0 <main+0x3e8>)
 800220a:	4876      	ldr	r0, [pc, #472]	; (80023e4 <main+0x3ec>)
 800220c:	f008 fafa 	bl	800a804 <iprintf>
    while (1)
 8002210:	e7fe      	b.n	8002210 <main+0x218>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (!systemHandle.tagSync)
 8002212:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <main+0x3f0>)
 8002214:	785b      	ldrb	r3, [r3, #1]
 8002216:	f083 0301 	eor.w	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80a5 	beq.w	800236c <main+0x374>
    {
      dwNewReceive(&device);
 8002222:	4869      	ldr	r0, [pc, #420]	; (80023c8 <main+0x3d0>)
 8002224:	f002 f9c5 	bl	80045b2 <dwNewReceive>
      dwSetDefaults(&device);
 8002228:	4867      	ldr	r0, [pc, #412]	; (80023c8 <main+0x3d0>)
 800222a:	f002 fcad 	bl	8004b88 <dwSetDefaults>
      dwStartReceive(&device);
 800222e:	4866      	ldr	r0, [pc, #408]	; (80023c8 <main+0x3d0>)
 8002230:	f002 f9d7 	bl	80045e2 <dwStartReceive>
      do
      {
        dwReadSystemEventStatusRegister(&device);
 8002234:	4864      	ldr	r0, [pc, #400]	; (80023c8 <main+0x3d0>)
 8002236:	f001 ffb8 	bl	80041aa <dwReadSystemEventStatusRegister>
      } while (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))));
 800223a:	4b63      	ldr	r3, [pc, #396]	; (80023c8 <main+0x3d0>)
 800223c:	7e9b      	ldrb	r3, [r3, #26]
 800223e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002242:	2b00      	cmp	r3, #0
 8002244:	d105      	bne.n	8002252 <main+0x25a>
 8002246:	4b60      	ldr	r3, [pc, #384]	; (80023c8 <main+0x3d0>)
 8002248:	7edb      	ldrb	r3, [r3, #27]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <main+0x23c>
      if (device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8))
 8002252:	4b5d      	ldr	r3, [pc, #372]	; (80023c8 <main+0x3d0>)
 8002254:	7e9b      	ldrb	r3, [r3, #26]
 8002256:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8083 	beq.w	8002366 <main+0x36e>
      {
        systemHandle.timeSyncRecv = TIM2->CNT;
 8002260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	4a60      	ldr	r2, [pc, #384]	; (80023e8 <main+0x3f0>)
 8002268:	6053      	str	r3, [r2, #4]
        dwInteruptHandler();
 800226a:	f7ff f88d 	bl	8001388 <dwInteruptHandler>
        memset(&bufPacket, 0, sizeof(bufPacket));
 800226e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002272:	2289      	movs	r2, #137	; 0x89
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f007 fb62 	bl	8009940 <memset>
        int length = dwGetDataLength(&device);
 800227c:	4852      	ldr	r0, [pc, #328]	; (80023c8 <main+0x3d0>)
 800227e:	f002 fd23 	bl	8004cc8 <dwGetDataLength>
 8002282:	4603      	mov	r3, r0
 8002284:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
        if (length > 0)
 8002288:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800228c:	2b00      	cmp	r3, #0
 800228e:	ddc0      	ble.n	8002212 <main+0x21a>
        {
          dwGetData(&device, (uint8_t *)&bufPacket, length);
 8002290:	f8d7 2594 	ldr.w	r2, [r7, #1428]	; 0x594
 8002294:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002298:	4619      	mov	r1, r3
 800229a:	484b      	ldr	r0, [pc, #300]	; (80023c8 <main+0x3d0>)
 800229c:	f002 fd4c 	bl	8004d38 <dwGetData>
          if (bufPacket.payload[BEAC_ID] == TYPE_BEAC)
 80022a0:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80022a4:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 80022a8:	7a5b      	ldrb	r3, [r3, #9]
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d1b1      	bne.n	8002212 <main+0x21a>
          {
            uint8_t bcnSlotNum = bufPacket.payload[BEAC_BCN_SLOT_NUM];
 80022ae:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80022b2:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 80022b6:	7b1b      	ldrb	r3, [r3, #12]
 80022b8:	f887 3593 	strb.w	r3, [r7, #1427]	; 0x593
            uint8_t sfNumCurrent = bufPacket.payload[BEAC_SF_NUM];
 80022bc:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80022c0:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 80022c4:	7adb      	ldrb	r3, [r3, #11]
 80022c6:	f887 3592 	strb.w	r3, [r7, #1426]	; 0x592
            if (bcnSlotNum < superframe.bcnSlotTotal && sfNumCurrent < superframe.sfNumberTotal)
 80022ca:	4b3c      	ldr	r3, [pc, #240]	; (80023bc <main+0x3c4>)
 80022cc:	791b      	ldrb	r3, [r3, #4]
 80022ce:	f897 2593 	ldrb.w	r2, [r7, #1427]	; 0x593
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d29d      	bcs.n	8002212 <main+0x21a>
 80022d6:	4b39      	ldr	r3, [pc, #228]	; (80023bc <main+0x3c4>)
 80022d8:	799b      	ldrb	r3, [r3, #6]
 80022da:	f897 2592 	ldrb.w	r2, [r7, #1426]	; 0x592
 80022de:	429a      	cmp	r2, r3
 80022e0:	d297      	bcs.n	8002212 <main+0x21a>
            {
              systemHandle.timeSyncEnd = TIM2->CNT;
 80022e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	4a3f      	ldr	r2, [pc, #252]	; (80023e8 <main+0x3f0>)
 80022ea:	6093      	str	r3, [r2, #8]
              if (systemHandle.timeSyncEnd > systemHandle.timeSyncRecv)
 80022ec:	4b3e      	ldr	r3, [pc, #248]	; (80023e8 <main+0x3f0>)
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <main+0x3f0>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d914      	bls.n	8002322 <main+0x32a>
              {
                TIM2->CNT = bcnTimes[bcnSlotNum] + superframe.sfOffset + systemHandle.timeSyncEnd - systemHandle.timeSyncRecv;
 80022f8:	f897 2593 	ldrb.w	r2, [r7, #1427]	; 0x593
 80022fc:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002300:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8002304:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002308:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <main+0x3c4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	441a      	add	r2, r3
 800230e:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <main+0x3f0>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	441a      	add	r2, r3
 8002314:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <main+0x3f0>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	624b      	str	r3, [r1, #36]	; 0x24
 8002320:	e016      	b.n	8002350 <main+0x358>
              }
              else
              {
                TIM2->CNT = bcnTimes[bcnSlotNum] + superframe.sfOffset + systemHandle.timeSyncEnd + 100000 - systemHandle.timeSyncRecv;
 8002322:	f897 2593 	ldrb.w	r2, [r7, #1427]	; 0x593
 8002326:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800232a:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 800232e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002332:	4b22      	ldr	r3, [pc, #136]	; (80023bc <main+0x3c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	441a      	add	r2, r3
 8002338:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <main+0x3f0>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	441a      	add	r2, r3
 800233e:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <main+0x3f0>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002348:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800234c:	33a0      	adds	r3, #160	; 0xa0
 800234e:	6253      	str	r3, [r2, #36]	; 0x24
              }
              superframe.sfNumberCurrent = sfNumCurrent;
 8002350:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <main+0x3c4>)
 8002352:	f897 3592 	ldrb.w	r3, [r7, #1426]	; 0x592
 8002356:	7253      	strb	r3, [r2, #9]
              systemHandle.tagSync = true;
 8002358:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <main+0x3f0>)
 800235a:	2201      	movs	r2, #1
 800235c:	705a      	strb	r2, [r3, #1]
              systemHandle.notSyncCnt = 0;
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <main+0x3f0>)
 8002360:	2200      	movs	r2, #0
 8002362:	70da      	strb	r2, [r3, #3]
 8002364:	e755      	b.n	8002212 <main+0x21a>
          }
        }
      }
      else
      {
        dwInteruptHandler();
 8002366:	f7ff f80f 	bl	8001388 <dwInteruptHandler>
 800236a:	e752      	b.n	8002212 <main+0x21a>
      }
    }
    else
    {
      memset(beaconHandle, 0, sizeof(beaconHandle_t) * BCN_SLOT_TOTAL);
 800236c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002370:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f007 fae2 	bl	8009940 <memset>
      systemHandle.count++;
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <main+0x3f0>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	3301      	adds	r3, #1
 8002382:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <main+0x3f0>)
 8002384:	6593      	str	r3, [r2, #88]	; 0x58
      systemHandle.beaconRecvCnt = 0;
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <main+0x3f0>)
 8002388:	2200      	movs	r2, #0
 800238a:	759a      	strb	r2, [r3, #22]
      systemHandle.beaconBitmap = 0;
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <main+0x3f0>)
 800238e:	2200      	movs	r2, #0
 8002390:	829a      	strh	r2, [r3, #20]
      while (!((TIM2->CNT > 0) && (TIM2->CNT < 10)))
 8002392:	bf00      	nop
 8002394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0fa      	beq.n	8002394 <main+0x39c>
 800239e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	2b09      	cmp	r3, #9
 80023a6:	d8f5      	bhi.n	8002394 <main+0x39c>
        ;
      superframe.bcnSlotCurrent = 0;
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <main+0x3c4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	71da      	strb	r2, [r3, #7]
      systemHandle.tagSfSync = false;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <main+0x3f0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	709a      	strb	r2, [r3, #2]
      while (superframe.bcnSlotCurrent < superframe.bcnSlotTotal)
 80023b4:	e194      	b.n	80026e0 <main+0x6e8>
 80023b6:	bf00      	nop
 80023b8:	0800f3c8 	.word	0x0800f3c8
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000330 	.word	0x20000330
 80023c4:	0800f428 	.word	0x0800f428
 80023c8:	20000010 	.word	0x20000010
 80023cc:	40000c00 	.word	0x40000c00
 80023d0:	2000055c 	.word	0x2000055c
 80023d4:	40000400 	.word	0x40000400
 80023d8:	20000514 	.word	0x20000514
 80023dc:	200004cc 	.word	0x200004cc
 80023e0:	0800f3e8 	.word	0x0800f3e8
 80023e4:	0800f3fc 	.word	0x0800f3fc
 80023e8:	200002c8 	.word	0x200002c8
      {
        while (TIM2->CNT < bcnTimes[superframe.bcnSlotCurrent])
 80023ec:	bf00      	nop
 80023ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f4:	4ba9      	ldr	r3, [pc, #676]	; (800269c <main+0x6a4>)
 80023f6:	79db      	ldrb	r3, [r3, #7]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80023fe:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8002402:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002406:	429a      	cmp	r2, r3
 8002408:	d3f1      	bcc.n	80023ee <main+0x3f6>
          ;
        dwSetReceiveWaitTimeout(&device, RX_BEACON_TIMEOUT);
 800240a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800240e:	48a4      	ldr	r0, [pc, #656]	; (80026a0 <main+0x6a8>)
 8002410:	f001 ff64 	bl	80042dc <dwSetReceiveWaitTimeout>
        dwWriteSystemConfigurationRegister(&device);
 8002414:	48a2      	ldr	r0, [pc, #648]	; (80026a0 <main+0x6a8>)
 8002416:	f001 feb7 	bl	8004188 <dwWriteSystemConfigurationRegister>
        dwNewReceive(&device);
 800241a:	48a1      	ldr	r0, [pc, #644]	; (80026a0 <main+0x6a8>)
 800241c:	f002 f8c9 	bl	80045b2 <dwNewReceive>
        dwSetDefaults(&device);
 8002420:	489f      	ldr	r0, [pc, #636]	; (80026a0 <main+0x6a8>)
 8002422:	f002 fbb1 	bl	8004b88 <dwSetDefaults>
        dwStartReceive(&device);
 8002426:	489e      	ldr	r0, [pc, #632]	; (80026a0 <main+0x6a8>)
 8002428:	f002 f8db 	bl	80045e2 <dwStartReceive>
        do
        {
          dwReadSystemEventStatusRegister(&device);
 800242c:	489c      	ldr	r0, [pc, #624]	; (80026a0 <main+0x6a8>)
 800242e:	f001 febc 	bl	80041aa <dwReadSystemEventStatusRegister>
        } while (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))));
 8002432:	4b9b      	ldr	r3, [pc, #620]	; (80026a0 <main+0x6a8>)
 8002434:	7e9b      	ldrb	r3, [r3, #26]
 8002436:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <main+0x452>
 800243e:	4b98      	ldr	r3, [pc, #608]	; (80026a0 <main+0x6a8>)
 8002440:	7edb      	ldrb	r3, [r3, #27]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <main+0x434>
        systemHandle.timeSyncRecv = TIM2->CNT;
 800244a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	4a94      	ldr	r2, [pc, #592]	; (80026a4 <main+0x6ac>)
 8002452:	6053      	str	r3, [r2, #4]
        dwInteruptHandler();
 8002454:	f7fe ff98 	bl	8001388 <dwInteruptHandler>
        if (device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8))
 8002458:	4b91      	ldr	r3, [pc, #580]	; (80026a0 <main+0x6a8>)
 800245a:	7e9b      	ldrb	r3, [r3, #26]
 800245c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8123 	beq.w	80026ac <main+0x6b4>
        {
          int length = dwGetDataLength(&device);
 8002466:	488e      	ldr	r0, [pc, #568]	; (80026a0 <main+0x6a8>)
 8002468:	f002 fc2e 	bl	8004cc8 <dwGetDataLength>
 800246c:	4603      	mov	r3, r0
 800246e:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
          if (length > 0)
 8002472:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8002476:	2b00      	cmp	r3, #0
 8002478:	f340 8123 	ble.w	80026c2 <main+0x6ca>
          {
            memset(&beaconPacket, 0, sizeof(beaconPacket));
 800247c:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002480:	2289      	movs	r2, #137	; 0x89
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f007 fa5b 	bl	8009940 <memset>
            dwGetData(&device, (uint8_t *)&beaconPacket, length);
 800248a:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800248e:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002492:	4619      	mov	r1, r3
 8002494:	4882      	ldr	r0, [pc, #520]	; (80026a0 <main+0x6a8>)
 8002496:	f002 fc4f 	bl	8004d38 <dwGetData>
            if (beaconPacket.payload[BEAC_ID] == TYPE_BEAC)
 800249a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800249e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80024a2:	7a5b      	ldrb	r3, [r3, #9]
 80024a4:	2b10      	cmp	r3, #16
 80024a6:	f040 810c 	bne.w	80026c2 <main+0x6ca>
            {
              uint8_t sfNumCurrent = beaconPacket.payload[BEAC_SF_NUM];
 80024aa:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80024ae:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80024b2:	7adb      	ldrb	r3, [r3, #11]
 80024b4:	f887 359b 	strb.w	r3, [r7, #1435]	; 0x59b
              if (sfNumCurrent < superframe.sfNumberTotal)
 80024b8:	4b78      	ldr	r3, [pc, #480]	; (800269c <main+0x6a4>)
 80024ba:	799b      	ldrb	r3, [r3, #6]
 80024bc:	f897 259b 	ldrb.w	r2, [r7, #1435]	; 0x59b
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d203      	bcs.n	80024cc <main+0x4d4>
                superframe.sfNumberCurrent = sfNumCurrent;
 80024c4:	4a75      	ldr	r2, [pc, #468]	; (800269c <main+0x6a4>)
 80024c6:	f897 359b 	ldrb.w	r3, [r7, #1435]	; 0x59b
 80024ca:	7253      	strb	r3, [r2, #9]
              systemHandle.timeSyncEnd = TIM2->CNT;
 80024cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	4a74      	ldr	r2, [pc, #464]	; (80026a4 <main+0x6ac>)
 80024d4:	6093      	str	r3, [r2, #8]
              if (systemHandle.tagSfSync == false)
 80024d6:	4b73      	ldr	r3, [pc, #460]	; (80026a4 <main+0x6ac>)
 80024d8:	789b      	ldrb	r3, [r3, #2]
 80024da:	f083 0301 	eor.w	r3, r3, #1
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d036      	beq.n	8002552 <main+0x55a>
              {
                if (systemHandle.timeSyncEnd > systemHandle.timeSyncRecv)
 80024e4:	4b6f      	ldr	r3, [pc, #444]	; (80026a4 <main+0x6ac>)
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	4b6e      	ldr	r3, [pc, #440]	; (80026a4 <main+0x6ac>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d915      	bls.n	800251c <main+0x524>
                {
                  TIM2->CNT = bcnTimes[superframe.bcnSlotCurrent] + superframe.sfOffset + systemHandle.timeSyncEnd - systemHandle.timeSyncRecv;
 80024f0:	4b6a      	ldr	r3, [pc, #424]	; (800269c <main+0x6a4>)
 80024f2:	79db      	ldrb	r3, [r3, #7]
 80024f4:	461a      	mov	r2, r3
 80024f6:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80024fa:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 80024fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002502:	4b66      	ldr	r3, [pc, #408]	; (800269c <main+0x6a4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	441a      	add	r2, r3
 8002508:	4b66      	ldr	r3, [pc, #408]	; (80026a4 <main+0x6ac>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	441a      	add	r2, r3
 800250e:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <main+0x6ac>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	624b      	str	r3, [r1, #36]	; 0x24
 800251a:	e017      	b.n	800254c <main+0x554>
                }
                else
                {
                  TIM2->CNT = bcnTimes[superframe.bcnSlotCurrent] + superframe.sfOffset + systemHandle.timeSyncEnd + 100000 - systemHandle.timeSyncRecv;
 800251c:	4b5f      	ldr	r3, [pc, #380]	; (800269c <main+0x6a4>)
 800251e:	79db      	ldrb	r3, [r3, #7]
 8002520:	461a      	mov	r2, r3
 8002522:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002526:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 800252a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800252e:	4b5b      	ldr	r3, [pc, #364]	; (800269c <main+0x6a4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	441a      	add	r2, r3
 8002534:	4b5b      	ldr	r3, [pc, #364]	; (80026a4 <main+0x6ac>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	441a      	add	r2, r3
 800253a:	4b5a      	ldr	r3, [pc, #360]	; (80026a4 <main+0x6ac>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002544:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8002548:	33a0      	adds	r3, #160	; 0xa0
 800254a:	6253      	str	r3, [r2, #36]	; 0x24
                }
                systemHandle.tagSfSync = true;
 800254c:	4b55      	ldr	r3, [pc, #340]	; (80026a4 <main+0x6ac>)
 800254e:	2201      	movs	r2, #1
 8002550:	709a      	strb	r2, [r3, #2]
              }
              memcpy((uint8_t *)&beaconHandle[superframe.bcnSlotCurrent].beaconMess, beaconPacket.payload, sizeof(beaconHandle[superframe.bcnSlotCurrent].beaconMess));
 8002552:	4b52      	ldr	r3, [pc, #328]	; (800269c <main+0x6a4>)
 8002554:	79db      	ldrb	r3, [r3, #7]
 8002556:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	18d0      	adds	r0, r2, r3
 800255e:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002562:	3309      	adds	r3, #9
 8002564:	2207      	movs	r2, #7
 8002566:	4619      	mov	r1, r3
 8002568:	f007 f9dc 	bl	8009924 <memcpy>
#ifdef TEST
              systemHandle.tagProv = true;
 800256c:	4b4d      	ldr	r3, [pc, #308]	; (80026a4 <main+0x6ac>)
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
              myTag.twrSlotNumber = tagBaseAddr[1];
 8002572:	2201      	movs	r2, #1
 8002574:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <main+0x6b0>)
 8002576:	709a      	strb	r2, [r3, #2]
#endif
              if (systemHandle.tagProv == false)
 8002578:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <main+0x6ac>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	f083 0301 	eor.w	r3, r3, #1
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d02e      	beq.n	80025e4 <main+0x5ec>
              {
                if (beaconHandle[superframe.bcnSlotCurrent].beaconMess.flag & (1 << PROV_TAG))
 8002586:	4b45      	ldr	r3, [pc, #276]	; (800269c <main+0x6a4>)
 8002588:	79db      	ldrb	r3, [r3, #7]
 800258a:	4619      	mov	r1, r3
 800258c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002590:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8002594:	010b      	lsls	r3, r1, #4
 8002596:	4413      	add	r3, r2
 8002598:	3301      	adds	r3, #1
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d045      	beq.n	8002630 <main+0x638>
                {
                  if (!memcmp(beaconHandle[superframe.bcnSlotCurrent].beaconMess.beaconExt.tagAddr, myTag.tagAddress, sizeof(myTag.tagAddress)))
 80025a4:	4b3d      	ldr	r3, [pc, #244]	; (800269c <main+0x6a4>)
 80025a6:	79db      	ldrb	r3, [r3, #7]
 80025a8:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	4413      	add	r3, r2
 80025b0:	3304      	adds	r3, #4
 80025b2:	2202      	movs	r2, #2
 80025b4:	493c      	ldr	r1, [pc, #240]	; (80026a8 <main+0x6b0>)
 80025b6:	4618      	mov	r0, r3
 80025b8:	f007 f9a4 	bl	8009904 <memcmp>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d136      	bne.n	8002630 <main+0x638>
                  {
                    systemHandle.tagProv = true;
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <main+0x6ac>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
                    myTag.twrSlotNumber = beaconHandle[superframe.bcnSlotCurrent].beaconMess.beaconExt.twrSlotNumber;
 80025c8:	4b34      	ldr	r3, [pc, #208]	; (800269c <main+0x6a4>)
 80025ca:	79db      	ldrb	r3, [r3, #7]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80025d2:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80025d6:	010b      	lsls	r3, r1, #4
 80025d8:	4413      	add	r3, r2
 80025da:	3306      	adds	r3, #6
 80025dc:	781a      	ldrb	r2, [r3, #0]
 80025de:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <main+0x6b0>)
 80025e0:	709a      	strb	r2, [r3, #2]
 80025e2:	e025      	b.n	8002630 <main+0x638>
                  }
                }
              }
              else
              {
                if (beaconHandle[superframe.bcnSlotCurrent].beaconMess.flag & (1 << DEL_TAG))
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <main+0x6a4>)
 80025e6:	79db      	ldrb	r3, [r3, #7]
 80025e8:	4619      	mov	r1, r3
 80025ea:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80025ee:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80025f2:	010b      	lsls	r3, r1, #4
 80025f4:	4413      	add	r3, r2
 80025f6:	3301      	adds	r3, #1
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <main+0x638>
                {
                  if (!memcmp(beaconHandle[superframe.bcnSlotCurrent].beaconMess.beaconExt.tagAddr, myTag.tagAddress, sizeof(myTag.tagAddress)))
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <main+0x6a4>)
 8002604:	79db      	ldrb	r3, [r3, #7]
 8002606:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	4413      	add	r3, r2
 800260e:	3304      	adds	r3, #4
 8002610:	2202      	movs	r2, #2
 8002612:	4925      	ldr	r1, [pc, #148]	; (80026a8 <main+0x6b0>)
 8002614:	4618      	mov	r0, r3
 8002616:	f007 f975 	bl	8009904 <memcmp>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d107      	bne.n	8002630 <main+0x638>
                  {
                    HAL_NVIC_SystemReset();
 8002620:	f004 fc8b 	bl	8006f3a <HAL_NVIC_SystemReset>
                    systemHandle.tagProv = false;
 8002624:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <main+0x6ac>)
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
                    myTag.twrSlotNumber = 0;
 800262a:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <main+0x6b0>)
 800262c:	2200      	movs	r2, #0
 800262e:	709a      	strb	r2, [r3, #2]
                  }
                }
              }
              beaconHandle[superframe.bcnSlotCurrent].rssi = dwGetReceivePower(&device);
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <main+0x6a4>)
 8002632:	79db      	ldrb	r3, [r3, #7]
 8002634:	461c      	mov	r4, r3
 8002636:	481a      	ldr	r0, [pc, #104]	; (80026a0 <main+0x6a8>)
 8002638:	f002 ff07 	bl	800544a <dwGetReceivePower>
 800263c:	eef0 7a40 	vmov.f32	s15, s0
 8002640:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002644:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8002648:	0123      	lsls	r3, r4, #4
 800264a:	4413      	add	r3, r2
 800264c:	3308      	adds	r3, #8
 800264e:	edc3 7a00 	vstr	s15, [r3]
              memcpy(beaconHandle[superframe.bcnSlotCurrent].anchorAddr, beaconPacket.sourceAddress, sizeof(beaconPacket.sourceAddress));
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <main+0x6a4>)
 8002654:	79db      	ldrb	r3, [r3, #7]
 8002656:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	3308      	adds	r3, #8
 800265e:	4413      	add	r3, r2
 8002660:	3304      	adds	r3, #4
 8002662:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
 8002666:	f5a2 7234 	sub.w	r2, r2, #720	; 0x2d0
 800266a:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800266e:	b292      	uxth	r2, r2
 8002670:	801a      	strh	r2, [r3, #0]
              systemHandle.beaconBitmap |= (1 << superframe.bcnSlotCurrent);
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <main+0x6ac>)
 8002674:	8a9b      	ldrh	r3, [r3, #20]
 8002676:	b21a      	sxth	r2, r3
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <main+0x6a4>)
 800267a:	79db      	ldrb	r3, [r3, #7]
 800267c:	4619      	mov	r1, r3
 800267e:	2301      	movs	r3, #1
 8002680:	408b      	lsls	r3, r1
 8002682:	b21b      	sxth	r3, r3
 8002684:	4313      	orrs	r3, r2
 8002686:	b21b      	sxth	r3, r3
 8002688:	b29a      	uxth	r2, r3
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <main+0x6ac>)
 800268c:	829a      	strh	r2, [r3, #20]
              systemHandle.beaconRecvCnt++;
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <main+0x6ac>)
 8002690:	7d9b      	ldrb	r3, [r3, #22]
 8002692:	3301      	adds	r3, #1
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <main+0x6ac>)
 8002698:	759a      	strb	r2, [r3, #22]
 800269a:	e012      	b.n	80026c2 <main+0x6ca>
 800269c:	20000000 	.word	0x20000000
 80026a0:	20000010 	.word	0x20000010
 80026a4:	200002c8 	.word	0x200002c8
 80026a8:	20000330 	.word	0x20000330
            }
          }
        }
        else
        {
          systemHandle.miss[superframe.bcnSlotCurrent]++;
 80026ac:	4b66      	ldr	r3, [pc, #408]	; (8002848 <main+0x850>)
 80026ae:	79db      	ldrb	r3, [r3, #7]
 80026b0:	4966      	ldr	r1, [pc, #408]	; (800284c <main+0x854>)
 80026b2:	1d9a      	adds	r2, r3, #6
 80026b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80026b8:	3201      	adds	r2, #1
 80026ba:	4964      	ldr	r1, [pc, #400]	; (800284c <main+0x854>)
 80026bc:	3306      	adds	r3, #6
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
        rtlsTimes.bcnEnd[superframe.bcnSlotCurrent] = TIM2->CNT;
 80026c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026c6:	4a60      	ldr	r2, [pc, #384]	; (8002848 <main+0x850>)
 80026c8:	79d2      	ldrb	r2, [r2, #7]
 80026ca:	4611      	mov	r1, r2
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	4a60      	ldr	r2, [pc, #384]	; (8002850 <main+0x858>)
 80026d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        superframe.bcnSlotCurrent++;
 80026d4:	4b5c      	ldr	r3, [pc, #368]	; (8002848 <main+0x850>)
 80026d6:	79db      	ldrb	r3, [r3, #7]
 80026d8:	3301      	adds	r3, #1
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	4b5a      	ldr	r3, [pc, #360]	; (8002848 <main+0x850>)
 80026de:	71da      	strb	r2, [r3, #7]
      while (superframe.bcnSlotCurrent < superframe.bcnSlotTotal)
 80026e0:	4b59      	ldr	r3, [pc, #356]	; (8002848 <main+0x850>)
 80026e2:	79da      	ldrb	r2, [r3, #7]
 80026e4:	4b58      	ldr	r3, [pc, #352]	; (8002848 <main+0x850>)
 80026e6:	791b      	ldrb	r3, [r3, #4]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	f4ff ae7f 	bcc.w	80023ec <main+0x3f4>
      }
      if (systemHandle.tagSfSync == true)
 80026ee:	4b57      	ldr	r3, [pc, #348]	; (800284c <main+0x854>)
 80026f0:	789b      	ldrb	r3, [r3, #2]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <main+0x706>
      {
        systemHandle.notSyncCnt = 0;
 80026f6:	4b55      	ldr	r3, [pc, #340]	; (800284c <main+0x854>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	70da      	strb	r2, [r3, #3]
 80026fc:	e00c      	b.n	8002718 <main+0x720>
      }
      else
      {
        systemHandle.notSyncCnt++;
 80026fe:	4b53      	ldr	r3, [pc, #332]	; (800284c <main+0x854>)
 8002700:	78db      	ldrb	r3, [r3, #3]
 8002702:	3301      	adds	r3, #1
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4b51      	ldr	r3, [pc, #324]	; (800284c <main+0x854>)
 8002708:	70da      	strb	r2, [r3, #3]
        if (systemHandle.notSyncCnt >= 5)
 800270a:	4b50      	ldr	r3, [pc, #320]	; (800284c <main+0x854>)
 800270c:	78db      	ldrb	r3, [r3, #3]
 800270e:	2b04      	cmp	r3, #4
 8002710:	d902      	bls.n	8002718 <main+0x720>
        {
          systemHandle.tagSync = false;
 8002712:	4b4e      	ldr	r3, [pc, #312]	; (800284c <main+0x854>)
 8002714:	2200      	movs	r2, #0
 8002716:	705a      	strb	r2, [r3, #1]
        }
      }
      // TWR
      if (systemHandle.tagProv == true && myTag.twrSlotNumber >= superframe.twrSlotTotal * superframe.sfNumberCurrent && myTag.twrSlotNumber < superframe.twrSlotTotal * (superframe.sfNumberCurrent + 1) && systemHandle.beaconRecvCnt >= 3)
 8002718:	4b4c      	ldr	r3, [pc, #304]	; (800284c <main+0x854>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	f43f ad78 	beq.w	8002212 <main+0x21a>
 8002722:	4b4c      	ldr	r3, [pc, #304]	; (8002854 <main+0x85c>)
 8002724:	789b      	ldrb	r3, [r3, #2]
 8002726:	461a      	mov	r2, r3
 8002728:	4b47      	ldr	r3, [pc, #284]	; (8002848 <main+0x850>)
 800272a:	795b      	ldrb	r3, [r3, #5]
 800272c:	4619      	mov	r1, r3
 800272e:	4b46      	ldr	r3, [pc, #280]	; (8002848 <main+0x850>)
 8002730:	7a5b      	ldrb	r3, [r3, #9]
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	429a      	cmp	r2, r3
 8002738:	f6ff ad6b 	blt.w	8002212 <main+0x21a>
 800273c:	4b45      	ldr	r3, [pc, #276]	; (8002854 <main+0x85c>)
 800273e:	789b      	ldrb	r3, [r3, #2]
 8002740:	461a      	mov	r2, r3
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <main+0x850>)
 8002744:	795b      	ldrb	r3, [r3, #5]
 8002746:	4619      	mov	r1, r3
 8002748:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <main+0x850>)
 800274a:	7a5b      	ldrb	r3, [r3, #9]
 800274c:	3301      	adds	r3, #1
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	429a      	cmp	r2, r3
 8002754:	f6bf ad5d 	bge.w	8002212 <main+0x21a>
 8002758:	4b3c      	ldr	r3, [pc, #240]	; (800284c <main+0x854>)
 800275a:	7d9b      	ldrb	r3, [r3, #22]
 800275c:	2b02      	cmp	r3, #2
 800275e:	f67f ad58 	bls.w	8002212 <main+0x21a>
      {
        superframe.twrSlotCurrent = 0;
 8002762:	4b39      	ldr	r3, [pc, #228]	; (8002848 <main+0x850>)
 8002764:	2200      	movs	r2, #0
 8002766:	721a      	strb	r2, [r3, #8]
        while (superframe.twrSlotCurrent < superframe.twrSlotTotal)
 8002768:	f000 be50 	b.w	800340c <main+0x1414>
        {
          while (TIM2->CNT < twrTimes[superframe.twrSlotCurrent])
 800276c:	bf00      	nop
 800276e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002774:	4b34      	ldr	r3, [pc, #208]	; (8002848 <main+0x850>)
 8002776:	7a1b      	ldrb	r3, [r3, #8]
 8002778:	4619      	mov	r1, r3
 800277a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800277e:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 8002782:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002786:	429a      	cmp	r2, r3
 8002788:	d3f1      	bcc.n	800276e <main+0x776>
            ;
          if (superframe.twrSlotCurrent + superframe.twrSlotTotal * superframe.sfNumberCurrent == myTag.twrSlotNumber)
 800278a:	4b2f      	ldr	r3, [pc, #188]	; (8002848 <main+0x850>)
 800278c:	7a1b      	ldrb	r3, [r3, #8]
 800278e:	461a      	mov	r2, r3
 8002790:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <main+0x850>)
 8002792:	795b      	ldrb	r3, [r3, #5]
 8002794:	4619      	mov	r1, r3
 8002796:	4b2c      	ldr	r3, [pc, #176]	; (8002848 <main+0x850>)
 8002798:	7a5b      	ldrb	r3, [r3, #9]
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	4a2c      	ldr	r2, [pc, #176]	; (8002854 <main+0x85c>)
 80027a2:	7892      	ldrb	r2, [r2, #2]
 80027a4:	4293      	cmp	r3, r2
 80027a6:	f040 862b 	bne.w	8003400 <main+0x1408>
          {
            while (TIM2->CNT < twrTimes[superframe.twrSlotCurrent] + 100)
 80027aa:	bf00      	nop
 80027ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b2:	4b25      	ldr	r3, [pc, #148]	; (8002848 <main+0x850>)
 80027b4:	7a1b      	ldrb	r3, [r3, #8]
 80027b6:	4619      	mov	r1, r3
 80027b8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80027bc:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 80027c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027c4:	3364      	adds	r3, #100	; 0x64
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d3f0      	bcc.n	80027ac <main+0x7b4>
              ;
            rtlsTimes.pollStart = TIM2->CNT;
 80027ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <main+0x858>)
 80027d2:	6413      	str	r3, [r2, #64]	; 0x40
            memset(&pollHandle, 0, sizeof(pollHandle));
 80027d4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80027d8:	2218      	movs	r2, #24
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f007 f8af 	bl	8009940 <memset>
            memset(&pollPacket, 0, sizeof(pollPacket));
 80027e2:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80027e6:	2289      	movs	r2, #137	; 0x89
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f007 f8a8 	bl	8009940 <memset>
            pollHandle.pollMess.messID = TYPE_POLL;
 80027f0:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80027f4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80027f8:	2221      	movs	r2, #33	; 0x21
 80027fa:	701a      	strb	r2, [r3, #0]
            pollHandle.pollMess.twrSlotNumber = superframe.twrSlotCurrent;
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <main+0x850>)
 80027fe:	7a1b      	ldrb	r3, [r3, #8]
 8002800:	b29a      	uxth	r2, r3
 8002802:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002806:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800280a:	f8a3 2001 	strh.w	r2, [r3, #1]
            if (systemHandle.beaconRecvCnt > 4)
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <main+0x854>)
 8002810:	7d9b      	ldrb	r3, [r3, #22]
 8002812:	2b04      	cmp	r3, #4
 8002814:	d909      	bls.n	800282a <main+0x832>
            {
              getFourAnchor(beaconHandle, &pollHandle.pollMess.bcnSlotBitmap);
 8002816:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800281a:	1cda      	adds	r2, r3, #3
 800281c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fdea 	bl	80013fc <getFourAnchor>
 8002828:	e007      	b.n	800283a <main+0x842>
            }
            else
            {
              pollHandle.pollMess.bcnSlotBitmap = systemHandle.beaconBitmap;
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <main+0x854>)
 800282c:	8a9a      	ldrh	r2, [r3, #20]
 800282e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002832:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002836:	f8a3 2003 	strh.w	r2, [r3, #3]
            }
            int index = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
            for (int i = 0; i < BCN_SLOT_TOTAL; i++)
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 8002846:	e033      	b.n	80028b0 <main+0x8b8>
 8002848:	20000000 	.word	0x20000000
 800284c:	200002c8 	.word	0x200002c8
 8002850:	20000334 	.word	0x20000334
 8002854:	20000330 	.word	0x20000330
            {
              if (pollHandle.pollMess.bcnSlotBitmap & (1 << i))
 8002858:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800285c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002860:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8002864:	b29b      	uxth	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 800286c:	fa42 f303 	asr.w	r3, r2, r3
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d016      	beq.n	80028a6 <main+0x8ae>
              {
                memcpy(&pollHandle.pollMess.anchorAddr[index * 2], beaconHandle[i].anchorAddr, sizeof(beaconHandle[i].anchorAddr));
 8002878:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8002882:	4413      	add	r3, r2
 8002884:	3305      	adds	r3, #5
 8002886:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 800288a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	3208      	adds	r2, #8
 8002892:	440a      	add	r2, r1
 8002894:	3204      	adds	r2, #4
 8002896:	8812      	ldrh	r2, [r2, #0]
 8002898:	b292      	uxth	r2, r2
 800289a:	801a      	strh	r2, [r3, #0]
                index++;
 800289c:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 80028a0:	3301      	adds	r3, #1
 80028a2:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
            for (int i = 0; i < BCN_SLOT_TOTAL; i++)
 80028a6:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 80028aa:	3301      	adds	r3, #1
 80028ac:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 80028b0:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 80028b4:	2b0f      	cmp	r3, #15
 80028b6:	ddcf      	ble.n	8002858 <main+0x860>
              }
            }
            MAC80215_PACKET_INIT(pollPacket, MAC802154_TYPE_DATA);
 80028b8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80028bc:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 80028c0:	7813      	ldrb	r3, [r2, #0]
 80028c2:	2101      	movs	r1, #1
 80028c4:	f361 0302 	bfi	r3, r1, #0, #3
 80028c8:	7013      	strb	r3, [r2, #0]
 80028ca:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80028ce:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 80028d2:	7813      	ldrb	r3, [r2, #0]
 80028d4:	f36f 03c3 	bfc	r3, #3, #1
 80028d8:	7013      	strb	r3, [r2, #0]
 80028da:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80028de:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 80028e2:	7813      	ldrb	r3, [r2, #0]
 80028e4:	f36f 1304 	bfc	r3, #4, #1
 80028e8:	7013      	strb	r3, [r2, #0]
 80028ea:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80028ee:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 80028f2:	7813      	ldrb	r3, [r2, #0]
 80028f4:	f36f 1345 	bfc	r3, #5, #1
 80028f8:	7013      	strb	r3, [r2, #0]
 80028fa:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80028fe:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8002902:	7813      	ldrb	r3, [r2, #0]
 8002904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002908:	7013      	strb	r3, [r2, #0]
 800290a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800290e:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8002912:	7853      	ldrb	r3, [r2, #1]
 8002914:	2102      	movs	r1, #2
 8002916:	f361 0383 	bfi	r3, r1, #2, #2
 800291a:	7053      	strb	r3, [r2, #1]
 800291c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002920:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8002924:	7853      	ldrb	r3, [r2, #1]
 8002926:	2101      	movs	r1, #1
 8002928:	f361 1305 	bfi	r3, r1, #4, #2
 800292c:	7053      	strb	r3, [r2, #1]
 800292e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002932:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8002936:	7853      	ldrb	r3, [r2, #1]
 8002938:	2102      	movs	r1, #2
 800293a:	f361 1387 	bfi	r3, r1, #6, #2
 800293e:	7053      	strb	r3, [r2, #1]
 8002940:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002944:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8002948:	2200      	movs	r2, #0
 800294a:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800294e:	70da      	strb	r2, [r3, #3]
 8002950:	2200      	movs	r2, #0
 8002952:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8002956:	711a      	strb	r2, [r3, #4]
            memset(pollPacket.destAddress, 0xFF, sizeof(pollPacket.destAddress));
 8002958:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800295c:	3305      	adds	r3, #5
 800295e:	2202      	movs	r2, #2
 8002960:	21ff      	movs	r1, #255	; 0xff
 8002962:	4618      	mov	r0, r3
 8002964:	f006 ffec 	bl	8009940 <memset>
 8002968:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <main+0xa2c>)
 800296a:	881a      	ldrh	r2, [r3, #0]
            memcpy(pollPacket.sourceAddress, myTag.tagAddress, sizeof(myTag.tagAddress));
 800296c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002970:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8002974:	f8a3 2007 	strh.w	r2, [r3, #7]
            memcpy(pollPacket.payload, (uint8_t *)&pollHandle.pollMess, sizeof(pollHandle.pollMess));
 8002978:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800297c:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8002980:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
 8002984:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002988:	f103 0409 	add.w	r4, r3, #9
 800298c:	4613      	mov	r3, r2
 800298e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002990:	6020      	str	r0, [r4, #0]
 8002992:	6061      	str	r1, [r4, #4]
 8002994:	60a2      	str	r2, [r4, #8]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	7323      	strb	r3, [r4, #12]
            dwNewTransmit(&device);
 800299a:	4823      	ldr	r0, [pc, #140]	; (8002a28 <main+0xa30>)
 800299c:	f001 fe4d 	bl	800463a <dwNewTransmit>
            dwSetDefaults(&device);
 80029a0:	4821      	ldr	r0, [pc, #132]	; (8002a28 <main+0xa30>)
 80029a2:	f002 f8f1 	bl	8004b88 <dwSetDefaults>
            dwSetData(&device, (uint8_t *)&pollPacket, MAC802154_HEADER_LENGTH + sizeof(pollHandle.pollMess));
 80029a6:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80029aa:	2216      	movs	r2, #22
 80029ac:	4619      	mov	r1, r3
 80029ae:	481e      	ldr	r0, [pc, #120]	; (8002a28 <main+0xa30>)
 80029b0:	f002 f948 	bl	8004c44 <dwSetData>
            dwStartTransmit(&device, false);
 80029b4:	2100      	movs	r1, #0
 80029b6:	481c      	ldr	r0, [pc, #112]	; (8002a28 <main+0xa30>)
 80029b8:	f001 fe57 	bl	800466a <dwStartTransmit>
            do
            {
              dwReadSystemEventStatusRegister(&device);
 80029bc:	481a      	ldr	r0, [pc, #104]	; (8002a28 <main+0xa30>)
 80029be:	f001 fbf4 	bl	80041aa <dwReadSystemEventStatusRegister>
            } while (!(device.sysstatus[0] & (1 << TXFRS_BIT)));
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <main+0xa30>)
 80029c4:	7e5b      	ldrb	r3, [r3, #25]
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	daf7      	bge.n	80029bc <main+0x9c4>
            rtlsTimes.pollSent = TIM2->CNT;
 80029cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <main+0xa34>)
 80029d4:	6453      	str	r3, [r2, #68]	; 0x44
            dwInteruptHandler();
 80029d6:	f7fe fcd7 	bl	8001388 <dwInteruptHandler>
            dwGetTransmitTimestamp(&device, &pollHandle.timestamp);
 80029da:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80029de:	3310      	adds	r3, #16
 80029e0:	4619      	mov	r1, r3
 80029e2:	4811      	ldr	r0, [pc, #68]	; (8002a28 <main+0xa30>)
 80029e4:	f002 f9be 	bl	8004d64 <dwGetTransmitTimestamp>
            pollHandle.timestamp.timeFull += ANTENNA_DELAY;
 80029e8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80029ec:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80029f0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029f4:	f244 015b 	movw	r1, #16475	; 0x405b
 80029f8:	eb12 0801 	adds.w	r8, r2, r1
 80029fc:	f143 0900 	adc.w	r9, r3, #0
 8002a00:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002a04:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002a08:	e9c3 8904 	strd	r8, r9, [r3, #16]
            uint8_t respIndex = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 35bf 	strb.w	r3, [r7, #1471]	; 0x5bf
            rtlsTimes.pollEnd = TIM2->CNT;
 8002a12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <main+0xa34>)
 8002a1a:	6493      	str	r3, [r2, #72]	; 0x48
            systemHandle.respRecvCnt = 0;
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <main+0xa38>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	75da      	strb	r2, [r3, #23]
            while (respIndex < 4)
 8002a22:	e234      	b.n	8002e8e <main+0xe96>
 8002a24:	20000330 	.word	0x20000330
 8002a28:	20000010 	.word	0x20000010
 8002a2c:	20000334 	.word	0x20000334
 8002a30:	200002c8 	.word	0x200002c8
            {
              while (TIM2->CNT < twrTimes[superframe.twrSlotCurrent] + (SF_POLL_SLOT_TIME + SF_RESP_SLOT_TIME * respIndex))
 8002a34:	bf00      	nop
 8002a36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a3c:	4bde      	ldr	r3, [pc, #888]	; (8002db8 <main+0xdc0>)
 8002a3e:	7a1b      	ldrb	r3, [r3, #8]
 8002a40:	4619      	mov	r1, r3
 8002a42:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002a46:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 8002a4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a4e:	f897 15bf 	ldrb.w	r1, [r7, #1471]	; 0x5bf
 8002a52:	f240 5014 	movw	r0, #1300	; 0x514
 8002a56:	fb00 f101 	mul.w	r1, r0, r1
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d3e8      	bcc.n	8002a36 <main+0xa3e>
                ;
              dwSetReceiveWaitTimeout(&device, RX_RESP_TIMEOUT);
 8002a64:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002a68:	48d4      	ldr	r0, [pc, #848]	; (8002dbc <main+0xdc4>)
 8002a6a:	f001 fc37 	bl	80042dc <dwSetReceiveWaitTimeout>
              dwWriteSystemConfigurationRegister(&device);
 8002a6e:	48d3      	ldr	r0, [pc, #844]	; (8002dbc <main+0xdc4>)
 8002a70:	f001 fb8a 	bl	8004188 <dwWriteSystemConfigurationRegister>
              dwNewReceive(&device);
 8002a74:	48d1      	ldr	r0, [pc, #836]	; (8002dbc <main+0xdc4>)
 8002a76:	f001 fd9c 	bl	80045b2 <dwNewReceive>
              dwSetDefaults(&device);
 8002a7a:	48d0      	ldr	r0, [pc, #832]	; (8002dbc <main+0xdc4>)
 8002a7c:	f002 f884 	bl	8004b88 <dwSetDefaults>
              dwStartReceive(&device);
 8002a80:	48ce      	ldr	r0, [pc, #824]	; (8002dbc <main+0xdc4>)
 8002a82:	f001 fdae 	bl	80045e2 <dwStartReceive>
              do
              {
                dwReadSystemEventStatusRegister(&device);
 8002a86:	48cd      	ldr	r0, [pc, #820]	; (8002dbc <main+0xdc4>)
 8002a88:	f001 fb8f 	bl	80041aa <dwReadSystemEventStatusRegister>
              } while (!((device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8)) || (device.sysstatus[2] & ((1 << RXRFTO_BIT) >> 16))));
 8002a8c:	4bcb      	ldr	r3, [pc, #812]	; (8002dbc <main+0xdc4>)
 8002a8e:	7e9b      	ldrb	r3, [r3, #26]
 8002a90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d105      	bne.n	8002aa4 <main+0xaac>
 8002a98:	4bc8      	ldr	r3, [pc, #800]	; (8002dbc <main+0xdc4>)
 8002a9a:	7edb      	ldrb	r3, [r3, #27]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <main+0xa8e>
              rtlsTimes.respRecv[respIndex] = TIM2->CNT;
 8002aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aa8:	f897 35bf 	ldrb.w	r3, [r7, #1471]	; 0x5bf
 8002aac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aae:	49c4      	ldr	r1, [pc, #784]	; (8002dc0 <main+0xdc8>)
 8002ab0:	3312      	adds	r3, #18
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	605a      	str	r2, [r3, #4]
              dwInteruptHandler();
 8002ab8:	f7fe fc66 	bl	8001388 <dwInteruptHandler>
              if (device.sysstatus[1] & (((1 << RXDFR_BIT) | (1 << RXFCG_BIT)) >> 8))
 8002abc:	4bbf      	ldr	r3, [pc, #764]	; (8002dbc <main+0xdc4>)
 8002abe:	7e9b      	ldrb	r3, [r3, #26]
 8002ac0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 81d3 	beq.w	8002e70 <main+0xe78>
              {
                int length = dwGetDataLength(&device);
 8002aca:	48bc      	ldr	r0, [pc, #752]	; (8002dbc <main+0xdc4>)
 8002acc:	f002 f8fc 	bl	8004cc8 <dwGetDataLength>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
                if (length > 0)
 8002ad6:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f340 81c8 	ble.w	8002e70 <main+0xe78>
                {
                  dwGetData(&device, (uint8_t *)&respPacket, length);
 8002ae0:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 8002ae4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002ae8:	4619      	mov	r1, r3
 8002aea:	48b4      	ldr	r0, [pc, #720]	; (8002dbc <main+0xdc4>)
 8002aec:	f002 f924 	bl	8004d38 <dwGetData>
                  if (!memcmp(respPacket.destAddress, tagBaseAddr, 2) && respPacket.payload[RESP_ID] == TYPE_RESP)
 8002af0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002af4:	3305      	adds	r3, #5
 8002af6:	2202      	movs	r2, #2
 8002af8:	49b2      	ldr	r1, [pc, #712]	; (8002dc4 <main+0xdcc>)
 8002afa:	4618      	mov	r0, r3
 8002afc:	f006 ff02 	bl	8009904 <memcmp>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f040 81b4 	bne.w	8002e70 <main+0xe78>
 8002b08:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002b0c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002b10:	7a5b      	ldrb	r3, [r3, #9]
 8002b12:	2b32      	cmp	r3, #50	; 0x32
 8002b14:	f040 81ac 	bne.w	8002e70 <main+0xe78>
                  {
                    memcpy(&respHandle[respIndex].respMess, respPacket.payload, sizeof(respHandle[respIndex].respMess));
 8002b18:	f897 25bf 	ldrb.w	r2, [r7, #1471]	; 0x5bf
 8002b1c:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	18c8      	adds	r0, r1, r3
 8002b2a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002b2e:	3309      	adds	r3, #9
 8002b30:	2213      	movs	r2, #19
 8002b32:	4619      	mov	r1, r3
 8002b34:	f006 fef6 	bl	8009924 <memcpy>
                    dwGetReceiveTimestamp(&device, &respHandle[respIndex].timestamp);
 8002b38:	f897 25bf 	ldrb.w	r2, [r7, #1471]	; 0x5bf
 8002b3c:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	3318      	adds	r3, #24
 8002b4a:	440b      	add	r3, r1
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	489b      	ldr	r0, [pc, #620]	; (8002dbc <main+0xdc4>)
 8002b50:	f002 f919 	bl	8004d86 <dwGetReceiveTimestamp>
                    respHandle[respIndex].timestamp.timeFull -= ANTENNA_DELAY;
 8002b54:	f897 25bf 	ldrb.w	r2, [r7, #1471]	; 0x5bf
 8002b58:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002b5c:	f5a3 710e 	sub.w	r1, r3, #568	; 0x238
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	3318      	adds	r3, #24
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f897 15bf 	ldrb.w	r1, [r7, #1471]	; 0x5bf
 8002b74:	4894      	ldr	r0, [pc, #592]	; (8002dc8 <main+0xdd0>)
 8002b76:	eb12 0a00 	adds.w	sl, r2, r0
 8002b7a:	f143 3bff 	adc.w	fp, r3, #4294967295
 8002b7e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002b82:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 8002b86:	460b      	mov	r3, r1
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	1a5b      	subs	r3, r3, r1
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3318      	adds	r3, #24
 8002b92:	e9c3 ab00 	strd	sl, fp, [r3]
                    clockOffsetRatio = dwReadCarrierIntegrator(&device) * (FREQ_OFFSET_MULTIPLIER * HERTZ_TO_PPM_MULTIPLIER_CHAN_2 / 1.0e6);
 8002b96:	4889      	ldr	r0, [pc, #548]	; (8002dbc <main+0xdc4>)
 8002b98:	f001 fe08 	bl	80047ac <dwReadCarrierIntegrator>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd fcc0 	bl	8000524 <__aeabi_i2d>
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba8:	4b88      	ldr	r3, [pc, #544]	; (8002dcc <main+0xdd4>)
 8002baa:	f7fd fd25 	bl	80005f8 <__aeabi_dmul>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f7fe f817 	bl	8000be8 <__aeabi_d2f>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 8002bc0:	6013      	str	r3, [r2, #0]
                    dwTimestamp_t timeRx, timeTx;
                    memcpy(timeRx.timeRaw, respHandle[respIndex].respMess.rxTimestamp.timeRaw, sizeof(respHandle[respIndex].respMess.rxTimestamp.timeRaw));
 8002bc2:	f897 25bf 	ldrb.w	r2, [r7, #1471]	; 0x5bf
 8002bc6:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	3308      	adds	r3, #8
 8002bd4:	440b      	add	r3, r1
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002bdc:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 8002be0:	6810      	ldr	r0, [r2, #0]
 8002be2:	6018      	str	r0, [r3, #0]
 8002be4:	7912      	ldrb	r2, [r2, #4]
 8002be6:	711a      	strb	r2, [r3, #4]
                    memcpy(timeTx.timeRaw, respHandle[respIndex].respMess.txTimestamp.timeRaw, sizeof(respHandle[respIndex].respMess.txTimestamp.timeRaw));
 8002be8:	f897 25bf 	ldrb.w	r2, [r7, #1471]	; 0x5bf
 8002bec:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	440b      	add	r3, r1
 8002bfc:	1d9a      	adds	r2, r3, #6
 8002bfe:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002c02:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8002c06:	6810      	ldr	r0, [r2, #0]
 8002c08:	6018      	str	r0, [r3, #0]
 8002c0a:	7912      	ldrb	r2, [r2, #4]
 8002c0c:	711a      	strb	r2, [r3, #4]
                    timeRx.timeFull -= ANTENNA_DELAY;
 8002c0e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002c12:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 8002c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1a:	496b      	ldr	r1, [pc, #428]	; (8002dc8 <main+0xdd0>)
 8002c1c:	1851      	adds	r1, r2, r1
 8002c1e:	6139      	str	r1, [r7, #16]
 8002c20:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002c2a:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 8002c2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002c32:	e9c3 1200 	strd	r1, r2, [r3]
                    timeTx.timeFull += ANTENNA_DELAY;
 8002c36:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002c3a:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	f244 015b 	movw	r1, #16475	; 0x405b
 8002c46:	1851      	adds	r1, r2, r1
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	f143 0300 	adc.w	r3, r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002c54:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8002c58:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002c5c:	e9c3 1200 	strd	r1, r2, [r3]
                    uint32_t timeInit = respHandle[respIndex].timestamp.timeLow32 - pollHandle.timestamp.timeLow32;
 8002c60:	f897 25bf 	ldrb.w	r2, [r7, #1471]	; 0x5bf
 8002c64:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002c68:	f5a3 710e 	sub.w	r1, r3, #568	; 0x238
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	440b      	add	r3, r1
 8002c76:	3318      	adds	r3, #24
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002c7e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
                    uint32_t timeResp = timeTx.timeLow32 - timeRx.timeLow32;
 8002c8a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002c8e:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002c98:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
                    double tof = ((double)timeInit - (double)timeResp * (1 - clockOffsetRatio)) / 2.0;
 8002ca4:	f8d7 05ac 	ldr.w	r0, [r7, #1452]	; 0x5ac
 8002ca8:	f7fd fc2c 	bl	8000504 <__aeabi_ui2d>
 8002cac:	e9c7 0100 	strd	r0, r1, [r7]
 8002cb0:	f8d7 05a8 	ldr.w	r0, [r7, #1448]	; 0x5a8
 8002cb4:	f7fd fc26 	bl	8000504 <__aeabi_ui2d>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	460d      	mov	r5, r1
 8002cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cc0:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ccc:	ee17 0a90 	vmov	r0, s15
 8002cd0:	f7fd fc3a 	bl	8000548 <__aeabi_f2d>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4620      	mov	r0, r4
 8002cda:	4629      	mov	r1, r5
 8002cdc:	f7fd fc8c 	bl	80005f8 <__aeabi_dmul>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ce8:	f7fd face 	bl	8000288 <__aeabi_dsub>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cfc:	f7fd fda6 	bl	800084c <__aeabi_ddiv>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8002d08:	e9c1 2300 	strd	r2, r3, [r1]
                    respHandle[respIndex].distance = (float)(tof * SPEED_OF_LIGHT / dwFreq);
 8002d0c:	a326      	add	r3, pc, #152	; (adr r3, 8002da8 <main+0xdb0>)
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8002d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d1a:	f7fd fc6d 	bl	80005f8 <__aeabi_dmul>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	a322      	add	r3, pc, #136	; (adr r3, 8002db0 <main+0xdb8>)
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	f7fd fd8e 	bl	800084c <__aeabi_ddiv>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	f897 45bf 	ldrb.w	r4, [r7, #1471]	; 0x5bf
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	f7fd ff54 	bl	8000be8 <__aeabi_d2f>
 8002d40:	4601      	mov	r1, r0
 8002d42:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002d46:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 8002d4a:	4623      	mov	r3, r4
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	1b1b      	subs	r3, r3, r4
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	3320      	adds	r3, #32
 8002d56:	6019      	str	r1, [r3, #0]
                    respHandle[respIndex].fPath = dwGetFirstPathPower(&device);
 8002d58:	f897 45bf 	ldrb.w	r4, [r7, #1471]	; 0x5bf
 8002d5c:	4817      	ldr	r0, [pc, #92]	; (8002dbc <main+0xdc4>)
 8002d5e:	f002 faff 	bl	8005360 <dwGetFirstPathPower>
 8002d62:	eef0 7a40 	vmov.f32	s15, s0
 8002d66:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002d6a:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 8002d6e:	4623      	mov	r3, r4
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	1b1b      	subs	r3, r3, r4
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	3324      	adds	r3, #36	; 0x24
 8002d7a:	edc3 7a00 	vstr	s15, [r3]
                    float prNlos, mc;
                    respHandle[respIndex].confidenceLevel = dwGetConfidenceLevel(&device, &prNlos, &mc);
 8002d7e:	f897 45bf 	ldrb.w	r4, [r7, #1471]	; 0x5bf
 8002d82:	f107 0220 	add.w	r2, r7, #32
 8002d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	480b      	ldr	r0, [pc, #44]	; (8002dbc <main+0xdc4>)
 8002d8e:	f002 fcdb 	bl	8005748 <dwGetConfidenceLevel>
 8002d92:	eef0 7a40 	vmov.f32	s15, s0
 8002d96:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002d9a:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 8002d9e:	4623      	mov	r3, r4
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	1b1b      	subs	r3, r3, r4
 8002da4:	e014      	b.n	8002dd0 <main+0xdd8>
 8002da6:	bf00      	nop
 8002da8:	4a000000 	.word	0x4a000000
 8002dac:	41b1de78 	.word	0x41b1de78
 8002db0:	00000000 	.word	0x00000000
 8002db4:	422dc130 	.word	0x422dc130
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	20000010 	.word	0x20000010
 8002dc0:	20000334 	.word	0x20000334
 8002dc4:	0800f428 	.word	0x0800f428
 8002dc8:	ffffbfa5 	.word	0xffffbfa5
 8002dcc:	be0fffff 	.word	0xbe0fffff
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3330      	adds	r3, #48	; 0x30
 8002dd6:	edc3 7a00 	vstr	s15, [r3]
                    respHandle[respIndex].prNlos = prNlos;
 8002dda:	f897 25bf 	ldrb.w	r2, [r7, #1471]	; 0x5bf
 8002dde:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002de2:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8002de6:	6819      	ldr	r1, [r3, #0]
 8002de8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002dec:	f5a3 700e 	sub.w	r0, r3, #568	; 0x238
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4403      	add	r3, r0
 8002dfa:	3328      	adds	r3, #40	; 0x28
 8002dfc:	6019      	str	r1, [r3, #0]
                    respHandle[respIndex].mc = mc;
 8002dfe:	f897 25bf 	ldrb.w	r2, [r7, #1471]	; 0x5bf
 8002e02:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002e06:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8002e0a:	6819      	ldr	r1, [r3, #0]
 8002e0c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002e10:	f5a3 700e 	sub.w	r0, r3, #568	; 0x238
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4403      	add	r3, r0
 8002e1e:	332c      	adds	r3, #44	; 0x2c
 8002e20:	6019      	str	r1, [r3, #0]
                    if (respHandle[respIndex].distance < 0)
 8002e22:	f897 25bf 	ldrb.w	r2, [r7, #1471]	; 0x5bf
 8002e26:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002e2a:	f5a3 710e 	sub.w	r1, r3, #568	; 0x238
 8002e2e:	4613      	mov	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	440b      	add	r3, r1
 8002e38:	3320      	adds	r3, #32
 8002e3a:	edd3 7a00 	vldr	s15, [r3]
 8002e3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e46:	d50d      	bpl.n	8002e64 <main+0xe6c>
                      respHandle[respIndex].distance = 0.001;
 8002e48:	f897 25bf 	ldrb.w	r2, [r7, #1471]	; 0x5bf
 8002e4c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002e50:	f5a3 710e 	sub.w	r1, r3, #568	; 0x238
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3320      	adds	r3, #32
 8002e60:	4ac7      	ldr	r2, [pc, #796]	; (8003180 <main+0x1188>)
 8002e62:	601a      	str	r2, [r3, #0]
                    systemHandle.respRecvCnt++;
 8002e64:	4bc7      	ldr	r3, [pc, #796]	; (8003184 <main+0x118c>)
 8002e66:	7ddb      	ldrb	r3, [r3, #23]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	4bc5      	ldr	r3, [pc, #788]	; (8003184 <main+0x118c>)
 8002e6e:	75da      	strb	r2, [r3, #23]
                  }
                }
              }
              rtlsTimes.respEnd[respIndex] = TIM2->CNT;
 8002e70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e74:	f897 35bf 	ldrb.w	r3, [r7, #1471]	; 0x5bf
 8002e78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e7a:	49c3      	ldr	r1, [pc, #780]	; (8003188 <main+0x1190>)
 8002e7c:	3316      	adds	r3, #22
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	605a      	str	r2, [r3, #4]
              respIndex++;
 8002e84:	f897 35bf 	ldrb.w	r3, [r7, #1471]	; 0x5bf
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f887 35bf 	strb.w	r3, [r7, #1471]	; 0x5bf
            while (respIndex < 4)
 8002e8e:	f897 35bf 	ldrb.w	r3, [r7, #1471]	; 0x5bf
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	f67f adce 	bls.w	8002a34 <main+0xa3c>
            }
            while (TIM2->CNT < twrTimes[superframe.twrSlotCurrent] + (SF_POLL_SLOT_TIME + SF_RESP_SLOT_TIME * 4))
 8002e98:	bf00      	nop
 8002e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea0:	4bba      	ldr	r3, [pc, #744]	; (800318c <main+0x1194>)
 8002ea2:	7a1b      	ldrb	r3, [r3, #8]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002eaa:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 8002eae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002eb2:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d3ef      	bcc.n	8002e9a <main+0xea2>
              ;
            if (systemHandle.respRecvCnt >= 3)
 8002eba:	4bb2      	ldr	r3, [pc, #712]	; (8003184 <main+0x118c>)
 8002ebc:	7ddb      	ldrb	r3, [r3, #23]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	f240 829e 	bls.w	8003400 <main+0x1408>
            {
              while (TIM2->CNT < twrTimes[superframe.twrSlotCurrent] + ((SF_POLL_SLOT_TIME + SF_RESP_SLOT_TIME * 4)) + 100)
 8002ec4:	bf00      	nop
 8002ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ecc:	4baf      	ldr	r3, [pc, #700]	; (800318c <main+0x1194>)
 8002ece:	7a1b      	ldrb	r3, [r3, #8]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002ed6:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 8002eda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ede:	f503 53cb 	add.w	r3, r3, #6496	; 0x1960
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d3ee      	bcc.n	8002ec6 <main+0xece>
                ;
              memset(&locPacket, 0, sizeof(locPacket));
 8002ee8:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8002eec:	2289      	movs	r2, #137	; 0x89
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f006 fd25 	bl	8009940 <memset>
              memset(&locMess, 0, sizeof(locMess));
 8002ef6:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8002efa:	220a      	movs	r2, #10
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f006 fd1e 	bl	8009940 <memset>
              rtlsTimes.locStart = TIM2->CNT;
 8002f04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	4a9f      	ldr	r2, [pc, #636]	; (8003188 <main+0x1190>)
 8002f0c:	66d3      	str	r3, [r2, #108]	; 0x6c
              float xMeas, yMeas;
              int bcnIndex = getNearAnchor(beaconHandle);
 8002f0e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fb3c 	bl	8001590 <getNearAnchor>
 8002f18:	f8c7 05b4 	str.w	r0, [r7, #1460]	; 0x5b4
                  locMess.x.xVal = 0.0;
                  locMess.y.yVal = 0.0;
                }
              }
#else
              if (getLocation(respHandle, &xMeas, &yMeas) == true)
 8002f1c:	f107 0218 	add.w	r2, r7, #24
 8002f20:	f107 011c 	add.w	r1, r7, #28
 8002f24:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fd31 	bl	8001990 <getLocation>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 81bb 	beq.w	80032ac <main+0x12b4>
              {
                if (!isnan(xMeas) && !isnan(yMeas) && !isinf(xMeas) && !isinf(yMeas))
 8002f36:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002f3a:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8002f3e:	edd3 7a00 	vldr	s15, [r3]
 8002f42:	eef4 7a67 	vcmp.f32	s15, s15
 8002f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4a:	f180 819f 	bvs.w	800328c <main+0x1294>
 8002f4e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002f52:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8002f56:	edd3 7a00 	vldr	s15, [r3]
 8002f5a:	eef4 7a67 	vcmp.f32	s15, s15
 8002f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f62:	f180 8193 	bvs.w	800328c <main+0x1294>
 8002f66:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002f6a:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	eef0 7ae7 	vabs.f32	s15, s15
 8002f76:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8003190 <main+0x1198>
 8002f7a:	eef4 7a47 	vcmp.f32	s15, s14
 8002f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f82:	bfd4      	ite	le
 8002f84:	2301      	movle	r3, #1
 8002f86:	2300      	movgt	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f083 0301 	eor.w	r3, r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f040 817b 	bne.w	800328c <main+0x1294>
 8002f96:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002f9a:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8002f9e:	edd3 7a00 	vldr	s15, [r3]
 8002fa2:	eef0 7ae7 	vabs.f32	s15, s15
 8002fa6:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003190 <main+0x1198>
 8002faa:	eef4 7a47 	vcmp.f32	s15, s14
 8002fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb2:	bfd4      	ite	le
 8002fb4:	2301      	movle	r3, #1
 8002fb6:	2300      	movgt	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	f083 0301 	eor.w	r3, r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 8163 	bne.w	800328c <main+0x1294>
                {
                  locTime[locTimeIndex].x = xMeas;
 8002fc6:	4b73      	ldr	r3, [pc, #460]	; (8003194 <main+0x119c>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002fd0:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4970      	ldr	r1, [pc, #448]	; (8003198 <main+0x11a0>)
 8002fd8:	4603      	mov	r3, r0
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4403      	add	r3, r0
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	601a      	str	r2, [r3, #0]
                  locTime[locTimeIndex].y = yMeas;
 8002fe4:	4b6b      	ldr	r3, [pc, #428]	; (8003194 <main+0x119c>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002fee:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4968      	ldr	r1, [pc, #416]	; (8003198 <main+0x11a0>)
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4403      	add	r3, r0
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	3304      	adds	r3, #4
 8003002:	601a      	str	r2, [r3, #0]
                  locTime[locTimeIndex].time = HAL_GetTick();
 8003004:	4b63      	ldr	r3, [pc, #396]	; (8003194 <main+0x119c>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	461c      	mov	r4, r3
 800300a:	f003 fbe9 	bl	80067e0 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	4961      	ldr	r1, [pc, #388]	; (8003198 <main+0x11a0>)
 8003012:	4623      	mov	r3, r4
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4423      	add	r3, r4
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	3308      	adds	r3, #8
 800301e:	601a      	str	r2, [r3, #0]
                  locTimeIndex++;
 8003020:	4b5c      	ldr	r3, [pc, #368]	; (8003194 <main+0x119c>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b5a      	ldr	r3, [pc, #360]	; (8003194 <main+0x119c>)
 800302a:	701a      	strb	r2, [r3, #0]
                  systemHandle.kalmanUse = false;
 800302c:	4b55      	ldr	r3, [pc, #340]	; (8003184 <main+0x118c>)
 800302e:	2200      	movs	r2, #0
 8003030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                  if (systemHandle.kalmanUse == true)
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <main+0x118c>)
 8003036:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 810f 	beq.w	800325e <main+0x1266>
                  {
                    if (systemHandle.kalmanInit == false)
 8003040:	4b50      	ldr	r3, [pc, #320]	; (8003184 <main+0x118c>)
 8003042:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003046:	f083 0301 	eor.w	r3, r3, #1
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d029      	beq.n	80030a4 <main+0x10ac>
                    {
                    	kalman_init(&xFilter, 0.5, 0.2, 0.01, xMeas);
 8003050:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003054:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8003058:	edd3 7a00 	vldr	s15, [r3]
 800305c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003060:	eef0 1a67 	vmov.f32	s3, s15
 8003064:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 800319c <main+0x11a4>
 8003068:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80031a0 <main+0x11a8>
 800306c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe f8f1 	bl	8001258 <kalman_init>
						kalman_init(&yFilter, 0.5, 0.2, 0.01, yMeas);
 8003076:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800307a:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003086:	eef0 1a67 	vmov.f32	s3, s15
 800308a:	ed9f 1a44 	vldr	s2, [pc, #272]	; 800319c <main+0x11a4>
 800308e:	eddf 0a44 	vldr	s1, [pc, #272]	; 80031a0 <main+0x11a8>
 8003092:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe f8de 	bl	8001258 <kalman_init>
						systemHandle.kalmanInit = true;
 800309c:	4b39      	ldr	r3, [pc, #228]	; (8003184 <main+0x118c>)
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                    }
                    if (systemHandle.vTag > STOP_THRESHOLD)
 80030a4:	4b37      	ldr	r3, [pc, #220]	; (8003184 <main+0x118c>)
 80030a6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80030aa:	a333      	add	r3, pc, #204	; (adr r3, 8003178 <main+0x1180>)
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f7fd fd32 	bl	8000b18 <__aeabi_dcmpgt>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d074      	beq.n	80031a4 <main+0x11ac>
                    {
                      locMess.x.xVal = updateEstimate(&xFilter, xMeas);
 80030ba:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80030be:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 80030c2:	edd3 7a00 	vldr	s15, [r3]
 80030c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030ca:	eeb0 0a67 	vmov.f32	s0, s15
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe f8e0 	bl	8001294 <updateEstimate>
 80030d4:	eef0 7a40 	vmov.f32	s15, s0
 80030d8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80030dc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80030e0:	ee17 2a90 	vmov	r2, s15
 80030e4:	f8c3 2002 	str.w	r2, [r3, #2]
                      locMess.y.yVal = updateEstimate(&yFilter, yMeas);
 80030e8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80030ec:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 80030f0:	edd3 7a00 	vldr	s15, [r3]
 80030f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80030f8:	eeb0 0a67 	vmov.f32	s0, s15
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe f8c9 	bl	8001294 <updateEstimate>
 8003102:	eef0 7a40 	vmov.f32	s15, s0
 8003106:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800310a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800310e:	ee17 2a90 	vmov	r2, s15
 8003112:	f8c3 2006 	str.w	r2, [r3, #6]
                      locMess.x.xVal = updateEstimate(&xFilter, xMeas);
 8003116:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800311a:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003126:	eeb0 0a67 	vmov.f32	s0, s15
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe f8b2 	bl	8001294 <updateEstimate>
 8003130:	eef0 7a40 	vmov.f32	s15, s0
 8003134:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003138:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800313c:	ee17 2a90 	vmov	r2, s15
 8003140:	f8c3 2002 	str.w	r2, [r3, #2]
                      locMess.y.yVal = updateEstimate(&yFilter, yMeas);
 8003144:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003148:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 800314c:	edd3 7a00 	vldr	s15, [r3]
 8003150:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003154:	eeb0 0a67 	vmov.f32	s0, s15
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe f89b 	bl	8001294 <updateEstimate>
 800315e:	eef0 7a40 	vmov.f32	s15, s0
 8003162:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003166:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800316a:	ee17 2a90 	vmov	r2, s15
 800316e:	f8c3 2006 	str.w	r2, [r3, #6]
                  if (systemHandle.kalmanUse == true)
 8003172:	e09b      	b.n	80032ac <main+0x12b4>
 8003174:	f3af 8000 	nop.w
 8003178:	cccccccd 	.word	0xcccccccd
 800317c:	400ccccc 	.word	0x400ccccc
 8003180:	3a83126f 	.word	0x3a83126f
 8003184:	200002c8 	.word	0x200002c8
 8003188:	20000334 	.word	0x20000334
 800318c:	20000000 	.word	0x20000000
 8003190:	7f7fffff 	.word	0x7f7fffff
 8003194:	2000046c 	.word	0x2000046c
 8003198:	200003ac 	.word	0x200003ac
 800319c:	3c23d70a 	.word	0x3c23d70a
 80031a0:	3e4ccccd 	.word	0x3e4ccccd
                    }
                    else
                    {
					  locMess.x.xVal = updateEstimate(&xFilter, xMeas);
 80031a4:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80031a8:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 80031ac:	edd3 7a00 	vldr	s15, [r3]
 80031b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031b4:	eeb0 0a67 	vmov.f32	s0, s15
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe f86b 	bl	8001294 <updateEstimate>
 80031be:	eef0 7a40 	vmov.f32	s15, s0
 80031c2:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80031c6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80031ca:	ee17 2a90 	vmov	r2, s15
 80031ce:	f8c3 2002 	str.w	r2, [r3, #2]
					  locMess.y.yVal = updateEstimate(&yFilter, yMeas);
 80031d2:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80031d6:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031e2:	eeb0 0a67 	vmov.f32	s0, s15
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe f854 	bl	8001294 <updateEstimate>
 80031ec:	eef0 7a40 	vmov.f32	s15, s0
 80031f0:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80031f4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80031f8:	ee17 2a90 	vmov	r2, s15
 80031fc:	f8c3 2006 	str.w	r2, [r3, #6]
					  locMess.x.xVal = updateEstimate(&xFilter, xMeas);
 8003200:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003204:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8003208:	edd3 7a00 	vldr	s15, [r3]
 800320c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003210:	eeb0 0a67 	vmov.f32	s0, s15
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe f83d 	bl	8001294 <updateEstimate>
 800321a:	eef0 7a40 	vmov.f32	s15, s0
 800321e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003222:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8003226:	ee17 2a90 	vmov	r2, s15
 800322a:	f8c3 2002 	str.w	r2, [r3, #2]
					  locMess.y.yVal = updateEstimate(&yFilter, yMeas);
 800322e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003232:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800323e:	eeb0 0a67 	vmov.f32	s0, s15
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe f826 	bl	8001294 <updateEstimate>
 8003248:	eef0 7a40 	vmov.f32	s15, s0
 800324c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003250:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8003254:	ee17 2a90 	vmov	r2, s15
 8003258:	f8c3 2006 	str.w	r2, [r3, #6]
                  if (systemHandle.kalmanUse == true)
 800325c:	e026      	b.n	80032ac <main+0x12b4>
                    }
                  }
                  else
                  {
                    locMess.x.xVal = xMeas;
 800325e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003262:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800326c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8003270:	f8c3 2002 	str.w	r2, [r3, #2]
                    locMess.y.yVal = yMeas;
 8003274:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003278:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003282:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8003286:	f8c3 2006 	str.w	r2, [r3, #6]
                  if (systemHandle.kalmanUse == true)
 800328a:	e00f      	b.n	80032ac <main+0x12b4>
                  }
                }
                else
                {
                  locMess.x.xVal = 0.0;
 800328c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003290:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f8c3 2002 	str.w	r2, [r3, #2]
                  locMess.y.yVal = 0.0;
 800329c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80032a0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f8c3 2006 	str.w	r2, [r3, #6]
                }
              }
#endif
              locMess.messID = TYPE_LOC;
 80032ac:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80032b0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80032b4:	2243      	movs	r2, #67	; 0x43
 80032b6:	701a      	strb	r2, [r3, #0]
              locMess.twrSlotNumber = myTag.twrSlotNumber;
 80032b8:	4b59      	ldr	r3, [pc, #356]	; (8003420 <main+0x1428>)
 80032ba:	789a      	ldrb	r2, [r3, #2]
 80032bc:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80032c0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80032c4:	705a      	strb	r2, [r3, #1]
              MAC80215_PACKET_INIT(locPacket, MAC802154_TYPE_DATA);
 80032c6:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80032ca:	f2a3 4274 	subw	r2, r3, #1140	; 0x474
 80032ce:	7813      	ldrb	r3, [r2, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	f361 0302 	bfi	r3, r1, #0, #3
 80032d6:	7013      	strb	r3, [r2, #0]
 80032d8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80032dc:	f2a3 4274 	subw	r2, r3, #1140	; 0x474
 80032e0:	7813      	ldrb	r3, [r2, #0]
 80032e2:	f36f 03c3 	bfc	r3, #3, #1
 80032e6:	7013      	strb	r3, [r2, #0]
 80032e8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80032ec:	f2a3 4274 	subw	r2, r3, #1140	; 0x474
 80032f0:	7813      	ldrb	r3, [r2, #0]
 80032f2:	f36f 1304 	bfc	r3, #4, #1
 80032f6:	7013      	strb	r3, [r2, #0]
 80032f8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80032fc:	f2a3 4274 	subw	r2, r3, #1140	; 0x474
 8003300:	7813      	ldrb	r3, [r2, #0]
 8003302:	f36f 1345 	bfc	r3, #5, #1
 8003306:	7013      	strb	r3, [r2, #0]
 8003308:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800330c:	f2a3 4274 	subw	r2, r3, #1140	; 0x474
 8003310:	7813      	ldrb	r3, [r2, #0]
 8003312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003316:	7013      	strb	r3, [r2, #0]
 8003318:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800331c:	f2a3 4274 	subw	r2, r3, #1140	; 0x474
 8003320:	7853      	ldrb	r3, [r2, #1]
 8003322:	2102      	movs	r1, #2
 8003324:	f361 0383 	bfi	r3, r1, #2, #2
 8003328:	7053      	strb	r3, [r2, #1]
 800332a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800332e:	f2a3 4274 	subw	r2, r3, #1140	; 0x474
 8003332:	7853      	ldrb	r3, [r2, #1]
 8003334:	2101      	movs	r1, #1
 8003336:	f361 1305 	bfi	r3, r1, #4, #2
 800333a:	7053      	strb	r3, [r2, #1]
 800333c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003340:	f2a3 4274 	subw	r2, r3, #1140	; 0x474
 8003344:	7853      	ldrb	r3, [r2, #1]
 8003346:	2102      	movs	r1, #2
 8003348:	f361 1387 	bfi	r3, r1, #6, #2
 800334c:	7053      	strb	r3, [r2, #1]
 800334e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003352:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003356:	2200      	movs	r2, #0
 8003358:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800335c:	70da      	strb	r2, [r3, #3]
 800335e:	2200      	movs	r2, #0
 8003360:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8003364:	711a      	strb	r2, [r3, #4]
              memcpy(locPacket.destAddress, beaconHandle[bcnIndex].anchorAddr, sizeof(beaconHandle[bcnIndex].anchorAddr));
 8003366:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800336a:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	3308      	adds	r3, #8
 8003372:	4413      	add	r3, r2
 8003374:	3304      	adds	r3, #4
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b29a      	uxth	r2, r3
 800337a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800337e:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003382:	f8a3 2005 	strh.w	r2, [r3, #5]
 8003386:	4b26      	ldr	r3, [pc, #152]	; (8003420 <main+0x1428>)
 8003388:	881a      	ldrh	r2, [r3, #0]
              memcpy(locPacket.sourceAddress, myTag.tagAddress, sizeof(locPacket.sourceAddress));
 800338a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800338e:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003392:	f8a3 2007 	strh.w	r2, [r3, #7]
              memcpy(locPacket.payload, (uint8_t *)&locMess, sizeof(locMess));
 8003396:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800339a:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800339e:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
 80033a2:	f5a2 7111 	sub.w	r1, r2, #580	; 0x244
 80033a6:	f103 0209 	add.w	r2, r3, #9
 80033aa:	460b      	mov	r3, r1
 80033ac:	cb03      	ldmia	r3!, {r0, r1}
 80033ae:	6010      	str	r0, [r2, #0]
 80033b0:	6051      	str	r1, [r2, #4]
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	8113      	strh	r3, [r2, #8]
              dwNewTransmit(&device);
 80033b6:	481b      	ldr	r0, [pc, #108]	; (8003424 <main+0x142c>)
 80033b8:	f001 f93f 	bl	800463a <dwNewTransmit>
              dwSetDefaults(&device);
 80033bc:	4819      	ldr	r0, [pc, #100]	; (8003424 <main+0x142c>)
 80033be:	f001 fbe3 	bl	8004b88 <dwSetDefaults>
              dwSetData(&device, (uint8_t *)&locPacket, MAC802154_HEADER_LENGTH + sizeof(locMess));
 80033c2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80033c6:	2213      	movs	r2, #19
 80033c8:	4619      	mov	r1, r3
 80033ca:	4816      	ldr	r0, [pc, #88]	; (8003424 <main+0x142c>)
 80033cc:	f001 fc3a 	bl	8004c44 <dwSetData>
              dwStartTransmit(&device, false);
 80033d0:	2100      	movs	r1, #0
 80033d2:	4814      	ldr	r0, [pc, #80]	; (8003424 <main+0x142c>)
 80033d4:	f001 f949 	bl	800466a <dwStartTransmit>
              do
              {
                dwReadSystemEventStatusRegister(&device);
 80033d8:	4812      	ldr	r0, [pc, #72]	; (8003424 <main+0x142c>)
 80033da:	f000 fee6 	bl	80041aa <dwReadSystemEventStatusRegister>
              } while (!(device.sysstatus[0] & (1 << TXFRS_BIT)));
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <main+0x142c>)
 80033e0:	7e5b      	ldrb	r3, [r3, #25]
 80033e2:	b25b      	sxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	daf7      	bge.n	80033d8 <main+0x13e0>
              rtlsTimes.locSent = TIM2->CNT;
 80033e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	4a0e      	ldr	r2, [pc, #56]	; (8003428 <main+0x1430>)
 80033f0:	6713      	str	r3, [r2, #112]	; 0x70
              dwInteruptHandler();
 80033f2:	f7fd ffc9 	bl	8001388 <dwInteruptHandler>
              rtlsTimes.locEnd = TIM2->CNT;
 80033f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <main+0x1430>)
 80033fe:	6753      	str	r3, [r2, #116]	; 0x74
            }
          }
          superframe.twrSlotCurrent++;
 8003400:	4b0a      	ldr	r3, [pc, #40]	; (800342c <main+0x1434>)
 8003402:	7a1b      	ldrb	r3, [r3, #8]
 8003404:	3301      	adds	r3, #1
 8003406:	b2da      	uxtb	r2, r3
 8003408:	4b08      	ldr	r3, [pc, #32]	; (800342c <main+0x1434>)
 800340a:	721a      	strb	r2, [r3, #8]
        while (superframe.twrSlotCurrent < superframe.twrSlotTotal)
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <main+0x1434>)
 800340e:	7a1a      	ldrb	r2, [r3, #8]
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <main+0x1434>)
 8003412:	795b      	ldrb	r3, [r3, #5]
 8003414:	429a      	cmp	r2, r3
 8003416:	f4ff a9a9 	bcc.w	800276c <main+0x774>
    if (!systemHandle.tagSync)
 800341a:	f7fe befa 	b.w	8002212 <main+0x21a>
 800341e:	bf00      	nop
 8003420:	20000330 	.word	0x20000330
 8003424:	20000010 	.word	0x20000010
 8003428:	20000334 	.word	0x20000334
 800342c:	20000000 	.word	0x20000000

08003430 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b094      	sub	sp, #80	; 0x50
 8003434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003436:	f107 0320 	add.w	r3, r7, #32
 800343a:	2230      	movs	r2, #48	; 0x30
 800343c:	2100      	movs	r1, #0
 800343e:	4618      	mov	r0, r3
 8003440:	f006 fa7e 	bl	8009940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003444:	f107 030c 	add.w	r3, r7, #12
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003454:	2300      	movs	r3, #0
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	4b28      	ldr	r3, [pc, #160]	; (80034fc <SystemClock_Config+0xcc>)
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	4a27      	ldr	r2, [pc, #156]	; (80034fc <SystemClock_Config+0xcc>)
 800345e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003462:	6413      	str	r3, [r2, #64]	; 0x40
 8003464:	4b25      	ldr	r3, [pc, #148]	; (80034fc <SystemClock_Config+0xcc>)
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003470:	2300      	movs	r3, #0
 8003472:	607b      	str	r3, [r7, #4]
 8003474:	4b22      	ldr	r3, [pc, #136]	; (8003500 <SystemClock_Config+0xd0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a21      	ldr	r2, [pc, #132]	; (8003500 <SystemClock_Config+0xd0>)
 800347a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <SystemClock_Config+0xd0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800348c:	2301      	movs	r3, #1
 800348e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003496:	2302      	movs	r3, #2
 8003498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800349a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800349e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80034a0:	2304      	movs	r3, #4
 80034a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80034a4:	23a0      	movs	r3, #160	; 0xa0
 80034a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034a8:	2302      	movs	r3, #2
 80034aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80034ac:	2304      	movs	r3, #4
 80034ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034b0:	f107 0320 	add.w	r3, r7, #32
 80034b4:	4618      	mov	r0, r3
 80034b6:	f003 ff07 	bl	80072c8 <HAL_RCC_OscConfig>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034c0:	f000 f820 	bl	8003504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034c4:	230f      	movs	r3, #15
 80034c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034c8:	2302      	movs	r3, #2
 80034ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	2105      	movs	r1, #5
 80034e2:	4618      	mov	r0, r3
 80034e4:	f004 f968 	bl	80077b8 <HAL_RCC_ClockConfig>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80034ee:	f000 f809 	bl	8003504 <Error_Handler>
  }
}
 80034f2:	bf00      	nop
 80034f4:	3750      	adds	r7, #80	; 0x50
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800
 8003500:	40007000 	.word	0x40007000

08003504 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003508:	b672      	cpsid	i
}
 800350a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800350c:	e7fe      	b.n	800350c <Error_Handler+0x8>
	...

08003510 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003514:	4b17      	ldr	r3, [pc, #92]	; (8003574 <MX_SPI1_Init+0x64>)
 8003516:	4a18      	ldr	r2, [pc, #96]	; (8003578 <MX_SPI1_Init+0x68>)
 8003518:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800351a:	4b16      	ldr	r3, [pc, #88]	; (8003574 <MX_SPI1_Init+0x64>)
 800351c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003520:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003522:	4b14      	ldr	r3, [pc, #80]	; (8003574 <MX_SPI1_Init+0x64>)
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003528:	4b12      	ldr	r3, [pc, #72]	; (8003574 <MX_SPI1_Init+0x64>)
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800352e:	4b11      	ldr	r3, [pc, #68]	; (8003574 <MX_SPI1_Init+0x64>)
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003534:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <MX_SPI1_Init+0x64>)
 8003536:	2200      	movs	r2, #0
 8003538:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800353a:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <MX_SPI1_Init+0x64>)
 800353c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003540:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003542:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <MX_SPI1_Init+0x64>)
 8003544:	2220      	movs	r2, #32
 8003546:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <MX_SPI1_Init+0x64>)
 800354a:	2200      	movs	r2, #0
 800354c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800354e:	4b09      	ldr	r3, [pc, #36]	; (8003574 <MX_SPI1_Init+0x64>)
 8003550:	2200      	movs	r2, #0
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003554:	4b07      	ldr	r3, [pc, #28]	; (8003574 <MX_SPI1_Init+0x64>)
 8003556:	2200      	movs	r2, #0
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <MX_SPI1_Init+0x64>)
 800355c:	220a      	movs	r2, #10
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003560:	4804      	ldr	r0, [pc, #16]	; (8003574 <MX_SPI1_Init+0x64>)
 8003562:	f004 fb49 	bl	8007bf8 <HAL_SPI_Init>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800356c:	f7ff ffca 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003570:	bf00      	nop
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20000470 	.word	0x20000470
 8003578:	40013000 	.word	0x40013000

0800357c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a19      	ldr	r2, [pc, #100]	; (8003600 <HAL_SPI_MspInit+0x84>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d12b      	bne.n	80035f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	4b18      	ldr	r3, [pc, #96]	; (8003604 <HAL_SPI_MspInit+0x88>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	4a17      	ldr	r2, [pc, #92]	; (8003604 <HAL_SPI_MspInit+0x88>)
 80035a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035ac:	6453      	str	r3, [r2, #68]	; 0x44
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_SPI_MspInit+0x88>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	4b11      	ldr	r3, [pc, #68]	; (8003604 <HAL_SPI_MspInit+0x88>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4a10      	ldr	r2, [pc, #64]	; (8003604 <HAL_SPI_MspInit+0x88>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ca:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <HAL_SPI_MspInit+0x88>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80035d6:	23e0      	movs	r3, #224	; 0xe0
 80035d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035da:	2302      	movs	r3, #2
 80035dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e2:	2303      	movs	r3, #3
 80035e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035e6:	2305      	movs	r3, #5
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ea:	f107 0314 	add.w	r3, r7, #20
 80035ee:	4619      	mov	r1, r3
 80035f0:	4805      	ldr	r0, [pc, #20]	; (8003608 <HAL_SPI_MspInit+0x8c>)
 80035f2:	f003 fcb3 	bl	8006f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80035f6:	bf00      	nop
 80035f8:	3728      	adds	r7, #40	; 0x28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40013000 	.word	0x40013000
 8003604:	40023800 	.word	0x40023800
 8003608:	40020000 	.word	0x40020000

0800360c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	4b10      	ldr	r3, [pc, #64]	; (8003658 <HAL_MspInit+0x4c>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	4a0f      	ldr	r2, [pc, #60]	; (8003658 <HAL_MspInit+0x4c>)
 800361c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003620:	6453      	str	r3, [r2, #68]	; 0x44
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <HAL_MspInit+0x4c>)
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362a:	607b      	str	r3, [r7, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_MspInit+0x4c>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4a08      	ldr	r2, [pc, #32]	; (8003658 <HAL_MspInit+0x4c>)
 8003638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363c:	6413      	str	r3, [r2, #64]	; 0x40
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_MspInit+0x4c>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800

0800365c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003660:	e7fe      	b.n	8003660 <NMI_Handler+0x4>

08003662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  HAL_NVIC_SystemReset();
 8003666:	f003 fc68 	bl	8006f3a <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800366a:	e7fe      	b.n	800366a <HardFault_Handler+0x8>

0800366c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003670:	e7fe      	b.n	8003670 <MemManage_Handler+0x4>

08003672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003672:	b480      	push	{r7}
 8003674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003676:	e7fe      	b.n	8003676 <BusFault_Handler+0x4>

08003678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800367c:	e7fe      	b.n	800367c <UsageFault_Handler+0x4>

0800367e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800367e:	b480      	push	{r7}
 8003680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800369a:	b480      	push	{r7}
 800369c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036ac:	f003 f884 	bl	80067b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80036b8:	4802      	ldr	r0, [pc, #8]	; (80036c4 <TIM3_IRQHandler+0x10>)
 80036ba:	f005 f96d 	bl	8008998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000514 	.word	0x20000514

080036c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
	return 1;
 80036cc:	2301      	movs	r3, #1
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <_kill>:

int _kill(int pid, int sig)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036e2:	f006 f8dd 	bl	80098a0 <__errno>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2216      	movs	r2, #22
 80036ea:	601a      	str	r2, [r3, #0]
	return -1;
 80036ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_exit>:

void _exit (int status)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003700:	f04f 31ff 	mov.w	r1, #4294967295
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ffe7 	bl	80036d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800370a:	e7fe      	b.n	800370a <_exit+0x12>

0800370c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	e00a      	b.n	8003734 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800371e:	f3af 8000 	nop.w
 8003722:	4601      	mov	r1, r0
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	60ba      	str	r2, [r7, #8]
 800372a:	b2ca      	uxtb	r2, r1
 800372c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3301      	adds	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	dbf0      	blt.n	800371e <_read+0x12>
	}

return len;
 800373c:	687b      	ldr	r3, [r7, #4]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e009      	b.n	800376c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	60ba      	str	r2, [r7, #8]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7fd fdff 	bl	8001364 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	3301      	adds	r3, #1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	dbf1      	blt.n	8003758 <_write+0x12>
	}
	return len;
 8003774:	687b      	ldr	r3, [r7, #4]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <_close>:

int _close(int file)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
	return -1;
 8003786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037a6:	605a      	str	r2, [r3, #4]
	return 0;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <_isatty>:

int _isatty(int file)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
	return 1;
 80037be:	2301      	movs	r3, #1
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
	return 0;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037f0:	4a14      	ldr	r2, [pc, #80]	; (8003844 <_sbrk+0x5c>)
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <_sbrk+0x60>)
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037fc:	4b13      	ldr	r3, [pc, #76]	; (800384c <_sbrk+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d102      	bne.n	800380a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <_sbrk+0x64>)
 8003806:	4a12      	ldr	r2, [pc, #72]	; (8003850 <_sbrk+0x68>)
 8003808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800380a:	4b10      	ldr	r3, [pc, #64]	; (800384c <_sbrk+0x64>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	429a      	cmp	r2, r3
 8003816:	d207      	bcs.n	8003828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003818:	f006 f842 	bl	80098a0 <__errno>
 800381c:	4603      	mov	r3, r0
 800381e:	220c      	movs	r2, #12
 8003820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	e009      	b.n	800383c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003828:	4b08      	ldr	r3, [pc, #32]	; (800384c <_sbrk+0x64>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <_sbrk+0x64>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	4a05      	ldr	r2, [pc, #20]	; (800384c <_sbrk+0x64>)
 8003838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800383a:	68fb      	ldr	r3, [r7, #12]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20020000 	.word	0x20020000
 8003848:	00000400 	.word	0x00000400
 800384c:	200004c8 	.word	0x200004c8
 8003850:	20000680 	.word	0x20000680

08003854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <SystemInit+0x20>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385e:	4a05      	ldr	r2, [pc, #20]	; (8003874 <SystemInit+0x20>)
 8003860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003868:	bf00      	nop
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800387e:	f107 0308 	add.w	r3, r7, #8
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	609a      	str	r2, [r3, #8]
 800388a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800388c:	463b      	mov	r3, r7
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003894:	4b1d      	ldr	r3, [pc, #116]	; (800390c <MX_TIM2_Init+0x94>)
 8003896:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800389a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800389c:	4b1b      	ldr	r3, [pc, #108]	; (800390c <MX_TIM2_Init+0x94>)
 800389e:	224f      	movs	r2, #79	; 0x4f
 80038a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a2:	4b1a      	ldr	r3, [pc, #104]	; (800390c <MX_TIM2_Init+0x94>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 80038a8:	4b18      	ldr	r3, [pc, #96]	; (800390c <MX_TIM2_Init+0x94>)
 80038aa:	4a19      	ldr	r2, [pc, #100]	; (8003910 <MX_TIM2_Init+0x98>)
 80038ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ae:	4b17      	ldr	r3, [pc, #92]	; (800390c <MX_TIM2_Init+0x94>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038b4:	4b15      	ldr	r3, [pc, #84]	; (800390c <MX_TIM2_Init+0x94>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038ba:	4814      	ldr	r0, [pc, #80]	; (800390c <MX_TIM2_Init+0x94>)
 80038bc:	f004 ff44 	bl	8008748 <HAL_TIM_Base_Init>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80038c6:	f7ff fe1d 	bl	8003504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038d0:	f107 0308 	add.w	r3, r7, #8
 80038d4:	4619      	mov	r1, r3
 80038d6:	480d      	ldr	r0, [pc, #52]	; (800390c <MX_TIM2_Init+0x94>)
 80038d8:	f005 f966 	bl	8008ba8 <HAL_TIM_ConfigClockSource>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80038e2:	f7ff fe0f 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038e6:	2300      	movs	r3, #0
 80038e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038ee:	463b      	mov	r3, r7
 80038f0:	4619      	mov	r1, r3
 80038f2:	4806      	ldr	r0, [pc, #24]	; (800390c <MX_TIM2_Init+0x94>)
 80038f4:	f005 fb82 	bl	8008ffc <HAL_TIMEx_MasterConfigSynchronization>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80038fe:	f7ff fe01 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	200004cc 	.word	0x200004cc
 8003910:	0001869f 	.word	0x0001869f

08003914 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800391a:	f107 0308 	add.w	r3, r7, #8
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	609a      	str	r2, [r3, #8]
 8003926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003928:	463b      	mov	r3, r7
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003930:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <MX_TIM3_Init+0x94>)
 8003932:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <MX_TIM3_Init+0x98>)
 8003934:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8003936:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <MX_TIM3_Init+0x94>)
 8003938:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800393c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800393e:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <MX_TIM3_Init+0x94>)
 8003940:	2200      	movs	r2, #0
 8003942:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8003944:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <MX_TIM3_Init+0x94>)
 8003946:	f242 720f 	movw	r2, #9999	; 0x270f
 800394a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800394c:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <MX_TIM3_Init+0x94>)
 800394e:	2200      	movs	r2, #0
 8003950:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <MX_TIM3_Init+0x94>)
 8003954:	2200      	movs	r2, #0
 8003956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003958:	4813      	ldr	r0, [pc, #76]	; (80039a8 <MX_TIM3_Init+0x94>)
 800395a:	f004 fef5 	bl	8008748 <HAL_TIM_Base_Init>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003964:	f7ff fdce 	bl	8003504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800396c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800396e:	f107 0308 	add.w	r3, r7, #8
 8003972:	4619      	mov	r1, r3
 8003974:	480c      	ldr	r0, [pc, #48]	; (80039a8 <MX_TIM3_Init+0x94>)
 8003976:	f005 f917 	bl	8008ba8 <HAL_TIM_ConfigClockSource>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003980:	f7ff fdc0 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003984:	2300      	movs	r3, #0
 8003986:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003988:	2300      	movs	r3, #0
 800398a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800398c:	463b      	mov	r3, r7
 800398e:	4619      	mov	r1, r3
 8003990:	4805      	ldr	r0, [pc, #20]	; (80039a8 <MX_TIM3_Init+0x94>)
 8003992:	f005 fb33 	bl	8008ffc <HAL_TIMEx_MasterConfigSynchronization>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800399c:	f7ff fdb2 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80039a0:	bf00      	nop
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000514 	.word	0x20000514
 80039ac:	40000400 	.word	0x40000400

080039b0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039b6:	f107 0308 	add.w	r3, r7, #8
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c4:	463b      	mov	r3, r7
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80039cc:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <MX_TIM5_Init+0x94>)
 80039ce:	4a1e      	ldr	r2, [pc, #120]	; (8003a48 <MX_TIM5_Init+0x98>)
 80039d0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 80039d2:	4b1c      	ldr	r3, [pc, #112]	; (8003a44 <MX_TIM5_Init+0x94>)
 80039d4:	224f      	movs	r2, #79	; 0x4f
 80039d6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d8:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <MX_TIM5_Init+0x94>)
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80039de:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <MX_TIM5_Init+0x94>)
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295
 80039e4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <MX_TIM5_Init+0x94>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039ec:	4b15      	ldr	r3, [pc, #84]	; (8003a44 <MX_TIM5_Init+0x94>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80039f2:	4814      	ldr	r0, [pc, #80]	; (8003a44 <MX_TIM5_Init+0x94>)
 80039f4:	f004 fea8 	bl	8008748 <HAL_TIM_Base_Init>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80039fe:	f7ff fd81 	bl	8003504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003a08:	f107 0308 	add.w	r3, r7, #8
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	480d      	ldr	r0, [pc, #52]	; (8003a44 <MX_TIM5_Init+0x94>)
 8003a10:	f005 f8ca 	bl	8008ba8 <HAL_TIM_ConfigClockSource>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003a1a:	f7ff fd73 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a26:	463b      	mov	r3, r7
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4806      	ldr	r0, [pc, #24]	; (8003a44 <MX_TIM5_Init+0x94>)
 8003a2c:	f005 fae6 	bl	8008ffc <HAL_TIMEx_MasterConfigSynchronization>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003a36:	f7ff fd65 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003a3a:	bf00      	nop
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	2000055c 	.word	0x2000055c
 8003a48:	40000c00 	.word	0x40000c00

08003a4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5c:	d10e      	bne.n	8003a7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <HAL_TIM_Base_MspInit+0x98>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <HAL_TIM_Base_MspInit+0x98>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <HAL_TIM_Base_MspInit+0x98>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003a7a:	e02e      	b.n	8003ada <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a19      	ldr	r2, [pc, #100]	; (8003ae8 <HAL_TIM_Base_MspInit+0x9c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d116      	bne.n	8003ab4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <HAL_TIM_Base_MspInit+0x98>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <HAL_TIM_Base_MspInit+0x98>)
 8003a90:	f043 0302 	orr.w	r3, r3, #2
 8003a94:	6413      	str	r3, [r2, #64]	; 0x40
 8003a96:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <HAL_TIM_Base_MspInit+0x98>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	201d      	movs	r0, #29
 8003aa8:	f003 fa1d 	bl	8006ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003aac:	201d      	movs	r0, #29
 8003aae:	f003 fa36 	bl	8006f1e <HAL_NVIC_EnableIRQ>
}
 8003ab2:	e012      	b.n	8003ada <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <HAL_TIM_Base_MspInit+0xa0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d10d      	bne.n	8003ada <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <HAL_TIM_Base_MspInit+0x98>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	4a07      	ldr	r2, [pc, #28]	; (8003ae4 <HAL_TIM_Base_MspInit+0x98>)
 8003ac8:	f043 0308 	orr.w	r3, r3, #8
 8003acc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ace:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_TIM_Base_MspInit+0x98>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
}
 8003ada:	bf00      	nop
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40000c00 	.word	0x40000c00

08003af0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <MX_USART1_UART_Init+0x48>)
 8003af6:	4a11      	ldr	r2, [pc, #68]	; (8003b3c <MX_USART1_UART_Init+0x4c>)
 8003af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8003afa:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <MX_USART1_UART_Init+0x48>)
 8003afc:	4a10      	ldr	r2, [pc, #64]	; (8003b40 <MX_USART1_UART_Init+0x50>)
 8003afe:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <MX_USART1_UART_Init+0x48>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b06:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <MX_USART1_UART_Init+0x48>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <MX_USART1_UART_Init+0x48>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b12:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <MX_USART1_UART_Init+0x48>)
 8003b14:	220c      	movs	r2, #12
 8003b16:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b18:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <MX_USART1_UART_Init+0x48>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <MX_USART1_UART_Init+0x48>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b24:	4804      	ldr	r0, [pc, #16]	; (8003b38 <MX_USART1_UART_Init+0x48>)
 8003b26:	f005 faf9 	bl	800911c <HAL_UART_Init>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8003b30:	f7ff fce8 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b34:	bf00      	nop
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	200005a4 	.word	0x200005a4
 8003b3c:	40011000 	.word	0x40011000
 8003b40:	001e8480 	.word	0x001e8480

08003b44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	; 0x28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a19      	ldr	r2, [pc, #100]	; (8003bc8 <HAL_UART_MspInit+0x84>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d12b      	bne.n	8003bbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <HAL_UART_MspInit+0x88>)
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <HAL_UART_MspInit+0x88>)
 8003b70:	f043 0310 	orr.w	r3, r3, #16
 8003b74:	6453      	str	r3, [r2, #68]	; 0x44
 8003b76:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <HAL_UART_MspInit+0x88>)
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <HAL_UART_MspInit+0x88>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	4a10      	ldr	r2, [pc, #64]	; (8003bcc <HAL_UART_MspInit+0x88>)
 8003b8c:	f043 0302 	orr.w	r3, r3, #2
 8003b90:	6313      	str	r3, [r2, #48]	; 0x30
 8003b92:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <HAL_UART_MspInit+0x88>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b9e:	23c0      	movs	r3, #192	; 0xc0
 8003ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003baa:	2303      	movs	r3, #3
 8003bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bae:	2307      	movs	r3, #7
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bb2:	f107 0314 	add.w	r3, r7, #20
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4805      	ldr	r0, [pc, #20]	; (8003bd0 <HAL_UART_MspInit+0x8c>)
 8003bba:	f003 f9cf 	bl	8006f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	3728      	adds	r7, #40	; 0x28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40011000 	.word	0x40011000
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40020400 	.word	0x40020400

08003bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bd8:	480d      	ldr	r0, [pc, #52]	; (8003c10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bda:	490e      	ldr	r1, [pc, #56]	; (8003c14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bdc:	4a0e      	ldr	r2, [pc, #56]	; (8003c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003be0:	e002      	b.n	8003be8 <LoopCopyDataInit>

08003be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003be6:	3304      	adds	r3, #4

08003be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bec:	d3f9      	bcc.n	8003be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bee:	4a0b      	ldr	r2, [pc, #44]	; (8003c1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bf0:	4c0b      	ldr	r4, [pc, #44]	; (8003c20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bf4:	e001      	b.n	8003bfa <LoopFillZerobss>

08003bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bf8:	3204      	adds	r2, #4

08003bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bfc:	d3fb      	bcc.n	8003bf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003bfe:	f7ff fe29 	bl	8003854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c02:	f005 fe53 	bl	80098ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c06:	f7fe f9f7 	bl	8001ff8 <main>
  bx  lr    
 8003c0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c14:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8003c18:	0800f990 	.word	0x0800f990
  ldr r2, =_sbss
 8003c1c:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8003c20:	2000067c 	.word	0x2000067c

08003c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c24:	e7fe      	b.n	8003c24 <ADC_IRQHandler>

08003c26 <setBit>:
static const uint8_t BIAS_900_16[] = {137, 122, 105, 88, 69, 47, 25, 0, 21, 48, 79, 105, 127, 147, 160, 169, 178, 197};
static const uint8_t BIAS_900_64[] = {147, 133, 117, 99, 75, 50, 29, 0, 24, 45, 63, 76, 87, 98, 116, 122, 132, 142};

// Utility functions
static void setBit(uint8_t data[], unsigned int n, unsigned int bit, bool val)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b089      	sub	sp, #36	; 0x24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	70fb      	strb	r3, [r7, #3]
    unsigned int idx;
    unsigned int shift;
    idx = bit / 8;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	08db      	lsrs	r3, r3, #3
 8003c38:	61fb      	str	r3, [r7, #28]
    if (idx >= n)
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d228      	bcs.n	8003c94 <setBit+0x6e>
        return; // TODO proper error handling: out of bounds
    uint8_t *targetByte = &data[idx];
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	4413      	add	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
    shift = bit % 8;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	617b      	str	r3, [r7, #20]
    if (val)
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00d      	beq.n	8003c74 <setBit+0x4e>
        *targetByte |= (1 << shift);
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b25a      	sxtb	r2, r3
 8003c5e:	2101      	movs	r1, #1
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	b25b      	sxtb	r3, r3
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	e010      	b.n	8003c96 <setBit+0x70>
    else
        *targetByte &= ~(1 << shift);
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	b25a      	sxtb	r2, r3
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	b25b      	sxtb	r3, r3
 8003c88:	4013      	ands	r3, r2
 8003c8a:	b25b      	sxtb	r3, r3
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e000      	b.n	8003c96 <setBit+0x70>
        return; // TODO proper error handling: out of bounds
 8003c94:	bf00      	nop
}
 8003c96:	3724      	adds	r7, #36	; 0x24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <getBit>:

static bool getBit(uint8_t data[], unsigned int n, unsigned int bit)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b089      	sub	sp, #36	; 0x24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
    unsigned int idx;
    unsigned int shift;

    idx = bit / 8;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	08db      	lsrs	r3, r3, #3
 8003cb0:	61fb      	str	r3, [r7, #28]
    if (idx >= n)
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d301      	bcc.n	8003cbe <getBit+0x1e>
        return false; // TODO proper error handling: out of bounds
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e013      	b.n	8003ce6 <getBit+0x46>
    uint8_t targetByte = data[idx];
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	76fb      	strb	r3, [r7, #27]
    shift = bit % 8;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	617b      	str	r3, [r7, #20]
    return (targetByte >> shift) & 0x01;
 8003cd0:	7efa      	ldrb	r2, [r7, #27]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	fa42 f303 	asr.w	r3, r2, r3
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3724      	adds	r7, #36	; 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <writeValueToBytes>:

static void writeValueToBytes(uint8_t data[], long val, unsigned int n)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b087      	sub	sp, #28
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
    unsigned int i;
    for (i = 0; i < n; i++)
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	e00c      	b.n	8003d1e <writeValueToBytes+0x2c>
    {
        data[i] = ((val >> (i * 8)) & 0xFF);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	fa42 f103 	asr.w	r1, r2, r3
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4413      	add	r3, r2
 8003d14:	b2ca      	uxtb	r2, r1
 8003d16:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < n; i++)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d3ee      	bcc.n	8003d04 <writeValueToBytes+0x12>
    }
}
 8003d26:	bf00      	nop
 8003d28:	bf00      	nop
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <readBytesOTP>:

static void readBytesOTP(dwDeviceTypes_t *dev, uint16_t address, uint8_t data[])
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	817b      	strh	r3, [r7, #10]
    uint8_t addressBytes[LEN_OTP_ADDR];
    addressBytes[0] = (address & 0xFF);
 8003d42:	897b      	ldrh	r3, [r7, #10]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	753b      	strb	r3, [r7, #20]
    addressBytes[1] = ((address >> 8) & 0xFF);
 8003d48:	897b      	ldrh	r3, [r7, #10]
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	757b      	strb	r3, [r7, #21]
    // set address
    dwSpiWrite(dev, OTP_IF, OTP_ADDR_SUB, addressBytes, LEN_OTP_ADDR);
 8003d52:	f107 0314 	add.w	r3, r7, #20
 8003d56:	2202      	movs	r2, #2
 8003d58:	9200      	str	r2, [sp, #0]
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	212d      	movs	r1, #45	; 0x2d
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f002 fc6a 	bl	8006638 <dwSpiWrite>
    // switch into read mode
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x03); // OTPRDEN | OTPREAD
 8003d64:	2303      	movs	r3, #3
 8003d66:	2206      	movs	r2, #6
 8003d68:	212d      	movs	r1, #45	; 0x2d
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f002 fca7 	bl	80066be <dwSpiWrite8>
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x01); // OTPRDEN
 8003d70:	2301      	movs	r3, #1
 8003d72:	2206      	movs	r2, #6
 8003d74:	212d      	movs	r1, #45	; 0x2d
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f002 fca1 	bl	80066be <dwSpiWrite8>
    // read value/block - 4 bytes
    dwSpiRead(dev, OTP_IF, OTP_RDAT_SUB, data, LEN_OTP_RDAT);
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	220a      	movs	r2, #10
 8003d84:	212d      	movs	r1, #45	; 0x2d
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f002 fbee 	bl	8006568 <dwSpiRead>
    // end read mode
    dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x00);
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2206      	movs	r2, #6
 8003d90:	212d      	movs	r1, #45	; 0x2d
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f002 fc93 	bl	80066be <dwSpiWrite8>
}
 8003d98:	bf00      	nop
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <dummyHandler>:

void dummyHandler(dwDeviceTypes_t *dev)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
    ;
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <dwInit>:

void dwInit(dwDeviceTypes_t *dev)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
    dev->func = &dwFunc;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <dwInit+0x40>)
 8003dc0:	601a      	str	r2, [r3, #0]
    dev->handleSent = dummyHandler;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a0c      	ldr	r2, [pc, #48]	; (8003df8 <dwInit+0x44>)
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38
	dev->handleError = dummyHandler;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a0b      	ldr	r2, [pc, #44]	; (8003df8 <dwInit+0x44>)
 8003dcc:	63da      	str	r2, [r3, #60]	; 0x3c
	dev->handleReceived = dummyHandler;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a09      	ldr	r2, [pc, #36]	; (8003df8 <dwInit+0x44>)
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40
	dev->handleReceiveTimeout = dummyHandler;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <dwInit+0x44>)
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44
	dev->handleReceiveFailed = dummyHandler;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a06      	ldr	r2, [pc, #24]	; (8003df8 <dwInit+0x44>)
 8003dde:	649a      	str	r2, [r3, #72]	; 0x48
	dev->handleReceiveTimestampAvailable = dummyHandler;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a05      	ldr	r2, [pc, #20]	; (8003df8 <dwInit+0x44>)
 8003de4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	2000006c 	.word	0x2000006c
 8003df8:	08003da1 	.word	0x08003da1

08003dfc <dwConfigure>:

int dwConfigure(dwDeviceTypes_t *dev)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	6078      	str	r0, [r7, #4]
    dwEnableClock(dev, dwClockAuto);
 8003e04:	2100      	movs	r1, #0
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f91c 	bl	8004044 <dwEnableClock>
    dev->func->delayms(dev, 5);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2105      	movs	r1, #5
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4798      	blx	r3
	dev->func->reset(dev);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	4798      	blx	r3
    dev->func->delayms(dev, 5);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	2105      	movs	r1, #5
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
    uint32_t deviceID = dwGetDeviceId(dev);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f8a9 	bl	8003f86 <dwGetDeviceId>
 8003e34:	60f8      	str	r0, [r7, #12]
    if (deviceID != 0xdeca0130)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <dwConfigure+0xdc>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d001      	beq.n	8003e42 <dwConfigure+0x46>
    {
        return DW_ERROR_WRONG_ID;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e045      	b.n	8003ece <dwConfigure+0xd2>
    }

    memset(dev->networkAndAddress, 0x38, LEN_PANADR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3309      	adds	r3, #9
 8003e46:	2204      	movs	r2, #4
 8003e48:	2138      	movs	r1, #56	; 0x38
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f005 fd78 	bl	8009940 <memset>
    dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3309      	adds	r3, #9
 8003e54:	2204      	movs	r2, #4
 8003e56:	9200      	str	r2, [sp, #0]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2103      	movs	r1, #3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f002 fbeb 	bl	8006638 <dwSpiWrite>

    memset(dev->syscfg, 0, LEN_SYS_CFG);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	330d      	adds	r3, #13
 8003e66:	2204      	movs	r2, #4
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f005 fd68 	bl	8009940 <memset>
    dwSetDoubleBuffering(dev, false);
 8003e70:	2100      	movs	r1, #0
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fa87 	bl	8004386 <dwSetDoubleBuffering>
    dwSetInterruptPolarity(dev, true);
 8003e78:	2101      	movs	r1, #1
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 faa0 	bl	80043c0 <dwSetInterruptPolarity>
    dwWriteSystemConfigurationRegister(dev);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f981 	bl	8004188 <dwWriteSystemConfigurationRegister>

    dwClearInterrupts(dev);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fb62 	bl	8004550 <dwClearInterrupts>
    dwWriteSystemEventMaskRegister(dev);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f9d0 	bl	8004232 <dwWriteSystemEventMaskRegister>

    dwEnableClock(dev, dwClockXti);
 8003e92:	2101      	movs	r1, #1
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f8d5 	bl	8004044 <dwEnableClock>
    dev->func->delayms(dev, 5);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2105      	movs	r1, #5
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
    dwManageLDE(dev);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f818 	bl	8003edc <dwManageLDE>
    dev->func->delayms(dev, 5);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2105      	movs	r1, #5
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	4798      	blx	r3
    dwEnableClock(dev, dwClockPll);
 8003eb8:	2102      	movs	r1, #2
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f8c2 	bl	8004044 <dwEnableClock>
    dev->func->delayms(dev, 5);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2105      	movs	r1, #5
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4798      	blx	r3
//    dev->func->spiSetSpeed(dev, dwSpiSpeedHigh);
//    dev->func->delayms(dev, 5);
    return DW_ERROR_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	deca0130 	.word	0xdeca0130

08003edc <dwManageLDE>:

void dwManageLDE(dwDeviceTypes_t *dev)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	6078      	str	r0, [r7, #4]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    uint8_t otpctrl[LEN_OTP_CTRL];
    memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8003ee4:	f107 030c 	add.w	r3, r7, #12
 8003ee8:	2204      	movs	r2, #4
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f005 fd27 	bl	8009940 <memset>
    memset(otpctrl, 0, LEN_OTP_CTRL);
 8003ef2:	f107 0308 	add.w	r3, r7, #8
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f005 fd20 	bl	8009940 <memset>
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8003f00:	f107 030c 	add.w	r3, r7, #12
 8003f04:	2204      	movs	r2, #4
 8003f06:	9200      	str	r2, [sp, #0]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2136      	movs	r1, #54	; 0x36
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f002 fb2b 	bl	8006568 <dwSpiRead>
    dwSpiRead(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 8003f12:	f107 0308 	add.w	r3, r7, #8
 8003f16:	2202      	movs	r2, #2
 8003f18:	9200      	str	r2, [sp, #0]
 8003f1a:	2206      	movs	r2, #6
 8003f1c:	212d      	movs	r1, #45	; 0x2d
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f002 fb22 	bl	8006568 <dwSpiRead>
    pmscctrl0[0] = 0x01;
 8003f24:	2301      	movs	r3, #1
 8003f26:	733b      	strb	r3, [r7, #12]
    pmscctrl0[1] = 0x03;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	737b      	strb	r3, [r7, #13]
    otpctrl[0] = 0x00;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	723b      	strb	r3, [r7, #8]
    otpctrl[1] = 0x80;
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	727b      	strb	r3, [r7, #9]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8003f34:	f107 030c 	add.w	r3, r7, #12
 8003f38:	2204      	movs	r2, #4
 8003f3a:	9200      	str	r2, [sp, #0]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2136      	movs	r1, #54	; 0x36
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f002 fb79 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 8003f46:	f107 0308 	add.w	r3, r7, #8
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	9200      	str	r2, [sp, #0]
 8003f4e:	2206      	movs	r2, #6
 8003f50:	212d      	movs	r1, #45	; 0x2d
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f002 fb70 	bl	8006638 <dwSpiWrite>
    dev->func->delayms(dev, 5);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	2105      	movs	r1, #5
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
    pmscctrl0[0] = 0x00;
 8003f64:	2300      	movs	r3, #0
 8003f66:	733b      	strb	r3, [r7, #12]
    pmscctrl0[1] = 0x02;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	737b      	strb	r3, [r7, #13]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8003f6c:	f107 030c 	add.w	r3, r7, #12
 8003f70:	2204      	movs	r2, #4
 8003f72:	9200      	str	r2, [sp, #0]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2136      	movs	r1, #54	; 0x36
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f002 fb5d 	bl	8006638 <dwSpiWrite>
}
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <dwGetDeviceId>:

uint32_t dwGetDeviceId(dwDeviceTypes_t *dev)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
    return dwSpiRead32(dev, DEV_ID, 0);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2100      	movs	r1, #0
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f002 fb3b 	bl	800660e <dwSpiRead32>
 8003f98:	4603      	mov	r3, r0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <dwEnableAllLeds>:

void dwEnableAllLeds(dwDeviceTypes_t *dev)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
    uint32_t reg;
    // Set all 4 GPIO in LED mode
    reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 8003faa:	2200      	movs	r2, #0
 8003fac:	2126      	movs	r1, #38	; 0x26
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f002 fb2d 	bl	800660e <dwSpiRead32>
 8003fb4:	60f8      	str	r0, [r7, #12]
    reg &= ~0x00003FC0ul;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fbc:	60fb      	str	r3, [r7, #12]
    reg |= 0x00001540ul;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f443 53aa 	orr.w	r3, r3, #5440	; 0x1540
 8003fc4:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, GPIO_CTRL, GPIO_MODE_SUB, reg);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2126      	movs	r1, #38	; 0x26
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f002 fb8d 	bl	80066ec <dwSpiWrite32>
    reg = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
    reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2126      	movs	r1, #38	; 0x26
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f002 fb17 	bl	800660e <dwSpiRead32>
 8003fe0:	60f8      	str	r0, [r7, #12]
    // Enable debounce clock (used to clock the LED blinking)
    reg = dwSpiRead32(dev, PMSC, PMSC_CTRL0_SUB);
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2136      	movs	r1, #54	; 0x36
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f002 fb11 	bl	800660e <dwSpiRead32>
 8003fec:	60f8      	str	r0, [r7, #12]
    reg |= 0x00840000ul;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f443 0304 	orr.w	r3, r3, #8650752	; 0x840000
 8003ff4:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_CTRL0_SUB, reg);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2136      	movs	r1, #54	; 0x36
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f002 fb75 	bl	80066ec <dwSpiWrite32>

    // Enable LED blinking and set the rate
    reg = 0x00000110ul;
 8004002:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004006:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2228      	movs	r2, #40	; 0x28
 800400c:	2136      	movs	r1, #54	; 0x36
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f002 fb6c 	bl	80066ec <dwSpiWrite32>

    // Trigger a manual blink of the LEDs for test
    reg |= 0x000f0000ul;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 800401a:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2228      	movs	r2, #40	; 0x28
 8004020:	2136      	movs	r1, #54	; 0x36
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f002 fb62 	bl	80066ec <dwSpiWrite32>
    reg &= ~0x000f0000ul;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800402e:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2228      	movs	r2, #40	; 0x28
 8004034:	2136      	movs	r1, #54	; 0x36
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f002 fb58 	bl	80066ec <dwSpiWrite32>
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <dwEnableClock>:

void dwEnableClock(dwDeviceTypes_t *dev, dwClock_t clock)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af02      	add	r7, sp, #8
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	70fb      	strb	r3, [r7, #3]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8004050:	f107 030c 	add.w	r3, r7, #12
 8004054:	2204      	movs	r2, #4
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f005 fc71 	bl	8009940 <memset>
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800405e:	f107 030c 	add.w	r3, r7, #12
 8004062:	2204      	movs	r2, #4
 8004064:	9200      	str	r2, [sp, #0]
 8004066:	2200      	movs	r2, #0
 8004068:	2136      	movs	r1, #54	; 0x36
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f002 fa7c 	bl	8006568 <dwSpiRead>
    if (clock == dwClockAuto)
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10d      	bne.n	8004092 <dwEnableClock+0x4e>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedLow);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2100      	movs	r1, #0
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	4798      	blx	r3
        pmscctrl0[0] = dwClockAuto;
 8004082:	2300      	movs	r3, #0
 8004084:	733b      	strb	r3, [r7, #12]
        pmscctrl0[1] &= 0xFE;
 8004086:	7b7b      	ldrb	r3, [r7, #13]
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	b2db      	uxtb	r3, r3
 800408e:	737b      	strb	r3, [r7, #13]
 8004090:	e026      	b.n	80040e0 <dwEnableClock+0x9c>
    }
    else if (clock == dwClockXti)
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d110      	bne.n	80040ba <dwEnableClock+0x76>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedLow);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2100      	movs	r1, #0
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	4798      	blx	r3
        pmscctrl0[0] &= 0xFC;
 80040a4:	7b3b      	ldrb	r3, [r7, #12]
 80040a6:	f023 0303 	bic.w	r3, r3, #3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	733b      	strb	r3, [r7, #12]
        pmscctrl0[0] |= dwClockXti;
 80040ae:	7b3b      	ldrb	r3, [r7, #12]
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	733b      	strb	r3, [r7, #12]
 80040b8:	e012      	b.n	80040e0 <dwEnableClock+0x9c>
    }
    else if (clock == dwClockPll)
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d10f      	bne.n	80040e0 <dwEnableClock+0x9c>
    {
        dev->func->spiSetSpeed(dev, dwSpiSpeedHigh);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2101      	movs	r1, #1
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	4798      	blx	r3
        pmscctrl0[0] &= 0xFC;
 80040cc:	7b3b      	ldrb	r3, [r7, #12]
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	733b      	strb	r3, [r7, #12]
        pmscctrl0[0] |= dwClockPll;
 80040d6:	7b3b      	ldrb	r3, [r7, #12]
 80040d8:	f043 0302 	orr.w	r3, r3, #2
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	733b      	strb	r3, [r7, #12]
    }
    else
    {
        // TODO deliver proper warning
    }
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, 1);
 80040e0:	f107 030c 	add.w	r3, r7, #12
 80040e4:	2201      	movs	r2, #1
 80040e6:	9200      	str	r2, [sp, #0]
 80040e8:	2200      	movs	r2, #0
 80040ea:	2136      	movs	r1, #54	; 0x36
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f002 faa3 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80040f2:	f107 030c 	add.w	r3, r7, #12
 80040f6:	2204      	movs	r2, #4
 80040f8:	9200      	str	r2, [sp, #0]
 80040fa:	2200      	movs	r2, #0
 80040fc:	2136      	movs	r1, #54	; 0x36
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f002 fa9a 	bl	8006638 <dwSpiWrite>
}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <dwRxSoftReset>:
/**
    Reset the receiver. Needed after errors or timeouts.
    From the DW1000 User Manual, v2.13 page 35: "Due to an issue in the re-initialisation of the receiver, it is necessary to apply a receiver reset after certain receiver error or timeout events (i.e. RXPHE (PHY Header Error), RXRFSL (Reed Solomon error), RXRFTO (Frame wait timeout), etc.). This ensures that the next good frame will have correctly calculated timestamp. It is not necessary to do this in the cases of RXPTO (Preamble detection Timeout) and RXSFDTO (SFD timeout). For details on how to apply a receiver-only reset see SOFTRESET field of Sub- Register 0x36:00 – PMSC_CTRL0."
 */
void dwRxSoftReset(dwDeviceTypes_t *dev)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af02      	add	r7, sp, #8
 8004112:	6078      	str	r0, [r7, #4]
    uint8_t pmscctrl0[LEN_PMSC_CTRL0];
    dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8004114:	f107 030c 	add.w	r3, r7, #12
 8004118:	2204      	movs	r2, #4
 800411a:	9200      	str	r2, [sp, #0]
 800411c:	2200      	movs	r2, #0
 800411e:	2136      	movs	r1, #54	; 0x36
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f002 fa21 	bl	8006568 <dwSpiRead>
    pmscctrl0[3] = pmscctrl0[3] & 0xEF;
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	f023 0310 	bic.w	r3, r3, #16
 800412c:	b2db      	uxtb	r3, r3
 800412e:	73fb      	strb	r3, [r7, #15]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8004130:	f107 030c 	add.w	r3, r7, #12
 8004134:	2204      	movs	r2, #4
 8004136:	9200      	str	r2, [sp, #0]
 8004138:	2200      	movs	r2, #0
 800413a:	2136      	movs	r1, #54	; 0x36
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f002 fa7b 	bl	8006638 <dwSpiWrite>
    pmscctrl0[3] = pmscctrl0[3] | 0x10;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	f043 0310 	orr.w	r3, r3, #16
 8004148:	b2db      	uxtb	r3, r3
 800414a:	73fb      	strb	r3, [r7, #15]
    dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800414c:	f107 030c 	add.w	r3, r7, #12
 8004150:	2204      	movs	r2, #4
 8004152:	9200      	str	r2, [sp, #0]
 8004154:	2200      	movs	r2, #0
 8004156:	2136      	movs	r1, #54	; 0x36
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f002 fa6d 	bl	8006638 <dwSpiWrite>
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <dwReadSystemConfigurationRegister>:

/* ###########################################################################
 * #### DW1000 register read/write ###########################################
 * ######################################################################### */
void dwReadSystemConfigurationRegister(dwDeviceTypes_t *dev)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af02      	add	r7, sp, #8
 800416c:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	330d      	adds	r3, #13
 8004172:	2204      	movs	r2, #4
 8004174:	9200      	str	r2, [sp, #0]
 8004176:	2200      	movs	r2, #0
 8004178:	2104      	movs	r1, #4
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f002 f9f4 	bl	8006568 <dwSpiRead>
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <dwWriteSystemConfigurationRegister>:

void dwWriteSystemConfigurationRegister(dwDeviceTypes_t *dev)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af02      	add	r7, sp, #8
 800418e:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	330d      	adds	r3, #13
 8004194:	2204      	movs	r2, #4
 8004196:	9200      	str	r2, [sp, #0]
 8004198:	2200      	movs	r2, #0
 800419a:	2104      	movs	r1, #4
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f002 fa4b 	bl	8006638 <dwSpiWrite>
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <dwReadSystemEventStatusRegister>:

void dwReadSystemEventStatusRegister(dwDeviceTypes_t *dev)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af02      	add	r7, sp, #8
 80041b0:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_STATUS, NO_SUB, dev->sysstatus, LEN_SYS_STATUS);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3319      	adds	r3, #25
 80041b6:	2205      	movs	r2, #5
 80041b8:	9200      	str	r2, [sp, #0]
 80041ba:	2200      	movs	r2, #0
 80041bc:	210f      	movs	r1, #15
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f002 f9d2 	bl	8006568 <dwSpiRead>
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <dwReadNetworkIdAndDeviceAddress>:

void dwReadNetworkIdAndDeviceAddress(dwDeviceTypes_t *dev)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3309      	adds	r3, #9
 80041d8:	2204      	movs	r2, #4
 80041da:	9200      	str	r2, [sp, #0]
 80041dc:	2200      	movs	r2, #0
 80041de:	2103      	movs	r1, #3
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f002 f9c1 	bl	8006568 <dwSpiRead>
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <dwWriteNetworkIdAndDeviceAddress>:

void dwWriteNetworkIdAndDeviceAddress(dwDeviceTypes_t *dev)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af02      	add	r7, sp, #8
 80041f4:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3309      	adds	r3, #9
 80041fa:	2204      	movs	r2, #4
 80041fc:	9200      	str	r2, [sp, #0]
 80041fe:	2200      	movs	r2, #0
 8004200:	2103      	movs	r1, #3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f002 fa18 	bl	8006638 <dwSpiWrite>
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <dwReadSystemEventMaskRegister>:

void dwReadSystemEventMaskRegister(dwDeviceTypes_t *dev)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af02      	add	r7, sp, #8
 8004216:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3311      	adds	r3, #17
 800421c:	2204      	movs	r2, #4
 800421e:	9200      	str	r2, [sp, #0]
 8004220:	2200      	movs	r2, #0
 8004222:	210e      	movs	r1, #14
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f002 f99f 	bl	8006568 <dwSpiRead>
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <dwWriteSystemEventMaskRegister>:

void dwWriteSystemEventMaskRegister(dwDeviceTypes_t *dev)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af02      	add	r7, sp, #8
 8004238:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3311      	adds	r3, #17
 800423e:	2204      	movs	r2, #4
 8004240:	9200      	str	r2, [sp, #0]
 8004242:	2200      	movs	r2, #0
 8004244:	210e      	movs	r1, #14
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f002 f9f6 	bl	8006638 <dwSpiWrite>
}
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <dwReadChannelControlRegister>:

void dwReadChannelControlRegister(dwDeviceTypes_t *dev)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af02      	add	r7, sp, #8
 800425a:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3315      	adds	r3, #21
 8004260:	2204      	movs	r2, #4
 8004262:	9200      	str	r2, [sp, #0]
 8004264:	2200      	movs	r2, #0
 8004266:	211f      	movs	r1, #31
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f002 f97d 	bl	8006568 <dwSpiRead>
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <dwWriteChannelControlRegister>:

void dwWriteChannelControlRegister(dwDeviceTypes_t *dev)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af02      	add	r7, sp, #8
 800427c:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3315      	adds	r3, #21
 8004282:	2204      	movs	r2, #4
 8004284:	9200      	str	r2, [sp, #0]
 8004286:	2200      	movs	r2, #0
 8004288:	211f      	movs	r1, #31
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f002 f9d4 	bl	8006638 <dwSpiWrite>
}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <dwReadTransmitFrameControlRegister>:

void dwReadTransmitFrameControlRegister(dwDeviceTypes_t *dev)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af02      	add	r7, sp, #8
 800429e:	6078      	str	r0, [r7, #4]
    dwSpiRead(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	331e      	adds	r3, #30
 80042a4:	2205      	movs	r2, #5
 80042a6:	9200      	str	r2, [sp, #0]
 80042a8:	2200      	movs	r2, #0
 80042aa:	2108      	movs	r1, #8
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f002 f95b 	bl	8006568 <dwSpiRead>
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <dwWriteTransmitFrameControlRegister>:

void dwWriteTransmitFrameControlRegister(dwDeviceTypes_t *dev)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af02      	add	r7, sp, #8
 80042c0:	6078      	str	r0, [r7, #4]
    dwSpiWrite(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	331e      	adds	r3, #30
 80042c6:	2205      	movs	r2, #5
 80042c8:	9200      	str	r2, [sp, #0]
 80042ca:	2200      	movs	r2, #0
 80042cc:	2108      	movs	r1, #8
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f002 f9b2 	bl	8006638 <dwSpiWrite>
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <dwSetReceiveWaitTimeout>:

/******************************************************************/

void dwSetReceiveWaitTimeout(dwDeviceTypes_t *dev, uint16_t timeout)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	807b      	strh	r3, [r7, #2]
    dwSpiWrite(dev, RX_FWTO, NO_SUB, &timeout, 2);
 80042e8:	1cbb      	adds	r3, r7, #2
 80042ea:	2202      	movs	r2, #2
 80042ec:	9200      	str	r2, [sp, #0]
 80042ee:	2200      	movs	r2, #0
 80042f0:	210c      	movs	r1, #12
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f002 f9a0 	bl	8006638 <dwSpiWrite>
    setBit(dev->syscfg, LEN_SYS_CFG, RXWTOE_BIT, timeout != 0);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f103 000d 	add.w	r0, r3, #13
 80042fe:	887b      	ldrh	r3, [r7, #2]
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf14      	ite	ne
 8004304:	2301      	movne	r3, #1
 8004306:	2300      	moveq	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	221c      	movs	r2, #28
 800430c:	2104      	movs	r1, #4
 800430e:	f7ff fc8a 	bl	8003c26 <setBit>
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <dwSetFrameFilter>:

void dwSetFrameFilter(dwDeviceTypes_t *dev, bool val)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFEN_BIT, val);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f103 000d 	add.w	r0, r3, #13
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	2200      	movs	r2, #0
 8004330:	2104      	movs	r1, #4
 8004332:	f7ff fc78 	bl	8003c26 <setBit>
}
 8004336:	bf00      	nop
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <dwSetFrameFilterAllowData>:
{
    setBit(dev->syscfg, LEN_SYS_CFG, FFAB_BIT, val);
}

void dwSetFrameFilterAllowData(dwDeviceTypes_t *dev, bool val)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFAD_BIT, val);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f103 000d 	add.w	r0, r3, #13
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	2203      	movs	r2, #3
 8004354:	2104      	movs	r1, #4
 8004356:	f7ff fc66 	bl	8003c26 <setBit>
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <dwSetFrameFilterAllowReserved>:
{
    setBit(dev->syscfg, LEN_SYS_CFG, FFAM_BIT, val);
}

void dwSetFrameFilterAllowReserved(dwDeviceTypes_t *dev, bool val)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	460b      	mov	r3, r1
 800436c:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, FFAR_BIT, val);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f103 000d 	add.w	r0, r3, #13
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	2206      	movs	r2, #6
 8004378:	2104      	movs	r1, #4
 800437a:	f7ff fc54 	bl	8003c26 <setBit>
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <dwSetDoubleBuffering>:

void dwSetDoubleBuffering(dwDeviceTypes_t *dev, bool val)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	460b      	mov	r3, r1
 8004390:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, DIS_DRXB_BIT, !val);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f103 000d 	add.w	r0, r3, #13
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	2b00      	cmp	r3, #0
 800439c:	bf14      	ite	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	2300      	moveq	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f083 0301 	eor.w	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	220c      	movs	r2, #12
 80043b2:	2104      	movs	r1, #4
 80043b4:	f7ff fc37 	bl	8003c26 <setBit>
}
 80043b8:	bf00      	nop
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <dwSetInterruptPolarity>:

void dwSetInterruptPolarity(dwDeviceTypes_t *dev, bool val)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, HIRQ_POL_BIT, val);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f103 000d 	add.w	r0, r3, #13
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	2209      	movs	r2, #9
 80043d6:	2104      	movs	r1, #4
 80043d8:	f7ff fc25 	bl	8003c26 <setBit>
}
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <dwSetReceiverAutoReenable>:

void dwSetReceiverAutoReenable(dwDeviceTypes_t *dev, bool val)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	70fb      	strb	r3, [r7, #3]
    setBit(dev->syscfg, LEN_SYS_CFG, RXAUTR_BIT, val);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f103 000d 	add.w	r0, r3, #13
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	221d      	movs	r2, #29
 80043fa:	2104      	movs	r1, #4
 80043fc:	f7ff fc13 	bl	8003c26 <setBit>
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <dwInterruptOnSent>:

void dwInterruptOnSent(dwDeviceTypes_t *dev, bool val)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, TXFRS_BIT, val);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f103 0011 	add.w	r0, r3, #17
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	2207      	movs	r2, #7
 800441e:	2104      	movs	r1, #4
 8004420:	f7ff fc01 	bl	8003c26 <setBit>
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <dwInterruptOnReceived>:

void dwInterruptOnReceived(dwDeviceTypes_t *dev, bool val)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, RXDFR_BIT, val);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f103 0011 	add.w	r0, r3, #17
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	220d      	movs	r2, #13
 8004442:	2104      	movs	r1, #4
 8004444:	f7ff fbef 	bl	8003c26 <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXFCG_BIT, val);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f103 0011 	add.w	r0, r3, #17
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	220e      	movs	r2, #14
 8004452:	2104      	movs	r1, #4
 8004454:	f7ff fbe7 	bl	8003c26 <setBit>
}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <dwInterruptOnReceiveFailed>:

void dwInterruptOnReceiveFailed(dwDeviceTypes_t *dev, bool val)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_STATUS, LDEERR_BIT, val);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f103 0011 	add.w	r0, r3, #17
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	2212      	movs	r2, #18
 8004476:	2105      	movs	r1, #5
 8004478:	f7ff fbd5 	bl	8003c26 <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXFCE_BIT, val);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f103 0011 	add.w	r0, r3, #17
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	220f      	movs	r2, #15
 8004486:	2105      	movs	r1, #5
 8004488:	f7ff fbcd 	bl	8003c26 <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXPHE_BIT, val);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f103 0011 	add.w	r0, r3, #17
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	220c      	movs	r2, #12
 8004496:	2105      	movs	r1, #5
 8004498:	f7ff fbc5 	bl	8003c26 <setBit>
    setBit(dev->sysmask, LEN_SYS_STATUS, RXRFSL_BIT, val);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f103 0011 	add.w	r0, r3, #17
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	2210      	movs	r2, #16
 80044a6:	2105      	movs	r1, #5
 80044a8:	f7ff fbbd 	bl	8003c26 <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXSFDTO_BIT, val);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f103 0011 	add.w	r0, r3, #17
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	221a      	movs	r2, #26
 80044b6:	2104      	movs	r1, #4
 80044b8:	f7ff fbb5 	bl	8003c26 <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, AFFREJ_BIT, val);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f103 0011 	add.w	r0, r3, #17
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	221d      	movs	r2, #29
 80044c6:	2104      	movs	r1, #4
 80044c8:	f7ff fbad 	bl	8003c26 <setBit>
}
 80044cc:	bf00      	nop
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <dwInterruptOnReceiveTimeout>:

void dwInterruptOnReceiveTimeout(dwDeviceTypes_t *dev, bool val)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, RXRFTO_BIT, val);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f103 0011 	add.w	r0, r3, #17
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	2211      	movs	r2, #17
 80044ea:	2104      	movs	r1, #4
 80044ec:	f7ff fb9b 	bl	8003c26 <setBit>
    setBit(dev->sysmask, LEN_SYS_MASK, RXPTO_BIT, val);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f103 0011 	add.w	r0, r3, #17
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	2215      	movs	r2, #21
 80044fa:	2104      	movs	r1, #4
 80044fc:	f7ff fb93 	bl	8003c26 <setBit>
}
 8004500:	bf00      	nop
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <dwInterruptOnReceiveTimestampAvailable>:

void dwInterruptOnReceiveTimestampAvailable(dwDeviceTypes_t *dev, bool val)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, LDEDONE_BIT, val);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f103 0011 	add.w	r0, r3, #17
 800451a:	78fb      	ldrb	r3, [r7, #3]
 800451c:	220a      	movs	r2, #10
 800451e:	2104      	movs	r1, #4
 8004520:	f7ff fb81 	bl	8003c26 <setBit>
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <dwInterruptOnAutomaticAcknowledgeTrigger>:

void dwInterruptOnAutomaticAcknowledgeTrigger(dwDeviceTypes_t *dev, bool val)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	70fb      	strb	r3, [r7, #3]
    setBit(dev->sysmask, LEN_SYS_MASK, AAT_BIT, val);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f103 0011 	add.w	r0, r3, #17
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	2203      	movs	r2, #3
 8004542:	2104      	movs	r1, #4
 8004544:	f7ff fb6f 	bl	8003c26 <setBit>
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <dwClearInterrupts>:

void dwClearInterrupts(dwDeviceTypes_t *dev)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
    memset(dev->sysmask, 0, LEN_SYS_MASK);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3311      	adds	r3, #17
 800455c:	2204      	movs	r2, #4
 800455e:	2100      	movs	r1, #0
 8004560:	4618      	mov	r0, r3
 8004562:	f005 f9ed 	bl	8009940 <memset>
}
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <dwIdle>:

void dwIdle(dwDeviceTypes_t *dev)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af02      	add	r7, sp, #8
 8004574:	6078      	str	r0, [r7, #4]
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3304      	adds	r3, #4
 800457a:	2204      	movs	r2, #4
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f005 f9de 	bl	8009940 <memset>
    dev->sysctrl[0] |= 1 << TRXOFF_BIT;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	791b      	ldrb	r3, [r3, #4]
 8004588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800458c:	b2da      	uxtb	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	711a      	strb	r2, [r3, #4]
    dev->deviceMode = IDLE_MODE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	721a      	strb	r2, [r3, #8]
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	2204      	movs	r2, #4
 800459e:	9200      	str	r2, [sp, #0]
 80045a0:	2200      	movs	r2, #0
 80045a2:	210d      	movs	r1, #13
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f002 f847 	bl	8006638 <dwSpiWrite>
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <dwNewReceive>:

void dwNewReceive(dwDeviceTypes_t *dev)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff ffd7 	bl	800456e <dwIdle>
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	2204      	movs	r2, #4
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f005 f9b9 	bl	8009940 <memset>
    dwClearReceiveStatus(dev);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fdf4 	bl	80051bc <dwClearReceiveStatus>
    dev->deviceMode = RX_MODE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	721a      	strb	r2, [r3, #8]
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <dwStartReceive>:

void dwStartReceive(dwDeviceTypes_t *dev)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af02      	add	r7, sp, #8
 80045e8:	6078      	str	r0, [r7, #4]
    setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	1d18      	adds	r0, r3, #4
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f083 0301 	eor.w	r3, r3, #1
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2200      	movs	r2, #0
 800460c:	2104      	movs	r1, #4
 800460e:	f7ff fb0a 	bl	8003c26 <setBit>
    setBit(dev->sysctrl, LEN_SYS_CTRL, RXENAB_BIT, true);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	1d18      	adds	r0, r3, #4
 8004616:	2301      	movs	r3, #1
 8004618:	2208      	movs	r2, #8
 800461a:	2104      	movs	r1, #4
 800461c:	f7ff fb03 	bl	8003c26 <setBit>
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	2204      	movs	r2, #4
 8004626:	9200      	str	r2, [sp, #0]
 8004628:	2200      	movs	r2, #0
 800462a:	210d      	movs	r1, #13
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f002 f803 	bl	8006638 <dwSpiWrite>
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <dwNewTransmit>:

void dwNewTransmit(dwDeviceTypes_t *dev)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff ff93 	bl	800456e <dwIdle>
    memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	2204      	movs	r2, #4
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f005 f975 	bl	8009940 <memset>
    dwClearTransmitStatus(dev);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fdc2 	bl	80051e0 <dwClearTransmitStatus>
    dev->deviceMode = TX_MODE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	721a      	strb	r2, [r3, #8]
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <dwStartTransmit>:

void dwStartTransmit(dwDeviceTypes_t *dev, bool isTxDelay)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af02      	add	r7, sp, #8
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	460b      	mov	r3, r1
 8004674:	70fb      	strb	r3, [r7, #3]
    dwWriteTransmitFrameControlRegister(dev);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff fe1f 	bl	80042ba <dwWriteTransmitFrameControlRegister>
    setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1d18      	adds	r0, r3, #4
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004686:	2b00      	cmp	r3, #0
 8004688:	bf14      	ite	ne
 800468a:	2301      	movne	r3, #1
 800468c:	2300      	moveq	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	f083 0301 	eor.w	r3, r3, #1
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2200      	movs	r2, #0
 800469e:	2104      	movs	r1, #4
 80046a0:	f7ff fac1 	bl	8003c26 <setBit>
    if (isTxDelay)
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d006      	beq.n	80046b8 <dwStartTransmit+0x4e>
    	setBit(dev->sysctrl, LEN_SYS_CTRL, TXDLYS_BIT, true);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	1d18      	adds	r0, r3, #4
 80046ae:	2301      	movs	r3, #1
 80046b0:	2202      	movs	r2, #2
 80046b2:	2104      	movs	r1, #4
 80046b4:	f7ff fab7 	bl	8003c26 <setBit>
    setBit(dev->sysctrl, LEN_SYS_CTRL, TXSTRT_BIT, true);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	1d18      	adds	r0, r3, #4
 80046bc:	2301      	movs	r3, #1
 80046be:	2201      	movs	r2, #1
 80046c0:	2104      	movs	r1, #4
 80046c2:	f7ff fab0 	bl	8003c26 <setBit>
    dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3304      	adds	r3, #4
 80046ca:	2204      	movs	r2, #4
 80046cc:	9200      	str	r2, [sp, #0]
 80046ce:	2200      	movs	r2, #0
 80046d0:	210d      	movs	r1, #13
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f001 ffb0 	bl	8006638 <dwSpiWrite>
    if (dev->permanentReceive)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00d      	beq.n	80046fe <dwStartTransmit+0x94>
    {
        memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3304      	adds	r3, #4
 80046e6:	2204      	movs	r2, #4
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f005 f928 	bl	8009940 <memset>
        dev->deviceMode = RX_MODE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	721a      	strb	r2, [r3, #8]
        dwStartReceive(dev);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff ff73 	bl	80045e2 <dwStartReceive>
    }
    else
    {
        dev->deviceMode = IDLE_MODE;
    }
}
 80046fc:	e00b      	b.n	8004716 <dwStartTransmit+0xac>
    else if (dev->wait4resp)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <dwStartTransmit+0xa6>
        dev->deviceMode = RX_MODE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	721a      	strb	r2, [r3, #8]
}
 800470e:	e002      	b.n	8004716 <dwStartTransmit+0xac>
        dev->deviceMode = IDLE_MODE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	721a      	strb	r2, [r3, #8]
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <dwNewConfiguration>:

void dwNewConfiguration(dwDeviceTypes_t *dev)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
    dwIdle(dev);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ff21 	bl	800456e <dwIdle>
    dwReadNetworkIdAndDeviceAddress(dev);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff fd4d 	bl	80041cc <dwReadNetworkIdAndDeviceAddress>
    dwReadSystemConfigurationRegister(dev);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff fd17 	bl	8004166 <dwReadSystemConfigurationRegister>
    dwReadChannelControlRegister(dev);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff fd8b 	bl	8004254 <dwReadChannelControlRegister>
    dwReadTransmitFrameControlRegister(dev);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff fdaa 	bl	8004298 <dwReadTransmitFrameControlRegister>
    dwReadSystemEventMaskRegister(dev);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff fd63 	bl	8004210 <dwReadSystemEventMaskRegister>
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <dwCommitConfiguration>:

void dwCommitConfiguration(dwDeviceTypes_t *dev)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b084      	sub	sp, #16
 8004756:	af02      	add	r7, sp, #8
 8004758:	6078      	str	r0, [r7, #4]
    // write all configurations back to device
    dwWriteNetworkIdAndDeviceAddress(dev);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff fd47 	bl	80041ee <dwWriteNetworkIdAndDeviceAddress>
    dwWriteSystemConfigurationRegister(dev);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff fd11 	bl	8004188 <dwWriteSystemConfigurationRegister>
    dwWriteChannelControlRegister(dev);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff fd85 	bl	8004276 <dwWriteChannelControlRegister>
    dwWriteTransmitFrameControlRegister(dev);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff fda4 	bl	80042ba <dwWriteTransmitFrameControlRegister>
    dwWriteSystemEventMaskRegister(dev);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fd5d 	bl	8004232 <dwWriteSystemEventMaskRegister>
    // tune according to configuration
    dwTune(dev);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f001 f83f 	bl	80057fc <dwTune>
    // uint8_t antennaDelayBytes[LEN_STAMP];
    // writeValueToBytes(antennaDelayBytes, 16384, LEN_STAMP);
    // dev->antennaDelay.setTimestamp(antennaDelayBytes);
    // dwSpiRead(dev, TX_ANTD, NO_SUB, antennaDelayBytes, LEN_TX_ANTD);
    // dwSpiRead(dev, LDE_IF, LDE_RXANTD_SUB, antennaDelayBytes, LEN_LDE_RXANTD);
    dwSpiWrite(dev, TX_ANTD, NO_SUB, dev->antennaDelay.timeRaw, LEN_TX_ANTD);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3330      	adds	r3, #48	; 0x30
 8004782:	2202      	movs	r2, #2
 8004784:	9200      	str	r2, [sp, #0]
 8004786:	2200      	movs	r2, #0
 8004788:	2118      	movs	r1, #24
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f001 ff54 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_RXANTD_SUB, dev->antennaDelay.timeRaw, LEN_LDE_RXANTD);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3330      	adds	r3, #48	; 0x30
 8004794:	2202      	movs	r2, #2
 8004796:	9200      	str	r2, [sp, #0]
 8004798:	f641 0204 	movw	r2, #6148	; 0x1804
 800479c:	212e      	movs	r1, #46	; 0x2e
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f001 ff4a 	bl	8006638 <dwSpiWrite>
}
 80047a4:	bf00      	nop
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <dwReadCarrierIntegrator>:

int32_t dwReadCarrierIntegrator(dwDeviceTypes_t *dev)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	6078      	str	r0, [r7, #4]
    uint32_t regval = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]
    int j;
    uint8_t buffer[LEN_DRX_CARRIER];
    dwSpiRead(dev, DRX_TUNE, DRX_CAR_INT_SUB, buffer, LEN_DRX_CARRIER);
 80047b8:	f107 030c 	add.w	r3, r7, #12
 80047bc:	2203      	movs	r2, #3
 80047be:	9200      	str	r2, [sp, #0]
 80047c0:	2228      	movs	r2, #40	; 0x28
 80047c2:	2127      	movs	r1, #39	; 0x27
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f001 fecf 	bl	8006568 <dwSpiRead>
    for (j = 2; j >= 0; j--)
 80047ca:	2302      	movs	r3, #2
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	e00b      	b.n	80047e8 <dwReadCarrierIntegrator+0x3c>
    {
        regval = (regval << 8) + buffer[j] ;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	f107 010c 	add.w	r1, r7, #12
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	440a      	add	r2, r1
 80047dc:	7812      	ldrb	r2, [r2, #0]
 80047de:	4413      	add	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
    for (j = 2; j >= 0; j--)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	daf0      	bge.n	80047d0 <dwReadCarrierIntegrator+0x24>
    }
    if (regval & B20_SIGN_EXTEND_TEST) regval |= B20_SIGN_EXTEND_MASK ; // sign extend bit #20 to whole word
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d006      	beq.n	8004806 <dwReadCarrierIntegrator+0x5a>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80047fe:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	e003      	b.n	800480e <dwReadCarrierIntegrator+0x62>
    else regval &= DRX_CARRIER_INT_MASK ;                               // make sure upper bits are clear if not sign extending
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800480c:	617b      	str	r3, [r7, #20]
    return (int32_t) regval ; // cast unsigned value to signed quantity.
 800480e:	697b      	ldr	r3, [r7, #20]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <dwSuppressFrameCheck>:
    dev->wait4resp = val;
    setBit(dev->sysctrl, LEN_SYS_CTRL, WAIT4RESP_BIT, val);
}

void dwSuppressFrameCheck(dwDeviceTypes_t *dev, bool val)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	70fb      	strb	r3, [r7, #3]
    dev->frameCheck = !val;
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	2b00      	cmp	r3, #0
 8004828:	bf14      	ite	ne
 800482a:	2301      	movne	r3, #1
 800482c:	2300      	moveq	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f083 0301 	eor.w	r3, r3, #1
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	b2da      	uxtb	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <dwUseSmartPower>:

void dwUseSmartPower(dwDeviceTypes_t *dev, bool smartPower)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	460b      	mov	r3, r1
 8004858:	70fb      	strb	r3, [r7, #3]
    dev->smartPower = smartPower;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	78fa      	ldrb	r2, [r7, #3]
 800485e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    setBit(dev->syscfg, LEN_SYS_CFG, DIS_STXP_BIT, !smartPower);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f103 000d 	add.w	r0, r3, #13
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	2b00      	cmp	r3, #0
 800486c:	bf14      	ite	ne
 800486e:	2301      	movne	r3, #1
 8004870:	2300      	moveq	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f083 0301 	eor.w	r3, r3, #1
 8004878:	b2db      	uxtb	r3, r3
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2212      	movs	r2, #18
 8004882:	2104      	movs	r1, #4
 8004884:	f7ff f9cf 	bl	8003c26 <setBit>
}
 8004888:	bf00      	nop
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <dwSetDataRate>:
    delayBytes[1] &= 0xFE;
    dwSpiWrite(dev, DX_TIME, NO_SUB, delayBytes, LEN_DX_TIME);
}

void dwSetDataRate(dwDeviceTypes_t *dev, uint8_t rate)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af02      	add	r7, sp, #8
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	70fb      	strb	r3, [r7, #3]
    rate &= 0x03;
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[1] &= 0x83;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	7fdb      	ldrb	r3, [r3, #31]
 80048a8:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	77da      	strb	r2, [r3, #31]
    dev->txfctrl[1] |= (uint8_t)((rate << 5) & 0xFF);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	7fda      	ldrb	r2, [r3, #31]
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	015b      	lsls	r3, r3, #5
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	4313      	orrs	r3, r2
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	77da      	strb	r2, [r3, #31]
    // special 110kbps flag
    if (rate == TRX_RATE_110KBPS)
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d108      	bne.n	80048dc <dwSetDataRate+0x4c>
    {
        setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, true);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f103 000d 	add.w	r0, r3, #13
 80048d0:	2301      	movs	r3, #1
 80048d2:	2216      	movs	r2, #22
 80048d4:	2104      	movs	r1, #4
 80048d6:	f7ff f9a6 	bl	8003c26 <setBit>
 80048da:	e007      	b.n	80048ec <dwSetDataRate+0x5c>
    }
    else
    {
        setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, false);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f103 000d 	add.w	r0, r3, #13
 80048e2:	2300      	movs	r3, #0
 80048e4:	2216      	movs	r2, #22
 80048e6:	2104      	movs	r1, #4
 80048e8:	f7ff f99d 	bl	8003c26 <setBit>
    }
    // SFD mode and type (non-configurable, as in Table )
    if (rate == TRX_RATE_6800KBPS)
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d118      	bne.n	8004924 <dwSetDataRate+0x94>
    {
        setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, false);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f103 0015 	add.w	r0, r3, #21
 80048f8:	2300      	movs	r3, #0
 80048fa:	2211      	movs	r2, #17
 80048fc:	2104      	movs	r1, #4
 80048fe:	f7ff f992 	bl	8003c26 <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, false);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f103 0015 	add.w	r0, r3, #21
 8004908:	2300      	movs	r3, #0
 800490a:	2214      	movs	r2, #20
 800490c:	2104      	movs	r1, #4
 800490e:	f7ff f98a 	bl	8003c26 <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, false);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f103 0015 	add.w	r0, r3, #21
 8004918:	2300      	movs	r3, #0
 800491a:	2215      	movs	r2, #21
 800491c:	2104      	movs	r1, #4
 800491e:	f7ff f982 	bl	8003c26 <setBit>
 8004922:	e017      	b.n	8004954 <dwSetDataRate+0xc4>
    }
    else
    {
        setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, true);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f103 0015 	add.w	r0, r3, #21
 800492a:	2301      	movs	r3, #1
 800492c:	2211      	movs	r2, #17
 800492e:	2104      	movs	r1, #4
 8004930:	f7ff f979 	bl	8003c26 <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, true);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f103 0015 	add.w	r0, r3, #21
 800493a:	2301      	movs	r3, #1
 800493c:	2214      	movs	r2, #20
 800493e:	2104      	movs	r1, #4
 8004940:	f7ff f971 	bl	8003c26 <setBit>
        setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, true);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f103 0015 	add.w	r0, r3, #21
 800494a:	2301      	movs	r3, #1
 800494c:	2215      	movs	r2, #21
 800494e:	2104      	movs	r1, #4
 8004950:	f7ff f969 	bl	8003c26 <setBit>
    }
    uint8_t sfdLength;
    if (rate == TRX_RATE_6800KBPS)
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d102      	bne.n	8004960 <dwSetDataRate+0xd0>
    {
        sfdLength = 0x08;
 800495a:	2308      	movs	r3, #8
 800495c:	73fb      	strb	r3, [r7, #15]
 800495e:	e007      	b.n	8004970 <dwSetDataRate+0xe0>
    }
    else if (rate == TRX_RATE_850KBPS)
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d102      	bne.n	800496c <dwSetDataRate+0xdc>
    {
        sfdLength = 0x10;
 8004966:	2310      	movs	r3, #16
 8004968:	73fb      	strb	r3, [r7, #15]
 800496a:	e001      	b.n	8004970 <dwSetDataRate+0xe0>
    }
    else
    {
        sfdLength = 0x40;
 800496c:	2340      	movs	r3, #64	; 0x40
 800496e:	73fb      	strb	r3, [r7, #15]
    }
    dwSpiWrite(dev, USR_SFD, SFD_LENGTH_SUB, &sfdLength, LEN_SFD_LENGTH);
 8004970:	f107 030f 	add.w	r3, r7, #15
 8004974:	2201      	movs	r2, #1
 8004976:	9200      	str	r2, [sp, #0]
 8004978:	2200      	movs	r2, #0
 800497a:	2121      	movs	r1, #33	; 0x21
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f001 fe5b 	bl	8006638 <dwSpiWrite>
    dev->dataRate = rate;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <dwSetPulseFrequency>:

void dwSetPulseFrequency(dwDeviceTypes_t *dev, uint8_t freq)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	70fb      	strb	r3, [r7, #3]
    freq &= 0x03;
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[2] &= 0xFC;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049ac:	f023 0303 	bic.w	r3, r3, #3
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f883 2020 	strb.w	r2, [r3, #32]
    dev->txfctrl[2] |= (uint8_t)(freq & 0xFF);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 2020 	ldrb.w	r2, [r3, #32]
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f883 2020 	strb.w	r2, [r3, #32]
    dev->chanctrl[2] &= 0xF3;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	7ddb      	ldrb	r3, [r3, #23]
 80049ce:	f023 030c 	bic.w	r3, r3, #12
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[2] |= (uint8_t)((freq << 2) & 0xFF);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	7dda      	ldrb	r2, [r3, #23]
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	4313      	orrs	r3, r2
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	75da      	strb	r2, [r3, #23]
    dev->pulseFrequency = freq;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	78fa      	ldrb	r2, [r7, #3]
 80049ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <dwSetPreambleLength>:
{
    return dev->pulseFrequency;
}

void dwSetPreambleLength(dwDeviceTypes_t *dev, uint8_t prealen)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	460b      	mov	r3, r1
 8004a08:	70fb      	strb	r3, [r7, #3]
    prealen &= 0x0F;
 8004a0a:	78fb      	ldrb	r3, [r7, #3]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	70fb      	strb	r3, [r7, #3]
    dev->txfctrl[2] &= 0xC3;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a18:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f883 2020 	strb.w	r2, [r3, #32]
    dev->txfctrl[2] |= (uint8_t)((prealen << 2) & 0xFF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4313      	orrs	r3, r2
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f883 2020 	strb.w	r2, [r3, #32]
    if (prealen == TX_PREAMBLE_LEN_64 || prealen == TX_PREAMBLE_LEN_128)
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d002      	beq.n	8004a46 <dwSetPreambleLength+0x48>
 8004a40:	78fb      	ldrb	r3, [r7, #3]
 8004a42:	2b05      	cmp	r3, #5
 8004a44:	d104      	bne.n	8004a50 <dwSetPreambleLength+0x52>
    {
        dev->pacSize = PAC_SIZE_8;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2208      	movs	r2, #8
 8004a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a4e:	e016      	b.n	8004a7e <dwSetPreambleLength+0x80>
    }
    else if (prealen == TX_PREAMBLE_LEN_256 || prealen == TX_PREAMBLE_LEN_512)
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	2b09      	cmp	r3, #9
 8004a54:	d002      	beq.n	8004a5c <dwSetPreambleLength+0x5e>
 8004a56:	78fb      	ldrb	r3, [r7, #3]
 8004a58:	2b0d      	cmp	r3, #13
 8004a5a:	d104      	bne.n	8004a66 <dwSetPreambleLength+0x68>
    {
        dev->pacSize = PAC_SIZE_16;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2210      	movs	r2, #16
 8004a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a64:	e00b      	b.n	8004a7e <dwSetPreambleLength+0x80>
    }
    else if (prealen == TX_PREAMBLE_LEN_1024)
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d104      	bne.n	8004a76 <dwSetPreambleLength+0x78>
    {
        dev->pacSize = PAC_SIZE_32;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a74:	e003      	b.n	8004a7e <dwSetPreambleLength+0x80>
    }
    else
    {
        dev->pacSize = PAC_SIZE_64;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2240      	movs	r2, #64	; 0x40
 8004a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    dev->preambleLength = prealen;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	78fa      	ldrb	r2, [r7, #3]
 8004a82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <dwUseExtendedFrameLength>:

void dwUseExtendedFrameLength(dwDeviceTypes_t *dev, bool val)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	70fb      	strb	r3, [r7, #3]
    dev->extendedFrameLength = (val ? FRAME_LENGTH_EXTENDED : FRAME_LENGTH_NORMAL);
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <dwUseExtendedFrameLength+0x16>
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	e000      	b.n	8004aaa <dwUseExtendedFrameLength+0x18>
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    dev->syscfg[2] &= 0xFC;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	7bdb      	ldrb	r3, [r3, #15]
 8004ab4:	f023 0303 	bic.w	r3, r3, #3
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	73da      	strb	r2, [r3, #15]
    dev->syscfg[2] |= dev->extendedFrameLength;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	7bda      	ldrb	r2, [r3, #15]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	73da      	strb	r2, [r3, #15]
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <dwSetChannel>:
{
    dev->permanentReceive = val;
}

void dwSetChannel(dwDeviceTypes_t *dev, uint8_t channel)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
    channel &= 0xF;
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	70fb      	strb	r3, [r7, #3]
    dev->chanctrl[0] = ((channel | (channel << 4)) & 0xFF);
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	b25a      	sxtb	r2, r3
 8004af6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	b25b      	sxtb	r3, r3
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	755a      	strb	r2, [r3, #21]
    dev->channel = channel;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	78fa      	ldrb	r2, [r7, #3]
 8004b08:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <dwSetPreambleCode>:

void dwSetPreambleCode(dwDeviceTypes_t *dev, uint8_t preacode)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
    preacode &= 0x1F;
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	70fb      	strb	r3, [r7, #3]
    dev->chanctrl[2] &= 0x3F;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	7ddb      	ldrb	r3, [r3, #23]
 8004b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[2] |= ((preacode << 6) & 0xFF);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	7ddb      	ldrb	r3, [r3, #23]
 8004b3e:	b25a      	sxtb	r2, r3
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	019b      	lsls	r3, r3, #6
 8004b44:	b25b      	sxtb	r3, r3
 8004b46:	4313      	orrs	r3, r2
 8004b48:	b25b      	sxtb	r3, r3
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	75da      	strb	r2, [r3, #23]
    dev->chanctrl[3] = 0x00;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	761a      	strb	r2, [r3, #24]
    dev->chanctrl[3] = ((((preacode >> 2) & 0x07) | (preacode << 3)) & 0xFF);
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	089b      	lsrs	r3, r3, #2
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	b25b      	sxtb	r3, r3
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	b25a      	sxtb	r2, r3
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	b25b      	sxtb	r3, r3
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	b25b      	sxtb	r3, r3
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	761a      	strb	r2, [r3, #24]
    dev->preambleCode = preacode;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <dwSetDefaults>:

void dwSetDefaults(dwDeviceTypes_t *dev)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
    if (dev->deviceMode == TX_MODE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	7a1b      	ldrb	r3, [r3, #8]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d04d      	beq.n	8004c34 <dwSetDefaults+0xac>
    {
    }
    else if (dev->deviceMode == RX_MODE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	7a1b      	ldrb	r3, [r3, #8]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d049      	beq.n	8004c34 <dwSetDefaults+0xac>
    {
    }
    else if (dev->deviceMode == IDLE_MODE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	7a1b      	ldrb	r3, [r3, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d145      	bne.n	8004c34 <dwSetDefaults+0xac>
    {
        dwUseExtendedFrameLength(dev, false);
 8004ba8:	2100      	movs	r1, #0
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff ff71 	bl	8004a92 <dwUseExtendedFrameLength>
        dwUseSmartPower(dev, false);
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff fe4b 	bl	800484e <dwUseSmartPower>
        dwSuppressFrameCheck(dev, false);
 8004bb8:	2100      	movs	r1, #0
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff fe2c 	bl	8004818 <dwSuppressFrameCheck>
        // for global frame filtering
        dwSetFrameFilter(dev, false);
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff fba9 	bl	800431a <dwSetFrameFilter>
        // for data frame (poll, poll_ack, range, range report, range failed) filtering
        dwSetFrameFilterAllowData(dev, false);
 8004bc8:	2100      	movs	r1, #0
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff fbb7 	bl	800433e <dwSetFrameFilterAllowData>
        // for reserved (blink) frame filtering
        dwSetFrameFilterAllowReserved(dev, false);
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff fbc5 	bl	8004362 <dwSetFrameFilterAllowReserved>
        // setFrameFilterAllowMAC(true);
        // setFrameFilterAllowBeacon(true);
        // setFrameFilterAllowAcknowledgement(true);
        dwInterruptOnSent(dev, true);
 8004bd8:	2101      	movs	r1, #1
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff fc14 	bl	8004408 <dwInterruptOnSent>
        dwInterruptOnReceived(dev, true);
 8004be0:	2101      	movs	r1, #1
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff fc22 	bl	800442c <dwInterruptOnReceived>
        dwInterruptOnReceiveTimeout(dev, true);
 8004be8:	2101      	movs	r1, #1
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fc72 	bl	80044d4 <dwInterruptOnReceiveTimeout>
        dwInterruptOnReceiveFailed(dev, false);
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff fc34 	bl	8004460 <dwInterruptOnReceiveFailed>
        dwInterruptOnReceiveTimestampAvailable(dev, false);
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff fc84 	bl	8004508 <dwInterruptOnReceiveTimestampAvailable>
        dwInterruptOnAutomaticAcknowledgeTrigger(dev, false);
 8004c00:	2100      	movs	r1, #0
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff fc92 	bl	800452c <dwInterruptOnAutomaticAcknowledgeTrigger>
        dwSetReceiverAutoReenable(dev, true);
 8004c08:	2101      	movs	r1, #1
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff fbea 	bl	80043e4 <dwSetReceiverAutoReenable>
        // default mode when powering up the chip
        // still explicitly selected for later tuning
        dwEnableMode(dev, MODE_LONGDATA_RANGE_LOWPOWER);
 8004c10:	490a      	ldr	r1, [pc, #40]	; (8004c3c <dwSetDefaults+0xb4>)
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fc48 	bl	80054a8 <dwEnableMode>
        dev->func->delayms(dev, 5);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	2105      	movs	r1, #5
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4798      	blx	r3
        dwUseSmartPower(dev, true);
 8004c24:	2101      	movs	r1, #1
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff fe11 	bl	800484e <dwUseSmartPower>
        dwEnableMode(dev, MODE_SHORTDATA_FAST_LOWPOWER);
 8004c2c:	4904      	ldr	r1, [pc, #16]	; (8004c40 <dwSetDefaults+0xb8>)
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fc3a 	bl	80054a8 <dwEnableMode>
    }
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	0800f444 	.word	0x0800f444
 8004c40:	0800f448 	.word	0x0800f448

08004c44 <dwSetData>:

void dwSetData(dwDeviceTypes_t *dev, uint8_t data[], unsigned int n)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
    if (dev->frameCheck)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <dwSetData+0x1c>
    {
        n += 2; // two bytes CRC-16
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	607b      	str	r3, [r7, #4]
    }
    if (n > LEN_EXT_UWB_FRAMES)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c66:	d229      	bcs.n	8004cbc <dwSetData+0x78>
    {
        return; // TODO proper error handling: frame/buffer size
    }
    if (n > LEN_UWB_FRAMES && !dev->extendedFrameLength)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c6c:	d904      	bls.n	8004c78 <dwSetData+0x34>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d023      	beq.n	8004cc0 <dwSetData+0x7c>
    {
        return; // TODO proper error handling: frame/buffer size
    }
    // transmit data and length
    dwSpiWrite(dev, TX_BUFFER, NO_SUB, data, n);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2109      	movs	r1, #9
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f001 fcd8 	bl	8006638 <dwSpiWrite>
    dev->txfctrl[0] = (uint8_t)(n & 0xFF); // 1 byte (regular length + 1 bit)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	779a      	strb	r2, [r3, #30]
    dev->txfctrl[1] &= 0xE0;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	7fdb      	ldrb	r3, [r3, #31]
 8004c94:	f023 031f 	bic.w	r3, r3, #31
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	77da      	strb	r2, [r3, #31]
    dev->txfctrl[1] |= (uint8_t)((n >> 8) & 0x03); // 2 added bits if extended length
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	7fdb      	ldrb	r3, [r3, #31]
 8004ca2:	b25a      	sxtb	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	0a1b      	lsrs	r3, r3, #8
 8004ca8:	b25b      	sxtb	r3, r3
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	b25b      	sxtb	r3, r3
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	b25b      	sxtb	r3, r3
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	77da      	strb	r2, [r3, #31]
 8004cba:	e002      	b.n	8004cc2 <dwSetData+0x7e>
        return; // TODO proper error handling: frame/buffer size
 8004cbc:	bf00      	nop
 8004cbe:	e000      	b.n	8004cc2 <dwSetData+0x7e>
        return; // TODO proper error handling: frame/buffer size
 8004cc0:	bf00      	nop
}
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <dwGetDataLength>:

unsigned int dwGetDataLength(dwDeviceTypes_t *dev)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	6078      	str	r0, [r7, #4]
    unsigned int len = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
    if (dev->deviceMode == TX_MODE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	7a1b      	ldrb	r3, [r3, #8]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d109      	bne.n	8004cf0 <dwGetDataLength+0x28>
    {
        // 10 bits of TX frame control register
        len = ((((unsigned int)dev->txfctrl[1] << 8) | (unsigned int)dev->txfctrl[0]) & 0x03FF);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	7fdb      	ldrb	r3, [r3, #31]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	7f92      	ldrb	r2, [r2, #30]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	e013      	b.n	8004d18 <dwGetDataLength+0x50>
    }
    else if (dev->deviceMode == RX_MODE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	7a1b      	ldrb	r3, [r3, #8]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d10f      	bne.n	8004d18 <dwGetDataLength+0x50>
    {
        // 10 bits of RX frame control register
        uint8_t rxFrameInfo[LEN_RX_FINFO];
        dwSpiRead(dev, RX_FINFO, NO_SUB, rxFrameInfo, LEN_RX_FINFO);
 8004cf8:	f107 0308 	add.w	r3, r7, #8
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	9200      	str	r2, [sp, #0]
 8004d00:	2200      	movs	r2, #0
 8004d02:	2110      	movs	r1, #16
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f001 fc2f 	bl	8006568 <dwSpiRead>
        len = ((((unsigned int)rxFrameInfo[1] << 8) | (unsigned int)rxFrameInfo[0]) & 0x03FF);
 8004d0a:	7a7b      	ldrb	r3, [r7, #9]
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	7a3a      	ldrb	r2, [r7, #8]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d16:	60fb      	str	r3, [r7, #12]
    }
    if (dev->frameCheck && len > 2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <dwGetDataLength+0x66>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d902      	bls.n	8004d2e <dwGetDataLength+0x66>
    {
        return len - 2;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3b02      	subs	r3, #2
 8004d2c:	e000      	b.n	8004d30 <dwGetDataLength+0x68>
    }
    return len;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <dwGetData>:

void dwGetData(dwDeviceTypes_t *dev, uint8_t data[], unsigned int n)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
    if (n <= 0)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <dwGetData+0x24>
    {
        return;
    }
    dwSpiRead(dev, RX_BUFFER, NO_SUB, data, n);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2200      	movs	r2, #0
 8004d52:	2111      	movs	r1, #17
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f001 fc07 	bl	8006568 <dwSpiRead>
 8004d5a:	e000      	b.n	8004d5e <dwGetData+0x26>
        return;
 8004d5c:	bf00      	nop
}
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <dwGetTransmitTimestamp>:

void dwGetTransmitTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *time)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
    dwSpiRead(dev, TX_TIME, TX_STAMP_SUB, time->timeRaw, LEN_TX_STAMP);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2205      	movs	r2, #5
 8004d72:	9200      	str	r2, [sp, #0]
 8004d74:	2200      	movs	r2, #0
 8004d76:	2117      	movs	r1, #23
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f001 fbf5 	bl	8006568 <dwSpiRead>
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <dwGetReceiveTimestamp>:

void dwGetReceiveTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *time)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af02      	add	r7, sp, #8
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
    time->timeFull = 0;
 8004d90:	6839      	ldr	r1, [r7, #0]
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	e9c1 2300 	strd	r2, r3, [r1]
    dwSpiRead(dev, RX_TIME, RX_STAMP_SUB, time->timeRaw, LEN_RX_STAMP);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2205      	movs	r2, #5
 8004da2:	9200      	str	r2, [sp, #0]
 8004da4:	2200      	movs	r2, #0
 8004da6:	2115      	movs	r1, #21
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f001 fbdd 	bl	8006568 <dwSpiRead>
    // correct timestamp (i.e. consider range bias)
    dwCorrectTimestamp(dev, time);
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f805 	bl	8004dc0 <dwCorrectTimestamp>
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <dwCorrectTimestamp>:
    time->timeFull = 0;
    dwSpiRead(dev, RX_TIME, RX_STAMP_SUB, time->timeRaw, LEN_RX_STAMP);
}

void dwCorrectTimestamp(dwDeviceTypes_t *dev, dwTimestamp_t *timestamp)
{
 8004dc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004dc4:	b08a      	sub	sp, #40	; 0x28
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
    // base line dBm, which is -61, 2 dBm steps, total 18 data points (down to -95 dBm)
    float rxPowerBase = -(dwGetReceivePower(dev) + 61.0f) * 0.5f;
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fb3c 	bl	800544a <dwGetReceivePower>
 8004dd2:	eef0 7a40 	vmov.f32	s15, s0
 8004dd6:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800501c <dwCorrectTimestamp+0x25c>
 8004dda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004dde:	eef1 7a67 	vneg.f32	s15, s15
 8004de2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dea:	edc7 7a05 	vstr	s15, [r7, #20]

    if (!isfinite(rxPowerBase))
 8004dee:	edd7 7a05 	vldr	s15, [r7, #20]
 8004df2:	eef0 7ae7 	vabs.f32	s15, s15
 8004df6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8005020 <dwCorrectTimestamp+0x260>
 8004dfa:	eef4 7a47 	vcmp.f32	s15, s14
 8004dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e02:	f200 8106 	bhi.w	8005012 <dwCorrectTimestamp+0x252>
    {
        return;
    }
    int rxPowerBaseLow = (int)rxPowerBase;
 8004e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e0e:	ee17 3a90 	vmov	r3, s15
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
    int rxPowerBaseHigh = rxPowerBaseLow + 1;
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	3301      	adds	r3, #1
 8004e18:	623b      	str	r3, [r7, #32]
    if (rxPowerBaseLow <= 0)
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	dc04      	bgt.n	8004e2a <dwCorrectTimestamp+0x6a>
    {
        rxPowerBaseLow = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
        rxPowerBaseHigh = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	623b      	str	r3, [r7, #32]
 8004e28:	e006      	b.n	8004e38 <dwCorrectTimestamp+0x78>
    }
    else if (rxPowerBaseHigh >= 17)
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	dd03      	ble.n	8004e38 <dwCorrectTimestamp+0x78>
    {
        rxPowerBaseLow = 17;
 8004e30:	2311      	movs	r3, #17
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24
        rxPowerBaseHigh = 17;
 8004e34:	2311      	movs	r3, #17
 8004e36:	623b      	str	r3, [r7, #32]
    }
    // select range low/high values from corresponding table
    int rangeBiasHigh = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61fb      	str	r3, [r7, #28]
    int rangeBiasLow = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61bb      	str	r3, [r7, #24]
    if (dev->channel == CHANNEL_4 || dev->channel == CHANNEL_7)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d004      	beq.n	8004e54 <dwCorrectTimestamp+0x94>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e50:	2b07      	cmp	r3, #7
 8004e52:	d157      	bne.n	8004f04 <dwCorrectTimestamp+0x144>
    {
        // 900 MHz receiver bandwidth
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d126      	bne.n	8004eac <dwCorrectTimestamp+0xec>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_900_16_ZERO ? -BIAS_900_16[rxPowerBaseHigh] : BIAS_900_16[rxPowerBaseHigh]);
 8004e5e:	2307      	movs	r3, #7
 8004e60:	461a      	mov	r2, r3
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	4293      	cmp	r3, r2
 8004e66:	da05      	bge.n	8004e74 <dwCorrectTimestamp+0xb4>
 8004e68:	4a6e      	ldr	r2, [pc, #440]	; (8005024 <dwCorrectTimestamp+0x264>)
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	425b      	negs	r3, r3
 8004e72:	e003      	b.n	8004e7c <dwCorrectTimestamp+0xbc>
 8004e74:	4a6b      	ldr	r2, [pc, #428]	; (8005024 <dwCorrectTimestamp+0x264>)
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	4413      	add	r3, r2
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	61fb      	str	r3, [r7, #28]
            rangeBiasHigh <<= 1;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_900_16_ZERO ? -BIAS_900_16[rxPowerBaseLow] : BIAS_900_16[rxPowerBaseLow]);
 8004e84:	2307      	movs	r3, #7
 8004e86:	461a      	mov	r2, r3
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	da05      	bge.n	8004e9a <dwCorrectTimestamp+0xda>
 8004e8e:	4a65      	ldr	r2, [pc, #404]	; (8005024 <dwCorrectTimestamp+0x264>)
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	4413      	add	r3, r2
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	425b      	negs	r3, r3
 8004e98:	e003      	b.n	8004ea2 <dwCorrectTimestamp+0xe2>
 8004e9a:	4a62      	ldr	r2, [pc, #392]	; (8005024 <dwCorrectTimestamp+0x264>)
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	4413      	add	r3, r2
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	61bb      	str	r3, [r7, #24]
            rangeBiasLow <<= 1;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	61bb      	str	r3, [r7, #24]
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004eaa:	e077      	b.n	8004f9c <dwCorrectTimestamp+0x1dc>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d172      	bne.n	8004f9c <dwCorrectTimestamp+0x1dc>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_900_64_ZERO ? -BIAS_900_64[rxPowerBaseHigh] : BIAS_900_64[rxPowerBaseHigh]);
 8004eb6:	2307      	movs	r3, #7
 8004eb8:	461a      	mov	r2, r3
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	da05      	bge.n	8004ecc <dwCorrectTimestamp+0x10c>
 8004ec0:	4a59      	ldr	r2, [pc, #356]	; (8005028 <dwCorrectTimestamp+0x268>)
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	425b      	negs	r3, r3
 8004eca:	e003      	b.n	8004ed4 <dwCorrectTimestamp+0x114>
 8004ecc:	4a56      	ldr	r2, [pc, #344]	; (8005028 <dwCorrectTimestamp+0x268>)
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	61fb      	str	r3, [r7, #28]
            rangeBiasHigh <<= 1;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_900_64_ZERO ? -BIAS_900_64[rxPowerBaseLow] : BIAS_900_64[rxPowerBaseLow]);
 8004edc:	2307      	movs	r3, #7
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	da05      	bge.n	8004ef2 <dwCorrectTimestamp+0x132>
 8004ee6:	4a50      	ldr	r2, [pc, #320]	; (8005028 <dwCorrectTimestamp+0x268>)
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	4413      	add	r3, r2
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	425b      	negs	r3, r3
 8004ef0:	e003      	b.n	8004efa <dwCorrectTimestamp+0x13a>
 8004ef2:	4a4d      	ldr	r2, [pc, #308]	; (8005028 <dwCorrectTimestamp+0x268>)
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	4413      	add	r3, r2
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	61bb      	str	r3, [r7, #24]
            rangeBiasLow <<= 1;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	61bb      	str	r3, [r7, #24]
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004f02:	e04b      	b.n	8004f9c <dwCorrectTimestamp+0x1dc>
        }
    }
    else
    {
        // 500 MHz receiver bandwidth
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d120      	bne.n	8004f50 <dwCorrectTimestamp+0x190>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_500_16_ZERO ? -BIAS_500_16[rxPowerBaseHigh] : BIAS_500_16[rxPowerBaseHigh]);
 8004f0e:	230a      	movs	r3, #10
 8004f10:	461a      	mov	r2, r3
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	4293      	cmp	r3, r2
 8004f16:	da05      	bge.n	8004f24 <dwCorrectTimestamp+0x164>
 8004f18:	4a44      	ldr	r2, [pc, #272]	; (800502c <dwCorrectTimestamp+0x26c>)
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	425b      	negs	r3, r3
 8004f22:	e003      	b.n	8004f2c <dwCorrectTimestamp+0x16c>
 8004f24:	4a41      	ldr	r2, [pc, #260]	; (800502c <dwCorrectTimestamp+0x26c>)
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	4413      	add	r3, r2
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_500_16_ZERO ? -BIAS_500_16[rxPowerBaseLow] : BIAS_500_16[rxPowerBaseLow]);
 8004f2e:	230a      	movs	r3, #10
 8004f30:	461a      	mov	r2, r3
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	4293      	cmp	r3, r2
 8004f36:	da05      	bge.n	8004f44 <dwCorrectTimestamp+0x184>
 8004f38:	4a3c      	ldr	r2, [pc, #240]	; (800502c <dwCorrectTimestamp+0x26c>)
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	4413      	add	r3, r2
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	425b      	negs	r3, r3
 8004f42:	e003      	b.n	8004f4c <dwCorrectTimestamp+0x18c>
 8004f44:	4a39      	ldr	r2, [pc, #228]	; (800502c <dwCorrectTimestamp+0x26c>)
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	4413      	add	r3, r2
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	e026      	b.n	8004f9e <dwCorrectTimestamp+0x1de>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d121      	bne.n	8004f9e <dwCorrectTimestamp+0x1de>
        {
            rangeBiasHigh = (rxPowerBaseHigh < BIAS_500_64_ZERO ? -BIAS_500_64[rxPowerBaseHigh] : BIAS_500_64[rxPowerBaseHigh]);
 8004f5a:	2308      	movs	r3, #8
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	4293      	cmp	r3, r2
 8004f62:	da05      	bge.n	8004f70 <dwCorrectTimestamp+0x1b0>
 8004f64:	4a32      	ldr	r2, [pc, #200]	; (8005030 <dwCorrectTimestamp+0x270>)
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	4413      	add	r3, r2
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	425b      	negs	r3, r3
 8004f6e:	e003      	b.n	8004f78 <dwCorrectTimestamp+0x1b8>
 8004f70:	4a2f      	ldr	r2, [pc, #188]	; (8005030 <dwCorrectTimestamp+0x270>)
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	4413      	add	r3, r2
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	61fb      	str	r3, [r7, #28]
            rangeBiasLow = (rxPowerBaseLow < BIAS_500_64_ZERO ? -BIAS_500_64[rxPowerBaseLow] : BIAS_500_64[rxPowerBaseLow]);
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	4293      	cmp	r3, r2
 8004f82:	da05      	bge.n	8004f90 <dwCorrectTimestamp+0x1d0>
 8004f84:	4a2a      	ldr	r2, [pc, #168]	; (8005030 <dwCorrectTimestamp+0x270>)
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	4413      	add	r3, r2
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	425b      	negs	r3, r3
 8004f8e:	e003      	b.n	8004f98 <dwCorrectTimestamp+0x1d8>
 8004f90:	4a27      	ldr	r2, [pc, #156]	; (8005030 <dwCorrectTimestamp+0x270>)
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	4413      	add	r3, r2
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	e000      	b.n	8004f9e <dwCorrectTimestamp+0x1de>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8004f9c:	bf00      	nop
        {
            // TODO proper error handling
        }
    }
    // linear interpolation of bias values
    float rangeBias = rangeBiasLow + (rxPowerBase - rxPowerBaseLow) * (rangeBiasHigh - rangeBiasLow);
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	ee07 3a90 	vmov	s15, r3
 8004fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fb2:	edd7 6a05 	vldr	s13, [r7, #20]
 8004fb6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	ee07 3a90 	vmov	s15, r3
 8004fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fd0:	edc7 7a04 	vstr	s15, [r7, #16]
    // range bias [mm] to timestamp modification value conversion
    dwTimestamp_t adjustmentTime;
    adjustmentTime.timeFull = (int)(rangeBias * DISTANCE_OF_RADIO_INV * 0.001f);
 8004fd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004fd8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005034 <dwCorrectTimestamp+0x274>
 8004fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fe0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005038 <dwCorrectTimestamp+0x278>
 8004fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fec:	ee17 2a90 	vmov	r2, s15
 8004ff0:	17d3      	asrs	r3, r2, #31
 8004ff2:	4690      	mov	r8, r2
 8004ff4:	4699      	mov	r9, r3
 8004ff6:	e9c7 8902 	strd	r8, r9, [r7, #8]
    // apply correction
    timestamp->timeFull -= adjustmentTime.timeFull;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005000:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005004:	1a84      	subs	r4, r0, r2
 8005006:	eb61 0503 	sbc.w	r5, r1, r3
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	e9c3 4500 	strd	r4, r5, [r3]
 8005010:	e000      	b.n	8005014 <dwCorrectTimestamp+0x254>
        return;
 8005012:	bf00      	nop
}
 8005014:	3728      	adds	r7, #40	; 0x28
 8005016:	46bd      	mov	sp, r7
 8005018:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800501c:	42740000 	.word	0x42740000
 8005020:	7f7fffff 	.word	0x7f7fffff
 8005024:	0800f474 	.word	0x0800f474
 8005028:	0800f488 	.word	0x0800f488
 800502c:	0800f44c 	.word	0x0800f44c
 8005030:	0800f460 	.word	0x0800f460
 8005034:	435523b3 	.word	0x435523b3
 8005038:	3a83126f 	.word	0x3a83126f

0800503c <dwIsTransmitDone>:
{
    dwSpiRead(dev, SYS_TIME, NO_SUB, time->timeRaw, LEN_SYS_TIME);
}

bool dwIsTransmitDone(dwDeviceTypes_t *dev)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, TXFRS_BIT);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3319      	adds	r3, #25
 8005048:	2207      	movs	r2, #7
 800504a:	2105      	movs	r1, #5
 800504c:	4618      	mov	r0, r3
 800504e:	f7fe fe27 	bl	8003ca0 <getBit>
 8005052:	4603      	mov	r3, r0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <dwIsReceiveTimestampAvailable>:

bool dwIsReceiveTimestampAvailable(dwDeviceTypes_t *dev)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, LDEDONE_BIT);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3319      	adds	r3, #25
 8005068:	220a      	movs	r2, #10
 800506a:	2105      	movs	r1, #5
 800506c:	4618      	mov	r0, r3
 800506e:	f7fe fe17 	bl	8003ca0 <getBit>
 8005072:	4603      	mov	r3, r0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <dwIsReceiveDone>:

bool dwIsReceiveDone(dwDeviceTypes_t *dev)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
    if (dev->frameCheck)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <dwIsReceiveDone+0x24>
    {
        return getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCG_BIT);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3319      	adds	r3, #25
 8005092:	220e      	movs	r2, #14
 8005094:	2105      	movs	r1, #5
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe fe02 	bl	8003ca0 <getBit>
 800509c:	4603      	mov	r3, r0
 800509e:	e007      	b.n	80050b0 <dwIsReceiveDone+0x34>
    }
    return getBit(dev->sysstatus, LEN_SYS_STATUS, RXDFR_BIT);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3319      	adds	r3, #25
 80050a4:	220d      	movs	r2, #13
 80050a6:	2105      	movs	r1, #5
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fe fdf9 	bl	8003ca0 <getBit>
 80050ae:	4603      	mov	r3, r0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <dwIsReceiveFailed>:

bool dwIsReceiveFailed(dwDeviceTypes_t *dev)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
    bool ldeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, LDEERR_BIT);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3319      	adds	r3, #25
 80050c4:	2212      	movs	r2, #18
 80050c6:	2105      	movs	r1, #5
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fe fde9 	bl	8003ca0 <getBit>
 80050ce:	4603      	mov	r3, r0
 80050d0:	73fb      	strb	r3, [r7, #15]
    bool rxCRCErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCE_BIT);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3319      	adds	r3, #25
 80050d6:	220f      	movs	r2, #15
 80050d8:	2105      	movs	r1, #5
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fde0 	bl	8003ca0 <getBit>
 80050e0:	4603      	mov	r3, r0
 80050e2:	73bb      	strb	r3, [r7, #14]
    bool rxHeaderErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXPHE_BIT);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3319      	adds	r3, #25
 80050e8:	220c      	movs	r2, #12
 80050ea:	2105      	movs	r1, #5
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fe fdd7 	bl	8003ca0 <getBit>
 80050f2:	4603      	mov	r3, r0
 80050f4:	737b      	strb	r3, [r7, #13]
    bool rxDecodeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFSL_BIT);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3319      	adds	r3, #25
 80050fa:	2210      	movs	r2, #16
 80050fc:	2105      	movs	r1, #5
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe fdce 	bl	8003ca0 <getBit>
 8005104:	4603      	mov	r3, r0
 8005106:	733b      	strb	r3, [r7, #12]

    bool rxSfdto = getBit(dev->sysstatus, LEN_SYS_STATUS, RXSFDTO_BIT);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3319      	adds	r3, #25
 800510c:	221a      	movs	r2, #26
 800510e:	2105      	movs	r1, #5
 8005110:	4618      	mov	r0, r3
 8005112:	f7fe fdc5 	bl	8003ca0 <getBit>
 8005116:	4603      	mov	r3, r0
 8005118:	72fb      	strb	r3, [r7, #11]
    bool affrej = getBit(dev->sysstatus, LEN_SYS_STATUS, AFFREJ_BIT);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3319      	adds	r3, #25
 800511e:	221d      	movs	r2, #29
 8005120:	2105      	movs	r1, #5
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe fdbc 	bl	8003ca0 <getBit>
 8005128:	4603      	mov	r3, r0
 800512a:	72bb      	strb	r3, [r7, #10]

    return (ldeErr || rxCRCErr || rxHeaderErr || rxDecodeErr || rxSfdto || affrej);
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10e      	bne.n	8005150 <dwIsReceiveFailed+0x98>
 8005132:	7bbb      	ldrb	r3, [r7, #14]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10b      	bne.n	8005150 <dwIsReceiveFailed+0x98>
 8005138:	7b7b      	ldrb	r3, [r7, #13]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d108      	bne.n	8005150 <dwIsReceiveFailed+0x98>
 800513e:	7b3b      	ldrb	r3, [r7, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d105      	bne.n	8005150 <dwIsReceiveFailed+0x98>
 8005144:	7afb      	ldrb	r3, [r7, #11]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <dwIsReceiveFailed+0x98>
 800514a:	7abb      	ldrb	r3, [r7, #10]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <dwIsReceiveFailed+0x9c>
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <dwIsReceiveFailed+0x9e>
 8005154:	2300      	movs	r3, #0
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	b2db      	uxtb	r3, r3
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <dwIsReceiveTimeout>:

bool dwIsReceiveTimeout(dwDeviceTypes_t *dev)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
    return getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFTO_BIT);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3319      	adds	r3, #25
 8005170:	2211      	movs	r2, #17
 8005172:	2105      	movs	r1, #5
 8005174:	4618      	mov	r0, r3
 8005176:	f7fe fd93 	bl	8003ca0 <getBit>
 800517a:	4603      	mov	r3, r0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <dwClearReceiveTimestampAvailableStatus>:
    uint32_t reg = 0xffffffff;
    dwSpiWrite(dev, SYS_STATUS, NO_SUB, &reg, LEN_SYS_STATUS);
}

void dwClearReceiveTimestampAvailableStatus(dwDeviceTypes_t *dev)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af02      	add	r7, sp, #8
 800518a:	6078      	str	r0, [r7, #4]
    uint8_t reg[LEN_SYS_STATUS] = {0};
 800518c:	2300      	movs	r3, #0
 800518e:	60bb      	str	r3, [r7, #8]
 8005190:	2300      	movs	r3, #0
 8005192:	733b      	strb	r3, [r7, #12]
    setBit(reg, LEN_SYS_STATUS, LDEDONE_BIT, true);
 8005194:	f107 0008 	add.w	r0, r7, #8
 8005198:	2301      	movs	r3, #1
 800519a:	220a      	movs	r2, #10
 800519c:	2105      	movs	r1, #5
 800519e:	f7fe fd42 	bl	8003c26 <setBit>
    dwSpiWrite(dev, SYS_STATUS, NO_SUB, reg, LEN_SYS_STATUS);
 80051a2:	f107 0308 	add.w	r3, r7, #8
 80051a6:	2205      	movs	r2, #5
 80051a8:	9200      	str	r2, [sp, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	210f      	movs	r1, #15
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f001 fa42 	bl	8006638 <dwSpiWrite>
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <dwClearReceiveStatus>:

void dwClearReceiveStatus(dwDeviceTypes_t *dev)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
    // clear latched RX bits (i.e. write 1 to clear)
    uint32_t regData = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_GOOD;
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <dwClearReceiveStatus+0x20>)
 80051c6:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	210f      	movs	r1, #15
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f001 fa8c 	bl	80066ec <dwSpiWrite32>
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	2427ff00 	.word	0x2427ff00

080051e0 <dwClearTransmitStatus>:

void dwClearTransmitStatus(dwDeviceTypes_t *dev)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
    // clear latched TX bits
    uint32_t regData = SYS_STATUS_ALL_TX;
 80051e8:	23f8      	movs	r3, #248	; 0xf8
 80051ea:	60fb      	str	r3, [r7, #12]
    dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	210f      	movs	r1, #15
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f001 fa7a 	bl	80066ec <dwSpiWrite32>
}
 80051f8:	bf00      	nop
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <spiReadRxInfo>:
    f2 = (unsigned int)fpAmpl2Bytes[0] | ((unsigned int)fpAmpl2Bytes[1] << 8);
    return (float)f2 / noise;
}

static float spiReadRxInfo(dwDeviceTypes_t *dev)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af02      	add	r7, sp, #8
 8005206:	6078      	str	r0, [r7, #4]
    uint8_t rxFrameInfo[LEN_RX_FINFO];
    dwSpiRead(dev, RX_FINFO, NO_SUB, rxFrameInfo, LEN_RX_FINFO);
 8005208:	f107 030c 	add.w	r3, r7, #12
 800520c:	2204      	movs	r2, #4
 800520e:	9200      	str	r2, [sp, #0]
 8005210:	2200      	movs	r2, #0
 8005212:	2110      	movs	r1, #16
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f001 f9a7 	bl	8006568 <dwSpiRead>
    return (float)((((unsigned int)rxFrameInfo[2] >> 4) & 0xFF) | ((unsigned int)rxFrameInfo[3] << 4));
 800521a:	7bbb      	ldrb	r3, [r7, #14]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	b2db      	uxtb	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	7bfb      	ldrb	r3, [r7, #15]
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	4313      	orrs	r3, r2
 8005228:	ee07 3a90 	vmov	s15, r3
 800522c:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8005230:	eeb0 0a67 	vmov.f32	s0, s15
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <calculatePower>:

static float calculatePower(float base, float N, uint8_t pulseFrequency)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	ed87 0a03 	vstr	s0, [r7, #12]
 8005246:	edc7 0a02 	vstr	s1, [r7, #8]
 800524a:	4603      	mov	r3, r0
 800524c:	71fb      	strb	r3, [r7, #7]
    float A, corrFac;

    if (TX_PULSE_FREQ_16MHZ == pulseFrequency)
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d104      	bne.n	800525e <calculatePower+0x22>
    {
        A = 113.77f;
 8005254:	4b21      	ldr	r3, [pc, #132]	; (80052dc <calculatePower+0xa0>)
 8005256:	61fb      	str	r3, [r7, #28]
        corrFac = 2.3334f;
 8005258:	4b21      	ldr	r3, [pc, #132]	; (80052e0 <calculatePower+0xa4>)
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	e003      	b.n	8005266 <calculatePower+0x2a>
    }
    else
    {
        A = 121.74f;
 800525e:	4b21      	ldr	r3, [pc, #132]	; (80052e4 <calculatePower+0xa8>)
 8005260:	61fb      	str	r3, [r7, #28]
        corrFac = 1.1667f;
 8005262:	4b21      	ldr	r3, [pc, #132]	; (80052e8 <calculatePower+0xac>)
 8005264:	61bb      	str	r3, [r7, #24]
    }

    float estFpPwr = 10.0f * log10f(base / (N * N)) - A;
 8005266:	edd7 7a02 	vldr	s15, [r7, #8]
 800526a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800526e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005272:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005276:	eeb0 0a66 	vmov.f32	s0, s13
 800527a:	f009 f875 	bl	800e368 <log10f>
 800527e:	eef0 7a40 	vmov.f32	s15, s0
 8005282:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005286:	ee27 7a87 	vmul.f32	s14, s15, s14
 800528a:	edd7 7a07 	vldr	s15, [r7, #28]
 800528e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005292:	edc7 7a05 	vstr	s15, [r7, #20]

    if (estFpPwr <= -88)
 8005296:	edd7 7a05 	vldr	s15, [r7, #20]
 800529a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80052ec <calculatePower+0xb0>
 800529e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a6:	d801      	bhi.n	80052ac <calculatePower+0x70>
    {
        return estFpPwr;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	e010      	b.n	80052ce <calculatePower+0x92>
    }
    else
    {
        // approximation of Fig. 22 in user manual for dbm correction
        estFpPwr += (estFpPwr + 88) * corrFac;
 80052ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80052b0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80052f0 <calculatePower+0xb4>
 80052b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80052bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80052c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052c8:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    return estFpPwr;
 80052cc:	697b      	ldr	r3, [r7, #20]
}
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eeb0 0a67 	vmov.f32	s0, s15
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	42e38a3d 	.word	0x42e38a3d
 80052e0:	4015566d 	.word	0x4015566d
 80052e4:	42f37ae1 	.word	0x42f37ae1
 80052e8:	3f95566d 	.word	0x3f95566d
 80052ec:	c2b00000 	.word	0xc2b00000
 80052f0:	42b00000 	.word	0x42b00000

080052f4 <calculateNLOS>:

static float calculateNLOS(float base, float N, uint8_t pulseFrequency)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80052fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8005302:	4603      	mov	r3, r0
 8005304:	71fb      	strb	r3, [r7, #7]
    float A, corrFac;

    if (TX_PULSE_FREQ_16MHZ == pulseFrequency)
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d102      	bne.n	8005312 <calculateNLOS+0x1e>
    {
        A = 113.77f;
 800530c:	4b12      	ldr	r3, [pc, #72]	; (8005358 <calculateNLOS+0x64>)
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	e001      	b.n	8005316 <calculateNLOS+0x22>
    }
    else
    {
        A = 121.74f;
 8005312:	4b12      	ldr	r3, [pc, #72]	; (800535c <calculateNLOS+0x68>)
 8005314:	617b      	str	r3, [r7, #20]
    }
    float estFpPwr = 10.0f * log10f(base / (N * N)) - A;
 8005316:	edd7 7a02 	vldr	s15, [r7, #8]
 800531a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800531e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005322:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005326:	eeb0 0a66 	vmov.f32	s0, s13
 800532a:	f009 f81d 	bl	800e368 <log10f>
 800532e:	eef0 7a40 	vmov.f32	s15, s0
 8005332:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005336:	ee27 7a87 	vmul.f32	s14, s15, s14
 800533a:	edd7 7a05 	vldr	s15, [r7, #20]
 800533e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005342:	edc7 7a04 	vstr	s15, [r7, #16]
    return estFpPwr;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	ee07 3a90 	vmov	s15, r3
}
 800534c:	eeb0 0a67 	vmov.f32	s0, s15
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	42e38a3d 	.word	0x42e38a3d
 800535c:	42f37ae1 	.word	0x42f37ae1

08005360 <dwGetFirstPathPower>:

float dwGetFirstPathPower(dwDeviceTypes_t *dev)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	; 0x28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
    float f1 = (float)dwSpiRead16(dev, RX_TIME, FP_AMPL1_SUB);
 8005368:	2207      	movs	r2, #7
 800536a:	2115      	movs	r1, #21
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 f939 	bl	80065e4 <dwSpiRead16>
 8005372:	4603      	mov	r3, r0
 8005374:	ee07 3a90 	vmov	s15, r3
 8005378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float f2 = (float)dwSpiRead16(dev, RX_FQUAL, FP_AMPL2_SUB);
 8005380:	2202      	movs	r2, #2
 8005382:	2112      	movs	r1, #18
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 f92d 	bl	80065e4 <dwSpiRead16>
 800538a:	4603      	mov	r3, r0
 800538c:	ee07 3a90 	vmov	s15, r3
 8005390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005394:	edc7 7a08 	vstr	s15, [r7, #32]
    float f3 = (float)dwSpiRead16(dev, RX_FQUAL, FP_AMPL3_SUB);
 8005398:	2204      	movs	r2, #4
 800539a:	2112      	movs	r1, #18
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 f921 	bl	80065e4 <dwSpiRead16>
 80053a2:	4603      	mov	r3, r0
 80053a4:	ee07 3a90 	vmov	s15, r3
 80053a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ac:	edc7 7a07 	vstr	s15, [r7, #28]
    float N = spiReadRxInfo(dev);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ff25 	bl	8005200 <spiReadRxInfo>
 80053b6:	ed87 0a06 	vstr	s0, [r7, #24]

    float C = (float)dwSpiRead16(dev, RX_FQUAL, CIR_PWR_SUB);
 80053ba:	2206      	movs	r2, #6
 80053bc:	2112      	movs	r1, #18
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f001 f910 	bl	80065e4 <dwSpiRead16>
 80053c4:	4603      	mov	r3, r0
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	edc7 7a05 	vstr	s15, [r7, #20]
    float twoPower17 = 131072.0f;
 80053d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053d6:	613b      	str	r3, [r7, #16]

    float power = calculateNLOS(C * twoPower17, N, dev->pulseFrequency);
 80053d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80053dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80053e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053ea:	4618      	mov	r0, r3
 80053ec:	edd7 0a06 	vldr	s1, [r7, #24]
 80053f0:	eeb0 0a67 	vmov.f32	s0, s15
 80053f4:	f7ff ff7e 	bl	80052f4 <calculateNLOS>
 80053f8:	ed87 0a03 	vstr	s0, [r7, #12]
    float fpath = calculateNLOS(f1 * f1 + f2 * f2 + f3 * f3, N, dev->pulseFrequency);
 80053fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005400:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005404:	edd7 7a08 	vldr	s15, [r7, #32]
 8005408:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800540c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005410:	edd7 7a07 	vldr	s15, [r7, #28]
 8005414:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005422:	4618      	mov	r0, r3
 8005424:	edd7 0a06 	vldr	s1, [r7, #24]
 8005428:	eeb0 0a67 	vmov.f32	s0, s15
 800542c:	f7ff ff62 	bl	80052f4 <calculateNLOS>
 8005430:	ed87 0a02 	vstr	s0, [r7, #8]
    return power - fpath;
 8005434:	ed97 7a03 	vldr	s14, [r7, #12]
 8005438:	edd7 7a02 	vldr	s15, [r7, #8]
 800543c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005440:	eeb0 0a67 	vmov.f32	s0, s15
 8005444:	3728      	adds	r7, #40	; 0x28
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <dwGetReceivePower>:

float dwGetReceivePower(dwDeviceTypes_t *dev)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b086      	sub	sp, #24
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
    float C = (float)dwSpiRead16(dev, RX_FQUAL, CIR_PWR_SUB);
 8005452:	2206      	movs	r2, #6
 8005454:	2112      	movs	r1, #18
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f001 f8c4 	bl	80065e4 <dwSpiRead16>
 800545c:	4603      	mov	r3, r0
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005466:	edc7 7a05 	vstr	s15, [r7, #20]
    float N = spiReadRxInfo(dev);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff fec8 	bl	8005200 <spiReadRxInfo>
 8005470:	ed87 0a04 	vstr	s0, [r7, #16]

    float twoPower17 = 131072.0f;
 8005474:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005478:	60fb      	str	r3, [r7, #12]

    return calculatePower(C * twoPower17, N, dev->pulseFrequency);
 800547a:	ed97 7a05 	vldr	s14, [r7, #20]
 800547e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800548c:	4618      	mov	r0, r3
 800548e:	edd7 0a04 	vldr	s1, [r7, #16]
 8005492:	eeb0 0a67 	vmov.f32	s0, s15
 8005496:	f7ff fed1 	bl	800523c <calculatePower>
 800549a:	eef0 7a40 	vmov.f32	s15, s0
}
 800549e:	eeb0 0a67 	vmov.f32	s0, s15
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <dwEnableMode>:

void dwEnableMode(dwDeviceTypes_t *dev, const uint8_t mode[])
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
    dwSetDataRate(dev, mode[0]);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	4619      	mov	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff f9e9 	bl	8004890 <dwSetDataRate>
    dwSetPulseFrequency(dev, mode[1]);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	3301      	adds	r3, #1
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff fa63 	bl	8004992 <dwSetPulseFrequency>
    dwSetPreambleLength(dev, mode[2]);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	3302      	adds	r3, #2
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fa92 	bl	80049fe <dwSetPreambleLength>
    // TODO add channel and code to mode tuples
    // TODO add channel and code settings with checks (see Table 58)
    dwSetChannel(dev, dev->channel);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff fafa 	bl	8004adc <dwSetChannel>
    dwSetPreambleCode(dev, dev->preambleCode);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff fb11 	bl	8004b18 <dwSetPreambleCode>
}
 80054f6:	bf00      	nop
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <dwGetIndexDiff>:
    dwSetChannel(dev, dev->channel);
    dwSetPreambleCode(dev, dev->preambleCode);
}

float dwGetIndexDiff(dwDeviceTypes_t *dev)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	uint16_t fpIndex = (float)dwSpiRead16(dev, RX_TIME, FP_INDEX_SUB);
 8005508:	2205      	movs	r2, #5
 800550a:	2115      	movs	r1, #21
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f001 f869 	bl	80065e4 <dwSpiRead16>
 8005512:	4603      	mov	r3, r0
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005520:	ee17 3a90 	vmov	r3, s15
 8005524:	83fb      	strh	r3, [r7, #30]
	uint16_t fpInt = (float)(fpIndex >> 6);
 8005526:	8bfb      	ldrh	r3, [r7, #30]
 8005528:	099b      	lsrs	r3, r3, #6
 800552a:	b29b      	uxth	r3, r3
 800552c:	ee07 3a90 	vmov	s15, r3
 8005530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005538:	ee17 3a90 	vmov	r3, s15
 800553c:	83bb      	strh	r3, [r7, #28]
	uint16_t fpFrac = fpIndex & 0x3F;
 800553e:	8bfb      	ldrh	r3, [r7, #30]
 8005540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005544:	837b      	strh	r3, [r7, #26]
	float fpIndexDecimalValue = fpInt + (fpFrac / 64.0f);
 8005546:	8bbb      	ldrh	r3, [r7, #28]
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005550:	8b7b      	ldrh	r3, [r7, #26]
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800555a:	ed9f 6a18 	vldr	s12, [pc, #96]	; 80055bc <dwGetIndexDiff+0xbc>
 800555e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005566:	edc7 7a05 	vstr	s15, [r7, #20]
	float ppIndex = (float)dwSpiRead16(dev, LDE_IF, LDE_PPINDX_SUB);
 800556a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800556e:	212e      	movs	r1, #46	; 0x2e
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f001 f837 	bl	80065e4 <dwSpiRead16>
 8005576:	4603      	mov	r3, r0
 8005578:	ee07 3a90 	vmov	s15, r3
 800557c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005580:	edc7 7a04 	vstr	s15, [r7, #16]
    float iDiff = abs(fpIndexDecimalValue - ppIndex);
 8005584:	ed97 7a05 	vldr	s14, [r7, #20]
 8005588:	edd7 7a04 	vldr	s15, [r7, #16]
 800558c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005594:	ee17 3a90 	vmov	r3, s15
 8005598:	2b00      	cmp	r3, #0
 800559a:	bfb8      	it	lt
 800559c:	425b      	neglt	r3, r3
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055a6:	edc7 7a03 	vstr	s15, [r7, #12]
    return iDiff;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	ee07 3a90 	vmov	s15, r3
}
 80055b0:	eeb0 0a67 	vmov.f32	s0, s15
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	42800000 	.word	0x42800000

080055c0 <dwPrNlos>:

float dwPrNlos(dwDeviceTypes_t *dev)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	float iDiff = dwGetIndexDiff(dev);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff ff99 	bl	8005500 <dwGetIndexDiff>
 80055ce:	ed87 0a02 	vstr	s0, [r7, #8]
	float prNlos;
	if (iDiff <= 3.3)
 80055d2:	68b8      	ldr	r0, [r7, #8]
 80055d4:	f7fa ffb8 	bl	8000548 <__aeabi_f2d>
 80055d8:	a323      	add	r3, pc, #140	; (adr r3, 8005668 <dwPrNlos+0xa8>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f7fb fa87 	bl	8000af0 <__aeabi_dcmple>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <dwPrNlos+0x30>
		prNlos = 0.0;
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	e030      	b.n	8005652 <dwPrNlos+0x92>
	else if (iDiff < 6.0 && iDiff > 3.3)
 80055f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80055f4:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80055f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005600:	d524      	bpl.n	800564c <dwPrNlos+0x8c>
 8005602:	68b8      	ldr	r0, [r7, #8]
 8005604:	f7fa ffa0 	bl	8000548 <__aeabi_f2d>
 8005608:	a317      	add	r3, pc, #92	; (adr r3, 8005668 <dwPrNlos+0xa8>)
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	f7fb fa83 	bl	8000b18 <__aeabi_dcmpgt>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d019      	beq.n	800564c <dwPrNlos+0x8c>
		prNlos = 0.39178 * iDiff - 1.31719;
 8005618:	68b8      	ldr	r0, [r7, #8]
 800561a:	f7fa ff95 	bl	8000548 <__aeabi_f2d>
 800561e:	a314      	add	r3, pc, #80	; (adr r3, 8005670 <dwPrNlos+0xb0>)
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	f7fa ffe8 	bl	80005f8 <__aeabi_dmul>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4610      	mov	r0, r2
 800562e:	4619      	mov	r1, r3
 8005630:	a311      	add	r3, pc, #68	; (adr r3, 8005678 <dwPrNlos+0xb8>)
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	f7fa fe27 	bl	8000288 <__aeabi_dsub>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4610      	mov	r0, r2
 8005640:	4619      	mov	r1, r3
 8005642:	f7fb fad1 	bl	8000be8 <__aeabi_d2f>
 8005646:	4603      	mov	r3, r0
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	e002      	b.n	8005652 <dwPrNlos+0x92>
	else
		prNlos = 1.0;
 800564c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005650:	60fb      	str	r3, [r7, #12]
	return prNlos;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	ee07 3a90 	vmov	s15, r3
}
 8005658:	eeb0 0a67 	vmov.f32	s0, s15
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	f3af 8000 	nop.w
 8005668:	66666666 	.word	0x66666666
 800566c:	400a6666 	.word	0x400a6666
 8005670:	6bce8534 	.word	0x6bce8534
 8005674:	3fd912ec 	.word	0x3fd912ec
 8005678:	d249e450 	.word	0xd249e450
 800567c:	3ff51335 	.word	0x3ff51335

08005680 <dwGetMc>:

float dwGetMc(dwDeviceTypes_t *dev)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	float fpAm[3];
    fpAm[0] = (float)dwSpiRead16(dev, RX_TIME, FP_AMPL1_SUB);
 8005688:	2207      	movs	r2, #7
 800568a:	2115      	movs	r1, #21
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 ffa9 	bl	80065e4 <dwSpiRead16>
 8005692:	4603      	mov	r3, r0
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569c:	edc7 7a02 	vstr	s15, [r7, #8]
    fpAm[1] = (float)dwSpiRead16(dev, RX_FQUAL, FP_AMPL2_SUB);
 80056a0:	2202      	movs	r2, #2
 80056a2:	2112      	movs	r1, #18
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 ff9d 	bl	80065e4 <dwSpiRead16>
 80056aa:	4603      	mov	r3, r0
 80056ac:	ee07 3a90 	vmov	s15, r3
 80056b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b4:	edc7 7a03 	vstr	s15, [r7, #12]
    fpAm[2] = (float)dwSpiRead16(dev, RX_FQUAL, FP_AMPL3_SUB);
 80056b8:	2204      	movs	r2, #4
 80056ba:	2112      	movs	r1, #18
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 ff91 	bl	80065e4 <dwSpiRead16>
 80056c2:	4603      	mov	r3, r0
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056cc:	edc7 7a04 	vstr	s15, [r7, #16]
    float pkAm = (float)dwSpiRead16(dev, LDE_IF, LDE_PPAMPL_SUB);
 80056d0:	f241 0202 	movw	r2, #4098	; 0x1002
 80056d4:	212e      	movs	r1, #46	; 0x2e
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 ff84 	bl	80065e4 <dwSpiRead16>
 80056dc:	4603      	mov	r3, r0
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e6:	edc7 7a05 	vstr	s15, [r7, #20]
    float maxFpAm = fpAm[0];
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 3; i++)
 80056ee:	2300      	movs	r3, #0
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	e017      	b.n	8005724 <dwGetMc+0xa4>
    {
    	if (fpAm[i] > maxFpAm)
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	3320      	adds	r3, #32
 80056fa:	443b      	add	r3, r7
 80056fc:	3b18      	subs	r3, #24
 80056fe:	edd3 7a00 	vldr	s15, [r3]
 8005702:	ed97 7a07 	vldr	s14, [r7, #28]
 8005706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800570a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570e:	d506      	bpl.n	800571e <dwGetMc+0x9e>
    		maxFpAm = fpAm[i];
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	3320      	adds	r3, #32
 8005716:	443b      	add	r3, r7
 8005718:	3b18      	subs	r3, #24
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 3; i++)
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	3301      	adds	r3, #1
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	2b02      	cmp	r3, #2
 8005728:	dde4      	ble.n	80056f4 <dwGetMc+0x74>
    }
    return maxFpAm / pkAm;
 800572a:	ed97 7a07 	vldr	s14, [r7, #28]
 800572e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005732:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005736:	eef0 7a66 	vmov.f32	s15, s13
}
 800573a:	eeb0 0a67 	vmov.f32	s0, s15
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	0000      	movs	r0, r0
	...

08005748 <dwGetConfidenceLevel>:

float dwGetConfidenceLevel(dwDeviceTypes_t *dev, float *prNlos, float *mc)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
	*prNlos = dwPrNlos(dev);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff ff33 	bl	80055c0 <dwPrNlos>
 800575a:	eef0 7a40 	vmov.f32	s15, s0
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	edc3 7a00 	vstr	s15, [r3]
	*mc = dwGetMc(dev);
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f7ff ff8b 	bl	8005680 <dwGetMc>
 800576a:	eef0 7a40 	vmov.f32	s15, s0
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	edc3 7a00 	vstr	s15, [r3]

	if (*prNlos == 0.0 || *mc >= 0.9)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	edd3 7a00 	vldr	s15, [r3]
 800577a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800577e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005782:	d00c      	beq.n	800579e <dwGetConfidenceLevel+0x56>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f7fa fedd 	bl	8000548 <__aeabi_f2d>
 800578e:	a319      	add	r3, pc, #100	; (adr r3, 80057f4 <dwGetConfidenceLevel+0xac>)
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f7fb f9b6 	bl	8000b04 <__aeabi_dcmpge>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <dwGetConfidenceLevel+0x5c>
		return 1.0;
 800579e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80057a2:	e01e      	b.n	80057e2 <dwGetConfidenceLevel+0x9a>
	else if (*prNlos > 0 && *mc < 0.9)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	edd3 7a00 	vldr	s15, [r3]
 80057aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b2:	dd14      	ble.n	80057de <dwGetConfidenceLevel+0x96>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fa fec5 	bl	8000548 <__aeabi_f2d>
 80057be:	a30d      	add	r3, pc, #52	; (adr r3, 80057f4 <dwGetConfidenceLevel+0xac>)
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	f7fb f98a 	bl	8000adc <__aeabi_dcmplt>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <dwGetConfidenceLevel+0x96>
		return 1.0 - *prNlos;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	edd3 7a00 	vldr	s15, [r3]
 80057d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057dc:	e001      	b.n	80057e2 <dwGetConfidenceLevel+0x9a>
	else
		return 0.0;
 80057de:	eddf 7a04 	vldr	s15, [pc, #16]	; 80057f0 <dwGetConfidenceLevel+0xa8>
}
 80057e2:	eeb0 0a67 	vmov.f32	s0, s15
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	f3af 8000 	nop.w
 80057f0:	00000000 	.word	0x00000000
 80057f4:	cccccccd 	.word	0xcccccccd
 80057f8:	3feccccc 	.word	0x3feccccc

080057fc <dwTune>:

void dwTune(dwDeviceTypes_t *dev)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b098      	sub	sp, #96	; 0x60
 8005800:	af02      	add	r7, sp, #8
 8005802:	6078      	str	r0, [r7, #4]
    uint8_t tcpgdelay[LEN_TC_PGDELAY];
    uint8_t fspllcfg[LEN_FS_PLLCFG];
    uint8_t fsplltune[LEN_FS_PLLTUNE];
    uint8_t fsxtalt[LEN_FS_XTALT];
    // AGC_TUNE1
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800580a:	2b01      	cmp	r3, #1
 800580c:	d108      	bne.n	8005820 <dwTune+0x24>
    {
        writeValueToBytes(agctune1, 0x8870, LEN_AGC_TUNE1);
 800580e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005812:	2202      	movs	r2, #2
 8005814:	f648 0170 	movw	r1, #34928	; 0x8870
 8005818:	4618      	mov	r0, r3
 800581a:	f7fe fa6a 	bl	8003cf2 <writeValueToBytes>
 800581e:	e00c      	b.n	800583a <dwTune+0x3e>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005826:	2b02      	cmp	r3, #2
 8005828:	d107      	bne.n	800583a <dwTune+0x3e>
    {
        writeValueToBytes(agctune1, 0x889B, LEN_AGC_TUNE1);
 800582a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800582e:	2202      	movs	r2, #2
 8005830:	f648 019b 	movw	r1, #34971	; 0x889b
 8005834:	4618      	mov	r0, r3
 8005836:	f7fe fa5c 	bl	8003cf2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // AGC_TUNE2
    writeValueToBytes(agctune2, 0x2502A907L, LEN_AGC_TUNE2);
 800583a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800583e:	2204      	movs	r2, #4
 8005840:	49b9      	ldr	r1, [pc, #740]	; (8005b28 <dwTune+0x32c>)
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe fa55 	bl	8003cf2 <writeValueToBytes>
    // AGC_TUNE3
    writeValueToBytes(agctune3, 0x0035, LEN_AGC_TUNE3);
 8005848:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800584c:	2202      	movs	r2, #2
 800584e:	2135      	movs	r1, #53	; 0x35
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe fa4e 	bl	8003cf2 <writeValueToBytes>
    // DRX_TUNE0b (already optimized according to Table 20 of user manual)
    if (dev->dataRate == TRX_RATE_110KBPS)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800585c:	2b00      	cmp	r3, #0
 800585e:	d107      	bne.n	8005870 <dwTune+0x74>
    {
        writeValueToBytes(drxtune0b, 0x0016, LEN_DRX_TUNE0b);
 8005860:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005864:	2202      	movs	r2, #2
 8005866:	2116      	movs	r1, #22
 8005868:	4618      	mov	r0, r3
 800586a:	f7fe fa42 	bl	8003cf2 <writeValueToBytes>
 800586e:	e018      	b.n	80058a2 <dwTune+0xa6>
    }
    else if (dev->dataRate == TRX_RATE_850KBPS)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005876:	2b01      	cmp	r3, #1
 8005878:	d107      	bne.n	800588a <dwTune+0x8e>
    {
        writeValueToBytes(drxtune0b, 0x0006, LEN_DRX_TUNE0b);
 800587a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800587e:	2202      	movs	r2, #2
 8005880:	2106      	movs	r1, #6
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fa35 	bl	8003cf2 <writeValueToBytes>
 8005888:	e00b      	b.n	80058a2 <dwTune+0xa6>
    }
    else if (dev->dataRate == TRX_RATE_6800KBPS)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005890:	2b02      	cmp	r3, #2
 8005892:	d106      	bne.n	80058a2 <dwTune+0xa6>
    {
        writeValueToBytes(drxtune0b, 0x0001, LEN_DRX_TUNE0b);
 8005894:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005898:	2202      	movs	r2, #2
 800589a:	2101      	movs	r1, #1
 800589c:	4618      	mov	r0, r3
 800589e:	f7fe fa28 	bl	8003cf2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE1a
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d107      	bne.n	80058bc <dwTune+0xc0>
    {
        writeValueToBytes(drxtune1a, 0x0087, LEN_DRX_TUNE1a);
 80058ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80058b0:	2202      	movs	r2, #2
 80058b2:	2187      	movs	r1, #135	; 0x87
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe fa1c 	bl	8003cf2 <writeValueToBytes>
 80058ba:	e00b      	b.n	80058d4 <dwTune+0xd8>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d106      	bne.n	80058d4 <dwTune+0xd8>
    {
        writeValueToBytes(drxtune1a, 0x008D, LEN_DRX_TUNE1a);
 80058c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80058ca:	2202      	movs	r2, #2
 80058cc:	218d      	movs	r1, #141	; 0x8d
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe fa0f 	bl	8003cf2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE1b
    if (dev->preambleLength == TX_PREAMBLE_LEN_1536 || dev->preambleLength == TX_PREAMBLE_LEN_2048 ||
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80058da:	2b06      	cmp	r3, #6
 80058dc:	d009      	beq.n	80058f2 <dwTune+0xf6>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80058e4:	2b0a      	cmp	r3, #10
 80058e6:	d004      	beq.n	80058f2 <dwTune+0xf6>
        dev->preambleLength == TX_PREAMBLE_LEN_4096)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    if (dev->preambleLength == TX_PREAMBLE_LEN_1536 || dev->preambleLength == TX_PREAMBLE_LEN_2048 ||
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d10c      	bne.n	800590c <dwTune+0x110>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d12a      	bne.n	8005952 <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0064, LEN_DRX_TUNE1b);
 80058fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005900:	2202      	movs	r2, #2
 8005902:	2164      	movs	r1, #100	; 0x64
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe f9f4 	bl	8003cf2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 800590a:	e022      	b.n	8005952 <dwTune+0x156>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->preambleLength != TX_PREAMBLE_LEN_64)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005912:	2b01      	cmp	r3, #1
 8005914:	d011      	beq.n	800593a <dwTune+0x13e>
    {
        if (dev->dataRate == TRX_RATE_850KBPS || dev->dataRate == TRX_RATE_6800KBPS)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800591c:	2b01      	cmp	r3, #1
 800591e:	d004      	beq.n	800592a <dwTune+0x12e>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005926:	2b02      	cmp	r3, #2
 8005928:	d113      	bne.n	8005952 <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0020, LEN_DRX_TUNE1b);
 800592a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800592e:	2202      	movs	r2, #2
 8005930:	2120      	movs	r1, #32
 8005932:	4618      	mov	r0, r3
 8005934:	f7fe f9dd 	bl	8003cf2 <writeValueToBytes>
 8005938:	e00b      	b.n	8005952 <dwTune+0x156>
            // TODO proper error/warning handling
        }
    }
    else
    {
        if (dev->dataRate == TRX_RATE_6800KBPS)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005940:	2b02      	cmp	r3, #2
 8005942:	d106      	bne.n	8005952 <dwTune+0x156>
        {
            writeValueToBytes(drxtune1b, 0x0010, LEN_DRX_TUNE1b);
 8005944:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005948:	2202      	movs	r2, #2
 800594a:	2110      	movs	r1, #16
 800594c:	4618      	mov	r0, r3
 800594e:	f7fe f9d0 	bl	8003cf2 <writeValueToBytes>
        {
            // TODO proper error/warning handling
        }
    }
    // DRX_TUNE2
    if (dev->pacSize == PAC_SIZE_8)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005958:	2b08      	cmp	r3, #8
 800595a:	d119      	bne.n	8005990 <dwTune+0x194>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005962:	2b01      	cmp	r3, #1
 8005964:	d107      	bne.n	8005976 <dwTune+0x17a>
        {
            writeValueToBytes(drxtune2, 0x311A002DL, LEN_DRX_TUNE2);
 8005966:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800596a:	2204      	movs	r2, #4
 800596c:	496f      	ldr	r1, [pc, #444]	; (8005b2c <dwTune+0x330>)
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe f9bf 	bl	8003cf2 <writeValueToBytes>
 8005974:	e068      	b.n	8005a48 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800597c:	2b02      	cmp	r3, #2
 800597e:	d163      	bne.n	8005a48 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x313B006BL, LEN_DRX_TUNE2);
 8005980:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005984:	2204      	movs	r2, #4
 8005986:	496a      	ldr	r1, [pc, #424]	; (8005b30 <dwTune+0x334>)
 8005988:	4618      	mov	r0, r3
 800598a:	f7fe f9b2 	bl	8003cf2 <writeValueToBytes>
 800598e:	e05b      	b.n	8005a48 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_16)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005996:	2b10      	cmp	r3, #16
 8005998:	d119      	bne.n	80059ce <dwTune+0x1d2>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d107      	bne.n	80059b4 <dwTune+0x1b8>
        {
            writeValueToBytes(drxtune2, 0x331A0052L, LEN_DRX_TUNE2);
 80059a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80059a8:	2204      	movs	r2, #4
 80059aa:	4962      	ldr	r1, [pc, #392]	; (8005b34 <dwTune+0x338>)
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fe f9a0 	bl	8003cf2 <writeValueToBytes>
 80059b2:	e049      	b.n	8005a48 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d144      	bne.n	8005a48 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x333B00BEL, LEN_DRX_TUNE2);
 80059be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80059c2:	2204      	movs	r2, #4
 80059c4:	495c      	ldr	r1, [pc, #368]	; (8005b38 <dwTune+0x33c>)
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe f993 	bl	8003cf2 <writeValueToBytes>
 80059cc:	e03c      	b.n	8005a48 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_32)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d119      	bne.n	8005a0c <dwTune+0x210>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d107      	bne.n	80059f2 <dwTune+0x1f6>
        {
            writeValueToBytes(drxtune2, 0x351A009AL, LEN_DRX_TUNE2);
 80059e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80059e6:	2204      	movs	r2, #4
 80059e8:	4954      	ldr	r1, [pc, #336]	; (8005b3c <dwTune+0x340>)
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe f981 	bl	8003cf2 <writeValueToBytes>
 80059f0:	e02a      	b.n	8005a48 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d125      	bne.n	8005a48 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x353B015EL, LEN_DRX_TUNE2);
 80059fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a00:	2204      	movs	r2, #4
 8005a02:	494f      	ldr	r1, [pc, #316]	; (8005b40 <dwTune+0x344>)
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fe f974 	bl	8003cf2 <writeValueToBytes>
 8005a0a:	e01d      	b.n	8005a48 <dwTune+0x24c>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->pacSize == PAC_SIZE_64)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a12:	2b40      	cmp	r3, #64	; 0x40
 8005a14:	d118      	bne.n	8005a48 <dwTune+0x24c>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d107      	bne.n	8005a30 <dwTune+0x234>
        {
            writeValueToBytes(drxtune2, 0x371A011DL, LEN_DRX_TUNE2);
 8005a20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a24:	2204      	movs	r2, #4
 8005a26:	4947      	ldr	r1, [pc, #284]	; (8005b44 <dwTune+0x348>)
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe f962 	bl	8003cf2 <writeValueToBytes>
 8005a2e:	e00b      	b.n	8005a48 <dwTune+0x24c>
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d106      	bne.n	8005a48 <dwTune+0x24c>
        {
            writeValueToBytes(drxtune2, 0x373B0296L, LEN_DRX_TUNE2);
 8005a3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a3e:	2204      	movs	r2, #4
 8005a40:	4941      	ldr	r1, [pc, #260]	; (8005b48 <dwTune+0x34c>)
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fe f955 	bl	8003cf2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // DRX_TUNE4H
    if (dev->preambleLength == TX_PREAMBLE_LEN_64)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d107      	bne.n	8005a62 <dwTune+0x266>
    {
        writeValueToBytes(drxtune4H, 0x0010, LEN_DRX_TUNE4H);
 8005a52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a56:	2202      	movs	r2, #2
 8005a58:	2110      	movs	r1, #16
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe f949 	bl	8003cf2 <writeValueToBytes>
 8005a60:	e006      	b.n	8005a70 <dwTune+0x274>
    }
    else
    {
        writeValueToBytes(drxtune4H, 0x0028, LEN_DRX_TUNE4H);
 8005a62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a66:	2202      	movs	r2, #2
 8005a68:	2128      	movs	r1, #40	; 0x28
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe f941 	bl	8003cf2 <writeValueToBytes>
    }
    // RF_RXCTRLH
    if (dev->channel != CHANNEL_4 && dev->channel != CHANNEL_7)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d00c      	beq.n	8005a94 <dwTune+0x298>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a80:	2b07      	cmp	r3, #7
 8005a82:	d007      	beq.n	8005a94 <dwTune+0x298>
    {
        writeValueToBytes(rfrxctrlh, 0xD8, LEN_RF_RXCTRLH);
 8005a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a88:	2201      	movs	r2, #1
 8005a8a:	21d8      	movs	r1, #216	; 0xd8
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fe f930 	bl	8003cf2 <writeValueToBytes>
 8005a92:	e006      	b.n	8005aa2 <dwTune+0x2a6>
    }
    else
    {
        writeValueToBytes(rfrxctrlh, 0xBC, LEN_RF_RXCTRLH);
 8005a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a98:	2201      	movs	r2, #1
 8005a9a:	21bc      	movs	r1, #188	; 0xbc
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe f928 	bl	8003cf2 <writeValueToBytes>
    }
    // RX_TXCTRL
    if (dev->channel == CHANNEL_1)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d108      	bne.n	8005abe <dwTune+0x2c2>
    {
        writeValueToBytes(rftxctrl, 0x00005C40L, LEN_RF_TXCTRL);
 8005aac:	f107 0320 	add.w	r3, r7, #32
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	f645 4140 	movw	r1, #23616	; 0x5c40
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe f91b 	bl	8003cf2 <writeValueToBytes>
 8005abc:	e05a      	b.n	8005b74 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_2)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d107      	bne.n	8005ad8 <dwTune+0x2dc>
    {
        writeValueToBytes(rftxctrl, 0x00045CA0L, LEN_RF_TXCTRL);
 8005ac8:	f107 0320 	add.w	r3, r7, #32
 8005acc:	2204      	movs	r2, #4
 8005ace:	491f      	ldr	r1, [pc, #124]	; (8005b4c <dwTune+0x350>)
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fe f90e 	bl	8003cf2 <writeValueToBytes>
 8005ad6:	e04d      	b.n	8005b74 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_3)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d107      	bne.n	8005af2 <dwTune+0x2f6>
    {
        writeValueToBytes(rftxctrl, 0x00086CC0L, LEN_RF_TXCTRL);
 8005ae2:	f107 0320 	add.w	r3, r7, #32
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	4919      	ldr	r1, [pc, #100]	; (8005b50 <dwTune+0x354>)
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fe f901 	bl	8003cf2 <writeValueToBytes>
 8005af0:	e040      	b.n	8005b74 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_4)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d107      	bne.n	8005b0c <dwTune+0x310>
    {
        writeValueToBytes(rftxctrl, 0x00045C80L, LEN_RF_TXCTRL);
 8005afc:	f107 0320 	add.w	r3, r7, #32
 8005b00:	2204      	movs	r2, #4
 8005b02:	4914      	ldr	r1, [pc, #80]	; (8005b54 <dwTune+0x358>)
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe f8f4 	bl	8003cf2 <writeValueToBytes>
 8005b0a:	e033      	b.n	8005b74 <dwTune+0x378>
    }
    else if (dev->channel == CHANNEL_5)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b12:	2b05      	cmp	r3, #5
 8005b14:	d122      	bne.n	8005b5c <dwTune+0x360>
    {
        writeValueToBytes(rftxctrl, 0x001E3FE0L, LEN_RF_TXCTRL);
 8005b16:	f107 0320 	add.w	r3, r7, #32
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	490e      	ldr	r1, [pc, #56]	; (8005b58 <dwTune+0x35c>)
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe f8e7 	bl	8003cf2 <writeValueToBytes>
 8005b24:	e026      	b.n	8005b74 <dwTune+0x378>
 8005b26:	bf00      	nop
 8005b28:	2502a907 	.word	0x2502a907
 8005b2c:	311a002d 	.word	0x311a002d
 8005b30:	313b006b 	.word	0x313b006b
 8005b34:	331a0052 	.word	0x331a0052
 8005b38:	333b00be 	.word	0x333b00be
 8005b3c:	351a009a 	.word	0x351a009a
 8005b40:	353b015e 	.word	0x353b015e
 8005b44:	371a011d 	.word	0x371a011d
 8005b48:	373b0296 	.word	0x373b0296
 8005b4c:	00045ca0 	.word	0x00045ca0
 8005b50:	00086cc0 	.word	0x00086cc0
 8005b54:	00045c80 	.word	0x00045c80
 8005b58:	001e3fe0 	.word	0x001e3fe0
    }
    else if (dev->channel == CHANNEL_7)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b62:	2b07      	cmp	r3, #7
 8005b64:	d106      	bne.n	8005b74 <dwTune+0x378>
    {
        writeValueToBytes(rftxctrl, 0x001E7DE0L, LEN_RF_TXCTRL);
 8005b66:	f107 0320 	add.w	r3, r7, #32
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	49be      	ldr	r1, [pc, #760]	; (8005e68 <dwTune+0x66c>)
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe f8bf 	bl	8003cf2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // TC_PGDELAY
    if (dev->channel == CHANNEL_1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d107      	bne.n	8005b8e <dwTune+0x392>
    {
        writeValueToBytes(tcpgdelay, 0xC9, LEN_TC_PGDELAY);
 8005b7e:	f107 031c 	add.w	r3, r7, #28
 8005b82:	2201      	movs	r2, #1
 8005b84:	21c9      	movs	r1, #201	; 0xc9
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe f8b3 	bl	8003cf2 <writeValueToBytes>
 8005b8c:	e03f      	b.n	8005c0e <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_2)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d107      	bne.n	8005ba8 <dwTune+0x3ac>
    {
        writeValueToBytes(tcpgdelay, 0xC2, LEN_TC_PGDELAY);
 8005b98:	f107 031c 	add.w	r3, r7, #28
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	21c2      	movs	r1, #194	; 0xc2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fe f8a6 	bl	8003cf2 <writeValueToBytes>
 8005ba6:	e032      	b.n	8005c0e <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_3)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d107      	bne.n	8005bc2 <dwTune+0x3c6>
    {
        writeValueToBytes(tcpgdelay, 0xC5, LEN_TC_PGDELAY);
 8005bb2:	f107 031c 	add.w	r3, r7, #28
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	21c5      	movs	r1, #197	; 0xc5
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe f899 	bl	8003cf2 <writeValueToBytes>
 8005bc0:	e025      	b.n	8005c0e <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_4)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d107      	bne.n	8005bdc <dwTune+0x3e0>
    {
        writeValueToBytes(tcpgdelay, 0x95, LEN_TC_PGDELAY);
 8005bcc:	f107 031c 	add.w	r3, r7, #28
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	2195      	movs	r1, #149	; 0x95
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fe f88c 	bl	8003cf2 <writeValueToBytes>
 8005bda:	e018      	b.n	8005c0e <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_5)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005be2:	2b05      	cmp	r3, #5
 8005be4:	d107      	bne.n	8005bf6 <dwTune+0x3fa>
    {
        writeValueToBytes(tcpgdelay, 0xC0, LEN_TC_PGDELAY);
 8005be6:	f107 031c 	add.w	r3, r7, #28
 8005bea:	2201      	movs	r2, #1
 8005bec:	21c0      	movs	r1, #192	; 0xc0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe f87f 	bl	8003cf2 <writeValueToBytes>
 8005bf4:	e00b      	b.n	8005c0e <dwTune+0x412>
    }
    else if (dev->channel == CHANNEL_7)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005bfc:	2b07      	cmp	r3, #7
 8005bfe:	d106      	bne.n	8005c0e <dwTune+0x412>
    {
        writeValueToBytes(tcpgdelay, 0x93, LEN_TC_PGDELAY);
 8005c00:	f107 031c 	add.w	r3, r7, #28
 8005c04:	2201      	movs	r2, #1
 8005c06:	2193      	movs	r1, #147	; 0x93
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe f872 	bl	8003cf2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // FS_PLLCFG and FS_PLLTUNE
    if (dev->channel == CHANNEL_1)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d10e      	bne.n	8005c36 <dwTune+0x43a>
    {
        writeValueToBytes(fspllcfg, 0x09000407L, LEN_FS_PLLCFG);
 8005c18:	f107 0318 	add.w	r3, r7, #24
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	4993      	ldr	r1, [pc, #588]	; (8005e6c <dwTune+0x670>)
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe f866 	bl	8003cf2 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x1E, LEN_FS_PLLTUNE);
 8005c26:	f107 0314 	add.w	r3, r7, #20
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	211e      	movs	r1, #30
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe f85f 	bl	8003cf2 <writeValueToBytes>
 8005c34:	e044      	b.n	8005cc0 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_2 || dev->channel == CHANNEL_4)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d004      	beq.n	8005c4a <dwTune+0x44e>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d10e      	bne.n	8005c68 <dwTune+0x46c>
    {
        writeValueToBytes(fspllcfg, 0x08400508L, LEN_FS_PLLCFG);
 8005c4a:	f107 0318 	add.w	r3, r7, #24
 8005c4e:	2204      	movs	r2, #4
 8005c50:	4987      	ldr	r1, [pc, #540]	; (8005e70 <dwTune+0x674>)
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe f84d 	bl	8003cf2 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x26, LEN_FS_PLLTUNE);
 8005c58:	f107 0314 	add.w	r3, r7, #20
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	2126      	movs	r1, #38	; 0x26
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe f846 	bl	8003cf2 <writeValueToBytes>
 8005c66:	e02b      	b.n	8005cc0 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_3)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d10e      	bne.n	8005c90 <dwTune+0x494>
    {
        writeValueToBytes(fspllcfg, 0x08401009L, LEN_FS_PLLCFG);
 8005c72:	f107 0318 	add.w	r3, r7, #24
 8005c76:	2204      	movs	r2, #4
 8005c78:	497e      	ldr	r1, [pc, #504]	; (8005e74 <dwTune+0x678>)
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe f839 	bl	8003cf2 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0x56, LEN_FS_PLLTUNE);
 8005c80:	f107 0314 	add.w	r3, r7, #20
 8005c84:	2201      	movs	r2, #1
 8005c86:	2156      	movs	r1, #86	; 0x56
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fe f832 	bl	8003cf2 <writeValueToBytes>
 8005c8e:	e017      	b.n	8005cc0 <dwTune+0x4c4>
    }
    else if (dev->channel == CHANNEL_5 || dev->channel == CHANNEL_7)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c96:	2b05      	cmp	r3, #5
 8005c98:	d004      	beq.n	8005ca4 <dwTune+0x4a8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005ca0:	2b07      	cmp	r3, #7
 8005ca2:	d10d      	bne.n	8005cc0 <dwTune+0x4c4>
    {
        writeValueToBytes(fspllcfg, 0x0800041DL, LEN_FS_PLLCFG);
 8005ca4:	f107 0318 	add.w	r3, r7, #24
 8005ca8:	2204      	movs	r2, #4
 8005caa:	4973      	ldr	r1, [pc, #460]	; (8005e78 <dwTune+0x67c>)
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fe f820 	bl	8003cf2 <writeValueToBytes>
        writeValueToBytes(fsplltune, 0xA6, LEN_FS_PLLTUNE);
 8005cb2:	f107 0314 	add.w	r3, r7, #20
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	21a6      	movs	r1, #166	; 0xa6
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe f819 	bl	8003cf2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // LDE_CFG1
    writeValueToBytes(ldecfg1, 0xD, LEN_LDE_CFG1);
 8005cc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	210d      	movs	r1, #13
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fe f812 	bl	8003cf2 <writeValueToBytes>
    // LDE_CFG2
    if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d108      	bne.n	8005cea <dwTune+0x4ee>
    {
        writeValueToBytes(ldecfg2, 0x1607, LEN_LDE_CFG2);
 8005cd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cdc:	2202      	movs	r2, #2
 8005cde:	f241 6107 	movw	r1, #5639	; 0x1607
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe f805 	bl	8003cf2 <writeValueToBytes>
 8005ce8:	e00c      	b.n	8005d04 <dwTune+0x508>
    }
    else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d107      	bne.n	8005d04 <dwTune+0x508>
    {
        writeValueToBytes(ldecfg2, 0x0607, LEN_LDE_CFG2);
 8005cf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f240 6107 	movw	r1, #1543	; 0x607
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fd fff7 	bl	8003cf2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // LDE_REPC
    if (dev->preambleCode == PREAMBLE_CODE_16MHZ_1 || dev->preambleCode == PREAMBLE_CODE_16MHZ_2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d004      	beq.n	8005d18 <dwTune+0x51c>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d116      	bne.n	8005d46 <dwTune+0x54a>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d108      	bne.n	8005d34 <dwTune+0x538>
        {
            writeValueToBytes(lderepc, ((0x5998 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d26:	2202      	movs	r2, #2
 8005d28:	f640 3133 	movw	r1, #2867	; 0xb33
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fd ffe0 	bl	8003cf2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005d32:	e154      	b.n	8005fde <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x5998, LEN_LDE_REPC);
 8005d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d38:	2202      	movs	r2, #2
 8005d3a:	f645 1198 	movw	r1, #22936	; 0x5998
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fd ffd7 	bl	8003cf2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005d44:	e14b      	b.n	8005fde <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_3 || dev->preambleCode == PREAMBLE_CODE_16MHZ_8)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d004      	beq.n	8005d5a <dwTune+0x55e>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d116      	bne.n	8005d88 <dwTune+0x58c>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d108      	bne.n	8005d76 <dwTune+0x57a>
        {
            writeValueToBytes(lderepc, ((0x51EA >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f640 213d 	movw	r1, #2621	; 0xa3d
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fd ffbf 	bl	8003cf2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005d74:	e133      	b.n	8005fde <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x51EA, LEN_LDE_REPC);
 8005d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f245 11ea 	movw	r1, #20970	; 0x51ea
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fd ffb6 	bl	8003cf2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005d86:	e12a      	b.n	8005fde <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_4)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d116      	bne.n	8005dc0 <dwTune+0x5c4>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d108      	bne.n	8005dae <dwTune+0x5b2>
        {
            writeValueToBytes(lderepc, ((0x428E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005da0:	2202      	movs	r2, #2
 8005da2:	f640 0151 	movw	r1, #2129	; 0x851
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fd ffa3 	bl	8003cf2 <writeValueToBytes>
 8005dac:	e117      	b.n	8005fde <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x428E, LEN_LDE_REPC);
 8005dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005db2:	2202      	movs	r2, #2
 8005db4:	f244 218e 	movw	r1, #17038	; 0x428e
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fd ff9a 	bl	8003cf2 <writeValueToBytes>
 8005dbe:	e10e      	b.n	8005fde <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_5)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dc6:	2b05      	cmp	r3, #5
 8005dc8:	d116      	bne.n	8005df8 <dwTune+0x5fc>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d108      	bne.n	8005de6 <dwTune+0x5ea>
        {
            writeValueToBytes(lderepc, ((0x451E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005dd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dd8:	2202      	movs	r2, #2
 8005dda:	f640 01a3 	movw	r1, #2211	; 0x8a3
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fd ff87 	bl	8003cf2 <writeValueToBytes>
 8005de4:	e0fb      	b.n	8005fde <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x451E, LEN_LDE_REPC);
 8005de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dea:	2202      	movs	r2, #2
 8005dec:	f244 511e 	movw	r1, #17694	; 0x451e
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fd ff7e 	bl	8003cf2 <writeValueToBytes>
 8005df6:	e0f2      	b.n	8005fde <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_6)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dfe:	2b06      	cmp	r3, #6
 8005e00:	d116      	bne.n	8005e30 <dwTune+0x634>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d108      	bne.n	8005e1e <dwTune+0x622>
        {
            writeValueToBytes(lderepc, ((0x2E14 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e10:	2202      	movs	r2, #2
 8005e12:	f240 51c2 	movw	r1, #1474	; 0x5c2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fd ff6b 	bl	8003cf2 <writeValueToBytes>
 8005e1c:	e0df      	b.n	8005fde <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x2E14, LEN_LDE_REPC);
 8005e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e22:	2202      	movs	r2, #2
 8005e24:	f642 6114 	movw	r1, #11796	; 0x2e14
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fd ff62 	bl	8003cf2 <writeValueToBytes>
 8005e2e:	e0d6      	b.n	8005fde <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_16MHZ_7)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e36:	2b07      	cmp	r3, #7
 8005e38:	d120      	bne.n	8005e7c <dwTune+0x680>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d108      	bne.n	8005e56 <dwTune+0x65a>
        {
            writeValueToBytes(lderepc, ((0x8000 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e48:	2202      	movs	r2, #2
 8005e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fd ff4f 	bl	8003cf2 <writeValueToBytes>
 8005e54:	e0c3      	b.n	8005fde <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x8000, LEN_LDE_REPC);
 8005e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fd ff46 	bl	8003cf2 <writeValueToBytes>
 8005e66:	e0ba      	b.n	8005fde <dwTune+0x7e2>
 8005e68:	001e7de0 	.word	0x001e7de0
 8005e6c:	09000407 	.word	0x09000407
 8005e70:	08400508 	.word	0x08400508
 8005e74:	08401009 	.word	0x08401009
 8005e78:	0800041d 	.word	0x0800041d
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_9)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e82:	2b09      	cmp	r3, #9
 8005e84:	d116      	bne.n	8005eb4 <dwTune+0x6b8>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d108      	bne.n	8005ea2 <dwTune+0x6a6>
        {
            writeValueToBytes(lderepc, ((0x28F4 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e94:	2202      	movs	r2, #2
 8005e96:	f240 511e 	movw	r1, #1310	; 0x51e
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fd ff29 	bl	8003cf2 <writeValueToBytes>
 8005ea0:	e09d      	b.n	8005fde <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x28F4, LEN_LDE_REPC);
 8005ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f642 01f4 	movw	r1, #10484	; 0x28f4
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fd ff20 	bl	8003cf2 <writeValueToBytes>
 8005eb2:	e094      	b.n	8005fde <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_10 || dev->preambleCode == PREAMBLE_CODE_64MHZ_17)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005eba:	2b0a      	cmp	r3, #10
 8005ebc:	d004      	beq.n	8005ec8 <dwTune+0x6cc>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ec4:	2b11      	cmp	r3, #17
 8005ec6:	d116      	bne.n	8005ef6 <dwTune+0x6fa>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d108      	bne.n	8005ee4 <dwTune+0x6e8>
        {
            writeValueToBytes(lderepc, ((0x3332 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005ed2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f240 6166 	movw	r1, #1638	; 0x666
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fd ff08 	bl	8003cf2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005ee2:	e07c      	b.n	8005fde <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3332, LEN_LDE_REPC);
 8005ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f243 3132 	movw	r1, #13106	; 0x3332
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fd feff 	bl	8003cf2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005ef4:	e073      	b.n	8005fde <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_11)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005efc:	2b0b      	cmp	r3, #11
 8005efe:	d116      	bne.n	8005f2e <dwTune+0x732>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d108      	bne.n	8005f1c <dwTune+0x720>
        {
            writeValueToBytes(lderepc, ((0x3AE0 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f240 715c 	movw	r1, #1884	; 0x75c
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fd feec 	bl	8003cf2 <writeValueToBytes>
 8005f1a:	e060      	b.n	8005fde <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3AE0, LEN_LDE_REPC);
 8005f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f20:	2202      	movs	r2, #2
 8005f22:	f643 21e0 	movw	r1, #15072	; 0x3ae0
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fd fee3 	bl	8003cf2 <writeValueToBytes>
 8005f2c:	e057      	b.n	8005fde <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_12)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f34:	2b0c      	cmp	r3, #12
 8005f36:	d116      	bne.n	8005f66 <dwTune+0x76a>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d108      	bne.n	8005f54 <dwTune+0x758>
        {
            writeValueToBytes(lderepc, ((0x3D70 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f46:	2202      	movs	r2, #2
 8005f48:	f240 71ae 	movw	r1, #1966	; 0x7ae
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fd fed0 	bl	8003cf2 <writeValueToBytes>
 8005f52:	e044      	b.n	8005fde <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x3D70, LEN_LDE_REPC);
 8005f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f643 5170 	movw	r1, #15728	; 0x3d70
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fd fec7 	bl	8003cf2 <writeValueToBytes>
 8005f64:	e03b      	b.n	8005fde <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_18 || dev->preambleCode == PREAMBLE_CODE_64MHZ_19)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f6c:	2b12      	cmp	r3, #18
 8005f6e:	d004      	beq.n	8005f7a <dwTune+0x77e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f76:	2b13      	cmp	r3, #19
 8005f78:	d116      	bne.n	8005fa8 <dwTune+0x7ac>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d108      	bne.n	8005f96 <dwTune+0x79a>
        {
            writeValueToBytes(lderepc, ((0x35C2 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fd feaf 	bl	8003cf2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005f94:	e023      	b.n	8005fde <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x35C2, LEN_LDE_REPC);
 8005f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f243 51c2 	movw	r1, #13762	; 0x35c2
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fd fea6 	bl	8003cf2 <writeValueToBytes>
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005fa6:	e01a      	b.n	8005fde <dwTune+0x7e2>
        }
    }
    else if (dev->preambleCode == PREAMBLE_CODE_64MHZ_20)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fae:	2b14      	cmp	r3, #20
 8005fb0:	d115      	bne.n	8005fde <dwTune+0x7e2>
    {
        if (dev->dataRate == TRX_RATE_110KBPS)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d108      	bne.n	8005fce <dwTune+0x7d2>
        {
            writeValueToBytes(lderepc, ((0x47AE >> 3) & 0xFFFF), LEN_LDE_REPC);
 8005fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f640 01f5 	movw	r1, #2293	; 0x8f5
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fd fe93 	bl	8003cf2 <writeValueToBytes>
 8005fcc:	e007      	b.n	8005fde <dwTune+0x7e2>
        }
        else
        {
            writeValueToBytes(lderepc, 0x47AE, LEN_LDE_REPC);
 8005fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f244 71ae 	movw	r1, #18350	; 0x47ae
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fd fe8a 	bl	8003cf2 <writeValueToBytes>
    else
    {
        // TODO proper error/warning handling
    }
    // TX_POWER (enabled smart transmit power control)
    if (dev->forceTxPower)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d009      	beq.n	8005ffc <dwTune+0x800>
    {
        writeValueToBytes(txpower, dev->txPower, LEN_TX_POWER);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fec:	4619      	mov	r1, r3
 8005fee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ff2:	2204      	movs	r2, #4
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fd fe7c 	bl	8003cf2 <writeValueToBytes>
 8005ffa:	e131      	b.n	8006260 <dwTune+0xa64>
    }
    else if (dev->channel == CHANNEL_1 || dev->channel == CHANNEL_2)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006002:	2b01      	cmp	r3, #1
 8006004:	d004      	beq.n	8006010 <dwTune+0x814>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800600c:	2b02      	cmp	r3, #2
 800600e:	d138      	bne.n	8006082 <dwTune+0x886>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006016:	2b01      	cmp	r3, #1
 8006018:	d116      	bne.n	8006048 <dwTune+0x84c>
        {
            if (dev->smartPower)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006020:	2b00      	cmp	r3, #0
 8006022:	d008      	beq.n	8006036 <dwTune+0x83a>
            {
                writeValueToBytes(txpower, 0x1F1F1F1FL, LEN_TX_POWER);
 8006024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006028:	2204      	movs	r2, #4
 800602a:	f04f 311f 	mov.w	r1, #522133279	; 0x1f1f1f1f
 800602e:	4618      	mov	r0, r3
 8006030:	f7fd fe5f 	bl	8003cf2 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8006034:	e113      	b.n	800625e <dwTune+0xa62>
            }
            else
            {
                writeValueToBytes(txpower, 0x75757575L, LEN_TX_POWER);
 8006036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800603a:	2204      	movs	r2, #4
 800603c:	f04f 3175 	mov.w	r1, #1970632053	; 0x75757575
 8006040:	4618      	mov	r0, r3
 8006042:	f7fd fe56 	bl	8003cf2 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8006046:	e10a      	b.n	800625e <dwTune+0xa62>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800604e:	2b02      	cmp	r3, #2
 8006050:	f040 8105 	bne.w	800625e <dwTune+0xa62>
        {
            if (dev->smartPower)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800605a:	2b00      	cmp	r3, #0
 800605c:	d008      	beq.n	8006070 <dwTune+0x874>
            {
                writeValueToBytes(txpower, 0x1F1F1F1FL, LEN_TX_POWER);
 800605e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006062:	2204      	movs	r2, #4
 8006064:	f04f 311f 	mov.w	r1, #522133279	; 0x1f1f1f1f
 8006068:	4618      	mov	r0, r3
 800606a:	f7fd fe42 	bl	8003cf2 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800606e:	e0f6      	b.n	800625e <dwTune+0xa62>
            }
            else
            {
                writeValueToBytes(txpower, 0x67676767L, LEN_TX_POWER);
 8006070:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006074:	2204      	movs	r2, #4
 8006076:	f04f 3167 	mov.w	r1, #1734829927	; 0x67676767
 800607a:	4618      	mov	r0, r3
 800607c:	f7fd fe39 	bl	8003cf2 <writeValueToBytes>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8006080:	e0ed      	b.n	800625e <dwTune+0xa62>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_3)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006088:	2b03      	cmp	r3, #3
 800608a:	d136      	bne.n	80060fa <dwTune+0x8fe>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006092:	2b01      	cmp	r3, #1
 8006094:	d115      	bne.n	80060c2 <dwTune+0x8c6>
        {
            if (dev->smartPower)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800609c:	2b00      	cmp	r3, #0
 800609e:	d007      	beq.n	80060b0 <dwTune+0x8b4>
            {
                writeValueToBytes(txpower, 0x0F2F4F6FL, LEN_TX_POWER);
 80060a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060a4:	2204      	movs	r2, #4
 80060a6:	4977      	ldr	r1, [pc, #476]	; (8006284 <dwTune+0xa88>)
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fd fe22 	bl	8003cf2 <writeValueToBytes>
 80060ae:	e0d7      	b.n	8006260 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0x6F6F6F6FL, LEN_TX_POWER);
 80060b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060b4:	2204      	movs	r2, #4
 80060b6:	f04f 316f 	mov.w	r1, #1869573999	; 0x6f6f6f6f
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fd fe19 	bl	8003cf2 <writeValueToBytes>
 80060c0:	e0ce      	b.n	8006260 <dwTune+0xa64>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	f040 80c9 	bne.w	8006260 <dwTune+0xa64>
        {
            if (dev->smartPower)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d007      	beq.n	80060e8 <dwTune+0x8ec>
            {
                writeValueToBytes(txpower, 0x2B4B6B8BL, LEN_TX_POWER);
 80060d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060dc:	2204      	movs	r2, #4
 80060de:	496a      	ldr	r1, [pc, #424]	; (8006288 <dwTune+0xa8c>)
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fd fe06 	bl	8003cf2 <writeValueToBytes>
 80060e6:	e0bb      	b.n	8006260 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0x8B8B8B8BL, LEN_TX_POWER);
 80060e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060ec:	2204      	movs	r2, #4
 80060ee:	f04f 318b 	mov.w	r1, #2341178251	; 0x8b8b8b8b
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fd fdfd 	bl	8003cf2 <writeValueToBytes>
 80060f8:	e0b2      	b.n	8006260 <dwTune+0xa64>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_4)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006100:	2b04      	cmp	r3, #4
 8006102:	d136      	bne.n	8006172 <dwTune+0x976>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800610a:	2b01      	cmp	r3, #1
 800610c:	d115      	bne.n	800613a <dwTune+0x93e>
        {
            if (dev->smartPower)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006114:	2b00      	cmp	r3, #0
 8006116:	d007      	beq.n	8006128 <dwTune+0x92c>
            {
                writeValueToBytes(txpower, 0x1F1F3F5FL, LEN_TX_POWER);
 8006118:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800611c:	2204      	movs	r2, #4
 800611e:	495b      	ldr	r1, [pc, #364]	; (800628c <dwTune+0xa90>)
 8006120:	4618      	mov	r0, r3
 8006122:	f7fd fde6 	bl	8003cf2 <writeValueToBytes>
 8006126:	e09b      	b.n	8006260 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0x5F5F5F5FL, LEN_TX_POWER);
 8006128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800612c:	2204      	movs	r2, #4
 800612e:	f04f 315f 	mov.w	r1, #1600085855	; 0x5f5f5f5f
 8006132:	4618      	mov	r0, r3
 8006134:	f7fd fddd 	bl	8003cf2 <writeValueToBytes>
 8006138:	e092      	b.n	8006260 <dwTune+0xa64>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006140:	2b02      	cmp	r3, #2
 8006142:	f040 808d 	bne.w	8006260 <dwTune+0xa64>
        {
            if (dev->smartPower)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <dwTune+0x964>
            {
                writeValueToBytes(txpower, 0x3A5A7A9AL, LEN_TX_POWER);
 8006150:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006154:	2204      	movs	r2, #4
 8006156:	494e      	ldr	r1, [pc, #312]	; (8006290 <dwTune+0xa94>)
 8006158:	4618      	mov	r0, r3
 800615a:	f7fd fdca 	bl	8003cf2 <writeValueToBytes>
 800615e:	e07f      	b.n	8006260 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0x9A9A9A9AL, LEN_TX_POWER);
 8006160:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006164:	2204      	movs	r2, #4
 8006166:	f04f 319a 	mov.w	r1, #2593823386	; 0x9a9a9a9a
 800616a:	4618      	mov	r0, r3
 800616c:	f7fd fdc1 	bl	8003cf2 <writeValueToBytes>
 8006170:	e076      	b.n	8006260 <dwTune+0xa64>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_5)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006178:	2b05      	cmp	r3, #5
 800617a:	d135      	bne.n	80061e8 <dwTune+0x9ec>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006182:	2b01      	cmp	r3, #1
 8006184:	d115      	bne.n	80061b2 <dwTune+0x9b6>
        {
            if (dev->smartPower)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800618c:	2b00      	cmp	r3, #0
 800618e:	d007      	beq.n	80061a0 <dwTune+0x9a4>
            {
                writeValueToBytes(txpower, 0x0E082848L, LEN_TX_POWER);
 8006190:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006194:	2204      	movs	r2, #4
 8006196:	493f      	ldr	r1, [pc, #252]	; (8006294 <dwTune+0xa98>)
 8006198:	4618      	mov	r0, r3
 800619a:	f7fd fdaa 	bl	8003cf2 <writeValueToBytes>
 800619e:	e05f      	b.n	8006260 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0x48484848L, LEN_TX_POWER);
 80061a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061a4:	2204      	movs	r2, #4
 80061a6:	f04f 3148 	mov.w	r1, #1212696648	; 0x48484848
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fd fda1 	bl	8003cf2 <writeValueToBytes>
 80061b0:	e056      	b.n	8006260 <dwTune+0xa64>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d151      	bne.n	8006260 <dwTune+0xa64>
        {
            if (dev->smartPower)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <dwTune+0x9da>
            {
                writeValueToBytes(txpower, 0x25456585L, LEN_TX_POWER);
 80061c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061ca:	2204      	movs	r2, #4
 80061cc:	4932      	ldr	r1, [pc, #200]	; (8006298 <dwTune+0xa9c>)
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fd fd8f 	bl	8003cf2 <writeValueToBytes>
 80061d4:	e044      	b.n	8006260 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0x85858585L, LEN_TX_POWER);
 80061d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061da:	2204      	movs	r2, #4
 80061dc:	f04f 3185 	mov.w	r1, #2240120197	; 0x85858585
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fd fd86 	bl	8003cf2 <writeValueToBytes>
 80061e6:	e03b      	b.n	8006260 <dwTune+0xa64>
        else
        {
            // TODO proper error/warning handling
        }
    }
    else if (dev->channel == CHANNEL_7)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80061ee:	2b07      	cmp	r3, #7
 80061f0:	d136      	bne.n	8006260 <dwTune+0xa64>
    {
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d115      	bne.n	8006228 <dwTune+0xa2c>
        {
            if (dev->smartPower)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <dwTune+0xa1a>
            {
                writeValueToBytes(txpower, 0x32527292L, LEN_TX_POWER);
 8006206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800620a:	2204      	movs	r2, #4
 800620c:	4923      	ldr	r1, [pc, #140]	; (800629c <dwTune+0xaa0>)
 800620e:	4618      	mov	r0, r3
 8006210:	f7fd fd6f 	bl	8003cf2 <writeValueToBytes>
 8006214:	e024      	b.n	8006260 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0x92929292L, LEN_TX_POWER);
 8006216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800621a:	2204      	movs	r2, #4
 800621c:	f04f 3192 	mov.w	r1, #2459079314	; 0x92929292
 8006220:	4618      	mov	r0, r3
 8006222:	f7fd fd66 	bl	8003cf2 <writeValueToBytes>
 8006226:	e01b      	b.n	8006260 <dwTune+0xa64>
            }
        }
        else if (dev->pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800622e:	2b02      	cmp	r3, #2
 8006230:	d116      	bne.n	8006260 <dwTune+0xa64>
        {
            if (dev->smartPower)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <dwTune+0xa50>
            {
                writeValueToBytes(txpower, 0x5171B1D1L, LEN_TX_POWER);
 800623c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006240:	2204      	movs	r2, #4
 8006242:	4917      	ldr	r1, [pc, #92]	; (80062a0 <dwTune+0xaa4>)
 8006244:	4618      	mov	r0, r3
 8006246:	f7fd fd54 	bl	8003cf2 <writeValueToBytes>
 800624a:	e009      	b.n	8006260 <dwTune+0xa64>
            }
            else
            {
                writeValueToBytes(txpower, 0xD1D1D1D1L, LEN_TX_POWER);
 800624c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006250:	2204      	movs	r2, #4
 8006252:	f04f 31d1 	mov.w	r1, #3520188881	; 0xd1d1d1d1
 8006256:	4618      	mov	r0, r3
 8006258:	f7fd fd4b 	bl	8003cf2 <writeValueToBytes>
 800625c:	e000      	b.n	8006260 <dwTune+0xa64>
        if (dev->pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800625e:	bf00      	nop
    {
        // TODO proper error/warning handling
    }
    // Crystal calibration from OTP (if available)
    uint8_t buf_otp[4];
    readBytesOTP(dev, 0x01E, buf_otp);
 8006260:	f107 030c 	add.w	r3, r7, #12
 8006264:	461a      	mov	r2, r3
 8006266:	211e      	movs	r1, #30
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7fd fd63 	bl	8003d34 <readBytesOTP>
    if (buf_otp[0] == 0)
 800626e:	7b3b      	ldrb	r3, [r7, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d117      	bne.n	80062a4 <dwTune+0xaa8>
    {
        // No trim value available from OTP, use midrange value of 0x10
        writeValueToBytes(fsxtalt, ((0x10 & 0x1F) | 0x60), LEN_FS_XTALT);
 8006274:	f107 0310 	add.w	r3, r7, #16
 8006278:	2201      	movs	r2, #1
 800627a:	2170      	movs	r1, #112	; 0x70
 800627c:	4618      	mov	r0, r3
 800627e:	f7fd fd38 	bl	8003cf2 <writeValueToBytes>
 8006282:	e01a      	b.n	80062ba <dwTune+0xabe>
 8006284:	0f2f4f6f 	.word	0x0f2f4f6f
 8006288:	2b4b6b8b 	.word	0x2b4b6b8b
 800628c:	1f1f3f5f 	.word	0x1f1f3f5f
 8006290:	3a5a7a9a 	.word	0x3a5a7a9a
 8006294:	0e082848 	.word	0x0e082848
 8006298:	25456585 	.word	0x25456585
 800629c:	32527292 	.word	0x32527292
 80062a0:	5171b1d1 	.word	0x5171b1d1
    }
    else
    {
        writeValueToBytes(fsxtalt, ((buf_otp[0] & 0x1F) | 0x60), LEN_FS_XTALT);
 80062a4:	7b3b      	ldrb	r3, [r7, #12]
 80062a6:	f003 031f 	and.w	r3, r3, #31
 80062aa:	f043 0160 	orr.w	r1, r3, #96	; 0x60
 80062ae:	f107 0310 	add.w	r3, r7, #16
 80062b2:	2201      	movs	r2, #1
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fd fd1c 	bl	8003cf2 <writeValueToBytes>
    }
    // write configuration back to chip
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE1_SUB, agctune1, LEN_AGC_TUNE1);
 80062ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80062be:	2202      	movs	r2, #2
 80062c0:	9200      	str	r2, [sp, #0]
 80062c2:	2204      	movs	r2, #4
 80062c4:	2123      	movs	r1, #35	; 0x23
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f9b6 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE2_SUB, agctune2, LEN_AGC_TUNE2);
 80062cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80062d0:	2204      	movs	r2, #4
 80062d2:	9200      	str	r2, [sp, #0]
 80062d4:	220c      	movs	r2, #12
 80062d6:	2123      	movs	r1, #35	; 0x23
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f9ad 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, AGC_TUNE, AGC_TUNE3_SUB, agctune3, LEN_AGC_TUNE3);
 80062de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80062e2:	2202      	movs	r2, #2
 80062e4:	9200      	str	r2, [sp, #0]
 80062e6:	2212      	movs	r2, #18
 80062e8:	2123      	movs	r1, #35	; 0x23
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f9a4 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE0b_SUB, drxtune0b, LEN_DRX_TUNE0b);
 80062f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062f4:	2202      	movs	r2, #2
 80062f6:	9200      	str	r2, [sp, #0]
 80062f8:	2202      	movs	r2, #2
 80062fa:	2127      	movs	r1, #39	; 0x27
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f99b 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1a_SUB, drxtune1a, LEN_DRX_TUNE1a);
 8006302:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006306:	2202      	movs	r2, #2
 8006308:	9200      	str	r2, [sp, #0]
 800630a:	2204      	movs	r2, #4
 800630c:	2127      	movs	r1, #39	; 0x27
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f992 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1b_SUB, drxtune1b, LEN_DRX_TUNE1b);
 8006314:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006318:	2202      	movs	r2, #2
 800631a:	9200      	str	r2, [sp, #0]
 800631c:	2206      	movs	r2, #6
 800631e:	2127      	movs	r1, #39	; 0x27
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f989 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE2_SUB, drxtune2, LEN_DRX_TUNE2);
 8006326:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800632a:	2204      	movs	r2, #4
 800632c:	9200      	str	r2, [sp, #0]
 800632e:	2208      	movs	r2, #8
 8006330:	2127      	movs	r1, #39	; 0x27
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f980 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, DRX_TUNE, DRX_TUNE4H_SUB, drxtune4H, LEN_DRX_TUNE4H);
 8006338:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800633c:	2202      	movs	r2, #2
 800633e:	9200      	str	r2, [sp, #0]
 8006340:	2226      	movs	r2, #38	; 0x26
 8006342:	2127      	movs	r1, #39	; 0x27
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f977 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_CFG1_SUB, ldecfg1, LEN_LDE_CFG1);
 800634a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800634e:	2201      	movs	r2, #1
 8006350:	9200      	str	r2, [sp, #0]
 8006352:	f640 0206 	movw	r2, #2054	; 0x806
 8006356:	212e      	movs	r1, #46	; 0x2e
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f96d 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_CFG2_SUB, ldecfg2, LEN_LDE_CFG2);
 800635e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006362:	2202      	movs	r2, #2
 8006364:	9200      	str	r2, [sp, #0]
 8006366:	f641 0206 	movw	r2, #6150	; 0x1806
 800636a:	212e      	movs	r1, #46	; 0x2e
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f963 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, LDE_IF, LDE_REPC_SUB, lderepc, LEN_LDE_REPC);
 8006372:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006376:	2202      	movs	r2, #2
 8006378:	9200      	str	r2, [sp, #0]
 800637a:	f642 0204 	movw	r2, #10244	; 0x2804
 800637e:	212e      	movs	r1, #46	; 0x2e
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f959 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, TX_POWER, NO_SUB, txpower, LEN_TX_POWER);
 8006386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800638a:	2204      	movs	r2, #4
 800638c:	9200      	str	r2, [sp, #0]
 800638e:	2200      	movs	r2, #0
 8006390:	211e      	movs	r1, #30
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f950 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, RF_CONF, RF_RXCTRLH_SUB, rfrxctrlh, LEN_RF_RXCTRLH);
 8006398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800639c:	2201      	movs	r2, #1
 800639e:	9200      	str	r2, [sp, #0]
 80063a0:	220b      	movs	r2, #11
 80063a2:	2128      	movs	r1, #40	; 0x28
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f947 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, RF_CONF, RF_TXCTRL_SUB, rftxctrl, LEN_RF_TXCTRL);
 80063aa:	f107 0320 	add.w	r3, r7, #32
 80063ae:	2204      	movs	r2, #4
 80063b0:	9200      	str	r2, [sp, #0]
 80063b2:	220c      	movs	r2, #12
 80063b4:	2128      	movs	r1, #40	; 0x28
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f93e 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, TX_CAL, TC_PGDELAY_SUB, tcpgdelay, LEN_TC_PGDELAY);
 80063bc:	f107 031c 	add.w	r3, r7, #28
 80063c0:	2201      	movs	r2, #1
 80063c2:	9200      	str	r2, [sp, #0]
 80063c4:	220b      	movs	r2, #11
 80063c6:	212a      	movs	r1, #42	; 0x2a
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f935 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_PLLTUNE_SUB, fsplltune, LEN_FS_PLLTUNE);
 80063ce:	f107 0314 	add.w	r3, r7, #20
 80063d2:	2201      	movs	r2, #1
 80063d4:	9200      	str	r2, [sp, #0]
 80063d6:	220b      	movs	r2, #11
 80063d8:	212b      	movs	r1, #43	; 0x2b
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f92c 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_PLLCFG_SUB, fspllcfg, LEN_FS_PLLCFG);
 80063e0:	f107 0318 	add.w	r3, r7, #24
 80063e4:	2204      	movs	r2, #4
 80063e6:	9200      	str	r2, [sp, #0]
 80063e8:	2207      	movs	r2, #7
 80063ea:	212b      	movs	r1, #43	; 0x2b
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f923 	bl	8006638 <dwSpiWrite>
    dwSpiWrite(dev, FS_CTRL, FS_XTALT_SUB, fsxtalt, LEN_FS_XTALT);
 80063f2:	f107 0310 	add.w	r3, r7, #16
 80063f6:	2201      	movs	r2, #1
 80063f8:	9200      	str	r2, [sp, #0]
 80063fa:	220e      	movs	r2, #14
 80063fc:	212b      	movs	r1, #43	; 0x2b
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f91a 	bl	8006638 <dwSpiWrite>
}
 8006404:	bf00      	nop
 8006406:	3758      	adds	r7, #88	; 0x58
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <spiWrite>:

uint16_t buffer[64];

static void spiWrite(dwDeviceTypes_t *dev, const void *header, size_t headerLength,
                     const void *data, size_t dataLength)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800641a:	2200      	movs	r2, #0
 800641c:	2110      	movs	r1, #16
 800641e:	4813      	ldr	r0, [pc, #76]	; (800646c <spiWrite+0x60>)
 8006420:	f000 ff38 	bl	8007294 <HAL_GPIO_WritePin>
    memcpy(buffer, header, headerLength);
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	68b9      	ldr	r1, [r7, #8]
 8006428:	4811      	ldr	r0, [pc, #68]	; (8006470 <spiWrite+0x64>)
 800642a:	f003 fa7b 	bl	8009924 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, headerLength, HAL_MAX_DELAY);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	b29a      	uxth	r2, r3
 8006432:	f04f 33ff 	mov.w	r3, #4294967295
 8006436:	490e      	ldr	r1, [pc, #56]	; (8006470 <spiWrite+0x64>)
 8006438:	480e      	ldr	r0, [pc, #56]	; (8006474 <spiWrite+0x68>)
 800643a:	f001 fc66 	bl	8007d0a <HAL_SPI_Transmit>
    memcpy(buffer, data, dataLength);
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	480b      	ldr	r0, [pc, #44]	; (8006470 <spiWrite+0x64>)
 8006444:	f003 fa6e 	bl	8009924 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, dataLength, HAL_MAX_DELAY);
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	b29a      	uxth	r2, r3
 800644c:	f04f 33ff 	mov.w	r3, #4294967295
 8006450:	4907      	ldr	r1, [pc, #28]	; (8006470 <spiWrite+0x64>)
 8006452:	4808      	ldr	r0, [pc, #32]	; (8006474 <spiWrite+0x68>)
 8006454:	f001 fc59 	bl	8007d0a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8006458:	2201      	movs	r2, #1
 800645a:	2110      	movs	r1, #16
 800645c:	4803      	ldr	r0, [pc, #12]	; (800646c <spiWrite+0x60>)
 800645e:	f000 ff19 	bl	8007294 <HAL_GPIO_WritePin>
}
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	40020000 	.word	0x40020000
 8006470:	200005e8 	.word	0x200005e8
 8006474:	20000470 	.word	0x20000470

08006478 <spiRead>:

static void spiRead(dwDeviceTypes_t *dev, const void *header, size_t headerLength,
                    void *data, size_t dataLength)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8006486:	2200      	movs	r2, #0
 8006488:	2110      	movs	r1, #16
 800648a:	4813      	ldr	r0, [pc, #76]	; (80064d8 <spiRead+0x60>)
 800648c:	f000 ff02 	bl	8007294 <HAL_GPIO_WritePin>
    memcpy(buffer, header, headerLength);
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	68b9      	ldr	r1, [r7, #8]
 8006494:	4811      	ldr	r0, [pc, #68]	; (80064dc <spiRead+0x64>)
 8006496:	f003 fa45 	bl	8009924 <memcpy>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)buffer, headerLength, HAL_MAX_DELAY);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	b29a      	uxth	r2, r3
 800649e:	f04f 33ff 	mov.w	r3, #4294967295
 80064a2:	490e      	ldr	r1, [pc, #56]	; (80064dc <spiRead+0x64>)
 80064a4:	480e      	ldr	r0, [pc, #56]	; (80064e0 <spiRead+0x68>)
 80064a6:	f001 fc30 	bl	8007d0a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)buffer, dataLength, HAL_MAX_DELAY);
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	f04f 33ff 	mov.w	r3, #4294967295
 80064b2:	490a      	ldr	r1, [pc, #40]	; (80064dc <spiRead+0x64>)
 80064b4:	480a      	ldr	r0, [pc, #40]	; (80064e0 <spiRead+0x68>)
 80064b6:	f001 fd64 	bl	8007f82 <HAL_SPI_Receive>
    memcpy(data, buffer, dataLength);
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	4907      	ldr	r1, [pc, #28]	; (80064dc <spiRead+0x64>)
 80064be:	6838      	ldr	r0, [r7, #0]
 80064c0:	f003 fa30 	bl	8009924 <memcpy>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80064c4:	2201      	movs	r2, #1
 80064c6:	2110      	movs	r1, #16
 80064c8:	4803      	ldr	r0, [pc, #12]	; (80064d8 <spiRead+0x60>)
 80064ca:	f000 fee3 	bl	8007294 <HAL_GPIO_WritePin>
}
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	40020000 	.word	0x40020000
 80064dc:	200005e8 	.word	0x200005e8
 80064e0:	20000470 	.word	0x20000470

080064e4 <spiSetSpeed>:

static void spiSetSpeed(dwDeviceTypes_t *dev, dwSpiSpeed_t speed)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70fb      	strb	r3, [r7, #3]
    if (speed == dwSpiSpeedLow)
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d106      	bne.n	8006504 <spiSetSpeed+0x20>
    {
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80064f6:	4b08      	ldr	r3, [pc, #32]	; (8006518 <spiSetSpeed+0x34>)
 80064f8:	2220      	movs	r2, #32
 80064fa:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi1);
 80064fc:	4806      	ldr	r0, [pc, #24]	; (8006518 <spiSetSpeed+0x34>)
 80064fe:	f001 fb7b 	bl	8007bf8 <HAL_SPI_Init>
    else
    {
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
        HAL_SPI_Init(&hspi1);
    }
}
 8006502:	e005      	b.n	8006510 <spiSetSpeed+0x2c>
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8006504:	4b04      	ldr	r3, [pc, #16]	; (8006518 <spiSetSpeed+0x34>)
 8006506:	2208      	movs	r2, #8
 8006508:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi1);
 800650a:	4803      	ldr	r0, [pc, #12]	; (8006518 <spiSetSpeed+0x34>)
 800650c:	f001 fb74 	bl	8007bf8 <HAL_SPI_Init>
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000470 	.word	0x20000470

0800651c <reset>:

static void reset(dwDeviceTypes_t *dev)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8006524:	2200      	movs	r2, #0
 8006526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800652a:	4808      	ldr	r0, [pc, #32]	; (800654c <reset+0x30>)
 800652c:	f000 feb2 	bl	8007294 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8006530:	2005      	movs	r0, #5
 8006532:	f000 f961 	bl	80067f8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8006536:	2201      	movs	r2, #1
 8006538:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800653c:	4803      	ldr	r0, [pc, #12]	; (800654c <reset+0x30>)
 800653e:	f000 fea9 	bl	8007294 <HAL_GPIO_WritePin>
}
 8006542:	bf00      	nop
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	40020400 	.word	0x40020400

08006550 <delayms>:
    HAL_Delay(5);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
}

static void delayms(dwDeviceTypes_t *dev, unsigned int delay)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
    HAL_Delay(delay);
 800655a:	6838      	ldr	r0, [r7, #0]
 800655c:	f000 f94c 	bl	80067f8 <HAL_Delay>
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <dwSpiRead>:
#include "dw_spi.h"

void dwSpiRead(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, void *data, size_t length)
{
 8006568:	b590      	push	{r4, r7, lr}
 800656a:	b089      	sub	sp, #36	; 0x24
 800656c:	af02      	add	r7, sp, #8
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	607a      	str	r2, [r7, #4]
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	460b      	mov	r3, r1
 8006576:	72fb      	strb	r3, [r7, #11]
    uint8_t header[3];
    size_t headerLength = 1;
 8006578:	2301      	movs	r3, #1
 800657a:	617b      	str	r3, [r7, #20]
    header[0] = regid & 0x3f;
 800657c:	7afb      	ldrb	r3, [r7, #11]
 800657e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006582:	b2db      	uxtb	r3, r3
 8006584:	743b      	strb	r3, [r7, #16]
    if (address != 0)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01c      	beq.n	80065c6 <dwSpiRead+0x5e>
    {
        header[0] |= 0x40;
 800658c:	7c3b      	ldrb	r3, [r7, #16]
 800658e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006592:	b2db      	uxtb	r3, r3
 8006594:	743b      	strb	r3, [r7, #16]
        header[1] = address & 0x7f;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	747b      	strb	r3, [r7, #17]
        address >>= 7;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	09db      	lsrs	r3, r3, #7
 80065a6:	607b      	str	r3, [r7, #4]
        headerLength = 2;
 80065a8:	2302      	movs	r3, #2
 80065aa:	617b      	str	r3, [r7, #20]
        if (address != 0)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d009      	beq.n	80065c6 <dwSpiRead+0x5e>
        {
            header[1] |= 0x80;
 80065b2:	7c7b      	ldrb	r3, [r7, #17]
 80065b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	747b      	strb	r3, [r7, #17]
            header[2] = address & 0xff;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	74bb      	strb	r3, [r7, #18]
            headerLength = 3;
 80065c2:	2303      	movs	r3, #3
 80065c4:	617b      	str	r3, [r7, #20]
        }
    }
    dev->func->spiRead(dev, header, headerLength, data, length);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681c      	ldr	r4, [r3, #0]
 80065cc:	f107 0110 	add.w	r1, r7, #16
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	47a0      	blx	r4
}
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd90      	pop	{r4, r7, pc}

080065e4 <dwSpiRead16>:

uint16_t dwSpiRead16(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b088      	sub	sp, #32
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	460b      	mov	r3, r1
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	72fb      	strb	r3, [r7, #11]
    uint16_t data;
    dwSpiRead(dev, regid, address, &data, sizeof(data));
 80065f2:	f107 0316 	add.w	r3, r7, #22
 80065f6:	7af9      	ldrb	r1, [r7, #11]
 80065f8:	2202      	movs	r2, #2
 80065fa:	9200      	str	r2, [sp, #0]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f7ff ffb2 	bl	8006568 <dwSpiRead>
    return data;
 8006604:	8afb      	ldrh	r3, [r7, #22]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <dwSpiRead32>:

uint32_t dwSpiRead32(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b088      	sub	sp, #32
 8006612:	af02      	add	r7, sp, #8
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	460b      	mov	r3, r1
 8006618:	607a      	str	r2, [r7, #4]
 800661a:	72fb      	strb	r3, [r7, #11]
    uint32_t data;
    dwSpiRead(dev, regid, address, &data, sizeof(data));
 800661c:	f107 0314 	add.w	r3, r7, #20
 8006620:	7af9      	ldrb	r1, [r7, #11]
 8006622:	2204      	movs	r2, #4
 8006624:	9200      	str	r2, [sp, #0]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f7ff ff9d 	bl	8006568 <dwSpiRead>
    return data;
 800662e:	697b      	ldr	r3, [r7, #20]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <dwSpiWrite>:

void dwSpiWrite(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, const void *data, size_t length)
{
 8006638:	b590      	push	{r4, r7, lr}
 800663a:	b089      	sub	sp, #36	; 0x24
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	460b      	mov	r3, r1
 8006646:	72fb      	strb	r3, [r7, #11]
    uint8_t header[3];
    size_t headerLength = 1;
 8006648:	2301      	movs	r3, #1
 800664a:	617b      	str	r3, [r7, #20]
    header[0] = regid & 0x3f;
 800664c:	7afb      	ldrb	r3, [r7, #11]
 800664e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006652:	b2db      	uxtb	r3, r3
 8006654:	743b      	strb	r3, [r7, #16]
    header[0] |= 0x80;
 8006656:	7c3b      	ldrb	r3, [r7, #16]
 8006658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800665c:	b2db      	uxtb	r3, r3
 800665e:	743b      	strb	r3, [r7, #16]
    if (address != 0)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d01c      	beq.n	80066a0 <dwSpiWrite+0x68>
    {
        header[0] |= 0x40;
 8006666:	7c3b      	ldrb	r3, [r7, #16]
 8006668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800666c:	b2db      	uxtb	r3, r3
 800666e:	743b      	strb	r3, [r7, #16]
        header[1] = address & 0x7f;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006678:	b2db      	uxtb	r3, r3
 800667a:	747b      	strb	r3, [r7, #17]
        address >>= 7;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	09db      	lsrs	r3, r3, #7
 8006680:	607b      	str	r3, [r7, #4]
        headerLength = 2;
 8006682:	2302      	movs	r3, #2
 8006684:	617b      	str	r3, [r7, #20]
        if (address != 0)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d009      	beq.n	80066a0 <dwSpiWrite+0x68>
        {
            header[1] |= 0x80;
 800668c:	7c7b      	ldrb	r3, [r7, #17]
 800668e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006692:	b2db      	uxtb	r3, r3
 8006694:	747b      	strb	r3, [r7, #17]
            header[2] = address & 0xff;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	74bb      	strb	r3, [r7, #18]
            headerLength = 3;
 800669c:	2303      	movs	r3, #3
 800669e:	617b      	str	r3, [r7, #20]
        }
    }
    dev->func->spiWrite(dev, header, headerLength, data, length);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685c      	ldr	r4, [r3, #4]
 80066a6:	f107 0110 	add.w	r1, r7, #16
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	47a0      	blx	r4
}
 80066b6:	bf00      	nop
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd90      	pop	{r4, r7, pc}

080066be <dwSpiWrite8>:

void dwSpiWrite8(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, uint8_t data)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b086      	sub	sp, #24
 80066c2:	af02      	add	r7, sp, #8
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	461a      	mov	r2, r3
 80066ca:	460b      	mov	r3, r1
 80066cc:	72fb      	strb	r3, [r7, #11]
 80066ce:	4613      	mov	r3, r2
 80066d0:	72bb      	strb	r3, [r7, #10]
    dwSpiWrite(dev, regid, address, &data, sizeof(data));
 80066d2:	f107 030a 	add.w	r3, r7, #10
 80066d6:	7af9      	ldrb	r1, [r7, #11]
 80066d8:	2201      	movs	r2, #1
 80066da:	9200      	str	r2, [sp, #0]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7ff ffaa 	bl	8006638 <dwSpiWrite>
}
 80066e4:	bf00      	nop
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <dwSpiWrite32>:

void dwSpiWrite32(dwDeviceTypes_t *dev, uint8_t regid, uint32_t address, uint32_t data)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	607a      	str	r2, [r7, #4]
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	460b      	mov	r3, r1
 80066fa:	72fb      	strb	r3, [r7, #11]
    dwSpiWrite(dev, regid, address, &data, sizeof(data));
 80066fc:	463b      	mov	r3, r7
 80066fe:	7af9      	ldrb	r1, [r7, #11]
 8006700:	2204      	movs	r2, #4
 8006702:	9200      	str	r2, [sp, #0]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f7ff ff96 	bl	8006638 <dwSpiWrite>
}
 800670c:	bf00      	nop
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006718:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <HAL_Init+0x40>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a0d      	ldr	r2, [pc, #52]	; (8006754 <HAL_Init+0x40>)
 800671e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006724:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <HAL_Init+0x40>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a0a      	ldr	r2, [pc, #40]	; (8006754 <HAL_Init+0x40>)
 800672a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800672e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006730:	4b08      	ldr	r3, [pc, #32]	; (8006754 <HAL_Init+0x40>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a07      	ldr	r2, [pc, #28]	; (8006754 <HAL_Init+0x40>)
 8006736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800673a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800673c:	2003      	movs	r0, #3
 800673e:	f000 fbc7 	bl	8006ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006742:	200f      	movs	r0, #15
 8006744:	f000 f808 	bl	8006758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006748:	f7fc ff60 	bl	800360c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40023c00 	.word	0x40023c00

08006758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006760:	4b12      	ldr	r3, [pc, #72]	; (80067ac <HAL_InitTick+0x54>)
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	4b12      	ldr	r3, [pc, #72]	; (80067b0 <HAL_InitTick+0x58>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	4619      	mov	r1, r3
 800676a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800676e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006772:	fbb2 f3f3 	udiv	r3, r2, r3
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fbe3 	bl	8006f42 <HAL_SYSTICK_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e00e      	b.n	80067a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b0f      	cmp	r3, #15
 800678a:	d80a      	bhi.n	80067a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800678c:	2200      	movs	r2, #0
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	f000 fba7 	bl	8006ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006798:	4a06      	ldr	r2, [pc, #24]	; (80067b4 <HAL_InitTick+0x5c>)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e000      	b.n	80067a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20000068 	.word	0x20000068
 80067b0:	20000084 	.word	0x20000084
 80067b4:	20000080 	.word	0x20000080

080067b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <HAL_IncTick+0x20>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	4b06      	ldr	r3, [pc, #24]	; (80067dc <HAL_IncTick+0x24>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4413      	add	r3, r2
 80067c8:	4a04      	ldr	r2, [pc, #16]	; (80067dc <HAL_IncTick+0x24>)
 80067ca:	6013      	str	r3, [r2, #0]
}
 80067cc:	bf00      	nop
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	20000084 	.word	0x20000084
 80067dc:	20000668 	.word	0x20000668

080067e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
  return uwTick;
 80067e4:	4b03      	ldr	r3, [pc, #12]	; (80067f4 <HAL_GetTick+0x14>)
 80067e6:	681b      	ldr	r3, [r3, #0]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20000668 	.word	0x20000668

080067f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006800:	f7ff ffee 	bl	80067e0 <HAL_GetTick>
 8006804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d005      	beq.n	800681e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006812:	4b0a      	ldr	r3, [pc, #40]	; (800683c <HAL_Delay+0x44>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800681e:	bf00      	nop
 8006820:	f7ff ffde 	bl	80067e0 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	429a      	cmp	r2, r3
 800682e:	d8f7      	bhi.n	8006820 <HAL_Delay+0x28>
  {
  }
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20000084 	.word	0x20000084

08006840 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e033      	b.n	80068be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fa fc1c 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	f003 0310 	and.w	r3, r3, #16
 800687a:	2b00      	cmp	r3, #0
 800687c:	d118      	bne.n	80068b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006886:	f023 0302 	bic.w	r3, r3, #2
 800688a:	f043 0202 	orr.w	r2, r3, #2
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f93a 	bl	8006b0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	f043 0201 	orr.w	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	641a      	str	r2, [r3, #64]	; 0x40
 80068ae:	e001      	b.n	80068b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_ADC_ConfigChannel+0x1c>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e105      	b.n	8006af0 <HAL_ADC_ConfigChannel+0x228>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b09      	cmp	r3, #9
 80068f2:	d925      	bls.n	8006940 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68d9      	ldr	r1, [r3, #12]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	4613      	mov	r3, r2
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	4413      	add	r3, r2
 8006908:	3b1e      	subs	r3, #30
 800690a:	2207      	movs	r2, #7
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	43da      	mvns	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	400a      	ands	r2, r1
 8006918:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68d9      	ldr	r1, [r3, #12]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	4618      	mov	r0, r3
 800692c:	4603      	mov	r3, r0
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	4403      	add	r3, r0
 8006932:	3b1e      	subs	r3, #30
 8006934:	409a      	lsls	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	60da      	str	r2, [r3, #12]
 800693e:	e022      	b.n	8006986 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6919      	ldr	r1, [r3, #16]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	4613      	mov	r3, r2
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	4413      	add	r3, r2
 8006954:	2207      	movs	r2, #7
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	43da      	mvns	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	400a      	ands	r2, r1
 8006962:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6919      	ldr	r1, [r3, #16]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	4618      	mov	r0, r3
 8006976:	4603      	mov	r3, r0
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	4403      	add	r3, r0
 800697c:	409a      	lsls	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2b06      	cmp	r3, #6
 800698c:	d824      	bhi.n	80069d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	4613      	mov	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	3b05      	subs	r3, #5
 80069a0:	221f      	movs	r2, #31
 80069a2:	fa02 f303 	lsl.w	r3, r2, r3
 80069a6:	43da      	mvns	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	400a      	ands	r2, r1
 80069ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	4618      	mov	r0, r3
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	3b05      	subs	r3, #5
 80069ca:	fa00 f203 	lsl.w	r2, r0, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	635a      	str	r2, [r3, #52]	; 0x34
 80069d6:	e04c      	b.n	8006a72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	2b0c      	cmp	r3, #12
 80069de:	d824      	bhi.n	8006a2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	3b23      	subs	r3, #35	; 0x23
 80069f2:	221f      	movs	r2, #31
 80069f4:	fa02 f303 	lsl.w	r3, r2, r3
 80069f8:	43da      	mvns	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	400a      	ands	r2, r1
 8006a00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	4618      	mov	r0, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	3b23      	subs	r3, #35	; 0x23
 8006a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30
 8006a28:	e023      	b.n	8006a72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	3b41      	subs	r3, #65	; 0x41
 8006a3c:	221f      	movs	r2, #31
 8006a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a42:	43da      	mvns	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	400a      	ands	r2, r1
 8006a4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	4618      	mov	r0, r3
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	3b41      	subs	r3, #65	; 0x41
 8006a66:	fa00 f203 	lsl.w	r2, r0, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a72:	4b22      	ldr	r3, [pc, #136]	; (8006afc <HAL_ADC_ConfigChannel+0x234>)
 8006a74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a21      	ldr	r2, [pc, #132]	; (8006b00 <HAL_ADC_ConfigChannel+0x238>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d109      	bne.n	8006a94 <HAL_ADC_ConfigChannel+0x1cc>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b12      	cmp	r3, #18
 8006a86:	d105      	bne.n	8006a94 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a19      	ldr	r2, [pc, #100]	; (8006b00 <HAL_ADC_ConfigChannel+0x238>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d123      	bne.n	8006ae6 <HAL_ADC_ConfigChannel+0x21e>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b10      	cmp	r3, #16
 8006aa4:	d003      	beq.n	8006aae <HAL_ADC_ConfigChannel+0x1e6>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b11      	cmp	r3, #17
 8006aac:	d11b      	bne.n	8006ae6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b10      	cmp	r3, #16
 8006ac0:	d111      	bne.n	8006ae6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006ac2:	4b10      	ldr	r3, [pc, #64]	; (8006b04 <HAL_ADC_ConfigChannel+0x23c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a10      	ldr	r2, [pc, #64]	; (8006b08 <HAL_ADC_ConfigChannel+0x240>)
 8006ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8006acc:	0c9a      	lsrs	r2, r3, #18
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006ad8:	e002      	b.n	8006ae0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1f9      	bne.n	8006ada <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	40012300 	.word	0x40012300
 8006b00:	40012000 	.word	0x40012000
 8006b04:	20000068 	.word	0x20000068
 8006b08:	431bde83 	.word	0x431bde83

08006b0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b14:	4b79      	ldr	r3, [pc, #484]	; (8006cfc <ADC_Init+0x1f0>)
 8006b16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6859      	ldr	r1, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	021a      	lsls	r2, r3, #8
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6859      	ldr	r1, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6899      	ldr	r1, [r3, #8]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9e:	4a58      	ldr	r2, [pc, #352]	; (8006d00 <ADC_Init+0x1f4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d022      	beq.n	8006bea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6899      	ldr	r1, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6899      	ldr	r1, [r3, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	609a      	str	r2, [r3, #8]
 8006be8:	e00f      	b.n	8006c0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0202 	bic.w	r2, r2, #2
 8006c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6899      	ldr	r1, [r3, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	7e1b      	ldrb	r3, [r3, #24]
 8006c24:	005a      	lsls	r2, r3, #1
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d01b      	beq.n	8006c70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006c56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6859      	ldr	r1, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	3b01      	subs	r3, #1
 8006c64:	035a      	lsls	r2, r3, #13
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	605a      	str	r2, [r3, #4]
 8006c6e:	e007      	b.n	8006c80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	051a      	lsls	r2, r3, #20
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6899      	ldr	r1, [r3, #8]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cc2:	025a      	lsls	r2, r3, #9
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6899      	ldr	r1, [r3, #8]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	029a      	lsls	r2, r3, #10
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	609a      	str	r2, [r3, #8]
}
 8006cf0:	bf00      	nop
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	40012300 	.word	0x40012300
 8006d00:	0f000001 	.word	0x0f000001

08006d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d14:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <__NVIC_SetPriorityGrouping+0x44>)
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d20:	4013      	ands	r3, r2
 8006d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d36:	4a04      	ldr	r2, [pc, #16]	; (8006d48 <__NVIC_SetPriorityGrouping+0x44>)
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	60d3      	str	r3, [r2, #12]
}
 8006d3c:	bf00      	nop
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	e000ed00 	.word	0xe000ed00

08006d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d50:	4b04      	ldr	r3, [pc, #16]	; (8006d64 <__NVIC_GetPriorityGrouping+0x18>)
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	0a1b      	lsrs	r3, r3, #8
 8006d56:	f003 0307 	and.w	r3, r3, #7
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	e000ed00 	.word	0xe000ed00

08006d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	db0b      	blt.n	8006d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	f003 021f 	and.w	r2, r3, #31
 8006d80:	4907      	ldr	r1, [pc, #28]	; (8006da0 <__NVIC_EnableIRQ+0x38>)
 8006d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	2001      	movs	r0, #1
 8006d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8006d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	e000e100 	.word	0xe000e100

08006da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	4603      	mov	r3, r0
 8006dac:	6039      	str	r1, [r7, #0]
 8006dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	db0a      	blt.n	8006dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	490c      	ldr	r1, [pc, #48]	; (8006df0 <__NVIC_SetPriority+0x4c>)
 8006dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dc2:	0112      	lsls	r2, r2, #4
 8006dc4:	b2d2      	uxtb	r2, r2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006dcc:	e00a      	b.n	8006de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	4908      	ldr	r1, [pc, #32]	; (8006df4 <__NVIC_SetPriority+0x50>)
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
 8006dd6:	f003 030f 	and.w	r3, r3, #15
 8006dda:	3b04      	subs	r3, #4
 8006ddc:	0112      	lsls	r2, r2, #4
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	440b      	add	r3, r1
 8006de2:	761a      	strb	r2, [r3, #24]
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	e000e100 	.word	0xe000e100
 8006df4:	e000ed00 	.word	0xe000ed00

08006df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b089      	sub	sp, #36	; 0x24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	f1c3 0307 	rsb	r3, r3, #7
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	bf28      	it	cs
 8006e16:	2304      	movcs	r3, #4
 8006e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	2b06      	cmp	r3, #6
 8006e20:	d902      	bls.n	8006e28 <NVIC_EncodePriority+0x30>
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	3b03      	subs	r3, #3
 8006e26:	e000      	b.n	8006e2a <NVIC_EncodePriority+0x32>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	fa02 f303 	lsl.w	r3, r2, r3
 8006e36:	43da      	mvns	r2, r3
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e40:	f04f 31ff 	mov.w	r1, #4294967295
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	fa01 f303 	lsl.w	r3, r1, r3
 8006e4a:	43d9      	mvns	r1, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e50:	4313      	orrs	r3, r2
         );
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3724      	adds	r7, #36	; 0x24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
	...

08006e60 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006e64:	f3bf 8f4f 	dsb	sy
}
 8006e68:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006e6a:	4b06      	ldr	r3, [pc, #24]	; (8006e84 <__NVIC_SystemReset+0x24>)
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006e72:	4904      	ldr	r1, [pc, #16]	; (8006e84 <__NVIC_SystemReset+0x24>)
 8006e74:	4b04      	ldr	r3, [pc, #16]	; (8006e88 <__NVIC_SystemReset+0x28>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e7a:	f3bf 8f4f 	dsb	sy
}
 8006e7e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006e80:	bf00      	nop
 8006e82:	e7fd      	b.n	8006e80 <__NVIC_SystemReset+0x20>
 8006e84:	e000ed00 	.word	0xe000ed00
 8006e88:	05fa0004 	.word	0x05fa0004

08006e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e9c:	d301      	bcc.n	8006ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e00f      	b.n	8006ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ea2:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <SysTick_Config+0x40>)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006eaa:	210f      	movs	r1, #15
 8006eac:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb0:	f7ff ff78 	bl	8006da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006eb4:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <SysTick_Config+0x40>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006eba:	4b04      	ldr	r3, [pc, #16]	; (8006ecc <SysTick_Config+0x40>)
 8006ebc:	2207      	movs	r2, #7
 8006ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	e000e010 	.word	0xe000e010

08006ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7ff ff13 	bl	8006d04 <__NVIC_SetPriorityGrouping>
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b086      	sub	sp, #24
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	4603      	mov	r3, r0
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	607a      	str	r2, [r7, #4]
 8006ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ef8:	f7ff ff28 	bl	8006d4c <__NVIC_GetPriorityGrouping>
 8006efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	68b9      	ldr	r1, [r7, #8]
 8006f02:	6978      	ldr	r0, [r7, #20]
 8006f04:	f7ff ff78 	bl	8006df8 <NVIC_EncodePriority>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f0e:	4611      	mov	r1, r2
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff ff47 	bl	8006da4 <__NVIC_SetPriority>
}
 8006f16:	bf00      	nop
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b082      	sub	sp, #8
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	4603      	mov	r3, r0
 8006f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff ff1b 	bl	8006d68 <__NVIC_EnableIRQ>
}
 8006f32:	bf00      	nop
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006f3e:	f7ff ff8f 	bl	8006e60 <__NVIC_SystemReset>

08006f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff ff9e 	bl	8006e8c <SysTick_Config>
 8006f50:	4603      	mov	r3, r0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b089      	sub	sp, #36	; 0x24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f72:	2300      	movs	r3, #0
 8006f74:	61fb      	str	r3, [r7, #28]
 8006f76:	e16b      	b.n	8007250 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006f78:	2201      	movs	r2, #1
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	4013      	ands	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	f040 815a 	bne.w	800724a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f003 0303 	and.w	r3, r3, #3
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d005      	beq.n	8006fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d130      	bne.n	8007010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	2203      	movs	r2, #3
 8006fba:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbe:	43db      	mvns	r3, r3
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fec:	43db      	mvns	r3, r3
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	091b      	lsrs	r3, r3, #4
 8006ffa:	f003 0201 	and.w	r2, r3, #1
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	fa02 f303 	lsl.w	r3, r2, r3
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	4313      	orrs	r3, r2
 8007008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	2b03      	cmp	r3, #3
 800701a:	d017      	beq.n	800704c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	2203      	movs	r2, #3
 8007028:	fa02 f303 	lsl.w	r3, r2, r3
 800702c:	43db      	mvns	r3, r3
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	4013      	ands	r3, r2
 8007032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	fa02 f303 	lsl.w	r3, r2, r3
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	4313      	orrs	r3, r2
 8007044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d123      	bne.n	80070a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	08da      	lsrs	r2, r3, #3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	3208      	adds	r2, #8
 8007060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	220f      	movs	r2, #15
 8007070:	fa02 f303 	lsl.w	r3, r2, r3
 8007074:	43db      	mvns	r3, r3
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	4013      	ands	r3, r2
 800707a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	691a      	ldr	r2, [r3, #16]
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	fa02 f303 	lsl.w	r3, r2, r3
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	4313      	orrs	r3, r2
 8007090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	08da      	lsrs	r2, r3, #3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3208      	adds	r2, #8
 800709a:	69b9      	ldr	r1, [r7, #24]
 800709c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	2203      	movs	r2, #3
 80070ac:	fa02 f303 	lsl.w	r3, r2, r3
 80070b0:	43db      	mvns	r3, r3
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	4013      	ands	r3, r2
 80070b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f003 0203 	and.w	r2, r3, #3
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	fa02 f303 	lsl.w	r3, r2, r3
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 80b4 	beq.w	800724a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	4b60      	ldr	r3, [pc, #384]	; (8007268 <HAL_GPIO_Init+0x30c>)
 80070e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ea:	4a5f      	ldr	r2, [pc, #380]	; (8007268 <HAL_GPIO_Init+0x30c>)
 80070ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070f0:	6453      	str	r3, [r2, #68]	; 0x44
 80070f2:	4b5d      	ldr	r3, [pc, #372]	; (8007268 <HAL_GPIO_Init+0x30c>)
 80070f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80070fe:	4a5b      	ldr	r2, [pc, #364]	; (800726c <HAL_GPIO_Init+0x310>)
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	089b      	lsrs	r3, r3, #2
 8007104:	3302      	adds	r3, #2
 8007106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800710a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	220f      	movs	r2, #15
 8007116:	fa02 f303 	lsl.w	r3, r2, r3
 800711a:	43db      	mvns	r3, r3
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	4013      	ands	r3, r2
 8007120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a52      	ldr	r2, [pc, #328]	; (8007270 <HAL_GPIO_Init+0x314>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d02b      	beq.n	8007182 <HAL_GPIO_Init+0x226>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a51      	ldr	r2, [pc, #324]	; (8007274 <HAL_GPIO_Init+0x318>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d025      	beq.n	800717e <HAL_GPIO_Init+0x222>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a50      	ldr	r2, [pc, #320]	; (8007278 <HAL_GPIO_Init+0x31c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d01f      	beq.n	800717a <HAL_GPIO_Init+0x21e>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a4f      	ldr	r2, [pc, #316]	; (800727c <HAL_GPIO_Init+0x320>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d019      	beq.n	8007176 <HAL_GPIO_Init+0x21a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a4e      	ldr	r2, [pc, #312]	; (8007280 <HAL_GPIO_Init+0x324>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <HAL_GPIO_Init+0x216>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a4d      	ldr	r2, [pc, #308]	; (8007284 <HAL_GPIO_Init+0x328>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00d      	beq.n	800716e <HAL_GPIO_Init+0x212>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a4c      	ldr	r2, [pc, #304]	; (8007288 <HAL_GPIO_Init+0x32c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d007      	beq.n	800716a <HAL_GPIO_Init+0x20e>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a4b      	ldr	r2, [pc, #300]	; (800728c <HAL_GPIO_Init+0x330>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d101      	bne.n	8007166 <HAL_GPIO_Init+0x20a>
 8007162:	2307      	movs	r3, #7
 8007164:	e00e      	b.n	8007184 <HAL_GPIO_Init+0x228>
 8007166:	2308      	movs	r3, #8
 8007168:	e00c      	b.n	8007184 <HAL_GPIO_Init+0x228>
 800716a:	2306      	movs	r3, #6
 800716c:	e00a      	b.n	8007184 <HAL_GPIO_Init+0x228>
 800716e:	2305      	movs	r3, #5
 8007170:	e008      	b.n	8007184 <HAL_GPIO_Init+0x228>
 8007172:	2304      	movs	r3, #4
 8007174:	e006      	b.n	8007184 <HAL_GPIO_Init+0x228>
 8007176:	2303      	movs	r3, #3
 8007178:	e004      	b.n	8007184 <HAL_GPIO_Init+0x228>
 800717a:	2302      	movs	r3, #2
 800717c:	e002      	b.n	8007184 <HAL_GPIO_Init+0x228>
 800717e:	2301      	movs	r3, #1
 8007180:	e000      	b.n	8007184 <HAL_GPIO_Init+0x228>
 8007182:	2300      	movs	r3, #0
 8007184:	69fa      	ldr	r2, [r7, #28]
 8007186:	f002 0203 	and.w	r2, r2, #3
 800718a:	0092      	lsls	r2, r2, #2
 800718c:	4093      	lsls	r3, r2
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	4313      	orrs	r3, r2
 8007192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007194:	4935      	ldr	r1, [pc, #212]	; (800726c <HAL_GPIO_Init+0x310>)
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	089b      	lsrs	r3, r3, #2
 800719a:	3302      	adds	r3, #2
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80071a2:	4b3b      	ldr	r3, [pc, #236]	; (8007290 <HAL_GPIO_Init+0x334>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	43db      	mvns	r3, r3
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	4013      	ands	r3, r2
 80071b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80071c6:	4a32      	ldr	r2, [pc, #200]	; (8007290 <HAL_GPIO_Init+0x334>)
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80071cc:	4b30      	ldr	r3, [pc, #192]	; (8007290 <HAL_GPIO_Init+0x334>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	43db      	mvns	r3, r3
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	4013      	ands	r3, r2
 80071da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80071f0:	4a27      	ldr	r2, [pc, #156]	; (8007290 <HAL_GPIO_Init+0x334>)
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80071f6:	4b26      	ldr	r3, [pc, #152]	; (8007290 <HAL_GPIO_Init+0x334>)
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	43db      	mvns	r3, r3
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	4013      	ands	r3, r2
 8007204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800721a:	4a1d      	ldr	r2, [pc, #116]	; (8007290 <HAL_GPIO_Init+0x334>)
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007220:	4b1b      	ldr	r3, [pc, #108]	; (8007290 <HAL_GPIO_Init+0x334>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	43db      	mvns	r3, r3
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	4013      	ands	r3, r2
 800722e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007244:	4a12      	ldr	r2, [pc, #72]	; (8007290 <HAL_GPIO_Init+0x334>)
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	3301      	adds	r3, #1
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	2b0f      	cmp	r3, #15
 8007254:	f67f ae90 	bls.w	8006f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007258:	bf00      	nop
 800725a:	bf00      	nop
 800725c:	3724      	adds	r7, #36	; 0x24
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	40023800 	.word	0x40023800
 800726c:	40013800 	.word	0x40013800
 8007270:	40020000 	.word	0x40020000
 8007274:	40020400 	.word	0x40020400
 8007278:	40020800 	.word	0x40020800
 800727c:	40020c00 	.word	0x40020c00
 8007280:	40021000 	.word	0x40021000
 8007284:	40021400 	.word	0x40021400
 8007288:	40021800 	.word	0x40021800
 800728c:	40021c00 	.word	0x40021c00
 8007290:	40013c00 	.word	0x40013c00

08007294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	807b      	strh	r3, [r7, #2]
 80072a0:	4613      	mov	r3, r2
 80072a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80072a4:	787b      	ldrb	r3, [r7, #1]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80072aa:	887a      	ldrh	r2, [r7, #2]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80072b0:	e003      	b.n	80072ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80072b2:	887b      	ldrh	r3, [r7, #2]
 80072b4:	041a      	lsls	r2, r3, #16
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	619a      	str	r2, [r3, #24]
}
 80072ba:	bf00      	nop
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
	...

080072c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e267      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d075      	beq.n	80073d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072e6:	4b88      	ldr	r3, [pc, #544]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 030c 	and.w	r3, r3, #12
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d00c      	beq.n	800730c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072f2:	4b85      	ldr	r3, [pc, #532]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072fa:	2b08      	cmp	r3, #8
 80072fc:	d112      	bne.n	8007324 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072fe:	4b82      	ldr	r3, [pc, #520]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800730a:	d10b      	bne.n	8007324 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800730c:	4b7e      	ldr	r3, [pc, #504]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d05b      	beq.n	80073d0 <HAL_RCC_OscConfig+0x108>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d157      	bne.n	80073d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e242      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800732c:	d106      	bne.n	800733c <HAL_RCC_OscConfig+0x74>
 800732e:	4b76      	ldr	r3, [pc, #472]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a75      	ldr	r2, [pc, #468]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 8007334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	e01d      	b.n	8007378 <HAL_RCC_OscConfig+0xb0>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007344:	d10c      	bne.n	8007360 <HAL_RCC_OscConfig+0x98>
 8007346:	4b70      	ldr	r3, [pc, #448]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a6f      	ldr	r2, [pc, #444]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 800734c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	4b6d      	ldr	r3, [pc, #436]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a6c      	ldr	r2, [pc, #432]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 8007358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	e00b      	b.n	8007378 <HAL_RCC_OscConfig+0xb0>
 8007360:	4b69      	ldr	r3, [pc, #420]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a68      	ldr	r2, [pc, #416]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 8007366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	4b66      	ldr	r3, [pc, #408]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a65      	ldr	r2, [pc, #404]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 8007372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d013      	beq.n	80073a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007380:	f7ff fa2e 	bl	80067e0 <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007388:	f7ff fa2a 	bl	80067e0 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b64      	cmp	r3, #100	; 0x64
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e207      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800739a:	4b5b      	ldr	r3, [pc, #364]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d0f0      	beq.n	8007388 <HAL_RCC_OscConfig+0xc0>
 80073a6:	e014      	b.n	80073d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a8:	f7ff fa1a 	bl	80067e0 <HAL_GetTick>
 80073ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073b0:	f7ff fa16 	bl	80067e0 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b64      	cmp	r3, #100	; 0x64
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e1f3      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073c2:	4b51      	ldr	r3, [pc, #324]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1f0      	bne.n	80073b0 <HAL_RCC_OscConfig+0xe8>
 80073ce:	e000      	b.n	80073d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d063      	beq.n	80074a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073de:	4b4a      	ldr	r3, [pc, #296]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f003 030c 	and.w	r3, r3, #12
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00b      	beq.n	8007402 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073ea:	4b47      	ldr	r3, [pc, #284]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073f2:	2b08      	cmp	r3, #8
 80073f4:	d11c      	bne.n	8007430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073f6:	4b44      	ldr	r3, [pc, #272]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d116      	bne.n	8007430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007402:	4b41      	ldr	r3, [pc, #260]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <HAL_RCC_OscConfig+0x152>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d001      	beq.n	800741a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e1c7      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800741a:	4b3b      	ldr	r3, [pc, #236]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	4937      	ldr	r1, [pc, #220]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 800742a:	4313      	orrs	r3, r2
 800742c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800742e:	e03a      	b.n	80074a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d020      	beq.n	800747a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007438:	4b34      	ldr	r3, [pc, #208]	; (800750c <HAL_RCC_OscConfig+0x244>)
 800743a:	2201      	movs	r2, #1
 800743c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800743e:	f7ff f9cf 	bl	80067e0 <HAL_GetTick>
 8007442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007444:	e008      	b.n	8007458 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007446:	f7ff f9cb 	bl	80067e0 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b02      	cmp	r3, #2
 8007452:	d901      	bls.n	8007458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e1a8      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007458:	4b2b      	ldr	r3, [pc, #172]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0f0      	beq.n	8007446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007464:	4b28      	ldr	r3, [pc, #160]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	4925      	ldr	r1, [pc, #148]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 8007474:	4313      	orrs	r3, r2
 8007476:	600b      	str	r3, [r1, #0]
 8007478:	e015      	b.n	80074a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800747a:	4b24      	ldr	r3, [pc, #144]	; (800750c <HAL_RCC_OscConfig+0x244>)
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007480:	f7ff f9ae 	bl	80067e0 <HAL_GetTick>
 8007484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007486:	e008      	b.n	800749a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007488:	f7ff f9aa 	bl	80067e0 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b02      	cmp	r3, #2
 8007494:	d901      	bls.n	800749a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e187      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800749a:	4b1b      	ldr	r3, [pc, #108]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1f0      	bne.n	8007488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d036      	beq.n	8007520 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d016      	beq.n	80074e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074ba:	4b15      	ldr	r3, [pc, #84]	; (8007510 <HAL_RCC_OscConfig+0x248>)
 80074bc:	2201      	movs	r2, #1
 80074be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c0:	f7ff f98e 	bl	80067e0 <HAL_GetTick>
 80074c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074c6:	e008      	b.n	80074da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074c8:	f7ff f98a 	bl	80067e0 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d901      	bls.n	80074da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e167      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074da:	4b0b      	ldr	r3, [pc, #44]	; (8007508 <HAL_RCC_OscConfig+0x240>)
 80074dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d0f0      	beq.n	80074c8 <HAL_RCC_OscConfig+0x200>
 80074e6:	e01b      	b.n	8007520 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074e8:	4b09      	ldr	r3, [pc, #36]	; (8007510 <HAL_RCC_OscConfig+0x248>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074ee:	f7ff f977 	bl	80067e0 <HAL_GetTick>
 80074f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074f4:	e00e      	b.n	8007514 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074f6:	f7ff f973 	bl	80067e0 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d907      	bls.n	8007514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e150      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
 8007508:	40023800 	.word	0x40023800
 800750c:	42470000 	.word	0x42470000
 8007510:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007514:	4b88      	ldr	r3, [pc, #544]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 8007516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1ea      	bne.n	80074f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 8097 	beq.w	800765c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800752e:	2300      	movs	r3, #0
 8007530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007532:	4b81      	ldr	r3, [pc, #516]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10f      	bne.n	800755e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800753e:	2300      	movs	r3, #0
 8007540:	60bb      	str	r3, [r7, #8]
 8007542:	4b7d      	ldr	r3, [pc, #500]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	4a7c      	ldr	r2, [pc, #496]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 8007548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800754c:	6413      	str	r3, [r2, #64]	; 0x40
 800754e:	4b7a      	ldr	r3, [pc, #488]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007556:	60bb      	str	r3, [r7, #8]
 8007558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800755a:	2301      	movs	r3, #1
 800755c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800755e:	4b77      	ldr	r3, [pc, #476]	; (800773c <HAL_RCC_OscConfig+0x474>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007566:	2b00      	cmp	r3, #0
 8007568:	d118      	bne.n	800759c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800756a:	4b74      	ldr	r3, [pc, #464]	; (800773c <HAL_RCC_OscConfig+0x474>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a73      	ldr	r2, [pc, #460]	; (800773c <HAL_RCC_OscConfig+0x474>)
 8007570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007576:	f7ff f933 	bl	80067e0 <HAL_GetTick>
 800757a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800757c:	e008      	b.n	8007590 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800757e:	f7ff f92f 	bl	80067e0 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	2b02      	cmp	r3, #2
 800758a:	d901      	bls.n	8007590 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e10c      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007590:	4b6a      	ldr	r3, [pc, #424]	; (800773c <HAL_RCC_OscConfig+0x474>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0f0      	beq.n	800757e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d106      	bne.n	80075b2 <HAL_RCC_OscConfig+0x2ea>
 80075a4:	4b64      	ldr	r3, [pc, #400]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 80075a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a8:	4a63      	ldr	r2, [pc, #396]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 80075aa:	f043 0301 	orr.w	r3, r3, #1
 80075ae:	6713      	str	r3, [r2, #112]	; 0x70
 80075b0:	e01c      	b.n	80075ec <HAL_RCC_OscConfig+0x324>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	2b05      	cmp	r3, #5
 80075b8:	d10c      	bne.n	80075d4 <HAL_RCC_OscConfig+0x30c>
 80075ba:	4b5f      	ldr	r3, [pc, #380]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 80075bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075be:	4a5e      	ldr	r2, [pc, #376]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 80075c0:	f043 0304 	orr.w	r3, r3, #4
 80075c4:	6713      	str	r3, [r2, #112]	; 0x70
 80075c6:	4b5c      	ldr	r3, [pc, #368]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 80075c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ca:	4a5b      	ldr	r2, [pc, #364]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 80075cc:	f043 0301 	orr.w	r3, r3, #1
 80075d0:	6713      	str	r3, [r2, #112]	; 0x70
 80075d2:	e00b      	b.n	80075ec <HAL_RCC_OscConfig+0x324>
 80075d4:	4b58      	ldr	r3, [pc, #352]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 80075d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d8:	4a57      	ldr	r2, [pc, #348]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 80075da:	f023 0301 	bic.w	r3, r3, #1
 80075de:	6713      	str	r3, [r2, #112]	; 0x70
 80075e0:	4b55      	ldr	r3, [pc, #340]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 80075e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e4:	4a54      	ldr	r2, [pc, #336]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 80075e6:	f023 0304 	bic.w	r3, r3, #4
 80075ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d015      	beq.n	8007620 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f4:	f7ff f8f4 	bl	80067e0 <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075fa:	e00a      	b.n	8007612 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075fc:	f7ff f8f0 	bl	80067e0 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	f241 3288 	movw	r2, #5000	; 0x1388
 800760a:	4293      	cmp	r3, r2
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e0cb      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007612:	4b49      	ldr	r3, [pc, #292]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	f003 0302 	and.w	r3, r3, #2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0ee      	beq.n	80075fc <HAL_RCC_OscConfig+0x334>
 800761e:	e014      	b.n	800764a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007620:	f7ff f8de 	bl	80067e0 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007626:	e00a      	b.n	800763e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007628:	f7ff f8da 	bl	80067e0 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	f241 3288 	movw	r2, #5000	; 0x1388
 8007636:	4293      	cmp	r3, r2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e0b5      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800763e:	4b3e      	ldr	r3, [pc, #248]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 8007640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1ee      	bne.n	8007628 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800764a:	7dfb      	ldrb	r3, [r7, #23]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d105      	bne.n	800765c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007650:	4b39      	ldr	r3, [pc, #228]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 8007652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007654:	4a38      	ldr	r2, [pc, #224]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 8007656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800765a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 80a1 	beq.w	80077a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007666:	4b34      	ldr	r3, [pc, #208]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 030c 	and.w	r3, r3, #12
 800766e:	2b08      	cmp	r3, #8
 8007670:	d05c      	beq.n	800772c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d141      	bne.n	80076fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800767a:	4b31      	ldr	r3, [pc, #196]	; (8007740 <HAL_RCC_OscConfig+0x478>)
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007680:	f7ff f8ae 	bl	80067e0 <HAL_GetTick>
 8007684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007686:	e008      	b.n	800769a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007688:	f7ff f8aa 	bl	80067e0 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e087      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800769a:	4b27      	ldr	r3, [pc, #156]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1f0      	bne.n	8007688 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69da      	ldr	r2, [r3, #28]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	019b      	lsls	r3, r3, #6
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	085b      	lsrs	r3, r3, #1
 80076be:	3b01      	subs	r3, #1
 80076c0:	041b      	lsls	r3, r3, #16
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	061b      	lsls	r3, r3, #24
 80076ca:	491b      	ldr	r1, [pc, #108]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076d0:	4b1b      	ldr	r3, [pc, #108]	; (8007740 <HAL_RCC_OscConfig+0x478>)
 80076d2:	2201      	movs	r2, #1
 80076d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076d6:	f7ff f883 	bl	80067e0 <HAL_GetTick>
 80076da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076dc:	e008      	b.n	80076f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076de:	f7ff f87f 	bl	80067e0 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d901      	bls.n	80076f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e05c      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076f0:	4b11      	ldr	r3, [pc, #68]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0f0      	beq.n	80076de <HAL_RCC_OscConfig+0x416>
 80076fc:	e054      	b.n	80077a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076fe:	4b10      	ldr	r3, [pc, #64]	; (8007740 <HAL_RCC_OscConfig+0x478>)
 8007700:	2200      	movs	r2, #0
 8007702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007704:	f7ff f86c 	bl	80067e0 <HAL_GetTick>
 8007708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800770a:	e008      	b.n	800771e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800770c:	f7ff f868 	bl	80067e0 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d901      	bls.n	800771e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e045      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800771e:	4b06      	ldr	r3, [pc, #24]	; (8007738 <HAL_RCC_OscConfig+0x470>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1f0      	bne.n	800770c <HAL_RCC_OscConfig+0x444>
 800772a:	e03d      	b.n	80077a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d107      	bne.n	8007744 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e038      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
 8007738:	40023800 	.word	0x40023800
 800773c:	40007000 	.word	0x40007000
 8007740:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007744:	4b1b      	ldr	r3, [pc, #108]	; (80077b4 <HAL_RCC_OscConfig+0x4ec>)
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d028      	beq.n	80077a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800775c:	429a      	cmp	r2, r3
 800775e:	d121      	bne.n	80077a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800776a:	429a      	cmp	r2, r3
 800776c:	d11a      	bne.n	80077a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007774:	4013      	ands	r3, r2
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800777a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800777c:	4293      	cmp	r3, r2
 800777e:	d111      	bne.n	80077a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778a:	085b      	lsrs	r3, r3, #1
 800778c:	3b01      	subs	r3, #1
 800778e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007790:	429a      	cmp	r2, r3
 8007792:	d107      	bne.n	80077a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d001      	beq.n	80077a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	40023800 	.word	0x40023800

080077b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e0cc      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077cc:	4b68      	ldr	r3, [pc, #416]	; (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0307 	and.w	r3, r3, #7
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d90c      	bls.n	80077f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077da:	4b65      	ldr	r3, [pc, #404]	; (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	b2d2      	uxtb	r2, r2
 80077e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077e2:	4b63      	ldr	r3, [pc, #396]	; (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d001      	beq.n	80077f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e0b8      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0302 	and.w	r3, r3, #2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d020      	beq.n	8007842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d005      	beq.n	8007818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800780c:	4b59      	ldr	r3, [pc, #356]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	4a58      	ldr	r2, [pc, #352]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0308 	and.w	r3, r3, #8
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007824:	4b53      	ldr	r3, [pc, #332]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4a52      	ldr	r2, [pc, #328]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800782a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800782e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007830:	4b50      	ldr	r3, [pc, #320]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	494d      	ldr	r1, [pc, #308]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800783e:	4313      	orrs	r3, r2
 8007840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d044      	beq.n	80078d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d107      	bne.n	8007866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007856:	4b47      	ldr	r3, [pc, #284]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d119      	bne.n	8007896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e07f      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d003      	beq.n	8007876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007872:	2b03      	cmp	r3, #3
 8007874:	d107      	bne.n	8007886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007876:	4b3f      	ldr	r3, [pc, #252]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e06f      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007886:	4b3b      	ldr	r3, [pc, #236]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e067      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007896:	4b37      	ldr	r3, [pc, #220]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f023 0203 	bic.w	r2, r3, #3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	4934      	ldr	r1, [pc, #208]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078a8:	f7fe ff9a 	bl	80067e0 <HAL_GetTick>
 80078ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ae:	e00a      	b.n	80078c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078b0:	f7fe ff96 	bl	80067e0 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80078be:	4293      	cmp	r3, r2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e04f      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078c6:	4b2b      	ldr	r3, [pc, #172]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f003 020c 	and.w	r2, r3, #12
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d1eb      	bne.n	80078b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078d8:	4b25      	ldr	r3, [pc, #148]	; (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d20c      	bcs.n	8007900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078e6:	4b22      	ldr	r3, [pc, #136]	; (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ee:	4b20      	ldr	r3, [pc, #128]	; (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d001      	beq.n	8007900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e032      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0304 	and.w	r3, r3, #4
 8007908:	2b00      	cmp	r3, #0
 800790a:	d008      	beq.n	800791e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800790c:	4b19      	ldr	r3, [pc, #100]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	4916      	ldr	r1, [pc, #88]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800791a:	4313      	orrs	r3, r2
 800791c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0308 	and.w	r3, r3, #8
 8007926:	2b00      	cmp	r3, #0
 8007928:	d009      	beq.n	800793e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800792a:	4b12      	ldr	r3, [pc, #72]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	490e      	ldr	r1, [pc, #56]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800793a:	4313      	orrs	r3, r2
 800793c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800793e:	f000 f821 	bl	8007984 <HAL_RCC_GetSysClockFreq>
 8007942:	4602      	mov	r2, r0
 8007944:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	091b      	lsrs	r3, r3, #4
 800794a:	f003 030f 	and.w	r3, r3, #15
 800794e:	490a      	ldr	r1, [pc, #40]	; (8007978 <HAL_RCC_ClockConfig+0x1c0>)
 8007950:	5ccb      	ldrb	r3, [r1, r3]
 8007952:	fa22 f303 	lsr.w	r3, r2, r3
 8007956:	4a09      	ldr	r2, [pc, #36]	; (800797c <HAL_RCC_ClockConfig+0x1c4>)
 8007958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800795a:	4b09      	ldr	r3, [pc, #36]	; (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe fefa 	bl	8006758 <HAL_InitTick>

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	40023c00 	.word	0x40023c00
 8007974:	40023800 	.word	0x40023800
 8007978:	0800f42c 	.word	0x0800f42c
 800797c:	20000068 	.word	0x20000068
 8007980:	20000080 	.word	0x20000080

08007984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007988:	b094      	sub	sp, #80	; 0x50
 800798a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	647b      	str	r3, [r7, #68]	; 0x44
 8007990:	2300      	movs	r3, #0
 8007992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007994:	2300      	movs	r3, #0
 8007996:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800799c:	4b79      	ldr	r3, [pc, #484]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x200>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f003 030c 	and.w	r3, r3, #12
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d00d      	beq.n	80079c4 <HAL_RCC_GetSysClockFreq+0x40>
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	f200 80e1 	bhi.w	8007b70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_RCC_GetSysClockFreq+0x34>
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d003      	beq.n	80079be <HAL_RCC_GetSysClockFreq+0x3a>
 80079b6:	e0db      	b.n	8007b70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079b8:	4b73      	ldr	r3, [pc, #460]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x204>)
 80079ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80079bc:	e0db      	b.n	8007b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079be:	4b73      	ldr	r3, [pc, #460]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x208>)
 80079c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079c2:	e0d8      	b.n	8007b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079c4:	4b6f      	ldr	r3, [pc, #444]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079ce:	4b6d      	ldr	r3, [pc, #436]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d063      	beq.n	8007aa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079da:	4b6a      	ldr	r3, [pc, #424]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	099b      	lsrs	r3, r3, #6
 80079e0:	2200      	movs	r2, #0
 80079e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80079e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ec:	633b      	str	r3, [r7, #48]	; 0x30
 80079ee:	2300      	movs	r3, #0
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34
 80079f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80079f6:	4622      	mov	r2, r4
 80079f8:	462b      	mov	r3, r5
 80079fa:	f04f 0000 	mov.w	r0, #0
 80079fe:	f04f 0100 	mov.w	r1, #0
 8007a02:	0159      	lsls	r1, r3, #5
 8007a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a08:	0150      	lsls	r0, r2, #5
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4621      	mov	r1, r4
 8007a10:	1a51      	subs	r1, r2, r1
 8007a12:	6139      	str	r1, [r7, #16]
 8007a14:	4629      	mov	r1, r5
 8007a16:	eb63 0301 	sbc.w	r3, r3, r1
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	f04f 0200 	mov.w	r2, #0
 8007a20:	f04f 0300 	mov.w	r3, #0
 8007a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a28:	4659      	mov	r1, fp
 8007a2a:	018b      	lsls	r3, r1, #6
 8007a2c:	4651      	mov	r1, sl
 8007a2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a32:	4651      	mov	r1, sl
 8007a34:	018a      	lsls	r2, r1, #6
 8007a36:	4651      	mov	r1, sl
 8007a38:	ebb2 0801 	subs.w	r8, r2, r1
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	eb63 0901 	sbc.w	r9, r3, r1
 8007a42:	f04f 0200 	mov.w	r2, #0
 8007a46:	f04f 0300 	mov.w	r3, #0
 8007a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a56:	4690      	mov	r8, r2
 8007a58:	4699      	mov	r9, r3
 8007a5a:	4623      	mov	r3, r4
 8007a5c:	eb18 0303 	adds.w	r3, r8, r3
 8007a60:	60bb      	str	r3, [r7, #8]
 8007a62:	462b      	mov	r3, r5
 8007a64:	eb49 0303 	adc.w	r3, r9, r3
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	f04f 0200 	mov.w	r2, #0
 8007a6e:	f04f 0300 	mov.w	r3, #0
 8007a72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a76:	4629      	mov	r1, r5
 8007a78:	024b      	lsls	r3, r1, #9
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a80:	4621      	mov	r1, r4
 8007a82:	024a      	lsls	r2, r1, #9
 8007a84:	4610      	mov	r0, r2
 8007a86:	4619      	mov	r1, r3
 8007a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a94:	f7f9 f8f8 	bl	8000c88 <__aeabi_uldivmod>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aa0:	e058      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aa2:	4b38      	ldr	r3, [pc, #224]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	099b      	lsrs	r3, r3, #6
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4618      	mov	r0, r3
 8007aac:	4611      	mov	r1, r2
 8007aae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ab2:	623b      	str	r3, [r7, #32]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007abc:	4642      	mov	r2, r8
 8007abe:	464b      	mov	r3, r9
 8007ac0:	f04f 0000 	mov.w	r0, #0
 8007ac4:	f04f 0100 	mov.w	r1, #0
 8007ac8:	0159      	lsls	r1, r3, #5
 8007aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ace:	0150      	lsls	r0, r2, #5
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4641      	mov	r1, r8
 8007ad6:	ebb2 0a01 	subs.w	sl, r2, r1
 8007ada:	4649      	mov	r1, r9
 8007adc:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ae0:	f04f 0200 	mov.w	r2, #0
 8007ae4:	f04f 0300 	mov.w	r3, #0
 8007ae8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007aec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007af0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007af4:	ebb2 040a 	subs.w	r4, r2, sl
 8007af8:	eb63 050b 	sbc.w	r5, r3, fp
 8007afc:	f04f 0200 	mov.w	r2, #0
 8007b00:	f04f 0300 	mov.w	r3, #0
 8007b04:	00eb      	lsls	r3, r5, #3
 8007b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b0a:	00e2      	lsls	r2, r4, #3
 8007b0c:	4614      	mov	r4, r2
 8007b0e:	461d      	mov	r5, r3
 8007b10:	4643      	mov	r3, r8
 8007b12:	18e3      	adds	r3, r4, r3
 8007b14:	603b      	str	r3, [r7, #0]
 8007b16:	464b      	mov	r3, r9
 8007b18:	eb45 0303 	adc.w	r3, r5, r3
 8007b1c:	607b      	str	r3, [r7, #4]
 8007b1e:	f04f 0200 	mov.w	r2, #0
 8007b22:	f04f 0300 	mov.w	r3, #0
 8007b26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	028b      	lsls	r3, r1, #10
 8007b2e:	4621      	mov	r1, r4
 8007b30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b34:	4621      	mov	r1, r4
 8007b36:	028a      	lsls	r2, r1, #10
 8007b38:	4610      	mov	r0, r2
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b3e:	2200      	movs	r2, #0
 8007b40:	61bb      	str	r3, [r7, #24]
 8007b42:	61fa      	str	r2, [r7, #28]
 8007b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b48:	f7f9 f89e 	bl	8000c88 <__aeabi_uldivmod>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4613      	mov	r3, r2
 8007b52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b54:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	0c1b      	lsrs	r3, r3, #16
 8007b5a:	f003 0303 	and.w	r3, r3, #3
 8007b5e:	3301      	adds	r3, #1
 8007b60:	005b      	lsls	r3, r3, #1
 8007b62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007b64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b6e:	e002      	b.n	8007b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b70:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3750      	adds	r7, #80	; 0x50
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b82:	bf00      	nop
 8007b84:	40023800 	.word	0x40023800
 8007b88:	00f42400 	.word	0x00f42400
 8007b8c:	007a1200 	.word	0x007a1200

08007b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b90:	b480      	push	{r7}
 8007b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b94:	4b03      	ldr	r3, [pc, #12]	; (8007ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b96:	681b      	ldr	r3, [r3, #0]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	20000068 	.word	0x20000068

08007ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007bac:	f7ff fff0 	bl	8007b90 <HAL_RCC_GetHCLKFreq>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	0a9b      	lsrs	r3, r3, #10
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	4903      	ldr	r1, [pc, #12]	; (8007bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bbe:	5ccb      	ldrb	r3, [r1, r3]
 8007bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	40023800 	.word	0x40023800
 8007bcc:	0800f43c 	.word	0x0800f43c

08007bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007bd4:	f7ff ffdc 	bl	8007b90 <HAL_RCC_GetHCLKFreq>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	0b5b      	lsrs	r3, r3, #13
 8007be0:	f003 0307 	and.w	r3, r3, #7
 8007be4:	4903      	ldr	r1, [pc, #12]	; (8007bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007be6:	5ccb      	ldrb	r3, [r1, r3]
 8007be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	40023800 	.word	0x40023800
 8007bf4:	0800f43c 	.word	0x0800f43c

08007bf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e07b      	b.n	8007d02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d108      	bne.n	8007c24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c1a:	d009      	beq.n	8007c30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	61da      	str	r2, [r3, #28]
 8007c22:	e005      	b.n	8007c30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d106      	bne.n	8007c50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f7fb fc96 	bl	800357c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c82:	431a      	orrs	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	431a      	orrs	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007caa:	431a      	orrs	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb4:	ea42 0103 	orr.w	r1, r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	0c1b      	lsrs	r3, r3, #16
 8007cce:	f003 0104 	and.w	r1, r3, #4
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	f003 0210 	and.w	r2, r3, #16
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69da      	ldr	r2, [r3, #28]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cf0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b088      	sub	sp, #32
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	603b      	str	r3, [r7, #0]
 8007d16:	4613      	mov	r3, r2
 8007d18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_SPI_Transmit+0x22>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e126      	b.n	8007f7a <HAL_SPI_Transmit+0x270>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d34:	f7fe fd54 	bl	80067e0 <HAL_GetTick>
 8007d38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007d3a:	88fb      	ldrh	r3, [r7, #6]
 8007d3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d002      	beq.n	8007d50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d4e:	e10b      	b.n	8007f68 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <HAL_SPI_Transmit+0x52>
 8007d56:	88fb      	ldrh	r3, [r7, #6]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d102      	bne.n	8007d62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d60:	e102      	b.n	8007f68 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2203      	movs	r2, #3
 8007d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	88fa      	ldrh	r2, [r7, #6]
 8007d7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	88fa      	ldrh	r2, [r7, #6]
 8007d80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da8:	d10f      	bne.n	8007dca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007db8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd4:	2b40      	cmp	r3, #64	; 0x40
 8007dd6:	d007      	beq.n	8007de8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007de6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df0:	d14b      	bne.n	8007e8a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d002      	beq.n	8007e00 <HAL_SPI_Transmit+0xf6>
 8007dfa:	8afb      	ldrh	r3, [r7, #22]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d13e      	bne.n	8007e7e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e04:	881a      	ldrh	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e10:	1c9a      	adds	r2, r3, #2
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e24:	e02b      	b.n	8007e7e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f003 0302 	and.w	r3, r3, #2
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d112      	bne.n	8007e5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e38:	881a      	ldrh	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e44:	1c9a      	adds	r2, r3, #2
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	3b01      	subs	r3, #1
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	86da      	strh	r2, [r3, #54]	; 0x36
 8007e58:	e011      	b.n	8007e7e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e5a:	f7fe fcc1 	bl	80067e0 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d803      	bhi.n	8007e72 <HAL_SPI_Transmit+0x168>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e70:	d102      	bne.n	8007e78 <HAL_SPI_Transmit+0x16e>
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d102      	bne.n	8007e7e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e7c:	e074      	b.n	8007f68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1ce      	bne.n	8007e26 <HAL_SPI_Transmit+0x11c>
 8007e88:	e04c      	b.n	8007f24 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d002      	beq.n	8007e98 <HAL_SPI_Transmit+0x18e>
 8007e92:	8afb      	ldrh	r3, [r7, #22]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d140      	bne.n	8007f1a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	330c      	adds	r3, #12
 8007ea2:	7812      	ldrb	r2, [r2, #0]
 8007ea4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007ebe:	e02c      	b.n	8007f1a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d113      	bne.n	8007ef6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	330c      	adds	r3, #12
 8007ed8:	7812      	ldrb	r2, [r2, #0]
 8007eda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	3b01      	subs	r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ef4:	e011      	b.n	8007f1a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ef6:	f7fe fc73 	bl	80067e0 <HAL_GetTick>
 8007efa:	4602      	mov	r2, r0
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d803      	bhi.n	8007f0e <HAL_SPI_Transmit+0x204>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0c:	d102      	bne.n	8007f14 <HAL_SPI_Transmit+0x20a>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d102      	bne.n	8007f1a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f18:	e026      	b.n	8007f68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1cd      	bne.n	8007ec0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fbcb 	bl	80086c4 <SPI_EndRxTxTransaction>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2220      	movs	r2, #32
 8007f38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10a      	bne.n	8007f58 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f42:	2300      	movs	r3, #0
 8007f44:	613b      	str	r3, [r7, #16]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	613b      	str	r3, [r7, #16]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	613b      	str	r3, [r7, #16]
 8007f56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	77fb      	strb	r3, [r7, #31]
 8007f64:	e000      	b.n	8007f68 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007f66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f78:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3720      	adds	r7, #32
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b088      	sub	sp, #32
 8007f86:	af02      	add	r7, sp, #8
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	60b9      	str	r1, [r7, #8]
 8007f8c:	603b      	str	r3, [r7, #0]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f9e:	d112      	bne.n	8007fc6 <HAL_SPI_Receive+0x44>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10e      	bne.n	8007fc6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2204      	movs	r2, #4
 8007fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007fb0:	88fa      	ldrh	r2, [r7, #6]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	68b9      	ldr	r1, [r7, #8]
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 f8f1 	bl	80081a4 <HAL_SPI_TransmitReceive>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	e0ea      	b.n	800819c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d101      	bne.n	8007fd4 <HAL_SPI_Receive+0x52>
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	e0e3      	b.n	800819c <HAL_SPI_Receive+0x21a>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fdc:	f7fe fc00 	bl	80067e0 <HAL_GetTick>
 8007fe0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d002      	beq.n	8007ff4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007fee:	2302      	movs	r3, #2
 8007ff0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ff2:	e0ca      	b.n	800818a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <HAL_SPI_Receive+0x7e>
 8007ffa:	88fb      	ldrh	r3, [r7, #6]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d102      	bne.n	8008006 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008004:	e0c1      	b.n	800818a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2204      	movs	r2, #4
 800800a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	88fa      	ldrh	r2, [r7, #6]
 800801e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	88fa      	ldrh	r2, [r7, #6]
 8008024:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800804c:	d10f      	bne.n	800806e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800805c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800806c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	d007      	beq.n	800808c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800808a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d162      	bne.n	800815a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008094:	e02e      	b.n	80080f4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d115      	bne.n	80080d0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f103 020c 	add.w	r2, r3, #12
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	7812      	ldrb	r2, [r2, #0]
 80080b2:	b2d2      	uxtb	r2, r2
 80080b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080ce:	e011      	b.n	80080f4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080d0:	f7fe fb86 	bl	80067e0 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d803      	bhi.n	80080e8 <HAL_SPI_Receive+0x166>
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e6:	d102      	bne.n	80080ee <HAL_SPI_Receive+0x16c>
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d102      	bne.n	80080f4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80080f2:	e04a      	b.n	800818a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1cb      	bne.n	8008096 <HAL_SPI_Receive+0x114>
 80080fe:	e031      	b.n	8008164 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b01      	cmp	r3, #1
 800810c:	d113      	bne.n	8008136 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	b292      	uxth	r2, r2
 800811a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	1c9a      	adds	r2, r3, #2
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800812a:	b29b      	uxth	r3, r3
 800812c:	3b01      	subs	r3, #1
 800812e:	b29a      	uxth	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008134:	e011      	b.n	800815a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008136:	f7fe fb53 	bl	80067e0 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d803      	bhi.n	800814e <HAL_SPI_Receive+0x1cc>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814c:	d102      	bne.n	8008154 <HAL_SPI_Receive+0x1d2>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d102      	bne.n	800815a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008158:	e017      	b.n	800818a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800815e:	b29b      	uxth	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1cd      	bne.n	8008100 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 fa45 	bl	80085f8 <SPI_EndRxTransaction>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2220      	movs	r2, #32
 8008178:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	75fb      	strb	r3, [r7, #23]
 8008186:	e000      	b.n	800818a <HAL_SPI_Receive+0x208>
  }

error :
 8008188:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800819a:	7dfb      	ldrb	r3, [r7, #23]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08c      	sub	sp, #48	; 0x30
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80081b2:	2301      	movs	r3, #1
 80081b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d101      	bne.n	80081ca <HAL_SPI_TransmitReceive+0x26>
 80081c6:	2302      	movs	r3, #2
 80081c8:	e18a      	b.n	80084e0 <HAL_SPI_TransmitReceive+0x33c>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081d2:	f7fe fb05 	bl	80067e0 <HAL_GetTick>
 80081d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80081e8:	887b      	ldrh	r3, [r7, #2]
 80081ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d00f      	beq.n	8008214 <HAL_SPI_TransmitReceive+0x70>
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081fa:	d107      	bne.n	800820c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d103      	bne.n	800820c <HAL_SPI_TransmitReceive+0x68>
 8008204:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008208:	2b04      	cmp	r3, #4
 800820a:	d003      	beq.n	8008214 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800820c:	2302      	movs	r3, #2
 800820e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008212:	e15b      	b.n	80084cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d005      	beq.n	8008226 <HAL_SPI_TransmitReceive+0x82>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <HAL_SPI_TransmitReceive+0x82>
 8008220:	887b      	ldrh	r3, [r7, #2]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d103      	bne.n	800822e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800822c:	e14e      	b.n	80084cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b04      	cmp	r3, #4
 8008238:	d003      	beq.n	8008242 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2205      	movs	r2, #5
 800823e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	887a      	ldrh	r2, [r7, #2]
 8008252:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	887a      	ldrh	r2, [r7, #2]
 8008258:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	887a      	ldrh	r2, [r7, #2]
 8008264:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	887a      	ldrh	r2, [r7, #2]
 800826a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008282:	2b40      	cmp	r3, #64	; 0x40
 8008284:	d007      	beq.n	8008296 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008294:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800829e:	d178      	bne.n	8008392 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <HAL_SPI_TransmitReceive+0x10a>
 80082a8:	8b7b      	ldrh	r3, [r7, #26]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d166      	bne.n	800837c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b2:	881a      	ldrh	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082be:	1c9a      	adds	r2, r3, #2
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	3b01      	subs	r3, #1
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082d2:	e053      	b.n	800837c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d11b      	bne.n	800831a <HAL_SPI_TransmitReceive+0x176>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d016      	beq.n	800831a <HAL_SPI_TransmitReceive+0x176>
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d113      	bne.n	800831a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f6:	881a      	ldrh	r2, [r3, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008302:	1c9a      	adds	r2, r3, #2
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800830c:	b29b      	uxth	r3, r3
 800830e:	3b01      	subs	r3, #1
 8008310:	b29a      	uxth	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b01      	cmp	r3, #1
 8008326:	d119      	bne.n	800835c <HAL_SPI_TransmitReceive+0x1b8>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800832c:	b29b      	uxth	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d014      	beq.n	800835c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68da      	ldr	r2, [r3, #12]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	b292      	uxth	r2, r2
 800833e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008344:	1c9a      	adds	r2, r3, #2
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800834e:	b29b      	uxth	r3, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008358:	2301      	movs	r3, #1
 800835a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800835c:	f7fe fa40 	bl	80067e0 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008368:	429a      	cmp	r2, r3
 800836a:	d807      	bhi.n	800837c <HAL_SPI_TransmitReceive+0x1d8>
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008372:	d003      	beq.n	800837c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800837a:	e0a7      	b.n	80084cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008380:	b29b      	uxth	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1a6      	bne.n	80082d4 <HAL_SPI_TransmitReceive+0x130>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800838a:	b29b      	uxth	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1a1      	bne.n	80082d4 <HAL_SPI_TransmitReceive+0x130>
 8008390:	e07c      	b.n	800848c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d002      	beq.n	80083a0 <HAL_SPI_TransmitReceive+0x1fc>
 800839a:	8b7b      	ldrh	r3, [r7, #26]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d16b      	bne.n	8008478 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	330c      	adds	r3, #12
 80083aa:	7812      	ldrb	r2, [r2, #0]
 80083ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083bc:	b29b      	uxth	r3, r3
 80083be:	3b01      	subs	r3, #1
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083c6:	e057      	b.n	8008478 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d11c      	bne.n	8008410 <HAL_SPI_TransmitReceive+0x26c>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083da:	b29b      	uxth	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d017      	beq.n	8008410 <HAL_SPI_TransmitReceive+0x26c>
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d114      	bne.n	8008410 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	330c      	adds	r3, #12
 80083f0:	7812      	ldrb	r2, [r2, #0]
 80083f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f8:	1c5a      	adds	r2, r3, #1
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008402:	b29b      	uxth	r3, r3
 8008404:	3b01      	subs	r3, #1
 8008406:	b29a      	uxth	r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b01      	cmp	r3, #1
 800841c:	d119      	bne.n	8008452 <HAL_SPI_TransmitReceive+0x2ae>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008422:	b29b      	uxth	r3, r3
 8008424:	2b00      	cmp	r3, #0
 8008426:	d014      	beq.n	8008452 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008432:	b2d2      	uxtb	r2, r2
 8008434:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843a:	1c5a      	adds	r2, r3, #1
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008444:	b29b      	uxth	r3, r3
 8008446:	3b01      	subs	r3, #1
 8008448:	b29a      	uxth	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800844e:	2301      	movs	r3, #1
 8008450:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008452:	f7fe f9c5 	bl	80067e0 <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800845e:	429a      	cmp	r2, r3
 8008460:	d803      	bhi.n	800846a <HAL_SPI_TransmitReceive+0x2c6>
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008468:	d102      	bne.n	8008470 <HAL_SPI_TransmitReceive+0x2cc>
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	2b00      	cmp	r3, #0
 800846e:	d103      	bne.n	8008478 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008476:	e029      	b.n	80084cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800847c:	b29b      	uxth	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1a2      	bne.n	80083c8 <HAL_SPI_TransmitReceive+0x224>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008486:	b29b      	uxth	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d19d      	bne.n	80083c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800848c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800848e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 f917 	bl	80086c4 <SPI_EndRxTxTransaction>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d006      	beq.n	80084aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2220      	movs	r2, #32
 80084a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80084a8:	e010      	b.n	80084cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10b      	bne.n	80084ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	617b      	str	r3, [r7, #20]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	617b      	str	r3, [r7, #20]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	e000      	b.n	80084cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80084ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80084dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3730      	adds	r7, #48	; 0x30
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b088      	sub	sp, #32
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	4613      	mov	r3, r2
 80084f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084f8:	f7fe f972 	bl	80067e0 <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008500:	1a9b      	subs	r3, r3, r2
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	4413      	add	r3, r2
 8008506:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008508:	f7fe f96a 	bl	80067e0 <HAL_GetTick>
 800850c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800850e:	4b39      	ldr	r3, [pc, #228]	; (80085f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	015b      	lsls	r3, r3, #5
 8008514:	0d1b      	lsrs	r3, r3, #20
 8008516:	69fa      	ldr	r2, [r7, #28]
 8008518:	fb02 f303 	mul.w	r3, r2, r3
 800851c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800851e:	e054      	b.n	80085ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008526:	d050      	beq.n	80085ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008528:	f7fe f95a 	bl	80067e0 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	69fa      	ldr	r2, [r7, #28]
 8008534:	429a      	cmp	r2, r3
 8008536:	d902      	bls.n	800853e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d13d      	bne.n	80085ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800854c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008556:	d111      	bne.n	800857c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008560:	d004      	beq.n	800856c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800856a:	d107      	bne.n	800857c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800857a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008584:	d10f      	bne.n	80085a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e017      	b.n	80085ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d101      	bne.n	80085c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	689a      	ldr	r2, [r3, #8]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4013      	ands	r3, r2
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	bf0c      	ite	eq
 80085da:	2301      	moveq	r3, #1
 80085dc:	2300      	movne	r3, #0
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	461a      	mov	r2, r3
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d19b      	bne.n	8008520 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3720      	adds	r7, #32
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20000068 	.word	0x20000068

080085f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af02      	add	r7, sp, #8
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800860c:	d111      	bne.n	8008632 <SPI_EndRxTransaction+0x3a>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008616:	d004      	beq.n	8008622 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008620:	d107      	bne.n	8008632 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008630:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800863a:	d12a      	bne.n	8008692 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008644:	d012      	beq.n	800866c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2200      	movs	r2, #0
 800864e:	2180      	movs	r1, #128	; 0x80
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f7ff ff49 	bl	80084e8 <SPI_WaitFlagStateUntilTimeout>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d02d      	beq.n	80086b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008660:	f043 0220 	orr.w	r2, r3, #32
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e026      	b.n	80086ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2200      	movs	r2, #0
 8008674:	2101      	movs	r1, #1
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7ff ff36 	bl	80084e8 <SPI_WaitFlagStateUntilTimeout>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d01a      	beq.n	80086b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008686:	f043 0220 	orr.w	r2, r3, #32
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e013      	b.n	80086ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2200      	movs	r2, #0
 800869a:	2101      	movs	r1, #1
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7ff ff23 	bl	80084e8 <SPI_WaitFlagStateUntilTimeout>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d007      	beq.n	80086b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ac:	f043 0220 	orr.w	r2, r3, #32
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e000      	b.n	80086ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b088      	sub	sp, #32
 80086c8:	af02      	add	r7, sp, #8
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80086d0:	4b1b      	ldr	r3, [pc, #108]	; (8008740 <SPI_EndRxTxTransaction+0x7c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a1b      	ldr	r2, [pc, #108]	; (8008744 <SPI_EndRxTxTransaction+0x80>)
 80086d6:	fba2 2303 	umull	r2, r3, r2, r3
 80086da:	0d5b      	lsrs	r3, r3, #21
 80086dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086e0:	fb02 f303 	mul.w	r3, r2, r3
 80086e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086ee:	d112      	bne.n	8008716 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2200      	movs	r2, #0
 80086f8:	2180      	movs	r1, #128	; 0x80
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f7ff fef4 	bl	80084e8 <SPI_WaitFlagStateUntilTimeout>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d016      	beq.n	8008734 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870a:	f043 0220 	orr.w	r2, r3, #32
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e00f      	b.n	8008736 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00a      	beq.n	8008732 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	3b01      	subs	r3, #1
 8008720:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872c:	2b80      	cmp	r3, #128	; 0x80
 800872e:	d0f2      	beq.n	8008716 <SPI_EndRxTxTransaction+0x52>
 8008730:	e000      	b.n	8008734 <SPI_EndRxTxTransaction+0x70>
        break;
 8008732:	bf00      	nop
  }

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3718      	adds	r7, #24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	20000068 	.word	0x20000068
 8008744:	165e9f81 	.word	0x165e9f81

08008748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e041      	b.n	80087de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d106      	bne.n	8008774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7fb f96c 	bl	8003a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2202      	movs	r2, #2
 8008778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3304      	adds	r3, #4
 8008784:	4619      	mov	r1, r3
 8008786:	4610      	mov	r0, r2
 8008788:	f000 fafe 	bl	8008d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
	...

080087e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d001      	beq.n	8008800 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e046      	b.n	800888e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a23      	ldr	r2, [pc, #140]	; (800889c <HAL_TIM_Base_Start+0xb4>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d022      	beq.n	8008858 <HAL_TIM_Base_Start+0x70>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800881a:	d01d      	beq.n	8008858 <HAL_TIM_Base_Start+0x70>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a1f      	ldr	r2, [pc, #124]	; (80088a0 <HAL_TIM_Base_Start+0xb8>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d018      	beq.n	8008858 <HAL_TIM_Base_Start+0x70>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a1e      	ldr	r2, [pc, #120]	; (80088a4 <HAL_TIM_Base_Start+0xbc>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d013      	beq.n	8008858 <HAL_TIM_Base_Start+0x70>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a1c      	ldr	r2, [pc, #112]	; (80088a8 <HAL_TIM_Base_Start+0xc0>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00e      	beq.n	8008858 <HAL_TIM_Base_Start+0x70>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a1b      	ldr	r2, [pc, #108]	; (80088ac <HAL_TIM_Base_Start+0xc4>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d009      	beq.n	8008858 <HAL_TIM_Base_Start+0x70>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a19      	ldr	r2, [pc, #100]	; (80088b0 <HAL_TIM_Base_Start+0xc8>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d004      	beq.n	8008858 <HAL_TIM_Base_Start+0x70>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a18      	ldr	r2, [pc, #96]	; (80088b4 <HAL_TIM_Base_Start+0xcc>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d111      	bne.n	800887c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f003 0307 	and.w	r3, r3, #7
 8008862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b06      	cmp	r3, #6
 8008868:	d010      	beq.n	800888c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0201 	orr.w	r2, r2, #1
 8008878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887a:	e007      	b.n	800888c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f042 0201 	orr.w	r2, r2, #1
 800888a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	40010000 	.word	0x40010000
 80088a0:	40000400 	.word	0x40000400
 80088a4:	40000800 	.word	0x40000800
 80088a8:	40000c00 	.word	0x40000c00
 80088ac:	40010400 	.word	0x40010400
 80088b0:	40014000 	.word	0x40014000
 80088b4:	40001800 	.word	0x40001800

080088b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d001      	beq.n	80088d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e04e      	b.n	800896e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0201 	orr.w	r2, r2, #1
 80088e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a23      	ldr	r2, [pc, #140]	; (800897c <HAL_TIM_Base_Start_IT+0xc4>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d022      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x80>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088fa:	d01d      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x80>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <HAL_TIM_Base_Start_IT+0xc8>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d018      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x80>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a1e      	ldr	r2, [pc, #120]	; (8008984 <HAL_TIM_Base_Start_IT+0xcc>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d013      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x80>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a1c      	ldr	r2, [pc, #112]	; (8008988 <HAL_TIM_Base_Start_IT+0xd0>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d00e      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x80>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a1b      	ldr	r2, [pc, #108]	; (800898c <HAL_TIM_Base_Start_IT+0xd4>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d009      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x80>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a19      	ldr	r2, [pc, #100]	; (8008990 <HAL_TIM_Base_Start_IT+0xd8>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d004      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x80>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a18      	ldr	r2, [pc, #96]	; (8008994 <HAL_TIM_Base_Start_IT+0xdc>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d111      	bne.n	800895c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f003 0307 	and.w	r3, r3, #7
 8008942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b06      	cmp	r3, #6
 8008948:	d010      	beq.n	800896c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f042 0201 	orr.w	r2, r2, #1
 8008958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800895a:	e007      	b.n	800896c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0201 	orr.w	r2, r2, #1
 800896a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	40010000 	.word	0x40010000
 8008980:	40000400 	.word	0x40000400
 8008984:	40000800 	.word	0x40000800
 8008988:	40000c00 	.word	0x40000c00
 800898c:	40010400 	.word	0x40010400
 8008990:	40014000 	.word	0x40014000
 8008994:	40001800 	.word	0x40001800

08008998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d122      	bne.n	80089f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d11b      	bne.n	80089f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f06f 0202 	mvn.w	r2, #2
 80089c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	f003 0303 	and.w	r3, r3, #3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f9b5 	bl	8008d4a <HAL_TIM_IC_CaptureCallback>
 80089e0:	e005      	b.n	80089ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f9a7 	bl	8008d36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f9b8 	bl	8008d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	f003 0304 	and.w	r3, r3, #4
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	d122      	bne.n	8008a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d11b      	bne.n	8008a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f06f 0204 	mvn.w	r2, #4
 8008a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f98b 	bl	8008d4a <HAL_TIM_IC_CaptureCallback>
 8008a34:	e005      	b.n	8008a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f97d 	bl	8008d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f98e 	bl	8008d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f003 0308 	and.w	r3, r3, #8
 8008a52:	2b08      	cmp	r3, #8
 8008a54:	d122      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f003 0308 	and.w	r3, r3, #8
 8008a60:	2b08      	cmp	r3, #8
 8008a62:	d11b      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f06f 0208 	mvn.w	r2, #8
 8008a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2204      	movs	r2, #4
 8008a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f961 	bl	8008d4a <HAL_TIM_IC_CaptureCallback>
 8008a88:	e005      	b.n	8008a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f953 	bl	8008d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f964 	bl	8008d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f003 0310 	and.w	r3, r3, #16
 8008aa6:	2b10      	cmp	r3, #16
 8008aa8:	d122      	bne.n	8008af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	2b10      	cmp	r3, #16
 8008ab6:	d11b      	bne.n	8008af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f06f 0210 	mvn.w	r2, #16
 8008ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2208      	movs	r2, #8
 8008ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f937 	bl	8008d4a <HAL_TIM_IC_CaptureCallback>
 8008adc:	e005      	b.n	8008aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f929 	bl	8008d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f93a 	bl	8008d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d10e      	bne.n	8008b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d107      	bne.n	8008b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f06f 0201 	mvn.w	r2, #1
 8008b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7f9 f9a2 	bl	8001e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b26:	2b80      	cmp	r3, #128	; 0x80
 8008b28:	d10e      	bne.n	8008b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b34:	2b80      	cmp	r3, #128	; 0x80
 8008b36:	d107      	bne.n	8008b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fae0 	bl	8009108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b52:	2b40      	cmp	r3, #64	; 0x40
 8008b54:	d10e      	bne.n	8008b74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	d107      	bne.n	8008b74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f8ff 	bl	8008d72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	f003 0320 	and.w	r3, r3, #32
 8008b7e:	2b20      	cmp	r3, #32
 8008b80:	d10e      	bne.n	8008ba0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f003 0320 	and.w	r3, r3, #32
 8008b8c:	2b20      	cmp	r3, #32
 8008b8e:	d107      	bne.n	8008ba0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f06f 0220 	mvn.w	r2, #32
 8008b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 faaa 	bl	80090f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d101      	bne.n	8008bc4 <HAL_TIM_ConfigClockSource+0x1c>
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	e0b4      	b.n	8008d2e <HAL_TIM_ConfigClockSource+0x186>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bfc:	d03e      	beq.n	8008c7c <HAL_TIM_ConfigClockSource+0xd4>
 8008bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c02:	f200 8087 	bhi.w	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c0a:	f000 8086 	beq.w	8008d1a <HAL_TIM_ConfigClockSource+0x172>
 8008c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c12:	d87f      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c14:	2b70      	cmp	r3, #112	; 0x70
 8008c16:	d01a      	beq.n	8008c4e <HAL_TIM_ConfigClockSource+0xa6>
 8008c18:	2b70      	cmp	r3, #112	; 0x70
 8008c1a:	d87b      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c1c:	2b60      	cmp	r3, #96	; 0x60
 8008c1e:	d050      	beq.n	8008cc2 <HAL_TIM_ConfigClockSource+0x11a>
 8008c20:	2b60      	cmp	r3, #96	; 0x60
 8008c22:	d877      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c24:	2b50      	cmp	r3, #80	; 0x50
 8008c26:	d03c      	beq.n	8008ca2 <HAL_TIM_ConfigClockSource+0xfa>
 8008c28:	2b50      	cmp	r3, #80	; 0x50
 8008c2a:	d873      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c2c:	2b40      	cmp	r3, #64	; 0x40
 8008c2e:	d058      	beq.n	8008ce2 <HAL_TIM_ConfigClockSource+0x13a>
 8008c30:	2b40      	cmp	r3, #64	; 0x40
 8008c32:	d86f      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c34:	2b30      	cmp	r3, #48	; 0x30
 8008c36:	d064      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x15a>
 8008c38:	2b30      	cmp	r3, #48	; 0x30
 8008c3a:	d86b      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c3c:	2b20      	cmp	r3, #32
 8008c3e:	d060      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x15a>
 8008c40:	2b20      	cmp	r3, #32
 8008c42:	d867      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d05c      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x15a>
 8008c48:	2b10      	cmp	r3, #16
 8008c4a:	d05a      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x15a>
 8008c4c:	e062      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6818      	ldr	r0, [r3, #0]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	6899      	ldr	r1, [r3, #8]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f000 f9ad 	bl	8008fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	609a      	str	r2, [r3, #8]
      break;
 8008c7a:	e04f      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6818      	ldr	r0, [r3, #0]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	6899      	ldr	r1, [r3, #8]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f000 f996 	bl	8008fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c9e:	609a      	str	r2, [r3, #8]
      break;
 8008ca0:	e03c      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	6859      	ldr	r1, [r3, #4]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	f000 f90a 	bl	8008ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2150      	movs	r1, #80	; 0x50
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 f963 	bl	8008f86 <TIM_ITRx_SetConfig>
      break;
 8008cc0:	e02c      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6818      	ldr	r0, [r3, #0]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	6859      	ldr	r1, [r3, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f000 f929 	bl	8008f26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2160      	movs	r1, #96	; 0x60
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 f953 	bl	8008f86 <TIM_ITRx_SetConfig>
      break;
 8008ce0:	e01c      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	6859      	ldr	r1, [r3, #4]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f000 f8ea 	bl	8008ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2140      	movs	r1, #64	; 0x40
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 f943 	bl	8008f86 <TIM_ITRx_SetConfig>
      break;
 8008d00:	e00c      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	f000 f93a 	bl	8008f86 <TIM_ITRx_SetConfig>
      break;
 8008d12:	e003      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	73fb      	strb	r3, [r7, #15]
      break;
 8008d18:	e000      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b083      	sub	sp, #12
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b083      	sub	sp, #12
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d66:	bf00      	nop
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d7a:	bf00      	nop
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
	...

08008d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a40      	ldr	r2, [pc, #256]	; (8008e9c <TIM_Base_SetConfig+0x114>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d013      	beq.n	8008dc8 <TIM_Base_SetConfig+0x40>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da6:	d00f      	beq.n	8008dc8 <TIM_Base_SetConfig+0x40>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a3d      	ldr	r2, [pc, #244]	; (8008ea0 <TIM_Base_SetConfig+0x118>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d00b      	beq.n	8008dc8 <TIM_Base_SetConfig+0x40>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a3c      	ldr	r2, [pc, #240]	; (8008ea4 <TIM_Base_SetConfig+0x11c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d007      	beq.n	8008dc8 <TIM_Base_SetConfig+0x40>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a3b      	ldr	r2, [pc, #236]	; (8008ea8 <TIM_Base_SetConfig+0x120>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d003      	beq.n	8008dc8 <TIM_Base_SetConfig+0x40>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a3a      	ldr	r2, [pc, #232]	; (8008eac <TIM_Base_SetConfig+0x124>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d108      	bne.n	8008dda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a2f      	ldr	r2, [pc, #188]	; (8008e9c <TIM_Base_SetConfig+0x114>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d02b      	beq.n	8008e3a <TIM_Base_SetConfig+0xb2>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de8:	d027      	beq.n	8008e3a <TIM_Base_SetConfig+0xb2>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a2c      	ldr	r2, [pc, #176]	; (8008ea0 <TIM_Base_SetConfig+0x118>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d023      	beq.n	8008e3a <TIM_Base_SetConfig+0xb2>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a2b      	ldr	r2, [pc, #172]	; (8008ea4 <TIM_Base_SetConfig+0x11c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d01f      	beq.n	8008e3a <TIM_Base_SetConfig+0xb2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a2a      	ldr	r2, [pc, #168]	; (8008ea8 <TIM_Base_SetConfig+0x120>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d01b      	beq.n	8008e3a <TIM_Base_SetConfig+0xb2>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a29      	ldr	r2, [pc, #164]	; (8008eac <TIM_Base_SetConfig+0x124>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d017      	beq.n	8008e3a <TIM_Base_SetConfig+0xb2>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a28      	ldr	r2, [pc, #160]	; (8008eb0 <TIM_Base_SetConfig+0x128>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d013      	beq.n	8008e3a <TIM_Base_SetConfig+0xb2>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a27      	ldr	r2, [pc, #156]	; (8008eb4 <TIM_Base_SetConfig+0x12c>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d00f      	beq.n	8008e3a <TIM_Base_SetConfig+0xb2>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a26      	ldr	r2, [pc, #152]	; (8008eb8 <TIM_Base_SetConfig+0x130>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d00b      	beq.n	8008e3a <TIM_Base_SetConfig+0xb2>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a25      	ldr	r2, [pc, #148]	; (8008ebc <TIM_Base_SetConfig+0x134>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d007      	beq.n	8008e3a <TIM_Base_SetConfig+0xb2>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a24      	ldr	r2, [pc, #144]	; (8008ec0 <TIM_Base_SetConfig+0x138>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d003      	beq.n	8008e3a <TIM_Base_SetConfig+0xb2>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a23      	ldr	r2, [pc, #140]	; (8008ec4 <TIM_Base_SetConfig+0x13c>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d108      	bne.n	8008e4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	695b      	ldr	r3, [r3, #20]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a0a      	ldr	r2, [pc, #40]	; (8008e9c <TIM_Base_SetConfig+0x114>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d003      	beq.n	8008e80 <TIM_Base_SetConfig+0xf8>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a0c      	ldr	r2, [pc, #48]	; (8008eac <TIM_Base_SetConfig+0x124>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d103      	bne.n	8008e88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	691a      	ldr	r2, [r3, #16]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	615a      	str	r2, [r3, #20]
}
 8008e8e:	bf00      	nop
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	40010000 	.word	0x40010000
 8008ea0:	40000400 	.word	0x40000400
 8008ea4:	40000800 	.word	0x40000800
 8008ea8:	40000c00 	.word	0x40000c00
 8008eac:	40010400 	.word	0x40010400
 8008eb0:	40014000 	.word	0x40014000
 8008eb4:	40014400 	.word	0x40014400
 8008eb8:	40014800 	.word	0x40014800
 8008ebc:	40001800 	.word	0x40001800
 8008ec0:	40001c00 	.word	0x40001c00
 8008ec4:	40002000 	.word	0x40002000

08008ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6a1b      	ldr	r3, [r3, #32]
 8008ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	f023 0201 	bic.w	r2, r3, #1
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	011b      	lsls	r3, r3, #4
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	f023 030a 	bic.w	r3, r3, #10
 8008f04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	621a      	str	r2, [r3, #32]
}
 8008f1a:	bf00      	nop
 8008f1c:	371c      	adds	r7, #28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f26:	b480      	push	{r7}
 8008f28:	b087      	sub	sp, #28
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	f023 0210 	bic.w	r2, r3, #16
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	031b      	lsls	r3, r3, #12
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	011b      	lsls	r3, r3, #4
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	621a      	str	r2, [r3, #32]
}
 8008f7a:	bf00      	nop
 8008f7c:	371c      	adds	r7, #28
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b085      	sub	sp, #20
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	f043 0307 	orr.w	r3, r3, #7
 8008fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	609a      	str	r2, [r3, #8]
}
 8008fb0:	bf00      	nop
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	021a      	lsls	r2, r3, #8
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	609a      	str	r2, [r3, #8]
}
 8008ff0:	bf00      	nop
 8008ff2:	371c      	adds	r7, #28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800900c:	2b01      	cmp	r3, #1
 800900e:	d101      	bne.n	8009014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009010:	2302      	movs	r3, #2
 8009012:	e05a      	b.n	80090ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2202      	movs	r2, #2
 8009020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800903a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	4313      	orrs	r3, r2
 8009044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a21      	ldr	r2, [pc, #132]	; (80090d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d022      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009060:	d01d      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a1d      	ldr	r2, [pc, #116]	; (80090dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d018      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a1b      	ldr	r2, [pc, #108]	; (80090e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d013      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a1a      	ldr	r2, [pc, #104]	; (80090e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d00e      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a18      	ldr	r2, [pc, #96]	; (80090e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d009      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a17      	ldr	r2, [pc, #92]	; (80090ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d004      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a15      	ldr	r2, [pc, #84]	; (80090f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d10c      	bne.n	80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	40010000 	.word	0x40010000
 80090dc:	40000400 	.word	0x40000400
 80090e0:	40000800 	.word	0x40000800
 80090e4:	40000c00 	.word	0x40000c00
 80090e8:	40010400 	.word	0x40010400
 80090ec:	40014000 	.word	0x40014000
 80090f0:	40001800 	.word	0x40001800

080090f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e03f      	b.n	80091ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d106      	bne.n	8009148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7fa fcfe 	bl	8003b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2224      	movs	r2, #36	; 0x24
 800914c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68da      	ldr	r2, [r3, #12]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800915e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f929 	bl	80093b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	691a      	ldr	r2, [r3, #16]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	695a      	ldr	r2, [r3, #20]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68da      	ldr	r2, [r3, #12]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2220      	movs	r2, #32
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2220      	movs	r2, #32
 80091a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b08a      	sub	sp, #40	; 0x28
 80091ba:	af02      	add	r7, sp, #8
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	60b9      	str	r1, [r7, #8]
 80091c0:	603b      	str	r3, [r7, #0]
 80091c2:	4613      	mov	r3, r2
 80091c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	d17c      	bne.n	80092d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <HAL_UART_Transmit+0x2c>
 80091dc:	88fb      	ldrh	r3, [r7, #6]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e075      	b.n	80092d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d101      	bne.n	80091f4 <HAL_UART_Transmit+0x3e>
 80091f0:	2302      	movs	r3, #2
 80091f2:	e06e      	b.n	80092d2 <HAL_UART_Transmit+0x11c>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2221      	movs	r2, #33	; 0x21
 8009206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800920a:	f7fd fae9 	bl	80067e0 <HAL_GetTick>
 800920e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	88fa      	ldrh	r2, [r7, #6]
 8009214:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	88fa      	ldrh	r2, [r7, #6]
 800921a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009224:	d108      	bne.n	8009238 <HAL_UART_Transmit+0x82>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d104      	bne.n	8009238 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800922e:	2300      	movs	r3, #0
 8009230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	61bb      	str	r3, [r7, #24]
 8009236:	e003      	b.n	8009240 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800923c:	2300      	movs	r3, #0
 800923e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009248:	e02a      	b.n	80092a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	2200      	movs	r2, #0
 8009252:	2180      	movs	r1, #128	; 0x80
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f000 f840 	bl	80092da <UART_WaitOnFlagUntilTimeout>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e036      	b.n	80092d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10b      	bne.n	8009282 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	881b      	ldrh	r3, [r3, #0]
 800926e:	461a      	mov	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009278:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	3302      	adds	r3, #2
 800927e:	61bb      	str	r3, [r7, #24]
 8009280:	e007      	b.n	8009292 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	781a      	ldrb	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	3301      	adds	r3, #1
 8009290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009296:	b29b      	uxth	r3, r3
 8009298:	3b01      	subs	r3, #1
 800929a:	b29a      	uxth	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1cf      	bne.n	800924a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2200      	movs	r2, #0
 80092b2:	2140      	movs	r1, #64	; 0x40
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f810 	bl	80092da <UART_WaitOnFlagUntilTimeout>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e006      	b.n	80092d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2220      	movs	r2, #32
 80092c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	e000      	b.n	80092d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80092d0:	2302      	movs	r3, #2
  }
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3720      	adds	r7, #32
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b090      	sub	sp, #64	; 0x40
 80092de:	af00      	add	r7, sp, #0
 80092e0:	60f8      	str	r0, [r7, #12]
 80092e2:	60b9      	str	r1, [r7, #8]
 80092e4:	603b      	str	r3, [r7, #0]
 80092e6:	4613      	mov	r3, r2
 80092e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ea:	e050      	b.n	800938e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f2:	d04c      	beq.n	800938e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80092f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d007      	beq.n	800930a <UART_WaitOnFlagUntilTimeout+0x30>
 80092fa:	f7fd fa71 	bl	80067e0 <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009306:	429a      	cmp	r2, r3
 8009308:	d241      	bcs.n	800938e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	330c      	adds	r3, #12
 8009310:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009314:	e853 3f00 	ldrex	r3, [r3]
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	330c      	adds	r3, #12
 8009328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800932a:	637a      	str	r2, [r7, #52]	; 0x34
 800932c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e5      	bne.n	800930a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3314      	adds	r3, #20
 8009344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	e853 3f00 	ldrex	r3, [r3]
 800934c:	613b      	str	r3, [r7, #16]
   return(result);
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	f023 0301 	bic.w	r3, r3, #1
 8009354:	63bb      	str	r3, [r7, #56]	; 0x38
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	3314      	adds	r3, #20
 800935c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800935e:	623a      	str	r2, [r7, #32]
 8009360:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009362:	69f9      	ldr	r1, [r7, #28]
 8009364:	6a3a      	ldr	r2, [r7, #32]
 8009366:	e841 2300 	strex	r3, r2, [r1]
 800936a:	61bb      	str	r3, [r7, #24]
   return(result);
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1e5      	bne.n	800933e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2220      	movs	r2, #32
 8009376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2220      	movs	r2, #32
 800937e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e00f      	b.n	80093ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	4013      	ands	r3, r2
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	429a      	cmp	r2, r3
 800939c:	bf0c      	ite	eq
 800939e:	2301      	moveq	r3, #1
 80093a0:	2300      	movne	r3, #0
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	461a      	mov	r2, r3
 80093a6:	79fb      	ldrb	r3, [r7, #7]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d09f      	beq.n	80092ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3740      	adds	r7, #64	; 0x40
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093bc:	b0c0      	sub	sp, #256	; 0x100
 80093be:	af00      	add	r7, sp, #0
 80093c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80093d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d4:	68d9      	ldr	r1, [r3, #12]
 80093d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	ea40 0301 	orr.w	r3, r0, r1
 80093e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	431a      	orrs	r2, r3
 80093f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	431a      	orrs	r2, r3
 80093f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	4313      	orrs	r3, r2
 8009400:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009410:	f021 010c 	bic.w	r1, r1, #12
 8009414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800941e:	430b      	orrs	r3, r1
 8009420:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800942e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009432:	6999      	ldr	r1, [r3, #24]
 8009434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	ea40 0301 	orr.w	r3, r0, r1
 800943e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	4b8f      	ldr	r3, [pc, #572]	; (8009684 <UART_SetConfig+0x2cc>)
 8009448:	429a      	cmp	r2, r3
 800944a:	d005      	beq.n	8009458 <UART_SetConfig+0xa0>
 800944c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	4b8d      	ldr	r3, [pc, #564]	; (8009688 <UART_SetConfig+0x2d0>)
 8009454:	429a      	cmp	r2, r3
 8009456:	d104      	bne.n	8009462 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009458:	f7fe fbba 	bl	8007bd0 <HAL_RCC_GetPCLK2Freq>
 800945c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009460:	e003      	b.n	800946a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009462:	f7fe fba1 	bl	8007ba8 <HAL_RCC_GetPCLK1Freq>
 8009466:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800946a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800946e:	69db      	ldr	r3, [r3, #28]
 8009470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009474:	f040 810c 	bne.w	8009690 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800947c:	2200      	movs	r2, #0
 800947e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009482:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009486:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800948a:	4622      	mov	r2, r4
 800948c:	462b      	mov	r3, r5
 800948e:	1891      	adds	r1, r2, r2
 8009490:	65b9      	str	r1, [r7, #88]	; 0x58
 8009492:	415b      	adcs	r3, r3
 8009494:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009496:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800949a:	4621      	mov	r1, r4
 800949c:	eb12 0801 	adds.w	r8, r2, r1
 80094a0:	4629      	mov	r1, r5
 80094a2:	eb43 0901 	adc.w	r9, r3, r1
 80094a6:	f04f 0200 	mov.w	r2, #0
 80094aa:	f04f 0300 	mov.w	r3, #0
 80094ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80094b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80094b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80094ba:	4690      	mov	r8, r2
 80094bc:	4699      	mov	r9, r3
 80094be:	4623      	mov	r3, r4
 80094c0:	eb18 0303 	adds.w	r3, r8, r3
 80094c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80094c8:	462b      	mov	r3, r5
 80094ca:	eb49 0303 	adc.w	r3, r9, r3
 80094ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80094d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80094de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80094e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80094e6:	460b      	mov	r3, r1
 80094e8:	18db      	adds	r3, r3, r3
 80094ea:	653b      	str	r3, [r7, #80]	; 0x50
 80094ec:	4613      	mov	r3, r2
 80094ee:	eb42 0303 	adc.w	r3, r2, r3
 80094f2:	657b      	str	r3, [r7, #84]	; 0x54
 80094f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80094f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80094fc:	f7f7 fbc4 	bl	8000c88 <__aeabi_uldivmod>
 8009500:	4602      	mov	r2, r0
 8009502:	460b      	mov	r3, r1
 8009504:	4b61      	ldr	r3, [pc, #388]	; (800968c <UART_SetConfig+0x2d4>)
 8009506:	fba3 2302 	umull	r2, r3, r3, r2
 800950a:	095b      	lsrs	r3, r3, #5
 800950c:	011c      	lsls	r4, r3, #4
 800950e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009512:	2200      	movs	r2, #0
 8009514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009518:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800951c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009520:	4642      	mov	r2, r8
 8009522:	464b      	mov	r3, r9
 8009524:	1891      	adds	r1, r2, r2
 8009526:	64b9      	str	r1, [r7, #72]	; 0x48
 8009528:	415b      	adcs	r3, r3
 800952a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800952c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009530:	4641      	mov	r1, r8
 8009532:	eb12 0a01 	adds.w	sl, r2, r1
 8009536:	4649      	mov	r1, r9
 8009538:	eb43 0b01 	adc.w	fp, r3, r1
 800953c:	f04f 0200 	mov.w	r2, #0
 8009540:	f04f 0300 	mov.w	r3, #0
 8009544:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009548:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800954c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009550:	4692      	mov	sl, r2
 8009552:	469b      	mov	fp, r3
 8009554:	4643      	mov	r3, r8
 8009556:	eb1a 0303 	adds.w	r3, sl, r3
 800955a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800955e:	464b      	mov	r3, r9
 8009560:	eb4b 0303 	adc.w	r3, fp, r3
 8009564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009574:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009578:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800957c:	460b      	mov	r3, r1
 800957e:	18db      	adds	r3, r3, r3
 8009580:	643b      	str	r3, [r7, #64]	; 0x40
 8009582:	4613      	mov	r3, r2
 8009584:	eb42 0303 	adc.w	r3, r2, r3
 8009588:	647b      	str	r3, [r7, #68]	; 0x44
 800958a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800958e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009592:	f7f7 fb79 	bl	8000c88 <__aeabi_uldivmod>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4611      	mov	r1, r2
 800959c:	4b3b      	ldr	r3, [pc, #236]	; (800968c <UART_SetConfig+0x2d4>)
 800959e:	fba3 2301 	umull	r2, r3, r3, r1
 80095a2:	095b      	lsrs	r3, r3, #5
 80095a4:	2264      	movs	r2, #100	; 0x64
 80095a6:	fb02 f303 	mul.w	r3, r2, r3
 80095aa:	1acb      	subs	r3, r1, r3
 80095ac:	00db      	lsls	r3, r3, #3
 80095ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80095b2:	4b36      	ldr	r3, [pc, #216]	; (800968c <UART_SetConfig+0x2d4>)
 80095b4:	fba3 2302 	umull	r2, r3, r3, r2
 80095b8:	095b      	lsrs	r3, r3, #5
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80095c0:	441c      	add	r4, r3
 80095c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80095d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80095d4:	4642      	mov	r2, r8
 80095d6:	464b      	mov	r3, r9
 80095d8:	1891      	adds	r1, r2, r2
 80095da:	63b9      	str	r1, [r7, #56]	; 0x38
 80095dc:	415b      	adcs	r3, r3
 80095de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80095e4:	4641      	mov	r1, r8
 80095e6:	1851      	adds	r1, r2, r1
 80095e8:	6339      	str	r1, [r7, #48]	; 0x30
 80095ea:	4649      	mov	r1, r9
 80095ec:	414b      	adcs	r3, r1
 80095ee:	637b      	str	r3, [r7, #52]	; 0x34
 80095f0:	f04f 0200 	mov.w	r2, #0
 80095f4:	f04f 0300 	mov.w	r3, #0
 80095f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80095fc:	4659      	mov	r1, fp
 80095fe:	00cb      	lsls	r3, r1, #3
 8009600:	4651      	mov	r1, sl
 8009602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009606:	4651      	mov	r1, sl
 8009608:	00ca      	lsls	r2, r1, #3
 800960a:	4610      	mov	r0, r2
 800960c:	4619      	mov	r1, r3
 800960e:	4603      	mov	r3, r0
 8009610:	4642      	mov	r2, r8
 8009612:	189b      	adds	r3, r3, r2
 8009614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009618:	464b      	mov	r3, r9
 800961a:	460a      	mov	r2, r1
 800961c:	eb42 0303 	adc.w	r3, r2, r3
 8009620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009630:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009634:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009638:	460b      	mov	r3, r1
 800963a:	18db      	adds	r3, r3, r3
 800963c:	62bb      	str	r3, [r7, #40]	; 0x28
 800963e:	4613      	mov	r3, r2
 8009640:	eb42 0303 	adc.w	r3, r2, r3
 8009644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009646:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800964a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800964e:	f7f7 fb1b 	bl	8000c88 <__aeabi_uldivmod>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	4b0d      	ldr	r3, [pc, #52]	; (800968c <UART_SetConfig+0x2d4>)
 8009658:	fba3 1302 	umull	r1, r3, r3, r2
 800965c:	095b      	lsrs	r3, r3, #5
 800965e:	2164      	movs	r1, #100	; 0x64
 8009660:	fb01 f303 	mul.w	r3, r1, r3
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	3332      	adds	r3, #50	; 0x32
 800966a:	4a08      	ldr	r2, [pc, #32]	; (800968c <UART_SetConfig+0x2d4>)
 800966c:	fba2 2303 	umull	r2, r3, r2, r3
 8009670:	095b      	lsrs	r3, r3, #5
 8009672:	f003 0207 	and.w	r2, r3, #7
 8009676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4422      	add	r2, r4
 800967e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009680:	e105      	b.n	800988e <UART_SetConfig+0x4d6>
 8009682:	bf00      	nop
 8009684:	40011000 	.word	0x40011000
 8009688:	40011400 	.word	0x40011400
 800968c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009694:	2200      	movs	r2, #0
 8009696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800969a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800969e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80096a2:	4642      	mov	r2, r8
 80096a4:	464b      	mov	r3, r9
 80096a6:	1891      	adds	r1, r2, r2
 80096a8:	6239      	str	r1, [r7, #32]
 80096aa:	415b      	adcs	r3, r3
 80096ac:	627b      	str	r3, [r7, #36]	; 0x24
 80096ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80096b2:	4641      	mov	r1, r8
 80096b4:	1854      	adds	r4, r2, r1
 80096b6:	4649      	mov	r1, r9
 80096b8:	eb43 0501 	adc.w	r5, r3, r1
 80096bc:	f04f 0200 	mov.w	r2, #0
 80096c0:	f04f 0300 	mov.w	r3, #0
 80096c4:	00eb      	lsls	r3, r5, #3
 80096c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80096ca:	00e2      	lsls	r2, r4, #3
 80096cc:	4614      	mov	r4, r2
 80096ce:	461d      	mov	r5, r3
 80096d0:	4643      	mov	r3, r8
 80096d2:	18e3      	adds	r3, r4, r3
 80096d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096d8:	464b      	mov	r3, r9
 80096da:	eb45 0303 	adc.w	r3, r5, r3
 80096de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80096f2:	f04f 0200 	mov.w	r2, #0
 80096f6:	f04f 0300 	mov.w	r3, #0
 80096fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80096fe:	4629      	mov	r1, r5
 8009700:	008b      	lsls	r3, r1, #2
 8009702:	4621      	mov	r1, r4
 8009704:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009708:	4621      	mov	r1, r4
 800970a:	008a      	lsls	r2, r1, #2
 800970c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009710:	f7f7 faba 	bl	8000c88 <__aeabi_uldivmod>
 8009714:	4602      	mov	r2, r0
 8009716:	460b      	mov	r3, r1
 8009718:	4b60      	ldr	r3, [pc, #384]	; (800989c <UART_SetConfig+0x4e4>)
 800971a:	fba3 2302 	umull	r2, r3, r3, r2
 800971e:	095b      	lsrs	r3, r3, #5
 8009720:	011c      	lsls	r4, r3, #4
 8009722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009726:	2200      	movs	r2, #0
 8009728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800972c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009730:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009734:	4642      	mov	r2, r8
 8009736:	464b      	mov	r3, r9
 8009738:	1891      	adds	r1, r2, r2
 800973a:	61b9      	str	r1, [r7, #24]
 800973c:	415b      	adcs	r3, r3
 800973e:	61fb      	str	r3, [r7, #28]
 8009740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009744:	4641      	mov	r1, r8
 8009746:	1851      	adds	r1, r2, r1
 8009748:	6139      	str	r1, [r7, #16]
 800974a:	4649      	mov	r1, r9
 800974c:	414b      	adcs	r3, r1
 800974e:	617b      	str	r3, [r7, #20]
 8009750:	f04f 0200 	mov.w	r2, #0
 8009754:	f04f 0300 	mov.w	r3, #0
 8009758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800975c:	4659      	mov	r1, fp
 800975e:	00cb      	lsls	r3, r1, #3
 8009760:	4651      	mov	r1, sl
 8009762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009766:	4651      	mov	r1, sl
 8009768:	00ca      	lsls	r2, r1, #3
 800976a:	4610      	mov	r0, r2
 800976c:	4619      	mov	r1, r3
 800976e:	4603      	mov	r3, r0
 8009770:	4642      	mov	r2, r8
 8009772:	189b      	adds	r3, r3, r2
 8009774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009778:	464b      	mov	r3, r9
 800977a:	460a      	mov	r2, r1
 800977c:	eb42 0303 	adc.w	r3, r2, r3
 8009780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	67bb      	str	r3, [r7, #120]	; 0x78
 800978e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009790:	f04f 0200 	mov.w	r2, #0
 8009794:	f04f 0300 	mov.w	r3, #0
 8009798:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800979c:	4649      	mov	r1, r9
 800979e:	008b      	lsls	r3, r1, #2
 80097a0:	4641      	mov	r1, r8
 80097a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097a6:	4641      	mov	r1, r8
 80097a8:	008a      	lsls	r2, r1, #2
 80097aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80097ae:	f7f7 fa6b 	bl	8000c88 <__aeabi_uldivmod>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	4b39      	ldr	r3, [pc, #228]	; (800989c <UART_SetConfig+0x4e4>)
 80097b8:	fba3 1302 	umull	r1, r3, r3, r2
 80097bc:	095b      	lsrs	r3, r3, #5
 80097be:	2164      	movs	r1, #100	; 0x64
 80097c0:	fb01 f303 	mul.w	r3, r1, r3
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	011b      	lsls	r3, r3, #4
 80097c8:	3332      	adds	r3, #50	; 0x32
 80097ca:	4a34      	ldr	r2, [pc, #208]	; (800989c <UART_SetConfig+0x4e4>)
 80097cc:	fba2 2303 	umull	r2, r3, r2, r3
 80097d0:	095b      	lsrs	r3, r3, #5
 80097d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097d6:	441c      	add	r4, r3
 80097d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097dc:	2200      	movs	r2, #0
 80097de:	673b      	str	r3, [r7, #112]	; 0x70
 80097e0:	677a      	str	r2, [r7, #116]	; 0x74
 80097e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80097e6:	4642      	mov	r2, r8
 80097e8:	464b      	mov	r3, r9
 80097ea:	1891      	adds	r1, r2, r2
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	415b      	adcs	r3, r3
 80097f0:	60fb      	str	r3, [r7, #12]
 80097f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097f6:	4641      	mov	r1, r8
 80097f8:	1851      	adds	r1, r2, r1
 80097fa:	6039      	str	r1, [r7, #0]
 80097fc:	4649      	mov	r1, r9
 80097fe:	414b      	adcs	r3, r1
 8009800:	607b      	str	r3, [r7, #4]
 8009802:	f04f 0200 	mov.w	r2, #0
 8009806:	f04f 0300 	mov.w	r3, #0
 800980a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800980e:	4659      	mov	r1, fp
 8009810:	00cb      	lsls	r3, r1, #3
 8009812:	4651      	mov	r1, sl
 8009814:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009818:	4651      	mov	r1, sl
 800981a:	00ca      	lsls	r2, r1, #3
 800981c:	4610      	mov	r0, r2
 800981e:	4619      	mov	r1, r3
 8009820:	4603      	mov	r3, r0
 8009822:	4642      	mov	r2, r8
 8009824:	189b      	adds	r3, r3, r2
 8009826:	66bb      	str	r3, [r7, #104]	; 0x68
 8009828:	464b      	mov	r3, r9
 800982a:	460a      	mov	r2, r1
 800982c:	eb42 0303 	adc.w	r3, r2, r3
 8009830:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	663b      	str	r3, [r7, #96]	; 0x60
 800983c:	667a      	str	r2, [r7, #100]	; 0x64
 800983e:	f04f 0200 	mov.w	r2, #0
 8009842:	f04f 0300 	mov.w	r3, #0
 8009846:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800984a:	4649      	mov	r1, r9
 800984c:	008b      	lsls	r3, r1, #2
 800984e:	4641      	mov	r1, r8
 8009850:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009854:	4641      	mov	r1, r8
 8009856:	008a      	lsls	r2, r1, #2
 8009858:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800985c:	f7f7 fa14 	bl	8000c88 <__aeabi_uldivmod>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4b0d      	ldr	r3, [pc, #52]	; (800989c <UART_SetConfig+0x4e4>)
 8009866:	fba3 1302 	umull	r1, r3, r3, r2
 800986a:	095b      	lsrs	r3, r3, #5
 800986c:	2164      	movs	r1, #100	; 0x64
 800986e:	fb01 f303 	mul.w	r3, r1, r3
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	011b      	lsls	r3, r3, #4
 8009876:	3332      	adds	r3, #50	; 0x32
 8009878:	4a08      	ldr	r2, [pc, #32]	; (800989c <UART_SetConfig+0x4e4>)
 800987a:	fba2 2303 	umull	r2, r3, r2, r3
 800987e:	095b      	lsrs	r3, r3, #5
 8009880:	f003 020f 	and.w	r2, r3, #15
 8009884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4422      	add	r2, r4
 800988c:	609a      	str	r2, [r3, #8]
}
 800988e:	bf00      	nop
 8009890:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009894:	46bd      	mov	sp, r7
 8009896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800989a:	bf00      	nop
 800989c:	51eb851f 	.word	0x51eb851f

080098a0 <__errno>:
 80098a0:	4b01      	ldr	r3, [pc, #4]	; (80098a8 <__errno+0x8>)
 80098a2:	6818      	ldr	r0, [r3, #0]
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	20000088 	.word	0x20000088

080098ac <__libc_init_array>:
 80098ac:	b570      	push	{r4, r5, r6, lr}
 80098ae:	4d0d      	ldr	r5, [pc, #52]	; (80098e4 <__libc_init_array+0x38>)
 80098b0:	4c0d      	ldr	r4, [pc, #52]	; (80098e8 <__libc_init_array+0x3c>)
 80098b2:	1b64      	subs	r4, r4, r5
 80098b4:	10a4      	asrs	r4, r4, #2
 80098b6:	2600      	movs	r6, #0
 80098b8:	42a6      	cmp	r6, r4
 80098ba:	d109      	bne.n	80098d0 <__libc_init_array+0x24>
 80098bc:	4d0b      	ldr	r5, [pc, #44]	; (80098ec <__libc_init_array+0x40>)
 80098be:	4c0c      	ldr	r4, [pc, #48]	; (80098f0 <__libc_init_array+0x44>)
 80098c0:	f005 fd74 	bl	800f3ac <_init>
 80098c4:	1b64      	subs	r4, r4, r5
 80098c6:	10a4      	asrs	r4, r4, #2
 80098c8:	2600      	movs	r6, #0
 80098ca:	42a6      	cmp	r6, r4
 80098cc:	d105      	bne.n	80098da <__libc_init_array+0x2e>
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098d4:	4798      	blx	r3
 80098d6:	3601      	adds	r6, #1
 80098d8:	e7ee      	b.n	80098b8 <__libc_init_array+0xc>
 80098da:	f855 3b04 	ldr.w	r3, [r5], #4
 80098de:	4798      	blx	r3
 80098e0:	3601      	adds	r6, #1
 80098e2:	e7f2      	b.n	80098ca <__libc_init_array+0x1e>
 80098e4:	0800f988 	.word	0x0800f988
 80098e8:	0800f988 	.word	0x0800f988
 80098ec:	0800f988 	.word	0x0800f988
 80098f0:	0800f98c 	.word	0x0800f98c

080098f4 <malloc>:
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <malloc+0xc>)
 80098f6:	4601      	mov	r1, r0
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	f000 b895 	b.w	8009a28 <_malloc_r>
 80098fe:	bf00      	nop
 8009900:	20000088 	.word	0x20000088

08009904 <memcmp>:
 8009904:	b510      	push	{r4, lr}
 8009906:	3901      	subs	r1, #1
 8009908:	4402      	add	r2, r0
 800990a:	4290      	cmp	r0, r2
 800990c:	d101      	bne.n	8009912 <memcmp+0xe>
 800990e:	2000      	movs	r0, #0
 8009910:	e005      	b.n	800991e <memcmp+0x1a>
 8009912:	7803      	ldrb	r3, [r0, #0]
 8009914:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009918:	42a3      	cmp	r3, r4
 800991a:	d001      	beq.n	8009920 <memcmp+0x1c>
 800991c:	1b18      	subs	r0, r3, r4
 800991e:	bd10      	pop	{r4, pc}
 8009920:	3001      	adds	r0, #1
 8009922:	e7f2      	b.n	800990a <memcmp+0x6>

08009924 <memcpy>:
 8009924:	440a      	add	r2, r1
 8009926:	4291      	cmp	r1, r2
 8009928:	f100 33ff 	add.w	r3, r0, #4294967295
 800992c:	d100      	bne.n	8009930 <memcpy+0xc>
 800992e:	4770      	bx	lr
 8009930:	b510      	push	{r4, lr}
 8009932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800993a:	4291      	cmp	r1, r2
 800993c:	d1f9      	bne.n	8009932 <memcpy+0xe>
 800993e:	bd10      	pop	{r4, pc}

08009940 <memset>:
 8009940:	4402      	add	r2, r0
 8009942:	4603      	mov	r3, r0
 8009944:	4293      	cmp	r3, r2
 8009946:	d100      	bne.n	800994a <memset+0xa>
 8009948:	4770      	bx	lr
 800994a:	f803 1b01 	strb.w	r1, [r3], #1
 800994e:	e7f9      	b.n	8009944 <memset+0x4>

08009950 <_free_r>:
 8009950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009952:	2900      	cmp	r1, #0
 8009954:	d044      	beq.n	80099e0 <_free_r+0x90>
 8009956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800995a:	9001      	str	r0, [sp, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	f1a1 0404 	sub.w	r4, r1, #4
 8009962:	bfb8      	it	lt
 8009964:	18e4      	addlt	r4, r4, r3
 8009966:	f003 f93f 	bl	800cbe8 <__malloc_lock>
 800996a:	4a1e      	ldr	r2, [pc, #120]	; (80099e4 <_free_r+0x94>)
 800996c:	9801      	ldr	r0, [sp, #4]
 800996e:	6813      	ldr	r3, [r2, #0]
 8009970:	b933      	cbnz	r3, 8009980 <_free_r+0x30>
 8009972:	6063      	str	r3, [r4, #4]
 8009974:	6014      	str	r4, [r2, #0]
 8009976:	b003      	add	sp, #12
 8009978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800997c:	f003 b93a 	b.w	800cbf4 <__malloc_unlock>
 8009980:	42a3      	cmp	r3, r4
 8009982:	d908      	bls.n	8009996 <_free_r+0x46>
 8009984:	6825      	ldr	r5, [r4, #0]
 8009986:	1961      	adds	r1, r4, r5
 8009988:	428b      	cmp	r3, r1
 800998a:	bf01      	itttt	eq
 800998c:	6819      	ldreq	r1, [r3, #0]
 800998e:	685b      	ldreq	r3, [r3, #4]
 8009990:	1949      	addeq	r1, r1, r5
 8009992:	6021      	streq	r1, [r4, #0]
 8009994:	e7ed      	b.n	8009972 <_free_r+0x22>
 8009996:	461a      	mov	r2, r3
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	b10b      	cbz	r3, 80099a0 <_free_r+0x50>
 800999c:	42a3      	cmp	r3, r4
 800999e:	d9fa      	bls.n	8009996 <_free_r+0x46>
 80099a0:	6811      	ldr	r1, [r2, #0]
 80099a2:	1855      	adds	r5, r2, r1
 80099a4:	42a5      	cmp	r5, r4
 80099a6:	d10b      	bne.n	80099c0 <_free_r+0x70>
 80099a8:	6824      	ldr	r4, [r4, #0]
 80099aa:	4421      	add	r1, r4
 80099ac:	1854      	adds	r4, r2, r1
 80099ae:	42a3      	cmp	r3, r4
 80099b0:	6011      	str	r1, [r2, #0]
 80099b2:	d1e0      	bne.n	8009976 <_free_r+0x26>
 80099b4:	681c      	ldr	r4, [r3, #0]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	6053      	str	r3, [r2, #4]
 80099ba:	4421      	add	r1, r4
 80099bc:	6011      	str	r1, [r2, #0]
 80099be:	e7da      	b.n	8009976 <_free_r+0x26>
 80099c0:	d902      	bls.n	80099c8 <_free_r+0x78>
 80099c2:	230c      	movs	r3, #12
 80099c4:	6003      	str	r3, [r0, #0]
 80099c6:	e7d6      	b.n	8009976 <_free_r+0x26>
 80099c8:	6825      	ldr	r5, [r4, #0]
 80099ca:	1961      	adds	r1, r4, r5
 80099cc:	428b      	cmp	r3, r1
 80099ce:	bf04      	itt	eq
 80099d0:	6819      	ldreq	r1, [r3, #0]
 80099d2:	685b      	ldreq	r3, [r3, #4]
 80099d4:	6063      	str	r3, [r4, #4]
 80099d6:	bf04      	itt	eq
 80099d8:	1949      	addeq	r1, r1, r5
 80099da:	6021      	streq	r1, [r4, #0]
 80099dc:	6054      	str	r4, [r2, #4]
 80099de:	e7ca      	b.n	8009976 <_free_r+0x26>
 80099e0:	b003      	add	sp, #12
 80099e2:	bd30      	pop	{r4, r5, pc}
 80099e4:	2000066c 	.word	0x2000066c

080099e8 <sbrk_aligned>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	4e0e      	ldr	r6, [pc, #56]	; (8009a24 <sbrk_aligned+0x3c>)
 80099ec:	460c      	mov	r4, r1
 80099ee:	6831      	ldr	r1, [r6, #0]
 80099f0:	4605      	mov	r5, r0
 80099f2:	b911      	cbnz	r1, 80099fa <sbrk_aligned+0x12>
 80099f4:	f000 ff1e 	bl	800a834 <_sbrk_r>
 80099f8:	6030      	str	r0, [r6, #0]
 80099fa:	4621      	mov	r1, r4
 80099fc:	4628      	mov	r0, r5
 80099fe:	f000 ff19 	bl	800a834 <_sbrk_r>
 8009a02:	1c43      	adds	r3, r0, #1
 8009a04:	d00a      	beq.n	8009a1c <sbrk_aligned+0x34>
 8009a06:	1cc4      	adds	r4, r0, #3
 8009a08:	f024 0403 	bic.w	r4, r4, #3
 8009a0c:	42a0      	cmp	r0, r4
 8009a0e:	d007      	beq.n	8009a20 <sbrk_aligned+0x38>
 8009a10:	1a21      	subs	r1, r4, r0
 8009a12:	4628      	mov	r0, r5
 8009a14:	f000 ff0e 	bl	800a834 <_sbrk_r>
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d101      	bne.n	8009a20 <sbrk_aligned+0x38>
 8009a1c:	f04f 34ff 	mov.w	r4, #4294967295
 8009a20:	4620      	mov	r0, r4
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	20000670 	.word	0x20000670

08009a28 <_malloc_r>:
 8009a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2c:	1ccd      	adds	r5, r1, #3
 8009a2e:	f025 0503 	bic.w	r5, r5, #3
 8009a32:	3508      	adds	r5, #8
 8009a34:	2d0c      	cmp	r5, #12
 8009a36:	bf38      	it	cc
 8009a38:	250c      	movcc	r5, #12
 8009a3a:	2d00      	cmp	r5, #0
 8009a3c:	4607      	mov	r7, r0
 8009a3e:	db01      	blt.n	8009a44 <_malloc_r+0x1c>
 8009a40:	42a9      	cmp	r1, r5
 8009a42:	d905      	bls.n	8009a50 <_malloc_r+0x28>
 8009a44:	230c      	movs	r3, #12
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	2600      	movs	r6, #0
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a50:	4e2e      	ldr	r6, [pc, #184]	; (8009b0c <_malloc_r+0xe4>)
 8009a52:	f003 f8c9 	bl	800cbe8 <__malloc_lock>
 8009a56:	6833      	ldr	r3, [r6, #0]
 8009a58:	461c      	mov	r4, r3
 8009a5a:	bb34      	cbnz	r4, 8009aaa <_malloc_r+0x82>
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4638      	mov	r0, r7
 8009a60:	f7ff ffc2 	bl	80099e8 <sbrk_aligned>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	4604      	mov	r4, r0
 8009a68:	d14d      	bne.n	8009b06 <_malloc_r+0xde>
 8009a6a:	6834      	ldr	r4, [r6, #0]
 8009a6c:	4626      	mov	r6, r4
 8009a6e:	2e00      	cmp	r6, #0
 8009a70:	d140      	bne.n	8009af4 <_malloc_r+0xcc>
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	4631      	mov	r1, r6
 8009a76:	4638      	mov	r0, r7
 8009a78:	eb04 0803 	add.w	r8, r4, r3
 8009a7c:	f000 feda 	bl	800a834 <_sbrk_r>
 8009a80:	4580      	cmp	r8, r0
 8009a82:	d13a      	bne.n	8009afa <_malloc_r+0xd2>
 8009a84:	6821      	ldr	r1, [r4, #0]
 8009a86:	3503      	adds	r5, #3
 8009a88:	1a6d      	subs	r5, r5, r1
 8009a8a:	f025 0503 	bic.w	r5, r5, #3
 8009a8e:	3508      	adds	r5, #8
 8009a90:	2d0c      	cmp	r5, #12
 8009a92:	bf38      	it	cc
 8009a94:	250c      	movcc	r5, #12
 8009a96:	4629      	mov	r1, r5
 8009a98:	4638      	mov	r0, r7
 8009a9a:	f7ff ffa5 	bl	80099e8 <sbrk_aligned>
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	d02b      	beq.n	8009afa <_malloc_r+0xd2>
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	442b      	add	r3, r5
 8009aa6:	6023      	str	r3, [r4, #0]
 8009aa8:	e00e      	b.n	8009ac8 <_malloc_r+0xa0>
 8009aaa:	6822      	ldr	r2, [r4, #0]
 8009aac:	1b52      	subs	r2, r2, r5
 8009aae:	d41e      	bmi.n	8009aee <_malloc_r+0xc6>
 8009ab0:	2a0b      	cmp	r2, #11
 8009ab2:	d916      	bls.n	8009ae2 <_malloc_r+0xba>
 8009ab4:	1961      	adds	r1, r4, r5
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	6025      	str	r5, [r4, #0]
 8009aba:	bf18      	it	ne
 8009abc:	6059      	strne	r1, [r3, #4]
 8009abe:	6863      	ldr	r3, [r4, #4]
 8009ac0:	bf08      	it	eq
 8009ac2:	6031      	streq	r1, [r6, #0]
 8009ac4:	5162      	str	r2, [r4, r5]
 8009ac6:	604b      	str	r3, [r1, #4]
 8009ac8:	4638      	mov	r0, r7
 8009aca:	f104 060b 	add.w	r6, r4, #11
 8009ace:	f003 f891 	bl	800cbf4 <__malloc_unlock>
 8009ad2:	f026 0607 	bic.w	r6, r6, #7
 8009ad6:	1d23      	adds	r3, r4, #4
 8009ad8:	1af2      	subs	r2, r6, r3
 8009ada:	d0b6      	beq.n	8009a4a <_malloc_r+0x22>
 8009adc:	1b9b      	subs	r3, r3, r6
 8009ade:	50a3      	str	r3, [r4, r2]
 8009ae0:	e7b3      	b.n	8009a4a <_malloc_r+0x22>
 8009ae2:	6862      	ldr	r2, [r4, #4]
 8009ae4:	42a3      	cmp	r3, r4
 8009ae6:	bf0c      	ite	eq
 8009ae8:	6032      	streq	r2, [r6, #0]
 8009aea:	605a      	strne	r2, [r3, #4]
 8009aec:	e7ec      	b.n	8009ac8 <_malloc_r+0xa0>
 8009aee:	4623      	mov	r3, r4
 8009af0:	6864      	ldr	r4, [r4, #4]
 8009af2:	e7b2      	b.n	8009a5a <_malloc_r+0x32>
 8009af4:	4634      	mov	r4, r6
 8009af6:	6876      	ldr	r6, [r6, #4]
 8009af8:	e7b9      	b.n	8009a6e <_malloc_r+0x46>
 8009afa:	230c      	movs	r3, #12
 8009afc:	603b      	str	r3, [r7, #0]
 8009afe:	4638      	mov	r0, r7
 8009b00:	f003 f878 	bl	800cbf4 <__malloc_unlock>
 8009b04:	e7a1      	b.n	8009a4a <_malloc_r+0x22>
 8009b06:	6025      	str	r5, [r4, #0]
 8009b08:	e7de      	b.n	8009ac8 <_malloc_r+0xa0>
 8009b0a:	bf00      	nop
 8009b0c:	2000066c 	.word	0x2000066c

08009b10 <__cvt>:
 8009b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b14:	ec55 4b10 	vmov	r4, r5, d0
 8009b18:	2d00      	cmp	r5, #0
 8009b1a:	460e      	mov	r6, r1
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	462b      	mov	r3, r5
 8009b20:	bfbb      	ittet	lt
 8009b22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b26:	461d      	movlt	r5, r3
 8009b28:	2300      	movge	r3, #0
 8009b2a:	232d      	movlt	r3, #45	; 0x2d
 8009b2c:	700b      	strb	r3, [r1, #0]
 8009b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b34:	4691      	mov	r9, r2
 8009b36:	f023 0820 	bic.w	r8, r3, #32
 8009b3a:	bfbc      	itt	lt
 8009b3c:	4622      	movlt	r2, r4
 8009b3e:	4614      	movlt	r4, r2
 8009b40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b44:	d005      	beq.n	8009b52 <__cvt+0x42>
 8009b46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b4a:	d100      	bne.n	8009b4e <__cvt+0x3e>
 8009b4c:	3601      	adds	r6, #1
 8009b4e:	2102      	movs	r1, #2
 8009b50:	e000      	b.n	8009b54 <__cvt+0x44>
 8009b52:	2103      	movs	r1, #3
 8009b54:	ab03      	add	r3, sp, #12
 8009b56:	9301      	str	r3, [sp, #4]
 8009b58:	ab02      	add	r3, sp, #8
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	ec45 4b10 	vmov	d0, r4, r5
 8009b60:	4653      	mov	r3, sl
 8009b62:	4632      	mov	r2, r6
 8009b64:	f001 fdd4 	bl	800b710 <_dtoa_r>
 8009b68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	d102      	bne.n	8009b76 <__cvt+0x66>
 8009b70:	f019 0f01 	tst.w	r9, #1
 8009b74:	d022      	beq.n	8009bbc <__cvt+0xac>
 8009b76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b7a:	eb07 0906 	add.w	r9, r7, r6
 8009b7e:	d110      	bne.n	8009ba2 <__cvt+0x92>
 8009b80:	783b      	ldrb	r3, [r7, #0]
 8009b82:	2b30      	cmp	r3, #48	; 0x30
 8009b84:	d10a      	bne.n	8009b9c <__cvt+0x8c>
 8009b86:	2200      	movs	r2, #0
 8009b88:	2300      	movs	r3, #0
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	f7f6 ff9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b92:	b918      	cbnz	r0, 8009b9c <__cvt+0x8c>
 8009b94:	f1c6 0601 	rsb	r6, r6, #1
 8009b98:	f8ca 6000 	str.w	r6, [sl]
 8009b9c:	f8da 3000 	ldr.w	r3, [sl]
 8009ba0:	4499      	add	r9, r3
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	4629      	mov	r1, r5
 8009baa:	f7f6 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bae:	b108      	cbz	r0, 8009bb4 <__cvt+0xa4>
 8009bb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009bb4:	2230      	movs	r2, #48	; 0x30
 8009bb6:	9b03      	ldr	r3, [sp, #12]
 8009bb8:	454b      	cmp	r3, r9
 8009bba:	d307      	bcc.n	8009bcc <__cvt+0xbc>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bc0:	1bdb      	subs	r3, r3, r7
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	6013      	str	r3, [r2, #0]
 8009bc6:	b004      	add	sp, #16
 8009bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bcc:	1c59      	adds	r1, r3, #1
 8009bce:	9103      	str	r1, [sp, #12]
 8009bd0:	701a      	strb	r2, [r3, #0]
 8009bd2:	e7f0      	b.n	8009bb6 <__cvt+0xa6>

08009bd4 <__exponent>:
 8009bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2900      	cmp	r1, #0
 8009bda:	bfb8      	it	lt
 8009bdc:	4249      	neglt	r1, r1
 8009bde:	f803 2b02 	strb.w	r2, [r3], #2
 8009be2:	bfb4      	ite	lt
 8009be4:	222d      	movlt	r2, #45	; 0x2d
 8009be6:	222b      	movge	r2, #43	; 0x2b
 8009be8:	2909      	cmp	r1, #9
 8009bea:	7042      	strb	r2, [r0, #1]
 8009bec:	dd2a      	ble.n	8009c44 <__exponent+0x70>
 8009bee:	f10d 0407 	add.w	r4, sp, #7
 8009bf2:	46a4      	mov	ip, r4
 8009bf4:	270a      	movs	r7, #10
 8009bf6:	46a6      	mov	lr, r4
 8009bf8:	460a      	mov	r2, r1
 8009bfa:	fb91 f6f7 	sdiv	r6, r1, r7
 8009bfe:	fb07 1516 	mls	r5, r7, r6, r1
 8009c02:	3530      	adds	r5, #48	; 0x30
 8009c04:	2a63      	cmp	r2, #99	; 0x63
 8009c06:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c0e:	4631      	mov	r1, r6
 8009c10:	dcf1      	bgt.n	8009bf6 <__exponent+0x22>
 8009c12:	3130      	adds	r1, #48	; 0x30
 8009c14:	f1ae 0502 	sub.w	r5, lr, #2
 8009c18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c1c:	1c44      	adds	r4, r0, #1
 8009c1e:	4629      	mov	r1, r5
 8009c20:	4561      	cmp	r1, ip
 8009c22:	d30a      	bcc.n	8009c3a <__exponent+0x66>
 8009c24:	f10d 0209 	add.w	r2, sp, #9
 8009c28:	eba2 020e 	sub.w	r2, r2, lr
 8009c2c:	4565      	cmp	r5, ip
 8009c2e:	bf88      	it	hi
 8009c30:	2200      	movhi	r2, #0
 8009c32:	4413      	add	r3, r2
 8009c34:	1a18      	subs	r0, r3, r0
 8009c36:	b003      	add	sp, #12
 8009c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009c42:	e7ed      	b.n	8009c20 <__exponent+0x4c>
 8009c44:	2330      	movs	r3, #48	; 0x30
 8009c46:	3130      	adds	r1, #48	; 0x30
 8009c48:	7083      	strb	r3, [r0, #2]
 8009c4a:	70c1      	strb	r1, [r0, #3]
 8009c4c:	1d03      	adds	r3, r0, #4
 8009c4e:	e7f1      	b.n	8009c34 <__exponent+0x60>

08009c50 <_printf_float>:
 8009c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c54:	ed2d 8b02 	vpush	{d8}
 8009c58:	b08d      	sub	sp, #52	; 0x34
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c60:	4616      	mov	r6, r2
 8009c62:	461f      	mov	r7, r3
 8009c64:	4605      	mov	r5, r0
 8009c66:	f002 ffa5 	bl	800cbb4 <_localeconv_r>
 8009c6a:	f8d0 a000 	ldr.w	sl, [r0]
 8009c6e:	4650      	mov	r0, sl
 8009c70:	f7f6 faae 	bl	80001d0 <strlen>
 8009c74:	2300      	movs	r3, #0
 8009c76:	930a      	str	r3, [sp, #40]	; 0x28
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	9305      	str	r3, [sp, #20]
 8009c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8009c80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009c84:	3307      	adds	r3, #7
 8009c86:	f023 0307 	bic.w	r3, r3, #7
 8009c8a:	f103 0208 	add.w	r2, r3, #8
 8009c8e:	f8c8 2000 	str.w	r2, [r8]
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009c9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009c9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ca2:	9307      	str	r3, [sp, #28]
 8009ca4:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ca8:	ee08 0a10 	vmov	s16, r0
 8009cac:	4b9f      	ldr	r3, [pc, #636]	; (8009f2c <_printf_float+0x2dc>)
 8009cae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb6:	f7f6 ff39 	bl	8000b2c <__aeabi_dcmpun>
 8009cba:	bb88      	cbnz	r0, 8009d20 <_printf_float+0xd0>
 8009cbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cc0:	4b9a      	ldr	r3, [pc, #616]	; (8009f2c <_printf_float+0x2dc>)
 8009cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc6:	f7f6 ff13 	bl	8000af0 <__aeabi_dcmple>
 8009cca:	bb48      	cbnz	r0, 8009d20 <_printf_float+0xd0>
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2300      	movs	r3, #0
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	f7f6 ff02 	bl	8000adc <__aeabi_dcmplt>
 8009cd8:	b110      	cbz	r0, 8009ce0 <_printf_float+0x90>
 8009cda:	232d      	movs	r3, #45	; 0x2d
 8009cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ce0:	4b93      	ldr	r3, [pc, #588]	; (8009f30 <_printf_float+0x2e0>)
 8009ce2:	4894      	ldr	r0, [pc, #592]	; (8009f34 <_printf_float+0x2e4>)
 8009ce4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009ce8:	bf94      	ite	ls
 8009cea:	4698      	movls	r8, r3
 8009cec:	4680      	movhi	r8, r0
 8009cee:	2303      	movs	r3, #3
 8009cf0:	6123      	str	r3, [r4, #16]
 8009cf2:	9b05      	ldr	r3, [sp, #20]
 8009cf4:	f023 0204 	bic.w	r2, r3, #4
 8009cf8:	6022      	str	r2, [r4, #0]
 8009cfa:	f04f 0900 	mov.w	r9, #0
 8009cfe:	9700      	str	r7, [sp, #0]
 8009d00:	4633      	mov	r3, r6
 8009d02:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d04:	4621      	mov	r1, r4
 8009d06:	4628      	mov	r0, r5
 8009d08:	f000 f9d8 	bl	800a0bc <_printf_common>
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	f040 8090 	bne.w	8009e32 <_printf_float+0x1e2>
 8009d12:	f04f 30ff 	mov.w	r0, #4294967295
 8009d16:	b00d      	add	sp, #52	; 0x34
 8009d18:	ecbd 8b02 	vpop	{d8}
 8009d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d20:	4642      	mov	r2, r8
 8009d22:	464b      	mov	r3, r9
 8009d24:	4640      	mov	r0, r8
 8009d26:	4649      	mov	r1, r9
 8009d28:	f7f6 ff00 	bl	8000b2c <__aeabi_dcmpun>
 8009d2c:	b140      	cbz	r0, 8009d40 <_printf_float+0xf0>
 8009d2e:	464b      	mov	r3, r9
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	bfbc      	itt	lt
 8009d34:	232d      	movlt	r3, #45	; 0x2d
 8009d36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d3a:	487f      	ldr	r0, [pc, #508]	; (8009f38 <_printf_float+0x2e8>)
 8009d3c:	4b7f      	ldr	r3, [pc, #508]	; (8009f3c <_printf_float+0x2ec>)
 8009d3e:	e7d1      	b.n	8009ce4 <_printf_float+0x94>
 8009d40:	6863      	ldr	r3, [r4, #4]
 8009d42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d46:	9206      	str	r2, [sp, #24]
 8009d48:	1c5a      	adds	r2, r3, #1
 8009d4a:	d13f      	bne.n	8009dcc <_printf_float+0x17c>
 8009d4c:	2306      	movs	r3, #6
 8009d4e:	6063      	str	r3, [r4, #4]
 8009d50:	9b05      	ldr	r3, [sp, #20]
 8009d52:	6861      	ldr	r1, [r4, #4]
 8009d54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d58:	2300      	movs	r3, #0
 8009d5a:	9303      	str	r3, [sp, #12]
 8009d5c:	ab0a      	add	r3, sp, #40	; 0x28
 8009d5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d62:	ab09      	add	r3, sp, #36	; 0x24
 8009d64:	ec49 8b10 	vmov	d0, r8, r9
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	6022      	str	r2, [r4, #0]
 8009d6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009d70:	4628      	mov	r0, r5
 8009d72:	f7ff fecd 	bl	8009b10 <__cvt>
 8009d76:	9b06      	ldr	r3, [sp, #24]
 8009d78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d7a:	2b47      	cmp	r3, #71	; 0x47
 8009d7c:	4680      	mov	r8, r0
 8009d7e:	d108      	bne.n	8009d92 <_printf_float+0x142>
 8009d80:	1cc8      	adds	r0, r1, #3
 8009d82:	db02      	blt.n	8009d8a <_printf_float+0x13a>
 8009d84:	6863      	ldr	r3, [r4, #4]
 8009d86:	4299      	cmp	r1, r3
 8009d88:	dd41      	ble.n	8009e0e <_printf_float+0x1be>
 8009d8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009d8e:	fa5f fb8b 	uxtb.w	fp, fp
 8009d92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d96:	d820      	bhi.n	8009dda <_printf_float+0x18a>
 8009d98:	3901      	subs	r1, #1
 8009d9a:	465a      	mov	r2, fp
 8009d9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009da0:	9109      	str	r1, [sp, #36]	; 0x24
 8009da2:	f7ff ff17 	bl	8009bd4 <__exponent>
 8009da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009da8:	1813      	adds	r3, r2, r0
 8009daa:	2a01      	cmp	r2, #1
 8009dac:	4681      	mov	r9, r0
 8009dae:	6123      	str	r3, [r4, #16]
 8009db0:	dc02      	bgt.n	8009db8 <_printf_float+0x168>
 8009db2:	6822      	ldr	r2, [r4, #0]
 8009db4:	07d2      	lsls	r2, r2, #31
 8009db6:	d501      	bpl.n	8009dbc <_printf_float+0x16c>
 8009db8:	3301      	adds	r3, #1
 8009dba:	6123      	str	r3, [r4, #16]
 8009dbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d09c      	beq.n	8009cfe <_printf_float+0xae>
 8009dc4:	232d      	movs	r3, #45	; 0x2d
 8009dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dca:	e798      	b.n	8009cfe <_printf_float+0xae>
 8009dcc:	9a06      	ldr	r2, [sp, #24]
 8009dce:	2a47      	cmp	r2, #71	; 0x47
 8009dd0:	d1be      	bne.n	8009d50 <_printf_float+0x100>
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1bc      	bne.n	8009d50 <_printf_float+0x100>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e7b9      	b.n	8009d4e <_printf_float+0xfe>
 8009dda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009dde:	d118      	bne.n	8009e12 <_printf_float+0x1c2>
 8009de0:	2900      	cmp	r1, #0
 8009de2:	6863      	ldr	r3, [r4, #4]
 8009de4:	dd0b      	ble.n	8009dfe <_printf_float+0x1ae>
 8009de6:	6121      	str	r1, [r4, #16]
 8009de8:	b913      	cbnz	r3, 8009df0 <_printf_float+0x1a0>
 8009dea:	6822      	ldr	r2, [r4, #0]
 8009dec:	07d0      	lsls	r0, r2, #31
 8009dee:	d502      	bpl.n	8009df6 <_printf_float+0x1a6>
 8009df0:	3301      	adds	r3, #1
 8009df2:	440b      	add	r3, r1
 8009df4:	6123      	str	r3, [r4, #16]
 8009df6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009df8:	f04f 0900 	mov.w	r9, #0
 8009dfc:	e7de      	b.n	8009dbc <_printf_float+0x16c>
 8009dfe:	b913      	cbnz	r3, 8009e06 <_printf_float+0x1b6>
 8009e00:	6822      	ldr	r2, [r4, #0]
 8009e02:	07d2      	lsls	r2, r2, #31
 8009e04:	d501      	bpl.n	8009e0a <_printf_float+0x1ba>
 8009e06:	3302      	adds	r3, #2
 8009e08:	e7f4      	b.n	8009df4 <_printf_float+0x1a4>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e7f2      	b.n	8009df4 <_printf_float+0x1a4>
 8009e0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e14:	4299      	cmp	r1, r3
 8009e16:	db05      	blt.n	8009e24 <_printf_float+0x1d4>
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	6121      	str	r1, [r4, #16]
 8009e1c:	07d8      	lsls	r0, r3, #31
 8009e1e:	d5ea      	bpl.n	8009df6 <_printf_float+0x1a6>
 8009e20:	1c4b      	adds	r3, r1, #1
 8009e22:	e7e7      	b.n	8009df4 <_printf_float+0x1a4>
 8009e24:	2900      	cmp	r1, #0
 8009e26:	bfd4      	ite	le
 8009e28:	f1c1 0202 	rsble	r2, r1, #2
 8009e2c:	2201      	movgt	r2, #1
 8009e2e:	4413      	add	r3, r2
 8009e30:	e7e0      	b.n	8009df4 <_printf_float+0x1a4>
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	055a      	lsls	r2, r3, #21
 8009e36:	d407      	bmi.n	8009e48 <_printf_float+0x1f8>
 8009e38:	6923      	ldr	r3, [r4, #16]
 8009e3a:	4642      	mov	r2, r8
 8009e3c:	4631      	mov	r1, r6
 8009e3e:	4628      	mov	r0, r5
 8009e40:	47b8      	blx	r7
 8009e42:	3001      	adds	r0, #1
 8009e44:	d12c      	bne.n	8009ea0 <_printf_float+0x250>
 8009e46:	e764      	b.n	8009d12 <_printf_float+0xc2>
 8009e48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e4c:	f240 80e0 	bls.w	800a010 <_printf_float+0x3c0>
 8009e50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e54:	2200      	movs	r2, #0
 8009e56:	2300      	movs	r3, #0
 8009e58:	f7f6 fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d034      	beq.n	8009eca <_printf_float+0x27a>
 8009e60:	4a37      	ldr	r2, [pc, #220]	; (8009f40 <_printf_float+0x2f0>)
 8009e62:	2301      	movs	r3, #1
 8009e64:	4631      	mov	r1, r6
 8009e66:	4628      	mov	r0, r5
 8009e68:	47b8      	blx	r7
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	f43f af51 	beq.w	8009d12 <_printf_float+0xc2>
 8009e70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e74:	429a      	cmp	r2, r3
 8009e76:	db02      	blt.n	8009e7e <_printf_float+0x22e>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	07d8      	lsls	r0, r3, #31
 8009e7c:	d510      	bpl.n	8009ea0 <_printf_float+0x250>
 8009e7e:	ee18 3a10 	vmov	r3, s16
 8009e82:	4652      	mov	r2, sl
 8009e84:	4631      	mov	r1, r6
 8009e86:	4628      	mov	r0, r5
 8009e88:	47b8      	blx	r7
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	f43f af41 	beq.w	8009d12 <_printf_float+0xc2>
 8009e90:	f04f 0800 	mov.w	r8, #0
 8009e94:	f104 091a 	add.w	r9, r4, #26
 8009e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	4543      	cmp	r3, r8
 8009e9e:	dc09      	bgt.n	8009eb4 <_printf_float+0x264>
 8009ea0:	6823      	ldr	r3, [r4, #0]
 8009ea2:	079b      	lsls	r3, r3, #30
 8009ea4:	f100 8105 	bmi.w	800a0b2 <_printf_float+0x462>
 8009ea8:	68e0      	ldr	r0, [r4, #12]
 8009eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eac:	4298      	cmp	r0, r3
 8009eae:	bfb8      	it	lt
 8009eb0:	4618      	movlt	r0, r3
 8009eb2:	e730      	b.n	8009d16 <_printf_float+0xc6>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	464a      	mov	r2, r9
 8009eb8:	4631      	mov	r1, r6
 8009eba:	4628      	mov	r0, r5
 8009ebc:	47b8      	blx	r7
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	f43f af27 	beq.w	8009d12 <_printf_float+0xc2>
 8009ec4:	f108 0801 	add.w	r8, r8, #1
 8009ec8:	e7e6      	b.n	8009e98 <_printf_float+0x248>
 8009eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	dc39      	bgt.n	8009f44 <_printf_float+0x2f4>
 8009ed0:	4a1b      	ldr	r2, [pc, #108]	; (8009f40 <_printf_float+0x2f0>)
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	4631      	mov	r1, r6
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	47b8      	blx	r7
 8009eda:	3001      	adds	r0, #1
 8009edc:	f43f af19 	beq.w	8009d12 <_printf_float+0xc2>
 8009ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	d102      	bne.n	8009eee <_printf_float+0x29e>
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	07d9      	lsls	r1, r3, #31
 8009eec:	d5d8      	bpl.n	8009ea0 <_printf_float+0x250>
 8009eee:	ee18 3a10 	vmov	r3, s16
 8009ef2:	4652      	mov	r2, sl
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	47b8      	blx	r7
 8009efa:	3001      	adds	r0, #1
 8009efc:	f43f af09 	beq.w	8009d12 <_printf_float+0xc2>
 8009f00:	f04f 0900 	mov.w	r9, #0
 8009f04:	f104 0a1a 	add.w	sl, r4, #26
 8009f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f0a:	425b      	negs	r3, r3
 8009f0c:	454b      	cmp	r3, r9
 8009f0e:	dc01      	bgt.n	8009f14 <_printf_float+0x2c4>
 8009f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f12:	e792      	b.n	8009e3a <_printf_float+0x1ea>
 8009f14:	2301      	movs	r3, #1
 8009f16:	4652      	mov	r2, sl
 8009f18:	4631      	mov	r1, r6
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	47b8      	blx	r7
 8009f1e:	3001      	adds	r0, #1
 8009f20:	f43f aef7 	beq.w	8009d12 <_printf_float+0xc2>
 8009f24:	f109 0901 	add.w	r9, r9, #1
 8009f28:	e7ee      	b.n	8009f08 <_printf_float+0x2b8>
 8009f2a:	bf00      	nop
 8009f2c:	7fefffff 	.word	0x7fefffff
 8009f30:	0800f4a0 	.word	0x0800f4a0
 8009f34:	0800f4a4 	.word	0x0800f4a4
 8009f38:	0800f4ac 	.word	0x0800f4ac
 8009f3c:	0800f4a8 	.word	0x0800f4a8
 8009f40:	0800f4b0 	.word	0x0800f4b0
 8009f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	bfa8      	it	ge
 8009f4c:	461a      	movge	r2, r3
 8009f4e:	2a00      	cmp	r2, #0
 8009f50:	4691      	mov	r9, r2
 8009f52:	dc37      	bgt.n	8009fc4 <_printf_float+0x374>
 8009f54:	f04f 0b00 	mov.w	fp, #0
 8009f58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f5c:	f104 021a 	add.w	r2, r4, #26
 8009f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f62:	9305      	str	r3, [sp, #20]
 8009f64:	eba3 0309 	sub.w	r3, r3, r9
 8009f68:	455b      	cmp	r3, fp
 8009f6a:	dc33      	bgt.n	8009fd4 <_printf_float+0x384>
 8009f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f70:	429a      	cmp	r2, r3
 8009f72:	db3b      	blt.n	8009fec <_printf_float+0x39c>
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	07da      	lsls	r2, r3, #31
 8009f78:	d438      	bmi.n	8009fec <_printf_float+0x39c>
 8009f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f7c:	9a05      	ldr	r2, [sp, #20]
 8009f7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f80:	1a9a      	subs	r2, r3, r2
 8009f82:	eba3 0901 	sub.w	r9, r3, r1
 8009f86:	4591      	cmp	r9, r2
 8009f88:	bfa8      	it	ge
 8009f8a:	4691      	movge	r9, r2
 8009f8c:	f1b9 0f00 	cmp.w	r9, #0
 8009f90:	dc35      	bgt.n	8009ffe <_printf_float+0x3ae>
 8009f92:	f04f 0800 	mov.w	r8, #0
 8009f96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f9a:	f104 0a1a 	add.w	sl, r4, #26
 8009f9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fa2:	1a9b      	subs	r3, r3, r2
 8009fa4:	eba3 0309 	sub.w	r3, r3, r9
 8009fa8:	4543      	cmp	r3, r8
 8009faa:	f77f af79 	ble.w	8009ea0 <_printf_float+0x250>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	4652      	mov	r2, sl
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	47b8      	blx	r7
 8009fb8:	3001      	adds	r0, #1
 8009fba:	f43f aeaa 	beq.w	8009d12 <_printf_float+0xc2>
 8009fbe:	f108 0801 	add.w	r8, r8, #1
 8009fc2:	e7ec      	b.n	8009f9e <_printf_float+0x34e>
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	4631      	mov	r1, r6
 8009fc8:	4642      	mov	r2, r8
 8009fca:	4628      	mov	r0, r5
 8009fcc:	47b8      	blx	r7
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d1c0      	bne.n	8009f54 <_printf_float+0x304>
 8009fd2:	e69e      	b.n	8009d12 <_printf_float+0xc2>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4628      	mov	r0, r5
 8009fda:	9205      	str	r2, [sp, #20]
 8009fdc:	47b8      	blx	r7
 8009fde:	3001      	adds	r0, #1
 8009fe0:	f43f ae97 	beq.w	8009d12 <_printf_float+0xc2>
 8009fe4:	9a05      	ldr	r2, [sp, #20]
 8009fe6:	f10b 0b01 	add.w	fp, fp, #1
 8009fea:	e7b9      	b.n	8009f60 <_printf_float+0x310>
 8009fec:	ee18 3a10 	vmov	r3, s16
 8009ff0:	4652      	mov	r2, sl
 8009ff2:	4631      	mov	r1, r6
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	47b8      	blx	r7
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	d1be      	bne.n	8009f7a <_printf_float+0x32a>
 8009ffc:	e689      	b.n	8009d12 <_printf_float+0xc2>
 8009ffe:	9a05      	ldr	r2, [sp, #20]
 800a000:	464b      	mov	r3, r9
 800a002:	4442      	add	r2, r8
 800a004:	4631      	mov	r1, r6
 800a006:	4628      	mov	r0, r5
 800a008:	47b8      	blx	r7
 800a00a:	3001      	adds	r0, #1
 800a00c:	d1c1      	bne.n	8009f92 <_printf_float+0x342>
 800a00e:	e680      	b.n	8009d12 <_printf_float+0xc2>
 800a010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a012:	2a01      	cmp	r2, #1
 800a014:	dc01      	bgt.n	800a01a <_printf_float+0x3ca>
 800a016:	07db      	lsls	r3, r3, #31
 800a018:	d538      	bpl.n	800a08c <_printf_float+0x43c>
 800a01a:	2301      	movs	r3, #1
 800a01c:	4642      	mov	r2, r8
 800a01e:	4631      	mov	r1, r6
 800a020:	4628      	mov	r0, r5
 800a022:	47b8      	blx	r7
 800a024:	3001      	adds	r0, #1
 800a026:	f43f ae74 	beq.w	8009d12 <_printf_float+0xc2>
 800a02a:	ee18 3a10 	vmov	r3, s16
 800a02e:	4652      	mov	r2, sl
 800a030:	4631      	mov	r1, r6
 800a032:	4628      	mov	r0, r5
 800a034:	47b8      	blx	r7
 800a036:	3001      	adds	r0, #1
 800a038:	f43f ae6b 	beq.w	8009d12 <_printf_float+0xc2>
 800a03c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a040:	2200      	movs	r2, #0
 800a042:	2300      	movs	r3, #0
 800a044:	f7f6 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 800a048:	b9d8      	cbnz	r0, 800a082 <_printf_float+0x432>
 800a04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a04c:	f108 0201 	add.w	r2, r8, #1
 800a050:	3b01      	subs	r3, #1
 800a052:	4631      	mov	r1, r6
 800a054:	4628      	mov	r0, r5
 800a056:	47b8      	blx	r7
 800a058:	3001      	adds	r0, #1
 800a05a:	d10e      	bne.n	800a07a <_printf_float+0x42a>
 800a05c:	e659      	b.n	8009d12 <_printf_float+0xc2>
 800a05e:	2301      	movs	r3, #1
 800a060:	4652      	mov	r2, sl
 800a062:	4631      	mov	r1, r6
 800a064:	4628      	mov	r0, r5
 800a066:	47b8      	blx	r7
 800a068:	3001      	adds	r0, #1
 800a06a:	f43f ae52 	beq.w	8009d12 <_printf_float+0xc2>
 800a06e:	f108 0801 	add.w	r8, r8, #1
 800a072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a074:	3b01      	subs	r3, #1
 800a076:	4543      	cmp	r3, r8
 800a078:	dcf1      	bgt.n	800a05e <_printf_float+0x40e>
 800a07a:	464b      	mov	r3, r9
 800a07c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a080:	e6dc      	b.n	8009e3c <_printf_float+0x1ec>
 800a082:	f04f 0800 	mov.w	r8, #0
 800a086:	f104 0a1a 	add.w	sl, r4, #26
 800a08a:	e7f2      	b.n	800a072 <_printf_float+0x422>
 800a08c:	2301      	movs	r3, #1
 800a08e:	4642      	mov	r2, r8
 800a090:	e7df      	b.n	800a052 <_printf_float+0x402>
 800a092:	2301      	movs	r3, #1
 800a094:	464a      	mov	r2, r9
 800a096:	4631      	mov	r1, r6
 800a098:	4628      	mov	r0, r5
 800a09a:	47b8      	blx	r7
 800a09c:	3001      	adds	r0, #1
 800a09e:	f43f ae38 	beq.w	8009d12 <_printf_float+0xc2>
 800a0a2:	f108 0801 	add.w	r8, r8, #1
 800a0a6:	68e3      	ldr	r3, [r4, #12]
 800a0a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0aa:	1a5b      	subs	r3, r3, r1
 800a0ac:	4543      	cmp	r3, r8
 800a0ae:	dcf0      	bgt.n	800a092 <_printf_float+0x442>
 800a0b0:	e6fa      	b.n	8009ea8 <_printf_float+0x258>
 800a0b2:	f04f 0800 	mov.w	r8, #0
 800a0b6:	f104 0919 	add.w	r9, r4, #25
 800a0ba:	e7f4      	b.n	800a0a6 <_printf_float+0x456>

0800a0bc <_printf_common>:
 800a0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c0:	4616      	mov	r6, r2
 800a0c2:	4699      	mov	r9, r3
 800a0c4:	688a      	ldr	r2, [r1, #8]
 800a0c6:	690b      	ldr	r3, [r1, #16]
 800a0c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	bfb8      	it	lt
 800a0d0:	4613      	movlt	r3, r2
 800a0d2:	6033      	str	r3, [r6, #0]
 800a0d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0d8:	4607      	mov	r7, r0
 800a0da:	460c      	mov	r4, r1
 800a0dc:	b10a      	cbz	r2, 800a0e2 <_printf_common+0x26>
 800a0de:	3301      	adds	r3, #1
 800a0e0:	6033      	str	r3, [r6, #0]
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	0699      	lsls	r1, r3, #26
 800a0e6:	bf42      	ittt	mi
 800a0e8:	6833      	ldrmi	r3, [r6, #0]
 800a0ea:	3302      	addmi	r3, #2
 800a0ec:	6033      	strmi	r3, [r6, #0]
 800a0ee:	6825      	ldr	r5, [r4, #0]
 800a0f0:	f015 0506 	ands.w	r5, r5, #6
 800a0f4:	d106      	bne.n	800a104 <_printf_common+0x48>
 800a0f6:	f104 0a19 	add.w	sl, r4, #25
 800a0fa:	68e3      	ldr	r3, [r4, #12]
 800a0fc:	6832      	ldr	r2, [r6, #0]
 800a0fe:	1a9b      	subs	r3, r3, r2
 800a100:	42ab      	cmp	r3, r5
 800a102:	dc26      	bgt.n	800a152 <_printf_common+0x96>
 800a104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a108:	1e13      	subs	r3, r2, #0
 800a10a:	6822      	ldr	r2, [r4, #0]
 800a10c:	bf18      	it	ne
 800a10e:	2301      	movne	r3, #1
 800a110:	0692      	lsls	r2, r2, #26
 800a112:	d42b      	bmi.n	800a16c <_printf_common+0xb0>
 800a114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a118:	4649      	mov	r1, r9
 800a11a:	4638      	mov	r0, r7
 800a11c:	47c0      	blx	r8
 800a11e:	3001      	adds	r0, #1
 800a120:	d01e      	beq.n	800a160 <_printf_common+0xa4>
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	68e5      	ldr	r5, [r4, #12]
 800a126:	6832      	ldr	r2, [r6, #0]
 800a128:	f003 0306 	and.w	r3, r3, #6
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	bf08      	it	eq
 800a130:	1aad      	subeq	r5, r5, r2
 800a132:	68a3      	ldr	r3, [r4, #8]
 800a134:	6922      	ldr	r2, [r4, #16]
 800a136:	bf0c      	ite	eq
 800a138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a13c:	2500      	movne	r5, #0
 800a13e:	4293      	cmp	r3, r2
 800a140:	bfc4      	itt	gt
 800a142:	1a9b      	subgt	r3, r3, r2
 800a144:	18ed      	addgt	r5, r5, r3
 800a146:	2600      	movs	r6, #0
 800a148:	341a      	adds	r4, #26
 800a14a:	42b5      	cmp	r5, r6
 800a14c:	d11a      	bne.n	800a184 <_printf_common+0xc8>
 800a14e:	2000      	movs	r0, #0
 800a150:	e008      	b.n	800a164 <_printf_common+0xa8>
 800a152:	2301      	movs	r3, #1
 800a154:	4652      	mov	r2, sl
 800a156:	4649      	mov	r1, r9
 800a158:	4638      	mov	r0, r7
 800a15a:	47c0      	blx	r8
 800a15c:	3001      	adds	r0, #1
 800a15e:	d103      	bne.n	800a168 <_printf_common+0xac>
 800a160:	f04f 30ff 	mov.w	r0, #4294967295
 800a164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a168:	3501      	adds	r5, #1
 800a16a:	e7c6      	b.n	800a0fa <_printf_common+0x3e>
 800a16c:	18e1      	adds	r1, r4, r3
 800a16e:	1c5a      	adds	r2, r3, #1
 800a170:	2030      	movs	r0, #48	; 0x30
 800a172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a176:	4422      	add	r2, r4
 800a178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a17c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a180:	3302      	adds	r3, #2
 800a182:	e7c7      	b.n	800a114 <_printf_common+0x58>
 800a184:	2301      	movs	r3, #1
 800a186:	4622      	mov	r2, r4
 800a188:	4649      	mov	r1, r9
 800a18a:	4638      	mov	r0, r7
 800a18c:	47c0      	blx	r8
 800a18e:	3001      	adds	r0, #1
 800a190:	d0e6      	beq.n	800a160 <_printf_common+0xa4>
 800a192:	3601      	adds	r6, #1
 800a194:	e7d9      	b.n	800a14a <_printf_common+0x8e>
	...

0800a198 <_printf_i>:
 800a198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a19c:	7e0f      	ldrb	r7, [r1, #24]
 800a19e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1a0:	2f78      	cmp	r7, #120	; 0x78
 800a1a2:	4691      	mov	r9, r2
 800a1a4:	4680      	mov	r8, r0
 800a1a6:	460c      	mov	r4, r1
 800a1a8:	469a      	mov	sl, r3
 800a1aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1ae:	d807      	bhi.n	800a1c0 <_printf_i+0x28>
 800a1b0:	2f62      	cmp	r7, #98	; 0x62
 800a1b2:	d80a      	bhi.n	800a1ca <_printf_i+0x32>
 800a1b4:	2f00      	cmp	r7, #0
 800a1b6:	f000 80d8 	beq.w	800a36a <_printf_i+0x1d2>
 800a1ba:	2f58      	cmp	r7, #88	; 0x58
 800a1bc:	f000 80a3 	beq.w	800a306 <_printf_i+0x16e>
 800a1c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1c8:	e03a      	b.n	800a240 <_printf_i+0xa8>
 800a1ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1ce:	2b15      	cmp	r3, #21
 800a1d0:	d8f6      	bhi.n	800a1c0 <_printf_i+0x28>
 800a1d2:	a101      	add	r1, pc, #4	; (adr r1, 800a1d8 <_printf_i+0x40>)
 800a1d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1d8:	0800a231 	.word	0x0800a231
 800a1dc:	0800a245 	.word	0x0800a245
 800a1e0:	0800a1c1 	.word	0x0800a1c1
 800a1e4:	0800a1c1 	.word	0x0800a1c1
 800a1e8:	0800a1c1 	.word	0x0800a1c1
 800a1ec:	0800a1c1 	.word	0x0800a1c1
 800a1f0:	0800a245 	.word	0x0800a245
 800a1f4:	0800a1c1 	.word	0x0800a1c1
 800a1f8:	0800a1c1 	.word	0x0800a1c1
 800a1fc:	0800a1c1 	.word	0x0800a1c1
 800a200:	0800a1c1 	.word	0x0800a1c1
 800a204:	0800a351 	.word	0x0800a351
 800a208:	0800a275 	.word	0x0800a275
 800a20c:	0800a333 	.word	0x0800a333
 800a210:	0800a1c1 	.word	0x0800a1c1
 800a214:	0800a1c1 	.word	0x0800a1c1
 800a218:	0800a373 	.word	0x0800a373
 800a21c:	0800a1c1 	.word	0x0800a1c1
 800a220:	0800a275 	.word	0x0800a275
 800a224:	0800a1c1 	.word	0x0800a1c1
 800a228:	0800a1c1 	.word	0x0800a1c1
 800a22c:	0800a33b 	.word	0x0800a33b
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	1d1a      	adds	r2, r3, #4
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	602a      	str	r2, [r5, #0]
 800a238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a23c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a240:	2301      	movs	r3, #1
 800a242:	e0a3      	b.n	800a38c <_printf_i+0x1f4>
 800a244:	6820      	ldr	r0, [r4, #0]
 800a246:	6829      	ldr	r1, [r5, #0]
 800a248:	0606      	lsls	r6, r0, #24
 800a24a:	f101 0304 	add.w	r3, r1, #4
 800a24e:	d50a      	bpl.n	800a266 <_printf_i+0xce>
 800a250:	680e      	ldr	r6, [r1, #0]
 800a252:	602b      	str	r3, [r5, #0]
 800a254:	2e00      	cmp	r6, #0
 800a256:	da03      	bge.n	800a260 <_printf_i+0xc8>
 800a258:	232d      	movs	r3, #45	; 0x2d
 800a25a:	4276      	negs	r6, r6
 800a25c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a260:	485e      	ldr	r0, [pc, #376]	; (800a3dc <_printf_i+0x244>)
 800a262:	230a      	movs	r3, #10
 800a264:	e019      	b.n	800a29a <_printf_i+0x102>
 800a266:	680e      	ldr	r6, [r1, #0]
 800a268:	602b      	str	r3, [r5, #0]
 800a26a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a26e:	bf18      	it	ne
 800a270:	b236      	sxthne	r6, r6
 800a272:	e7ef      	b.n	800a254 <_printf_i+0xbc>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	6820      	ldr	r0, [r4, #0]
 800a278:	1d19      	adds	r1, r3, #4
 800a27a:	6029      	str	r1, [r5, #0]
 800a27c:	0601      	lsls	r1, r0, #24
 800a27e:	d501      	bpl.n	800a284 <_printf_i+0xec>
 800a280:	681e      	ldr	r6, [r3, #0]
 800a282:	e002      	b.n	800a28a <_printf_i+0xf2>
 800a284:	0646      	lsls	r6, r0, #25
 800a286:	d5fb      	bpl.n	800a280 <_printf_i+0xe8>
 800a288:	881e      	ldrh	r6, [r3, #0]
 800a28a:	4854      	ldr	r0, [pc, #336]	; (800a3dc <_printf_i+0x244>)
 800a28c:	2f6f      	cmp	r7, #111	; 0x6f
 800a28e:	bf0c      	ite	eq
 800a290:	2308      	moveq	r3, #8
 800a292:	230a      	movne	r3, #10
 800a294:	2100      	movs	r1, #0
 800a296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a29a:	6865      	ldr	r5, [r4, #4]
 800a29c:	60a5      	str	r5, [r4, #8]
 800a29e:	2d00      	cmp	r5, #0
 800a2a0:	bfa2      	ittt	ge
 800a2a2:	6821      	ldrge	r1, [r4, #0]
 800a2a4:	f021 0104 	bicge.w	r1, r1, #4
 800a2a8:	6021      	strge	r1, [r4, #0]
 800a2aa:	b90e      	cbnz	r6, 800a2b0 <_printf_i+0x118>
 800a2ac:	2d00      	cmp	r5, #0
 800a2ae:	d04d      	beq.n	800a34c <_printf_i+0x1b4>
 800a2b0:	4615      	mov	r5, r2
 800a2b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2b6:	fb03 6711 	mls	r7, r3, r1, r6
 800a2ba:	5dc7      	ldrb	r7, [r0, r7]
 800a2bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2c0:	4637      	mov	r7, r6
 800a2c2:	42bb      	cmp	r3, r7
 800a2c4:	460e      	mov	r6, r1
 800a2c6:	d9f4      	bls.n	800a2b2 <_printf_i+0x11a>
 800a2c8:	2b08      	cmp	r3, #8
 800a2ca:	d10b      	bne.n	800a2e4 <_printf_i+0x14c>
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	07de      	lsls	r6, r3, #31
 800a2d0:	d508      	bpl.n	800a2e4 <_printf_i+0x14c>
 800a2d2:	6923      	ldr	r3, [r4, #16]
 800a2d4:	6861      	ldr	r1, [r4, #4]
 800a2d6:	4299      	cmp	r1, r3
 800a2d8:	bfde      	ittt	le
 800a2da:	2330      	movle	r3, #48	; 0x30
 800a2dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a2e4:	1b52      	subs	r2, r2, r5
 800a2e6:	6122      	str	r2, [r4, #16]
 800a2e8:	f8cd a000 	str.w	sl, [sp]
 800a2ec:	464b      	mov	r3, r9
 800a2ee:	aa03      	add	r2, sp, #12
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	f7ff fee2 	bl	800a0bc <_printf_common>
 800a2f8:	3001      	adds	r0, #1
 800a2fa:	d14c      	bne.n	800a396 <_printf_i+0x1fe>
 800a2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a300:	b004      	add	sp, #16
 800a302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a306:	4835      	ldr	r0, [pc, #212]	; (800a3dc <_printf_i+0x244>)
 800a308:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a30c:	6829      	ldr	r1, [r5, #0]
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	f851 6b04 	ldr.w	r6, [r1], #4
 800a314:	6029      	str	r1, [r5, #0]
 800a316:	061d      	lsls	r5, r3, #24
 800a318:	d514      	bpl.n	800a344 <_printf_i+0x1ac>
 800a31a:	07df      	lsls	r7, r3, #31
 800a31c:	bf44      	itt	mi
 800a31e:	f043 0320 	orrmi.w	r3, r3, #32
 800a322:	6023      	strmi	r3, [r4, #0]
 800a324:	b91e      	cbnz	r6, 800a32e <_printf_i+0x196>
 800a326:	6823      	ldr	r3, [r4, #0]
 800a328:	f023 0320 	bic.w	r3, r3, #32
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	2310      	movs	r3, #16
 800a330:	e7b0      	b.n	800a294 <_printf_i+0xfc>
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	f043 0320 	orr.w	r3, r3, #32
 800a338:	6023      	str	r3, [r4, #0]
 800a33a:	2378      	movs	r3, #120	; 0x78
 800a33c:	4828      	ldr	r0, [pc, #160]	; (800a3e0 <_printf_i+0x248>)
 800a33e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a342:	e7e3      	b.n	800a30c <_printf_i+0x174>
 800a344:	0659      	lsls	r1, r3, #25
 800a346:	bf48      	it	mi
 800a348:	b2b6      	uxthmi	r6, r6
 800a34a:	e7e6      	b.n	800a31a <_printf_i+0x182>
 800a34c:	4615      	mov	r5, r2
 800a34e:	e7bb      	b.n	800a2c8 <_printf_i+0x130>
 800a350:	682b      	ldr	r3, [r5, #0]
 800a352:	6826      	ldr	r6, [r4, #0]
 800a354:	6961      	ldr	r1, [r4, #20]
 800a356:	1d18      	adds	r0, r3, #4
 800a358:	6028      	str	r0, [r5, #0]
 800a35a:	0635      	lsls	r5, r6, #24
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	d501      	bpl.n	800a364 <_printf_i+0x1cc>
 800a360:	6019      	str	r1, [r3, #0]
 800a362:	e002      	b.n	800a36a <_printf_i+0x1d2>
 800a364:	0670      	lsls	r0, r6, #25
 800a366:	d5fb      	bpl.n	800a360 <_printf_i+0x1c8>
 800a368:	8019      	strh	r1, [r3, #0]
 800a36a:	2300      	movs	r3, #0
 800a36c:	6123      	str	r3, [r4, #16]
 800a36e:	4615      	mov	r5, r2
 800a370:	e7ba      	b.n	800a2e8 <_printf_i+0x150>
 800a372:	682b      	ldr	r3, [r5, #0]
 800a374:	1d1a      	adds	r2, r3, #4
 800a376:	602a      	str	r2, [r5, #0]
 800a378:	681d      	ldr	r5, [r3, #0]
 800a37a:	6862      	ldr	r2, [r4, #4]
 800a37c:	2100      	movs	r1, #0
 800a37e:	4628      	mov	r0, r5
 800a380:	f7f5 ff2e 	bl	80001e0 <memchr>
 800a384:	b108      	cbz	r0, 800a38a <_printf_i+0x1f2>
 800a386:	1b40      	subs	r0, r0, r5
 800a388:	6060      	str	r0, [r4, #4]
 800a38a:	6863      	ldr	r3, [r4, #4]
 800a38c:	6123      	str	r3, [r4, #16]
 800a38e:	2300      	movs	r3, #0
 800a390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a394:	e7a8      	b.n	800a2e8 <_printf_i+0x150>
 800a396:	6923      	ldr	r3, [r4, #16]
 800a398:	462a      	mov	r2, r5
 800a39a:	4649      	mov	r1, r9
 800a39c:	4640      	mov	r0, r8
 800a39e:	47d0      	blx	sl
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	d0ab      	beq.n	800a2fc <_printf_i+0x164>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	079b      	lsls	r3, r3, #30
 800a3a8:	d413      	bmi.n	800a3d2 <_printf_i+0x23a>
 800a3aa:	68e0      	ldr	r0, [r4, #12]
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	4298      	cmp	r0, r3
 800a3b0:	bfb8      	it	lt
 800a3b2:	4618      	movlt	r0, r3
 800a3b4:	e7a4      	b.n	800a300 <_printf_i+0x168>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4632      	mov	r2, r6
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	4640      	mov	r0, r8
 800a3be:	47d0      	blx	sl
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	d09b      	beq.n	800a2fc <_printf_i+0x164>
 800a3c4:	3501      	adds	r5, #1
 800a3c6:	68e3      	ldr	r3, [r4, #12]
 800a3c8:	9903      	ldr	r1, [sp, #12]
 800a3ca:	1a5b      	subs	r3, r3, r1
 800a3cc:	42ab      	cmp	r3, r5
 800a3ce:	dcf2      	bgt.n	800a3b6 <_printf_i+0x21e>
 800a3d0:	e7eb      	b.n	800a3aa <_printf_i+0x212>
 800a3d2:	2500      	movs	r5, #0
 800a3d4:	f104 0619 	add.w	r6, r4, #25
 800a3d8:	e7f5      	b.n	800a3c6 <_printf_i+0x22e>
 800a3da:	bf00      	nop
 800a3dc:	0800f4b2 	.word	0x0800f4b2
 800a3e0:	0800f4c3 	.word	0x0800f4c3

0800a3e4 <_scanf_float>:
 800a3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e8:	b087      	sub	sp, #28
 800a3ea:	4617      	mov	r7, r2
 800a3ec:	9303      	str	r3, [sp, #12]
 800a3ee:	688b      	ldr	r3, [r1, #8]
 800a3f0:	1e5a      	subs	r2, r3, #1
 800a3f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a3f6:	bf83      	ittte	hi
 800a3f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a3fc:	195b      	addhi	r3, r3, r5
 800a3fe:	9302      	strhi	r3, [sp, #8]
 800a400:	2300      	movls	r3, #0
 800a402:	bf86      	itte	hi
 800a404:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a408:	608b      	strhi	r3, [r1, #8]
 800a40a:	9302      	strls	r3, [sp, #8]
 800a40c:	680b      	ldr	r3, [r1, #0]
 800a40e:	468b      	mov	fp, r1
 800a410:	2500      	movs	r5, #0
 800a412:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a416:	f84b 3b1c 	str.w	r3, [fp], #28
 800a41a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a41e:	4680      	mov	r8, r0
 800a420:	460c      	mov	r4, r1
 800a422:	465e      	mov	r6, fp
 800a424:	46aa      	mov	sl, r5
 800a426:	46a9      	mov	r9, r5
 800a428:	9501      	str	r5, [sp, #4]
 800a42a:	68a2      	ldr	r2, [r4, #8]
 800a42c:	b152      	cbz	r2, 800a444 <_scanf_float+0x60>
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	2b4e      	cmp	r3, #78	; 0x4e
 800a434:	d864      	bhi.n	800a500 <_scanf_float+0x11c>
 800a436:	2b40      	cmp	r3, #64	; 0x40
 800a438:	d83c      	bhi.n	800a4b4 <_scanf_float+0xd0>
 800a43a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a43e:	b2c8      	uxtb	r0, r1
 800a440:	280e      	cmp	r0, #14
 800a442:	d93a      	bls.n	800a4ba <_scanf_float+0xd6>
 800a444:	f1b9 0f00 	cmp.w	r9, #0
 800a448:	d003      	beq.n	800a452 <_scanf_float+0x6e>
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a456:	f1ba 0f01 	cmp.w	sl, #1
 800a45a:	f200 8113 	bhi.w	800a684 <_scanf_float+0x2a0>
 800a45e:	455e      	cmp	r6, fp
 800a460:	f200 8105 	bhi.w	800a66e <_scanf_float+0x28a>
 800a464:	2501      	movs	r5, #1
 800a466:	4628      	mov	r0, r5
 800a468:	b007      	add	sp, #28
 800a46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a472:	2a0d      	cmp	r2, #13
 800a474:	d8e6      	bhi.n	800a444 <_scanf_float+0x60>
 800a476:	a101      	add	r1, pc, #4	; (adr r1, 800a47c <_scanf_float+0x98>)
 800a478:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a47c:	0800a5bb 	.word	0x0800a5bb
 800a480:	0800a445 	.word	0x0800a445
 800a484:	0800a445 	.word	0x0800a445
 800a488:	0800a445 	.word	0x0800a445
 800a48c:	0800a61b 	.word	0x0800a61b
 800a490:	0800a5f3 	.word	0x0800a5f3
 800a494:	0800a445 	.word	0x0800a445
 800a498:	0800a445 	.word	0x0800a445
 800a49c:	0800a5c9 	.word	0x0800a5c9
 800a4a0:	0800a445 	.word	0x0800a445
 800a4a4:	0800a445 	.word	0x0800a445
 800a4a8:	0800a445 	.word	0x0800a445
 800a4ac:	0800a445 	.word	0x0800a445
 800a4b0:	0800a581 	.word	0x0800a581
 800a4b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a4b8:	e7db      	b.n	800a472 <_scanf_float+0x8e>
 800a4ba:	290e      	cmp	r1, #14
 800a4bc:	d8c2      	bhi.n	800a444 <_scanf_float+0x60>
 800a4be:	a001      	add	r0, pc, #4	; (adr r0, 800a4c4 <_scanf_float+0xe0>)
 800a4c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a4c4:	0800a573 	.word	0x0800a573
 800a4c8:	0800a445 	.word	0x0800a445
 800a4cc:	0800a573 	.word	0x0800a573
 800a4d0:	0800a607 	.word	0x0800a607
 800a4d4:	0800a445 	.word	0x0800a445
 800a4d8:	0800a521 	.word	0x0800a521
 800a4dc:	0800a55d 	.word	0x0800a55d
 800a4e0:	0800a55d 	.word	0x0800a55d
 800a4e4:	0800a55d 	.word	0x0800a55d
 800a4e8:	0800a55d 	.word	0x0800a55d
 800a4ec:	0800a55d 	.word	0x0800a55d
 800a4f0:	0800a55d 	.word	0x0800a55d
 800a4f4:	0800a55d 	.word	0x0800a55d
 800a4f8:	0800a55d 	.word	0x0800a55d
 800a4fc:	0800a55d 	.word	0x0800a55d
 800a500:	2b6e      	cmp	r3, #110	; 0x6e
 800a502:	d809      	bhi.n	800a518 <_scanf_float+0x134>
 800a504:	2b60      	cmp	r3, #96	; 0x60
 800a506:	d8b2      	bhi.n	800a46e <_scanf_float+0x8a>
 800a508:	2b54      	cmp	r3, #84	; 0x54
 800a50a:	d077      	beq.n	800a5fc <_scanf_float+0x218>
 800a50c:	2b59      	cmp	r3, #89	; 0x59
 800a50e:	d199      	bne.n	800a444 <_scanf_float+0x60>
 800a510:	2d07      	cmp	r5, #7
 800a512:	d197      	bne.n	800a444 <_scanf_float+0x60>
 800a514:	2508      	movs	r5, #8
 800a516:	e029      	b.n	800a56c <_scanf_float+0x188>
 800a518:	2b74      	cmp	r3, #116	; 0x74
 800a51a:	d06f      	beq.n	800a5fc <_scanf_float+0x218>
 800a51c:	2b79      	cmp	r3, #121	; 0x79
 800a51e:	e7f6      	b.n	800a50e <_scanf_float+0x12a>
 800a520:	6821      	ldr	r1, [r4, #0]
 800a522:	05c8      	lsls	r0, r1, #23
 800a524:	d51a      	bpl.n	800a55c <_scanf_float+0x178>
 800a526:	9b02      	ldr	r3, [sp, #8]
 800a528:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a52c:	6021      	str	r1, [r4, #0]
 800a52e:	f109 0901 	add.w	r9, r9, #1
 800a532:	b11b      	cbz	r3, 800a53c <_scanf_float+0x158>
 800a534:	3b01      	subs	r3, #1
 800a536:	3201      	adds	r2, #1
 800a538:	9302      	str	r3, [sp, #8]
 800a53a:	60a2      	str	r2, [r4, #8]
 800a53c:	68a3      	ldr	r3, [r4, #8]
 800a53e:	3b01      	subs	r3, #1
 800a540:	60a3      	str	r3, [r4, #8]
 800a542:	6923      	ldr	r3, [r4, #16]
 800a544:	3301      	adds	r3, #1
 800a546:	6123      	str	r3, [r4, #16]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3b01      	subs	r3, #1
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	607b      	str	r3, [r7, #4]
 800a550:	f340 8084 	ble.w	800a65c <_scanf_float+0x278>
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	3301      	adds	r3, #1
 800a558:	603b      	str	r3, [r7, #0]
 800a55a:	e766      	b.n	800a42a <_scanf_float+0x46>
 800a55c:	eb1a 0f05 	cmn.w	sl, r5
 800a560:	f47f af70 	bne.w	800a444 <_scanf_float+0x60>
 800a564:	6822      	ldr	r2, [r4, #0]
 800a566:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a56a:	6022      	str	r2, [r4, #0]
 800a56c:	f806 3b01 	strb.w	r3, [r6], #1
 800a570:	e7e4      	b.n	800a53c <_scanf_float+0x158>
 800a572:	6822      	ldr	r2, [r4, #0]
 800a574:	0610      	lsls	r0, r2, #24
 800a576:	f57f af65 	bpl.w	800a444 <_scanf_float+0x60>
 800a57a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a57e:	e7f4      	b.n	800a56a <_scanf_float+0x186>
 800a580:	f1ba 0f00 	cmp.w	sl, #0
 800a584:	d10e      	bne.n	800a5a4 <_scanf_float+0x1c0>
 800a586:	f1b9 0f00 	cmp.w	r9, #0
 800a58a:	d10e      	bne.n	800a5aa <_scanf_float+0x1c6>
 800a58c:	6822      	ldr	r2, [r4, #0]
 800a58e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a592:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a596:	d108      	bne.n	800a5aa <_scanf_float+0x1c6>
 800a598:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a59c:	6022      	str	r2, [r4, #0]
 800a59e:	f04f 0a01 	mov.w	sl, #1
 800a5a2:	e7e3      	b.n	800a56c <_scanf_float+0x188>
 800a5a4:	f1ba 0f02 	cmp.w	sl, #2
 800a5a8:	d055      	beq.n	800a656 <_scanf_float+0x272>
 800a5aa:	2d01      	cmp	r5, #1
 800a5ac:	d002      	beq.n	800a5b4 <_scanf_float+0x1d0>
 800a5ae:	2d04      	cmp	r5, #4
 800a5b0:	f47f af48 	bne.w	800a444 <_scanf_float+0x60>
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	b2ed      	uxtb	r5, r5
 800a5b8:	e7d8      	b.n	800a56c <_scanf_float+0x188>
 800a5ba:	f1ba 0f01 	cmp.w	sl, #1
 800a5be:	f47f af41 	bne.w	800a444 <_scanf_float+0x60>
 800a5c2:	f04f 0a02 	mov.w	sl, #2
 800a5c6:	e7d1      	b.n	800a56c <_scanf_float+0x188>
 800a5c8:	b97d      	cbnz	r5, 800a5ea <_scanf_float+0x206>
 800a5ca:	f1b9 0f00 	cmp.w	r9, #0
 800a5ce:	f47f af3c 	bne.w	800a44a <_scanf_float+0x66>
 800a5d2:	6822      	ldr	r2, [r4, #0]
 800a5d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a5d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a5dc:	f47f af39 	bne.w	800a452 <_scanf_float+0x6e>
 800a5e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a5e4:	6022      	str	r2, [r4, #0]
 800a5e6:	2501      	movs	r5, #1
 800a5e8:	e7c0      	b.n	800a56c <_scanf_float+0x188>
 800a5ea:	2d03      	cmp	r5, #3
 800a5ec:	d0e2      	beq.n	800a5b4 <_scanf_float+0x1d0>
 800a5ee:	2d05      	cmp	r5, #5
 800a5f0:	e7de      	b.n	800a5b0 <_scanf_float+0x1cc>
 800a5f2:	2d02      	cmp	r5, #2
 800a5f4:	f47f af26 	bne.w	800a444 <_scanf_float+0x60>
 800a5f8:	2503      	movs	r5, #3
 800a5fa:	e7b7      	b.n	800a56c <_scanf_float+0x188>
 800a5fc:	2d06      	cmp	r5, #6
 800a5fe:	f47f af21 	bne.w	800a444 <_scanf_float+0x60>
 800a602:	2507      	movs	r5, #7
 800a604:	e7b2      	b.n	800a56c <_scanf_float+0x188>
 800a606:	6822      	ldr	r2, [r4, #0]
 800a608:	0591      	lsls	r1, r2, #22
 800a60a:	f57f af1b 	bpl.w	800a444 <_scanf_float+0x60>
 800a60e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a612:	6022      	str	r2, [r4, #0]
 800a614:	f8cd 9004 	str.w	r9, [sp, #4]
 800a618:	e7a8      	b.n	800a56c <_scanf_float+0x188>
 800a61a:	6822      	ldr	r2, [r4, #0]
 800a61c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a620:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a624:	d006      	beq.n	800a634 <_scanf_float+0x250>
 800a626:	0550      	lsls	r0, r2, #21
 800a628:	f57f af0c 	bpl.w	800a444 <_scanf_float+0x60>
 800a62c:	f1b9 0f00 	cmp.w	r9, #0
 800a630:	f43f af0f 	beq.w	800a452 <_scanf_float+0x6e>
 800a634:	0591      	lsls	r1, r2, #22
 800a636:	bf58      	it	pl
 800a638:	9901      	ldrpl	r1, [sp, #4]
 800a63a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a63e:	bf58      	it	pl
 800a640:	eba9 0101 	subpl.w	r1, r9, r1
 800a644:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a648:	bf58      	it	pl
 800a64a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a64e:	6022      	str	r2, [r4, #0]
 800a650:	f04f 0900 	mov.w	r9, #0
 800a654:	e78a      	b.n	800a56c <_scanf_float+0x188>
 800a656:	f04f 0a03 	mov.w	sl, #3
 800a65a:	e787      	b.n	800a56c <_scanf_float+0x188>
 800a65c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a660:	4639      	mov	r1, r7
 800a662:	4640      	mov	r0, r8
 800a664:	4798      	blx	r3
 800a666:	2800      	cmp	r0, #0
 800a668:	f43f aedf 	beq.w	800a42a <_scanf_float+0x46>
 800a66c:	e6ea      	b.n	800a444 <_scanf_float+0x60>
 800a66e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a672:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a676:	463a      	mov	r2, r7
 800a678:	4640      	mov	r0, r8
 800a67a:	4798      	blx	r3
 800a67c:	6923      	ldr	r3, [r4, #16]
 800a67e:	3b01      	subs	r3, #1
 800a680:	6123      	str	r3, [r4, #16]
 800a682:	e6ec      	b.n	800a45e <_scanf_float+0x7a>
 800a684:	1e6b      	subs	r3, r5, #1
 800a686:	2b06      	cmp	r3, #6
 800a688:	d825      	bhi.n	800a6d6 <_scanf_float+0x2f2>
 800a68a:	2d02      	cmp	r5, #2
 800a68c:	d836      	bhi.n	800a6fc <_scanf_float+0x318>
 800a68e:	455e      	cmp	r6, fp
 800a690:	f67f aee8 	bls.w	800a464 <_scanf_float+0x80>
 800a694:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a698:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a69c:	463a      	mov	r2, r7
 800a69e:	4640      	mov	r0, r8
 800a6a0:	4798      	blx	r3
 800a6a2:	6923      	ldr	r3, [r4, #16]
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	6123      	str	r3, [r4, #16]
 800a6a8:	e7f1      	b.n	800a68e <_scanf_float+0x2aa>
 800a6aa:	9802      	ldr	r0, [sp, #8]
 800a6ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a6b4:	9002      	str	r0, [sp, #8]
 800a6b6:	463a      	mov	r2, r7
 800a6b8:	4640      	mov	r0, r8
 800a6ba:	4798      	blx	r3
 800a6bc:	6923      	ldr	r3, [r4, #16]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	6123      	str	r3, [r4, #16]
 800a6c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6c6:	fa5f fa8a 	uxtb.w	sl, sl
 800a6ca:	f1ba 0f02 	cmp.w	sl, #2
 800a6ce:	d1ec      	bne.n	800a6aa <_scanf_float+0x2c6>
 800a6d0:	3d03      	subs	r5, #3
 800a6d2:	b2ed      	uxtb	r5, r5
 800a6d4:	1b76      	subs	r6, r6, r5
 800a6d6:	6823      	ldr	r3, [r4, #0]
 800a6d8:	05da      	lsls	r2, r3, #23
 800a6da:	d52f      	bpl.n	800a73c <_scanf_float+0x358>
 800a6dc:	055b      	lsls	r3, r3, #21
 800a6de:	d510      	bpl.n	800a702 <_scanf_float+0x31e>
 800a6e0:	455e      	cmp	r6, fp
 800a6e2:	f67f aebf 	bls.w	800a464 <_scanf_float+0x80>
 800a6e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6ee:	463a      	mov	r2, r7
 800a6f0:	4640      	mov	r0, r8
 800a6f2:	4798      	blx	r3
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	6123      	str	r3, [r4, #16]
 800a6fa:	e7f1      	b.n	800a6e0 <_scanf_float+0x2fc>
 800a6fc:	46aa      	mov	sl, r5
 800a6fe:	9602      	str	r6, [sp, #8]
 800a700:	e7df      	b.n	800a6c2 <_scanf_float+0x2de>
 800a702:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a706:	6923      	ldr	r3, [r4, #16]
 800a708:	2965      	cmp	r1, #101	; 0x65
 800a70a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a70e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a712:	6123      	str	r3, [r4, #16]
 800a714:	d00c      	beq.n	800a730 <_scanf_float+0x34c>
 800a716:	2945      	cmp	r1, #69	; 0x45
 800a718:	d00a      	beq.n	800a730 <_scanf_float+0x34c>
 800a71a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a71e:	463a      	mov	r2, r7
 800a720:	4640      	mov	r0, r8
 800a722:	4798      	blx	r3
 800a724:	6923      	ldr	r3, [r4, #16]
 800a726:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a72a:	3b01      	subs	r3, #1
 800a72c:	1eb5      	subs	r5, r6, #2
 800a72e:	6123      	str	r3, [r4, #16]
 800a730:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a734:	463a      	mov	r2, r7
 800a736:	4640      	mov	r0, r8
 800a738:	4798      	blx	r3
 800a73a:	462e      	mov	r6, r5
 800a73c:	6825      	ldr	r5, [r4, #0]
 800a73e:	f015 0510 	ands.w	r5, r5, #16
 800a742:	d159      	bne.n	800a7f8 <_scanf_float+0x414>
 800a744:	7035      	strb	r5, [r6, #0]
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a74c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a750:	d11b      	bne.n	800a78a <_scanf_float+0x3a6>
 800a752:	9b01      	ldr	r3, [sp, #4]
 800a754:	454b      	cmp	r3, r9
 800a756:	eba3 0209 	sub.w	r2, r3, r9
 800a75a:	d123      	bne.n	800a7a4 <_scanf_float+0x3c0>
 800a75c:	2200      	movs	r2, #0
 800a75e:	4659      	mov	r1, fp
 800a760:	4640      	mov	r0, r8
 800a762:	f000 febf 	bl	800b4e4 <_strtod_r>
 800a766:	6822      	ldr	r2, [r4, #0]
 800a768:	9b03      	ldr	r3, [sp, #12]
 800a76a:	f012 0f02 	tst.w	r2, #2
 800a76e:	ec57 6b10 	vmov	r6, r7, d0
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	d021      	beq.n	800a7ba <_scanf_float+0x3d6>
 800a776:	9903      	ldr	r1, [sp, #12]
 800a778:	1d1a      	adds	r2, r3, #4
 800a77a:	600a      	str	r2, [r1, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	e9c3 6700 	strd	r6, r7, [r3]
 800a782:	68e3      	ldr	r3, [r4, #12]
 800a784:	3301      	adds	r3, #1
 800a786:	60e3      	str	r3, [r4, #12]
 800a788:	e66d      	b.n	800a466 <_scanf_float+0x82>
 800a78a:	9b04      	ldr	r3, [sp, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d0e5      	beq.n	800a75c <_scanf_float+0x378>
 800a790:	9905      	ldr	r1, [sp, #20]
 800a792:	230a      	movs	r3, #10
 800a794:	462a      	mov	r2, r5
 800a796:	3101      	adds	r1, #1
 800a798:	4640      	mov	r0, r8
 800a79a:	f000 ff2b 	bl	800b5f4 <_strtol_r>
 800a79e:	9b04      	ldr	r3, [sp, #16]
 800a7a0:	9e05      	ldr	r6, [sp, #20]
 800a7a2:	1ac2      	subs	r2, r0, r3
 800a7a4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a7a8:	429e      	cmp	r6, r3
 800a7aa:	bf28      	it	cs
 800a7ac:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a7b0:	4912      	ldr	r1, [pc, #72]	; (800a7fc <_scanf_float+0x418>)
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f000 f854 	bl	800a860 <siprintf>
 800a7b8:	e7d0      	b.n	800a75c <_scanf_float+0x378>
 800a7ba:	9903      	ldr	r1, [sp, #12]
 800a7bc:	f012 0f04 	tst.w	r2, #4
 800a7c0:	f103 0204 	add.w	r2, r3, #4
 800a7c4:	600a      	str	r2, [r1, #0]
 800a7c6:	d1d9      	bne.n	800a77c <_scanf_float+0x398>
 800a7c8:	f8d3 8000 	ldr.w	r8, [r3]
 800a7cc:	ee10 2a10 	vmov	r2, s0
 800a7d0:	ee10 0a10 	vmov	r0, s0
 800a7d4:	463b      	mov	r3, r7
 800a7d6:	4639      	mov	r1, r7
 800a7d8:	f7f6 f9a8 	bl	8000b2c <__aeabi_dcmpun>
 800a7dc:	b128      	cbz	r0, 800a7ea <_scanf_float+0x406>
 800a7de:	4808      	ldr	r0, [pc, #32]	; (800a800 <_scanf_float+0x41c>)
 800a7e0:	f000 f838 	bl	800a854 <nanf>
 800a7e4:	ed88 0a00 	vstr	s0, [r8]
 800a7e8:	e7cb      	b.n	800a782 <_scanf_float+0x39e>
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	4639      	mov	r1, r7
 800a7ee:	f7f6 f9fb 	bl	8000be8 <__aeabi_d2f>
 800a7f2:	f8c8 0000 	str.w	r0, [r8]
 800a7f6:	e7c4      	b.n	800a782 <_scanf_float+0x39e>
 800a7f8:	2500      	movs	r5, #0
 800a7fa:	e634      	b.n	800a466 <_scanf_float+0x82>
 800a7fc:	0800f4d4 	.word	0x0800f4d4
 800a800:	0800f948 	.word	0x0800f948

0800a804 <iprintf>:
 800a804:	b40f      	push	{r0, r1, r2, r3}
 800a806:	4b0a      	ldr	r3, [pc, #40]	; (800a830 <iprintf+0x2c>)
 800a808:	b513      	push	{r0, r1, r4, lr}
 800a80a:	681c      	ldr	r4, [r3, #0]
 800a80c:	b124      	cbz	r4, 800a818 <iprintf+0x14>
 800a80e:	69a3      	ldr	r3, [r4, #24]
 800a810:	b913      	cbnz	r3, 800a818 <iprintf+0x14>
 800a812:	4620      	mov	r0, r4
 800a814:	f001 fdc2 	bl	800c39c <__sinit>
 800a818:	ab05      	add	r3, sp, #20
 800a81a:	9a04      	ldr	r2, [sp, #16]
 800a81c:	68a1      	ldr	r1, [r4, #8]
 800a81e:	9301      	str	r3, [sp, #4]
 800a820:	4620      	mov	r0, r4
 800a822:	f003 f849 	bl	800d8b8 <_vfiprintf_r>
 800a826:	b002      	add	sp, #8
 800a828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a82c:	b004      	add	sp, #16
 800a82e:	4770      	bx	lr
 800a830:	20000088 	.word	0x20000088

0800a834 <_sbrk_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4d06      	ldr	r5, [pc, #24]	; (800a850 <_sbrk_r+0x1c>)
 800a838:	2300      	movs	r3, #0
 800a83a:	4604      	mov	r4, r0
 800a83c:	4608      	mov	r0, r1
 800a83e:	602b      	str	r3, [r5, #0]
 800a840:	f7f8 ffd2 	bl	80037e8 <_sbrk>
 800a844:	1c43      	adds	r3, r0, #1
 800a846:	d102      	bne.n	800a84e <_sbrk_r+0x1a>
 800a848:	682b      	ldr	r3, [r5, #0]
 800a84a:	b103      	cbz	r3, 800a84e <_sbrk_r+0x1a>
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	bd38      	pop	{r3, r4, r5, pc}
 800a850:	20000678 	.word	0x20000678

0800a854 <nanf>:
 800a854:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a85c <nanf+0x8>
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	7fc00000 	.word	0x7fc00000

0800a860 <siprintf>:
 800a860:	b40e      	push	{r1, r2, r3}
 800a862:	b500      	push	{lr}
 800a864:	b09c      	sub	sp, #112	; 0x70
 800a866:	ab1d      	add	r3, sp, #116	; 0x74
 800a868:	9002      	str	r0, [sp, #8]
 800a86a:	9006      	str	r0, [sp, #24]
 800a86c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a870:	4809      	ldr	r0, [pc, #36]	; (800a898 <siprintf+0x38>)
 800a872:	9107      	str	r1, [sp, #28]
 800a874:	9104      	str	r1, [sp, #16]
 800a876:	4909      	ldr	r1, [pc, #36]	; (800a89c <siprintf+0x3c>)
 800a878:	f853 2b04 	ldr.w	r2, [r3], #4
 800a87c:	9105      	str	r1, [sp, #20]
 800a87e:	6800      	ldr	r0, [r0, #0]
 800a880:	9301      	str	r3, [sp, #4]
 800a882:	a902      	add	r1, sp, #8
 800a884:	f002 feee 	bl	800d664 <_svfiprintf_r>
 800a888:	9b02      	ldr	r3, [sp, #8]
 800a88a:	2200      	movs	r2, #0
 800a88c:	701a      	strb	r2, [r3, #0]
 800a88e:	b01c      	add	sp, #112	; 0x70
 800a890:	f85d eb04 	ldr.w	lr, [sp], #4
 800a894:	b003      	add	sp, #12
 800a896:	4770      	bx	lr
 800a898:	20000088 	.word	0x20000088
 800a89c:	ffff0208 	.word	0xffff0208

0800a8a0 <sulp>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	ec45 4b10 	vmov	d0, r4, r5
 800a8aa:	4616      	mov	r6, r2
 800a8ac:	f002 fd1a 	bl	800d2e4 <__ulp>
 800a8b0:	ec51 0b10 	vmov	r0, r1, d0
 800a8b4:	b17e      	cbz	r6, 800a8d6 <sulp+0x36>
 800a8b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a8ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	dd09      	ble.n	800a8d6 <sulp+0x36>
 800a8c2:	051b      	lsls	r3, r3, #20
 800a8c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a8c8:	2400      	movs	r4, #0
 800a8ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a8ce:	4622      	mov	r2, r4
 800a8d0:	462b      	mov	r3, r5
 800a8d2:	f7f5 fe91 	bl	80005f8 <__aeabi_dmul>
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}

0800a8d8 <_strtod_l>:
 800a8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8dc:	ed2d 8b02 	vpush	{d8}
 800a8e0:	b09d      	sub	sp, #116	; 0x74
 800a8e2:	461f      	mov	r7, r3
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	9318      	str	r3, [sp, #96]	; 0x60
 800a8e8:	4ba2      	ldr	r3, [pc, #648]	; (800ab74 <_strtod_l+0x29c>)
 800a8ea:	9213      	str	r2, [sp, #76]	; 0x4c
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	9305      	str	r3, [sp, #20]
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	4688      	mov	r8, r1
 800a8f6:	f7f5 fc6b 	bl	80001d0 <strlen>
 800a8fa:	f04f 0a00 	mov.w	sl, #0
 800a8fe:	4605      	mov	r5, r0
 800a900:	f04f 0b00 	mov.w	fp, #0
 800a904:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a908:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a90a:	781a      	ldrb	r2, [r3, #0]
 800a90c:	2a2b      	cmp	r2, #43	; 0x2b
 800a90e:	d04e      	beq.n	800a9ae <_strtod_l+0xd6>
 800a910:	d83b      	bhi.n	800a98a <_strtod_l+0xb2>
 800a912:	2a0d      	cmp	r2, #13
 800a914:	d834      	bhi.n	800a980 <_strtod_l+0xa8>
 800a916:	2a08      	cmp	r2, #8
 800a918:	d834      	bhi.n	800a984 <_strtod_l+0xac>
 800a91a:	2a00      	cmp	r2, #0
 800a91c:	d03e      	beq.n	800a99c <_strtod_l+0xc4>
 800a91e:	2300      	movs	r3, #0
 800a920:	930a      	str	r3, [sp, #40]	; 0x28
 800a922:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a924:	7833      	ldrb	r3, [r6, #0]
 800a926:	2b30      	cmp	r3, #48	; 0x30
 800a928:	f040 80b0 	bne.w	800aa8c <_strtod_l+0x1b4>
 800a92c:	7873      	ldrb	r3, [r6, #1]
 800a92e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a932:	2b58      	cmp	r3, #88	; 0x58
 800a934:	d168      	bne.n	800aa08 <_strtod_l+0x130>
 800a936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a938:	9301      	str	r3, [sp, #4]
 800a93a:	ab18      	add	r3, sp, #96	; 0x60
 800a93c:	9702      	str	r7, [sp, #8]
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	4a8d      	ldr	r2, [pc, #564]	; (800ab78 <_strtod_l+0x2a0>)
 800a942:	ab19      	add	r3, sp, #100	; 0x64
 800a944:	a917      	add	r1, sp, #92	; 0x5c
 800a946:	4620      	mov	r0, r4
 800a948:	f001 fe2c 	bl	800c5a4 <__gethex>
 800a94c:	f010 0707 	ands.w	r7, r0, #7
 800a950:	4605      	mov	r5, r0
 800a952:	d005      	beq.n	800a960 <_strtod_l+0x88>
 800a954:	2f06      	cmp	r7, #6
 800a956:	d12c      	bne.n	800a9b2 <_strtod_l+0xda>
 800a958:	3601      	adds	r6, #1
 800a95a:	2300      	movs	r3, #0
 800a95c:	9617      	str	r6, [sp, #92]	; 0x5c
 800a95e:	930a      	str	r3, [sp, #40]	; 0x28
 800a960:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a962:	2b00      	cmp	r3, #0
 800a964:	f040 8590 	bne.w	800b488 <_strtod_l+0xbb0>
 800a968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a96a:	b1eb      	cbz	r3, 800a9a8 <_strtod_l+0xd0>
 800a96c:	4652      	mov	r2, sl
 800a96e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a972:	ec43 2b10 	vmov	d0, r2, r3
 800a976:	b01d      	add	sp, #116	; 0x74
 800a978:	ecbd 8b02 	vpop	{d8}
 800a97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a980:	2a20      	cmp	r2, #32
 800a982:	d1cc      	bne.n	800a91e <_strtod_l+0x46>
 800a984:	3301      	adds	r3, #1
 800a986:	9317      	str	r3, [sp, #92]	; 0x5c
 800a988:	e7be      	b.n	800a908 <_strtod_l+0x30>
 800a98a:	2a2d      	cmp	r2, #45	; 0x2d
 800a98c:	d1c7      	bne.n	800a91e <_strtod_l+0x46>
 800a98e:	2201      	movs	r2, #1
 800a990:	920a      	str	r2, [sp, #40]	; 0x28
 800a992:	1c5a      	adds	r2, r3, #1
 800a994:	9217      	str	r2, [sp, #92]	; 0x5c
 800a996:	785b      	ldrb	r3, [r3, #1]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1c2      	bne.n	800a922 <_strtod_l+0x4a>
 800a99c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a99e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	f040 856e 	bne.w	800b484 <_strtod_l+0xbac>
 800a9a8:	4652      	mov	r2, sl
 800a9aa:	465b      	mov	r3, fp
 800a9ac:	e7e1      	b.n	800a972 <_strtod_l+0x9a>
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	e7ee      	b.n	800a990 <_strtod_l+0xb8>
 800a9b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a9b4:	b13a      	cbz	r2, 800a9c6 <_strtod_l+0xee>
 800a9b6:	2135      	movs	r1, #53	; 0x35
 800a9b8:	a81a      	add	r0, sp, #104	; 0x68
 800a9ba:	f002 fd9e 	bl	800d4fa <__copybits>
 800a9be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f002 f95d 	bl	800cc80 <_Bfree>
 800a9c6:	3f01      	subs	r7, #1
 800a9c8:	2f04      	cmp	r7, #4
 800a9ca:	d806      	bhi.n	800a9da <_strtod_l+0x102>
 800a9cc:	e8df f007 	tbb	[pc, r7]
 800a9d0:	1714030a 	.word	0x1714030a
 800a9d4:	0a          	.byte	0x0a
 800a9d5:	00          	.byte	0x00
 800a9d6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a9da:	0728      	lsls	r0, r5, #28
 800a9dc:	d5c0      	bpl.n	800a960 <_strtod_l+0x88>
 800a9de:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a9e2:	e7bd      	b.n	800a960 <_strtod_l+0x88>
 800a9e4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a9e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a9ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a9ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a9f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a9f6:	e7f0      	b.n	800a9da <_strtod_l+0x102>
 800a9f8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ab7c <_strtod_l+0x2a4>
 800a9fc:	e7ed      	b.n	800a9da <_strtod_l+0x102>
 800a9fe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800aa02:	f04f 3aff 	mov.w	sl, #4294967295
 800aa06:	e7e8      	b.n	800a9da <_strtod_l+0x102>
 800aa08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa0a:	1c5a      	adds	r2, r3, #1
 800aa0c:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa0e:	785b      	ldrb	r3, [r3, #1]
 800aa10:	2b30      	cmp	r3, #48	; 0x30
 800aa12:	d0f9      	beq.n	800aa08 <_strtod_l+0x130>
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d0a3      	beq.n	800a960 <_strtod_l+0x88>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	f04f 0900 	mov.w	r9, #0
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa22:	9308      	str	r3, [sp, #32]
 800aa24:	f8cd 901c 	str.w	r9, [sp, #28]
 800aa28:	464f      	mov	r7, r9
 800aa2a:	220a      	movs	r2, #10
 800aa2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800aa2e:	7806      	ldrb	r6, [r0, #0]
 800aa30:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aa34:	b2d9      	uxtb	r1, r3
 800aa36:	2909      	cmp	r1, #9
 800aa38:	d92a      	bls.n	800aa90 <_strtod_l+0x1b8>
 800aa3a:	9905      	ldr	r1, [sp, #20]
 800aa3c:	462a      	mov	r2, r5
 800aa3e:	f003 f8b6 	bl	800dbae <strncmp>
 800aa42:	b398      	cbz	r0, 800aaac <_strtod_l+0x1d4>
 800aa44:	2000      	movs	r0, #0
 800aa46:	4632      	mov	r2, r6
 800aa48:	463d      	mov	r5, r7
 800aa4a:	9005      	str	r0, [sp, #20]
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2a65      	cmp	r2, #101	; 0x65
 800aa50:	d001      	beq.n	800aa56 <_strtod_l+0x17e>
 800aa52:	2a45      	cmp	r2, #69	; 0x45
 800aa54:	d118      	bne.n	800aa88 <_strtod_l+0x1b0>
 800aa56:	b91d      	cbnz	r5, 800aa60 <_strtod_l+0x188>
 800aa58:	9a04      	ldr	r2, [sp, #16]
 800aa5a:	4302      	orrs	r2, r0
 800aa5c:	d09e      	beq.n	800a99c <_strtod_l+0xc4>
 800aa5e:	2500      	movs	r5, #0
 800aa60:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800aa64:	f108 0201 	add.w	r2, r8, #1
 800aa68:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa6a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800aa6e:	2a2b      	cmp	r2, #43	; 0x2b
 800aa70:	d075      	beq.n	800ab5e <_strtod_l+0x286>
 800aa72:	2a2d      	cmp	r2, #45	; 0x2d
 800aa74:	d07b      	beq.n	800ab6e <_strtod_l+0x296>
 800aa76:	f04f 0c00 	mov.w	ip, #0
 800aa7a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aa7e:	2909      	cmp	r1, #9
 800aa80:	f240 8082 	bls.w	800ab88 <_strtod_l+0x2b0>
 800aa84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aa88:	2600      	movs	r6, #0
 800aa8a:	e09d      	b.n	800abc8 <_strtod_l+0x2f0>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	e7c4      	b.n	800aa1a <_strtod_l+0x142>
 800aa90:	2f08      	cmp	r7, #8
 800aa92:	bfd8      	it	le
 800aa94:	9907      	ldrle	r1, [sp, #28]
 800aa96:	f100 0001 	add.w	r0, r0, #1
 800aa9a:	bfda      	itte	le
 800aa9c:	fb02 3301 	mlale	r3, r2, r1, r3
 800aaa0:	9307      	strle	r3, [sp, #28]
 800aaa2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800aaa6:	3701      	adds	r7, #1
 800aaa8:	9017      	str	r0, [sp, #92]	; 0x5c
 800aaaa:	e7bf      	b.n	800aa2c <_strtod_l+0x154>
 800aaac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aaae:	195a      	adds	r2, r3, r5
 800aab0:	9217      	str	r2, [sp, #92]	; 0x5c
 800aab2:	5d5a      	ldrb	r2, [r3, r5]
 800aab4:	2f00      	cmp	r7, #0
 800aab6:	d037      	beq.n	800ab28 <_strtod_l+0x250>
 800aab8:	9005      	str	r0, [sp, #20]
 800aaba:	463d      	mov	r5, r7
 800aabc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aac0:	2b09      	cmp	r3, #9
 800aac2:	d912      	bls.n	800aaea <_strtod_l+0x212>
 800aac4:	2301      	movs	r3, #1
 800aac6:	e7c2      	b.n	800aa4e <_strtod_l+0x176>
 800aac8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aaca:	1c5a      	adds	r2, r3, #1
 800aacc:	9217      	str	r2, [sp, #92]	; 0x5c
 800aace:	785a      	ldrb	r2, [r3, #1]
 800aad0:	3001      	adds	r0, #1
 800aad2:	2a30      	cmp	r2, #48	; 0x30
 800aad4:	d0f8      	beq.n	800aac8 <_strtod_l+0x1f0>
 800aad6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aada:	2b08      	cmp	r3, #8
 800aadc:	f200 84d9 	bhi.w	800b492 <_strtod_l+0xbba>
 800aae0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aae2:	9005      	str	r0, [sp, #20]
 800aae4:	2000      	movs	r0, #0
 800aae6:	9308      	str	r3, [sp, #32]
 800aae8:	4605      	mov	r5, r0
 800aaea:	3a30      	subs	r2, #48	; 0x30
 800aaec:	f100 0301 	add.w	r3, r0, #1
 800aaf0:	d014      	beq.n	800ab1c <_strtod_l+0x244>
 800aaf2:	9905      	ldr	r1, [sp, #20]
 800aaf4:	4419      	add	r1, r3
 800aaf6:	9105      	str	r1, [sp, #20]
 800aaf8:	462b      	mov	r3, r5
 800aafa:	eb00 0e05 	add.w	lr, r0, r5
 800aafe:	210a      	movs	r1, #10
 800ab00:	4573      	cmp	r3, lr
 800ab02:	d113      	bne.n	800ab2c <_strtod_l+0x254>
 800ab04:	182b      	adds	r3, r5, r0
 800ab06:	2b08      	cmp	r3, #8
 800ab08:	f105 0501 	add.w	r5, r5, #1
 800ab0c:	4405      	add	r5, r0
 800ab0e:	dc1c      	bgt.n	800ab4a <_strtod_l+0x272>
 800ab10:	9907      	ldr	r1, [sp, #28]
 800ab12:	230a      	movs	r3, #10
 800ab14:	fb03 2301 	mla	r3, r3, r1, r2
 800ab18:	9307      	str	r3, [sp, #28]
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab1e:	1c51      	adds	r1, r2, #1
 800ab20:	9117      	str	r1, [sp, #92]	; 0x5c
 800ab22:	7852      	ldrb	r2, [r2, #1]
 800ab24:	4618      	mov	r0, r3
 800ab26:	e7c9      	b.n	800aabc <_strtod_l+0x1e4>
 800ab28:	4638      	mov	r0, r7
 800ab2a:	e7d2      	b.n	800aad2 <_strtod_l+0x1fa>
 800ab2c:	2b08      	cmp	r3, #8
 800ab2e:	dc04      	bgt.n	800ab3a <_strtod_l+0x262>
 800ab30:	9e07      	ldr	r6, [sp, #28]
 800ab32:	434e      	muls	r6, r1
 800ab34:	9607      	str	r6, [sp, #28]
 800ab36:	3301      	adds	r3, #1
 800ab38:	e7e2      	b.n	800ab00 <_strtod_l+0x228>
 800ab3a:	f103 0c01 	add.w	ip, r3, #1
 800ab3e:	f1bc 0f10 	cmp.w	ip, #16
 800ab42:	bfd8      	it	le
 800ab44:	fb01 f909 	mulle.w	r9, r1, r9
 800ab48:	e7f5      	b.n	800ab36 <_strtod_l+0x25e>
 800ab4a:	2d10      	cmp	r5, #16
 800ab4c:	bfdc      	itt	le
 800ab4e:	230a      	movle	r3, #10
 800ab50:	fb03 2909 	mlale	r9, r3, r9, r2
 800ab54:	e7e1      	b.n	800ab1a <_strtod_l+0x242>
 800ab56:	2300      	movs	r3, #0
 800ab58:	9305      	str	r3, [sp, #20]
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e77c      	b.n	800aa58 <_strtod_l+0x180>
 800ab5e:	f04f 0c00 	mov.w	ip, #0
 800ab62:	f108 0202 	add.w	r2, r8, #2
 800ab66:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab68:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ab6c:	e785      	b.n	800aa7a <_strtod_l+0x1a2>
 800ab6e:	f04f 0c01 	mov.w	ip, #1
 800ab72:	e7f6      	b.n	800ab62 <_strtod_l+0x28a>
 800ab74:	0800f78c 	.word	0x0800f78c
 800ab78:	0800f4dc 	.word	0x0800f4dc
 800ab7c:	7ff00000 	.word	0x7ff00000
 800ab80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab82:	1c51      	adds	r1, r2, #1
 800ab84:	9117      	str	r1, [sp, #92]	; 0x5c
 800ab86:	7852      	ldrb	r2, [r2, #1]
 800ab88:	2a30      	cmp	r2, #48	; 0x30
 800ab8a:	d0f9      	beq.n	800ab80 <_strtod_l+0x2a8>
 800ab8c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ab90:	2908      	cmp	r1, #8
 800ab92:	f63f af79 	bhi.w	800aa88 <_strtod_l+0x1b0>
 800ab96:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ab9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab9c:	9206      	str	r2, [sp, #24]
 800ab9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aba0:	1c51      	adds	r1, r2, #1
 800aba2:	9117      	str	r1, [sp, #92]	; 0x5c
 800aba4:	7852      	ldrb	r2, [r2, #1]
 800aba6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800abaa:	2e09      	cmp	r6, #9
 800abac:	d937      	bls.n	800ac1e <_strtod_l+0x346>
 800abae:	9e06      	ldr	r6, [sp, #24]
 800abb0:	1b89      	subs	r1, r1, r6
 800abb2:	2908      	cmp	r1, #8
 800abb4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800abb8:	dc02      	bgt.n	800abc0 <_strtod_l+0x2e8>
 800abba:	4576      	cmp	r6, lr
 800abbc:	bfa8      	it	ge
 800abbe:	4676      	movge	r6, lr
 800abc0:	f1bc 0f00 	cmp.w	ip, #0
 800abc4:	d000      	beq.n	800abc8 <_strtod_l+0x2f0>
 800abc6:	4276      	negs	r6, r6
 800abc8:	2d00      	cmp	r5, #0
 800abca:	d14d      	bne.n	800ac68 <_strtod_l+0x390>
 800abcc:	9904      	ldr	r1, [sp, #16]
 800abce:	4301      	orrs	r1, r0
 800abd0:	f47f aec6 	bne.w	800a960 <_strtod_l+0x88>
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f47f aee1 	bne.w	800a99c <_strtod_l+0xc4>
 800abda:	2a69      	cmp	r2, #105	; 0x69
 800abdc:	d027      	beq.n	800ac2e <_strtod_l+0x356>
 800abde:	dc24      	bgt.n	800ac2a <_strtod_l+0x352>
 800abe0:	2a49      	cmp	r2, #73	; 0x49
 800abe2:	d024      	beq.n	800ac2e <_strtod_l+0x356>
 800abe4:	2a4e      	cmp	r2, #78	; 0x4e
 800abe6:	f47f aed9 	bne.w	800a99c <_strtod_l+0xc4>
 800abea:	499f      	ldr	r1, [pc, #636]	; (800ae68 <_strtod_l+0x590>)
 800abec:	a817      	add	r0, sp, #92	; 0x5c
 800abee:	f001 ff31 	bl	800ca54 <__match>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	f43f aed2 	beq.w	800a99c <_strtod_l+0xc4>
 800abf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	2b28      	cmp	r3, #40	; 0x28
 800abfe:	d12d      	bne.n	800ac5c <_strtod_l+0x384>
 800ac00:	499a      	ldr	r1, [pc, #616]	; (800ae6c <_strtod_l+0x594>)
 800ac02:	aa1a      	add	r2, sp, #104	; 0x68
 800ac04:	a817      	add	r0, sp, #92	; 0x5c
 800ac06:	f001 ff39 	bl	800ca7c <__hexnan>
 800ac0a:	2805      	cmp	r0, #5
 800ac0c:	d126      	bne.n	800ac5c <_strtod_l+0x384>
 800ac0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac10:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ac14:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ac18:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ac1c:	e6a0      	b.n	800a960 <_strtod_l+0x88>
 800ac1e:	210a      	movs	r1, #10
 800ac20:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ac24:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ac28:	e7b9      	b.n	800ab9e <_strtod_l+0x2c6>
 800ac2a:	2a6e      	cmp	r2, #110	; 0x6e
 800ac2c:	e7db      	b.n	800abe6 <_strtod_l+0x30e>
 800ac2e:	4990      	ldr	r1, [pc, #576]	; (800ae70 <_strtod_l+0x598>)
 800ac30:	a817      	add	r0, sp, #92	; 0x5c
 800ac32:	f001 ff0f 	bl	800ca54 <__match>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	f43f aeb0 	beq.w	800a99c <_strtod_l+0xc4>
 800ac3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac3e:	498d      	ldr	r1, [pc, #564]	; (800ae74 <_strtod_l+0x59c>)
 800ac40:	3b01      	subs	r3, #1
 800ac42:	a817      	add	r0, sp, #92	; 0x5c
 800ac44:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac46:	f001 ff05 	bl	800ca54 <__match>
 800ac4a:	b910      	cbnz	r0, 800ac52 <_strtod_l+0x37a>
 800ac4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac4e:	3301      	adds	r3, #1
 800ac50:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac52:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ae84 <_strtod_l+0x5ac>
 800ac56:	f04f 0a00 	mov.w	sl, #0
 800ac5a:	e681      	b.n	800a960 <_strtod_l+0x88>
 800ac5c:	4886      	ldr	r0, [pc, #536]	; (800ae78 <_strtod_l+0x5a0>)
 800ac5e:	f002 ff5b 	bl	800db18 <nan>
 800ac62:	ec5b ab10 	vmov	sl, fp, d0
 800ac66:	e67b      	b.n	800a960 <_strtod_l+0x88>
 800ac68:	9b05      	ldr	r3, [sp, #20]
 800ac6a:	9807      	ldr	r0, [sp, #28]
 800ac6c:	1af3      	subs	r3, r6, r3
 800ac6e:	2f00      	cmp	r7, #0
 800ac70:	bf08      	it	eq
 800ac72:	462f      	moveq	r7, r5
 800ac74:	2d10      	cmp	r5, #16
 800ac76:	9306      	str	r3, [sp, #24]
 800ac78:	46a8      	mov	r8, r5
 800ac7a:	bfa8      	it	ge
 800ac7c:	f04f 0810 	movge.w	r8, #16
 800ac80:	f7f5 fc40 	bl	8000504 <__aeabi_ui2d>
 800ac84:	2d09      	cmp	r5, #9
 800ac86:	4682      	mov	sl, r0
 800ac88:	468b      	mov	fp, r1
 800ac8a:	dd13      	ble.n	800acb4 <_strtod_l+0x3dc>
 800ac8c:	4b7b      	ldr	r3, [pc, #492]	; (800ae7c <_strtod_l+0x5a4>)
 800ac8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ac92:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ac96:	f7f5 fcaf 	bl	80005f8 <__aeabi_dmul>
 800ac9a:	4682      	mov	sl, r0
 800ac9c:	4648      	mov	r0, r9
 800ac9e:	468b      	mov	fp, r1
 800aca0:	f7f5 fc30 	bl	8000504 <__aeabi_ui2d>
 800aca4:	4602      	mov	r2, r0
 800aca6:	460b      	mov	r3, r1
 800aca8:	4650      	mov	r0, sl
 800acaa:	4659      	mov	r1, fp
 800acac:	f7f5 faee 	bl	800028c <__adddf3>
 800acb0:	4682      	mov	sl, r0
 800acb2:	468b      	mov	fp, r1
 800acb4:	2d0f      	cmp	r5, #15
 800acb6:	dc38      	bgt.n	800ad2a <_strtod_l+0x452>
 800acb8:	9b06      	ldr	r3, [sp, #24]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f43f ae50 	beq.w	800a960 <_strtod_l+0x88>
 800acc0:	dd24      	ble.n	800ad0c <_strtod_l+0x434>
 800acc2:	2b16      	cmp	r3, #22
 800acc4:	dc0b      	bgt.n	800acde <_strtod_l+0x406>
 800acc6:	496d      	ldr	r1, [pc, #436]	; (800ae7c <_strtod_l+0x5a4>)
 800acc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800accc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acd0:	4652      	mov	r2, sl
 800acd2:	465b      	mov	r3, fp
 800acd4:	f7f5 fc90 	bl	80005f8 <__aeabi_dmul>
 800acd8:	4682      	mov	sl, r0
 800acda:	468b      	mov	fp, r1
 800acdc:	e640      	b.n	800a960 <_strtod_l+0x88>
 800acde:	9a06      	ldr	r2, [sp, #24]
 800ace0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ace4:	4293      	cmp	r3, r2
 800ace6:	db20      	blt.n	800ad2a <_strtod_l+0x452>
 800ace8:	4c64      	ldr	r4, [pc, #400]	; (800ae7c <_strtod_l+0x5a4>)
 800acea:	f1c5 050f 	rsb	r5, r5, #15
 800acee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800acf2:	4652      	mov	r2, sl
 800acf4:	465b      	mov	r3, fp
 800acf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acfa:	f7f5 fc7d 	bl	80005f8 <__aeabi_dmul>
 800acfe:	9b06      	ldr	r3, [sp, #24]
 800ad00:	1b5d      	subs	r5, r3, r5
 800ad02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ad06:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ad0a:	e7e3      	b.n	800acd4 <_strtod_l+0x3fc>
 800ad0c:	9b06      	ldr	r3, [sp, #24]
 800ad0e:	3316      	adds	r3, #22
 800ad10:	db0b      	blt.n	800ad2a <_strtod_l+0x452>
 800ad12:	9b05      	ldr	r3, [sp, #20]
 800ad14:	1b9e      	subs	r6, r3, r6
 800ad16:	4b59      	ldr	r3, [pc, #356]	; (800ae7c <_strtod_l+0x5a4>)
 800ad18:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ad1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad20:	4650      	mov	r0, sl
 800ad22:	4659      	mov	r1, fp
 800ad24:	f7f5 fd92 	bl	800084c <__aeabi_ddiv>
 800ad28:	e7d6      	b.n	800acd8 <_strtod_l+0x400>
 800ad2a:	9b06      	ldr	r3, [sp, #24]
 800ad2c:	eba5 0808 	sub.w	r8, r5, r8
 800ad30:	4498      	add	r8, r3
 800ad32:	f1b8 0f00 	cmp.w	r8, #0
 800ad36:	dd74      	ble.n	800ae22 <_strtod_l+0x54a>
 800ad38:	f018 030f 	ands.w	r3, r8, #15
 800ad3c:	d00a      	beq.n	800ad54 <_strtod_l+0x47c>
 800ad3e:	494f      	ldr	r1, [pc, #316]	; (800ae7c <_strtod_l+0x5a4>)
 800ad40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad44:	4652      	mov	r2, sl
 800ad46:	465b      	mov	r3, fp
 800ad48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad4c:	f7f5 fc54 	bl	80005f8 <__aeabi_dmul>
 800ad50:	4682      	mov	sl, r0
 800ad52:	468b      	mov	fp, r1
 800ad54:	f038 080f 	bics.w	r8, r8, #15
 800ad58:	d04f      	beq.n	800adfa <_strtod_l+0x522>
 800ad5a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ad5e:	dd22      	ble.n	800ada6 <_strtod_l+0x4ce>
 800ad60:	2500      	movs	r5, #0
 800ad62:	462e      	mov	r6, r5
 800ad64:	9507      	str	r5, [sp, #28]
 800ad66:	9505      	str	r5, [sp, #20]
 800ad68:	2322      	movs	r3, #34	; 0x22
 800ad6a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ae84 <_strtod_l+0x5ac>
 800ad6e:	6023      	str	r3, [r4, #0]
 800ad70:	f04f 0a00 	mov.w	sl, #0
 800ad74:	9b07      	ldr	r3, [sp, #28]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f43f adf2 	beq.w	800a960 <_strtod_l+0x88>
 800ad7c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f001 ff7e 	bl	800cc80 <_Bfree>
 800ad84:	9905      	ldr	r1, [sp, #20]
 800ad86:	4620      	mov	r0, r4
 800ad88:	f001 ff7a 	bl	800cc80 <_Bfree>
 800ad8c:	4631      	mov	r1, r6
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f001 ff76 	bl	800cc80 <_Bfree>
 800ad94:	9907      	ldr	r1, [sp, #28]
 800ad96:	4620      	mov	r0, r4
 800ad98:	f001 ff72 	bl	800cc80 <_Bfree>
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f001 ff6e 	bl	800cc80 <_Bfree>
 800ada4:	e5dc      	b.n	800a960 <_strtod_l+0x88>
 800ada6:	4b36      	ldr	r3, [pc, #216]	; (800ae80 <_strtod_l+0x5a8>)
 800ada8:	9304      	str	r3, [sp, #16]
 800adaa:	2300      	movs	r3, #0
 800adac:	ea4f 1828 	mov.w	r8, r8, asr #4
 800adb0:	4650      	mov	r0, sl
 800adb2:	4659      	mov	r1, fp
 800adb4:	4699      	mov	r9, r3
 800adb6:	f1b8 0f01 	cmp.w	r8, #1
 800adba:	dc21      	bgt.n	800ae00 <_strtod_l+0x528>
 800adbc:	b10b      	cbz	r3, 800adc2 <_strtod_l+0x4ea>
 800adbe:	4682      	mov	sl, r0
 800adc0:	468b      	mov	fp, r1
 800adc2:	4b2f      	ldr	r3, [pc, #188]	; (800ae80 <_strtod_l+0x5a8>)
 800adc4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800adc8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800adcc:	4652      	mov	r2, sl
 800adce:	465b      	mov	r3, fp
 800add0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800add4:	f7f5 fc10 	bl	80005f8 <__aeabi_dmul>
 800add8:	4b2a      	ldr	r3, [pc, #168]	; (800ae84 <_strtod_l+0x5ac>)
 800adda:	460a      	mov	r2, r1
 800addc:	400b      	ands	r3, r1
 800adde:	492a      	ldr	r1, [pc, #168]	; (800ae88 <_strtod_l+0x5b0>)
 800ade0:	428b      	cmp	r3, r1
 800ade2:	4682      	mov	sl, r0
 800ade4:	d8bc      	bhi.n	800ad60 <_strtod_l+0x488>
 800ade6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800adea:	428b      	cmp	r3, r1
 800adec:	bf86      	itte	hi
 800adee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ae8c <_strtod_l+0x5b4>
 800adf2:	f04f 3aff 	movhi.w	sl, #4294967295
 800adf6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800adfa:	2300      	movs	r3, #0
 800adfc:	9304      	str	r3, [sp, #16]
 800adfe:	e084      	b.n	800af0a <_strtod_l+0x632>
 800ae00:	f018 0f01 	tst.w	r8, #1
 800ae04:	d005      	beq.n	800ae12 <_strtod_l+0x53a>
 800ae06:	9b04      	ldr	r3, [sp, #16]
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	f7f5 fbf4 	bl	80005f8 <__aeabi_dmul>
 800ae10:	2301      	movs	r3, #1
 800ae12:	9a04      	ldr	r2, [sp, #16]
 800ae14:	3208      	adds	r2, #8
 800ae16:	f109 0901 	add.w	r9, r9, #1
 800ae1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ae1e:	9204      	str	r2, [sp, #16]
 800ae20:	e7c9      	b.n	800adb6 <_strtod_l+0x4de>
 800ae22:	d0ea      	beq.n	800adfa <_strtod_l+0x522>
 800ae24:	f1c8 0800 	rsb	r8, r8, #0
 800ae28:	f018 020f 	ands.w	r2, r8, #15
 800ae2c:	d00a      	beq.n	800ae44 <_strtod_l+0x56c>
 800ae2e:	4b13      	ldr	r3, [pc, #76]	; (800ae7c <_strtod_l+0x5a4>)
 800ae30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae34:	4650      	mov	r0, sl
 800ae36:	4659      	mov	r1, fp
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	f7f5 fd06 	bl	800084c <__aeabi_ddiv>
 800ae40:	4682      	mov	sl, r0
 800ae42:	468b      	mov	fp, r1
 800ae44:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ae48:	d0d7      	beq.n	800adfa <_strtod_l+0x522>
 800ae4a:	f1b8 0f1f 	cmp.w	r8, #31
 800ae4e:	dd1f      	ble.n	800ae90 <_strtod_l+0x5b8>
 800ae50:	2500      	movs	r5, #0
 800ae52:	462e      	mov	r6, r5
 800ae54:	9507      	str	r5, [sp, #28]
 800ae56:	9505      	str	r5, [sp, #20]
 800ae58:	2322      	movs	r3, #34	; 0x22
 800ae5a:	f04f 0a00 	mov.w	sl, #0
 800ae5e:	f04f 0b00 	mov.w	fp, #0
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	e786      	b.n	800ad74 <_strtod_l+0x49c>
 800ae66:	bf00      	nop
 800ae68:	0800f4ad 	.word	0x0800f4ad
 800ae6c:	0800f4f0 	.word	0x0800f4f0
 800ae70:	0800f4a5 	.word	0x0800f4a5
 800ae74:	0800f634 	.word	0x0800f634
 800ae78:	0800f948 	.word	0x0800f948
 800ae7c:	0800f828 	.word	0x0800f828
 800ae80:	0800f800 	.word	0x0800f800
 800ae84:	7ff00000 	.word	0x7ff00000
 800ae88:	7ca00000 	.word	0x7ca00000
 800ae8c:	7fefffff 	.word	0x7fefffff
 800ae90:	f018 0310 	ands.w	r3, r8, #16
 800ae94:	bf18      	it	ne
 800ae96:	236a      	movne	r3, #106	; 0x6a
 800ae98:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b248 <_strtod_l+0x970>
 800ae9c:	9304      	str	r3, [sp, #16]
 800ae9e:	4650      	mov	r0, sl
 800aea0:	4659      	mov	r1, fp
 800aea2:	2300      	movs	r3, #0
 800aea4:	f018 0f01 	tst.w	r8, #1
 800aea8:	d004      	beq.n	800aeb4 <_strtod_l+0x5dc>
 800aeaa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aeae:	f7f5 fba3 	bl	80005f8 <__aeabi_dmul>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800aeb8:	f109 0908 	add.w	r9, r9, #8
 800aebc:	d1f2      	bne.n	800aea4 <_strtod_l+0x5cc>
 800aebe:	b10b      	cbz	r3, 800aec4 <_strtod_l+0x5ec>
 800aec0:	4682      	mov	sl, r0
 800aec2:	468b      	mov	fp, r1
 800aec4:	9b04      	ldr	r3, [sp, #16]
 800aec6:	b1c3      	cbz	r3, 800aefa <_strtod_l+0x622>
 800aec8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aecc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	4659      	mov	r1, fp
 800aed4:	dd11      	ble.n	800aefa <_strtod_l+0x622>
 800aed6:	2b1f      	cmp	r3, #31
 800aed8:	f340 8124 	ble.w	800b124 <_strtod_l+0x84c>
 800aedc:	2b34      	cmp	r3, #52	; 0x34
 800aede:	bfde      	ittt	le
 800aee0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aee4:	f04f 33ff 	movle.w	r3, #4294967295
 800aee8:	fa03 f202 	lslle.w	r2, r3, r2
 800aeec:	f04f 0a00 	mov.w	sl, #0
 800aef0:	bfcc      	ite	gt
 800aef2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800aef6:	ea02 0b01 	andle.w	fp, r2, r1
 800aefa:	2200      	movs	r2, #0
 800aefc:	2300      	movs	r3, #0
 800aefe:	4650      	mov	r0, sl
 800af00:	4659      	mov	r1, fp
 800af02:	f7f5 fde1 	bl	8000ac8 <__aeabi_dcmpeq>
 800af06:	2800      	cmp	r0, #0
 800af08:	d1a2      	bne.n	800ae50 <_strtod_l+0x578>
 800af0a:	9b07      	ldr	r3, [sp, #28]
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	9908      	ldr	r1, [sp, #32]
 800af10:	462b      	mov	r3, r5
 800af12:	463a      	mov	r2, r7
 800af14:	4620      	mov	r0, r4
 800af16:	f001 ff1b 	bl	800cd50 <__s2b>
 800af1a:	9007      	str	r0, [sp, #28]
 800af1c:	2800      	cmp	r0, #0
 800af1e:	f43f af1f 	beq.w	800ad60 <_strtod_l+0x488>
 800af22:	9b05      	ldr	r3, [sp, #20]
 800af24:	1b9e      	subs	r6, r3, r6
 800af26:	9b06      	ldr	r3, [sp, #24]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	bfb4      	ite	lt
 800af2c:	4633      	movlt	r3, r6
 800af2e:	2300      	movge	r3, #0
 800af30:	930c      	str	r3, [sp, #48]	; 0x30
 800af32:	9b06      	ldr	r3, [sp, #24]
 800af34:	2500      	movs	r5, #0
 800af36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800af3a:	9312      	str	r3, [sp, #72]	; 0x48
 800af3c:	462e      	mov	r6, r5
 800af3e:	9b07      	ldr	r3, [sp, #28]
 800af40:	4620      	mov	r0, r4
 800af42:	6859      	ldr	r1, [r3, #4]
 800af44:	f001 fe5c 	bl	800cc00 <_Balloc>
 800af48:	9005      	str	r0, [sp, #20]
 800af4a:	2800      	cmp	r0, #0
 800af4c:	f43f af0c 	beq.w	800ad68 <_strtod_l+0x490>
 800af50:	9b07      	ldr	r3, [sp, #28]
 800af52:	691a      	ldr	r2, [r3, #16]
 800af54:	3202      	adds	r2, #2
 800af56:	f103 010c 	add.w	r1, r3, #12
 800af5a:	0092      	lsls	r2, r2, #2
 800af5c:	300c      	adds	r0, #12
 800af5e:	f7fe fce1 	bl	8009924 <memcpy>
 800af62:	ec4b ab10 	vmov	d0, sl, fp
 800af66:	aa1a      	add	r2, sp, #104	; 0x68
 800af68:	a919      	add	r1, sp, #100	; 0x64
 800af6a:	4620      	mov	r0, r4
 800af6c:	f002 fa36 	bl	800d3dc <__d2b>
 800af70:	ec4b ab18 	vmov	d8, sl, fp
 800af74:	9018      	str	r0, [sp, #96]	; 0x60
 800af76:	2800      	cmp	r0, #0
 800af78:	f43f aef6 	beq.w	800ad68 <_strtod_l+0x490>
 800af7c:	2101      	movs	r1, #1
 800af7e:	4620      	mov	r0, r4
 800af80:	f001 ff80 	bl	800ce84 <__i2b>
 800af84:	4606      	mov	r6, r0
 800af86:	2800      	cmp	r0, #0
 800af88:	f43f aeee 	beq.w	800ad68 <_strtod_l+0x490>
 800af8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af8e:	9904      	ldr	r1, [sp, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	bfab      	itete	ge
 800af94:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800af96:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800af98:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800af9a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800af9e:	bfac      	ite	ge
 800afa0:	eb03 0902 	addge.w	r9, r3, r2
 800afa4:	1ad7      	sublt	r7, r2, r3
 800afa6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800afa8:	eba3 0801 	sub.w	r8, r3, r1
 800afac:	4490      	add	r8, r2
 800afae:	4ba1      	ldr	r3, [pc, #644]	; (800b234 <_strtod_l+0x95c>)
 800afb0:	f108 38ff 	add.w	r8, r8, #4294967295
 800afb4:	4598      	cmp	r8, r3
 800afb6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800afba:	f280 80c7 	bge.w	800b14c <_strtod_l+0x874>
 800afbe:	eba3 0308 	sub.w	r3, r3, r8
 800afc2:	2b1f      	cmp	r3, #31
 800afc4:	eba2 0203 	sub.w	r2, r2, r3
 800afc8:	f04f 0101 	mov.w	r1, #1
 800afcc:	f300 80b1 	bgt.w	800b132 <_strtod_l+0x85a>
 800afd0:	fa01 f303 	lsl.w	r3, r1, r3
 800afd4:	930d      	str	r3, [sp, #52]	; 0x34
 800afd6:	2300      	movs	r3, #0
 800afd8:	9308      	str	r3, [sp, #32]
 800afda:	eb09 0802 	add.w	r8, r9, r2
 800afde:	9b04      	ldr	r3, [sp, #16]
 800afe0:	45c1      	cmp	r9, r8
 800afe2:	4417      	add	r7, r2
 800afe4:	441f      	add	r7, r3
 800afe6:	464b      	mov	r3, r9
 800afe8:	bfa8      	it	ge
 800afea:	4643      	movge	r3, r8
 800afec:	42bb      	cmp	r3, r7
 800afee:	bfa8      	it	ge
 800aff0:	463b      	movge	r3, r7
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	bfc2      	ittt	gt
 800aff6:	eba8 0803 	subgt.w	r8, r8, r3
 800affa:	1aff      	subgt	r7, r7, r3
 800affc:	eba9 0903 	subgt.w	r9, r9, r3
 800b000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b002:	2b00      	cmp	r3, #0
 800b004:	dd17      	ble.n	800b036 <_strtod_l+0x75e>
 800b006:	4631      	mov	r1, r6
 800b008:	461a      	mov	r2, r3
 800b00a:	4620      	mov	r0, r4
 800b00c:	f001 fffa 	bl	800d004 <__pow5mult>
 800b010:	4606      	mov	r6, r0
 800b012:	2800      	cmp	r0, #0
 800b014:	f43f aea8 	beq.w	800ad68 <_strtod_l+0x490>
 800b018:	4601      	mov	r1, r0
 800b01a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b01c:	4620      	mov	r0, r4
 800b01e:	f001 ff47 	bl	800ceb0 <__multiply>
 800b022:	900b      	str	r0, [sp, #44]	; 0x2c
 800b024:	2800      	cmp	r0, #0
 800b026:	f43f ae9f 	beq.w	800ad68 <_strtod_l+0x490>
 800b02a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b02c:	4620      	mov	r0, r4
 800b02e:	f001 fe27 	bl	800cc80 <_Bfree>
 800b032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b034:	9318      	str	r3, [sp, #96]	; 0x60
 800b036:	f1b8 0f00 	cmp.w	r8, #0
 800b03a:	f300 808c 	bgt.w	800b156 <_strtod_l+0x87e>
 800b03e:	9b06      	ldr	r3, [sp, #24]
 800b040:	2b00      	cmp	r3, #0
 800b042:	dd08      	ble.n	800b056 <_strtod_l+0x77e>
 800b044:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b046:	9905      	ldr	r1, [sp, #20]
 800b048:	4620      	mov	r0, r4
 800b04a:	f001 ffdb 	bl	800d004 <__pow5mult>
 800b04e:	9005      	str	r0, [sp, #20]
 800b050:	2800      	cmp	r0, #0
 800b052:	f43f ae89 	beq.w	800ad68 <_strtod_l+0x490>
 800b056:	2f00      	cmp	r7, #0
 800b058:	dd08      	ble.n	800b06c <_strtod_l+0x794>
 800b05a:	9905      	ldr	r1, [sp, #20]
 800b05c:	463a      	mov	r2, r7
 800b05e:	4620      	mov	r0, r4
 800b060:	f002 f82a 	bl	800d0b8 <__lshift>
 800b064:	9005      	str	r0, [sp, #20]
 800b066:	2800      	cmp	r0, #0
 800b068:	f43f ae7e 	beq.w	800ad68 <_strtod_l+0x490>
 800b06c:	f1b9 0f00 	cmp.w	r9, #0
 800b070:	dd08      	ble.n	800b084 <_strtod_l+0x7ac>
 800b072:	4631      	mov	r1, r6
 800b074:	464a      	mov	r2, r9
 800b076:	4620      	mov	r0, r4
 800b078:	f002 f81e 	bl	800d0b8 <__lshift>
 800b07c:	4606      	mov	r6, r0
 800b07e:	2800      	cmp	r0, #0
 800b080:	f43f ae72 	beq.w	800ad68 <_strtod_l+0x490>
 800b084:	9a05      	ldr	r2, [sp, #20]
 800b086:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b088:	4620      	mov	r0, r4
 800b08a:	f002 f8a1 	bl	800d1d0 <__mdiff>
 800b08e:	4605      	mov	r5, r0
 800b090:	2800      	cmp	r0, #0
 800b092:	f43f ae69 	beq.w	800ad68 <_strtod_l+0x490>
 800b096:	68c3      	ldr	r3, [r0, #12]
 800b098:	930b      	str	r3, [sp, #44]	; 0x2c
 800b09a:	2300      	movs	r3, #0
 800b09c:	60c3      	str	r3, [r0, #12]
 800b09e:	4631      	mov	r1, r6
 800b0a0:	f002 f87a 	bl	800d198 <__mcmp>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	da60      	bge.n	800b16a <_strtod_l+0x892>
 800b0a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0aa:	ea53 030a 	orrs.w	r3, r3, sl
 800b0ae:	f040 8082 	bne.w	800b1b6 <_strtod_l+0x8de>
 800b0b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d17d      	bne.n	800b1b6 <_strtod_l+0x8de>
 800b0ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b0be:	0d1b      	lsrs	r3, r3, #20
 800b0c0:	051b      	lsls	r3, r3, #20
 800b0c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b0c6:	d976      	bls.n	800b1b6 <_strtod_l+0x8de>
 800b0c8:	696b      	ldr	r3, [r5, #20]
 800b0ca:	b913      	cbnz	r3, 800b0d2 <_strtod_l+0x7fa>
 800b0cc:	692b      	ldr	r3, [r5, #16]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	dd71      	ble.n	800b1b6 <_strtod_l+0x8de>
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f001 ffee 	bl	800d0b8 <__lshift>
 800b0dc:	4631      	mov	r1, r6
 800b0de:	4605      	mov	r5, r0
 800b0e0:	f002 f85a 	bl	800d198 <__mcmp>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	dd66      	ble.n	800b1b6 <_strtod_l+0x8de>
 800b0e8:	9904      	ldr	r1, [sp, #16]
 800b0ea:	4a53      	ldr	r2, [pc, #332]	; (800b238 <_strtod_l+0x960>)
 800b0ec:	465b      	mov	r3, fp
 800b0ee:	2900      	cmp	r1, #0
 800b0f0:	f000 8081 	beq.w	800b1f6 <_strtod_l+0x91e>
 800b0f4:	ea02 010b 	and.w	r1, r2, fp
 800b0f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b0fc:	dc7b      	bgt.n	800b1f6 <_strtod_l+0x91e>
 800b0fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b102:	f77f aea9 	ble.w	800ae58 <_strtod_l+0x580>
 800b106:	4b4d      	ldr	r3, [pc, #308]	; (800b23c <_strtod_l+0x964>)
 800b108:	4650      	mov	r0, sl
 800b10a:	4659      	mov	r1, fp
 800b10c:	2200      	movs	r2, #0
 800b10e:	f7f5 fa73 	bl	80005f8 <__aeabi_dmul>
 800b112:	460b      	mov	r3, r1
 800b114:	4303      	orrs	r3, r0
 800b116:	bf08      	it	eq
 800b118:	2322      	moveq	r3, #34	; 0x22
 800b11a:	4682      	mov	sl, r0
 800b11c:	468b      	mov	fp, r1
 800b11e:	bf08      	it	eq
 800b120:	6023      	streq	r3, [r4, #0]
 800b122:	e62b      	b.n	800ad7c <_strtod_l+0x4a4>
 800b124:	f04f 32ff 	mov.w	r2, #4294967295
 800b128:	fa02 f303 	lsl.w	r3, r2, r3
 800b12c:	ea03 0a0a 	and.w	sl, r3, sl
 800b130:	e6e3      	b.n	800aefa <_strtod_l+0x622>
 800b132:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b136:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b13a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b13e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b142:	fa01 f308 	lsl.w	r3, r1, r8
 800b146:	9308      	str	r3, [sp, #32]
 800b148:	910d      	str	r1, [sp, #52]	; 0x34
 800b14a:	e746      	b.n	800afda <_strtod_l+0x702>
 800b14c:	2300      	movs	r3, #0
 800b14e:	9308      	str	r3, [sp, #32]
 800b150:	2301      	movs	r3, #1
 800b152:	930d      	str	r3, [sp, #52]	; 0x34
 800b154:	e741      	b.n	800afda <_strtod_l+0x702>
 800b156:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b158:	4642      	mov	r2, r8
 800b15a:	4620      	mov	r0, r4
 800b15c:	f001 ffac 	bl	800d0b8 <__lshift>
 800b160:	9018      	str	r0, [sp, #96]	; 0x60
 800b162:	2800      	cmp	r0, #0
 800b164:	f47f af6b 	bne.w	800b03e <_strtod_l+0x766>
 800b168:	e5fe      	b.n	800ad68 <_strtod_l+0x490>
 800b16a:	465f      	mov	r7, fp
 800b16c:	d16e      	bne.n	800b24c <_strtod_l+0x974>
 800b16e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b170:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b174:	b342      	cbz	r2, 800b1c8 <_strtod_l+0x8f0>
 800b176:	4a32      	ldr	r2, [pc, #200]	; (800b240 <_strtod_l+0x968>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d128      	bne.n	800b1ce <_strtod_l+0x8f6>
 800b17c:	9b04      	ldr	r3, [sp, #16]
 800b17e:	4651      	mov	r1, sl
 800b180:	b1eb      	cbz	r3, 800b1be <_strtod_l+0x8e6>
 800b182:	4b2d      	ldr	r3, [pc, #180]	; (800b238 <_strtod_l+0x960>)
 800b184:	403b      	ands	r3, r7
 800b186:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b18a:	f04f 32ff 	mov.w	r2, #4294967295
 800b18e:	d819      	bhi.n	800b1c4 <_strtod_l+0x8ec>
 800b190:	0d1b      	lsrs	r3, r3, #20
 800b192:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b196:	fa02 f303 	lsl.w	r3, r2, r3
 800b19a:	4299      	cmp	r1, r3
 800b19c:	d117      	bne.n	800b1ce <_strtod_l+0x8f6>
 800b19e:	4b29      	ldr	r3, [pc, #164]	; (800b244 <_strtod_l+0x96c>)
 800b1a0:	429f      	cmp	r7, r3
 800b1a2:	d102      	bne.n	800b1aa <_strtod_l+0x8d2>
 800b1a4:	3101      	adds	r1, #1
 800b1a6:	f43f addf 	beq.w	800ad68 <_strtod_l+0x490>
 800b1aa:	4b23      	ldr	r3, [pc, #140]	; (800b238 <_strtod_l+0x960>)
 800b1ac:	403b      	ands	r3, r7
 800b1ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b1b2:	f04f 0a00 	mov.w	sl, #0
 800b1b6:	9b04      	ldr	r3, [sp, #16]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1a4      	bne.n	800b106 <_strtod_l+0x82e>
 800b1bc:	e5de      	b.n	800ad7c <_strtod_l+0x4a4>
 800b1be:	f04f 33ff 	mov.w	r3, #4294967295
 800b1c2:	e7ea      	b.n	800b19a <_strtod_l+0x8c2>
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	e7e8      	b.n	800b19a <_strtod_l+0x8c2>
 800b1c8:	ea53 030a 	orrs.w	r3, r3, sl
 800b1cc:	d08c      	beq.n	800b0e8 <_strtod_l+0x810>
 800b1ce:	9b08      	ldr	r3, [sp, #32]
 800b1d0:	b1db      	cbz	r3, 800b20a <_strtod_l+0x932>
 800b1d2:	423b      	tst	r3, r7
 800b1d4:	d0ef      	beq.n	800b1b6 <_strtod_l+0x8de>
 800b1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1d8:	9a04      	ldr	r2, [sp, #16]
 800b1da:	4650      	mov	r0, sl
 800b1dc:	4659      	mov	r1, fp
 800b1de:	b1c3      	cbz	r3, 800b212 <_strtod_l+0x93a>
 800b1e0:	f7ff fb5e 	bl	800a8a0 <sulp>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	ec51 0b18 	vmov	r0, r1, d8
 800b1ec:	f7f5 f84e 	bl	800028c <__adddf3>
 800b1f0:	4682      	mov	sl, r0
 800b1f2:	468b      	mov	fp, r1
 800b1f4:	e7df      	b.n	800b1b6 <_strtod_l+0x8de>
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b1fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b200:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b204:	f04f 3aff 	mov.w	sl, #4294967295
 800b208:	e7d5      	b.n	800b1b6 <_strtod_l+0x8de>
 800b20a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b20c:	ea13 0f0a 	tst.w	r3, sl
 800b210:	e7e0      	b.n	800b1d4 <_strtod_l+0x8fc>
 800b212:	f7ff fb45 	bl	800a8a0 <sulp>
 800b216:	4602      	mov	r2, r0
 800b218:	460b      	mov	r3, r1
 800b21a:	ec51 0b18 	vmov	r0, r1, d8
 800b21e:	f7f5 f833 	bl	8000288 <__aeabi_dsub>
 800b222:	2200      	movs	r2, #0
 800b224:	2300      	movs	r3, #0
 800b226:	4682      	mov	sl, r0
 800b228:	468b      	mov	fp, r1
 800b22a:	f7f5 fc4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b22e:	2800      	cmp	r0, #0
 800b230:	d0c1      	beq.n	800b1b6 <_strtod_l+0x8de>
 800b232:	e611      	b.n	800ae58 <_strtod_l+0x580>
 800b234:	fffffc02 	.word	0xfffffc02
 800b238:	7ff00000 	.word	0x7ff00000
 800b23c:	39500000 	.word	0x39500000
 800b240:	000fffff 	.word	0x000fffff
 800b244:	7fefffff 	.word	0x7fefffff
 800b248:	0800f508 	.word	0x0800f508
 800b24c:	4631      	mov	r1, r6
 800b24e:	4628      	mov	r0, r5
 800b250:	f002 f920 	bl	800d494 <__ratio>
 800b254:	ec59 8b10 	vmov	r8, r9, d0
 800b258:	ee10 0a10 	vmov	r0, s0
 800b25c:	2200      	movs	r2, #0
 800b25e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b262:	4649      	mov	r1, r9
 800b264:	f7f5 fc44 	bl	8000af0 <__aeabi_dcmple>
 800b268:	2800      	cmp	r0, #0
 800b26a:	d07a      	beq.n	800b362 <_strtod_l+0xa8a>
 800b26c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d04a      	beq.n	800b308 <_strtod_l+0xa30>
 800b272:	4b95      	ldr	r3, [pc, #596]	; (800b4c8 <_strtod_l+0xbf0>)
 800b274:	2200      	movs	r2, #0
 800b276:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b27a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b4c8 <_strtod_l+0xbf0>
 800b27e:	f04f 0800 	mov.w	r8, #0
 800b282:	4b92      	ldr	r3, [pc, #584]	; (800b4cc <_strtod_l+0xbf4>)
 800b284:	403b      	ands	r3, r7
 800b286:	930d      	str	r3, [sp, #52]	; 0x34
 800b288:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b28a:	4b91      	ldr	r3, [pc, #580]	; (800b4d0 <_strtod_l+0xbf8>)
 800b28c:	429a      	cmp	r2, r3
 800b28e:	f040 80b0 	bne.w	800b3f2 <_strtod_l+0xb1a>
 800b292:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b296:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b29a:	ec4b ab10 	vmov	d0, sl, fp
 800b29e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b2a2:	f002 f81f 	bl	800d2e4 <__ulp>
 800b2a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b2aa:	ec53 2b10 	vmov	r2, r3, d0
 800b2ae:	f7f5 f9a3 	bl	80005f8 <__aeabi_dmul>
 800b2b2:	4652      	mov	r2, sl
 800b2b4:	465b      	mov	r3, fp
 800b2b6:	f7f4 ffe9 	bl	800028c <__adddf3>
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4983      	ldr	r1, [pc, #524]	; (800b4cc <_strtod_l+0xbf4>)
 800b2be:	4a85      	ldr	r2, [pc, #532]	; (800b4d4 <_strtod_l+0xbfc>)
 800b2c0:	4019      	ands	r1, r3
 800b2c2:	4291      	cmp	r1, r2
 800b2c4:	4682      	mov	sl, r0
 800b2c6:	d960      	bls.n	800b38a <_strtod_l+0xab2>
 800b2c8:	ee18 3a90 	vmov	r3, s17
 800b2cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d104      	bne.n	800b2de <_strtod_l+0xa06>
 800b2d4:	ee18 3a10 	vmov	r3, s16
 800b2d8:	3301      	adds	r3, #1
 800b2da:	f43f ad45 	beq.w	800ad68 <_strtod_l+0x490>
 800b2de:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b4e0 <_strtod_l+0xc08>
 800b2e2:	f04f 3aff 	mov.w	sl, #4294967295
 800b2e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f001 fcc9 	bl	800cc80 <_Bfree>
 800b2ee:	9905      	ldr	r1, [sp, #20]
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f001 fcc5 	bl	800cc80 <_Bfree>
 800b2f6:	4631      	mov	r1, r6
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f001 fcc1 	bl	800cc80 <_Bfree>
 800b2fe:	4629      	mov	r1, r5
 800b300:	4620      	mov	r0, r4
 800b302:	f001 fcbd 	bl	800cc80 <_Bfree>
 800b306:	e61a      	b.n	800af3e <_strtod_l+0x666>
 800b308:	f1ba 0f00 	cmp.w	sl, #0
 800b30c:	d11b      	bne.n	800b346 <_strtod_l+0xa6e>
 800b30e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b312:	b9f3      	cbnz	r3, 800b352 <_strtod_l+0xa7a>
 800b314:	4b6c      	ldr	r3, [pc, #432]	; (800b4c8 <_strtod_l+0xbf0>)
 800b316:	2200      	movs	r2, #0
 800b318:	4640      	mov	r0, r8
 800b31a:	4649      	mov	r1, r9
 800b31c:	f7f5 fbde 	bl	8000adc <__aeabi_dcmplt>
 800b320:	b9d0      	cbnz	r0, 800b358 <_strtod_l+0xa80>
 800b322:	4640      	mov	r0, r8
 800b324:	4649      	mov	r1, r9
 800b326:	4b6c      	ldr	r3, [pc, #432]	; (800b4d8 <_strtod_l+0xc00>)
 800b328:	2200      	movs	r2, #0
 800b32a:	f7f5 f965 	bl	80005f8 <__aeabi_dmul>
 800b32e:	4680      	mov	r8, r0
 800b330:	4689      	mov	r9, r1
 800b332:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b336:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b33a:	9315      	str	r3, [sp, #84]	; 0x54
 800b33c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b340:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b344:	e79d      	b.n	800b282 <_strtod_l+0x9aa>
 800b346:	f1ba 0f01 	cmp.w	sl, #1
 800b34a:	d102      	bne.n	800b352 <_strtod_l+0xa7a>
 800b34c:	2f00      	cmp	r7, #0
 800b34e:	f43f ad83 	beq.w	800ae58 <_strtod_l+0x580>
 800b352:	4b62      	ldr	r3, [pc, #392]	; (800b4dc <_strtod_l+0xc04>)
 800b354:	2200      	movs	r2, #0
 800b356:	e78e      	b.n	800b276 <_strtod_l+0x99e>
 800b358:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b4d8 <_strtod_l+0xc00>
 800b35c:	f04f 0800 	mov.w	r8, #0
 800b360:	e7e7      	b.n	800b332 <_strtod_l+0xa5a>
 800b362:	4b5d      	ldr	r3, [pc, #372]	; (800b4d8 <_strtod_l+0xc00>)
 800b364:	4640      	mov	r0, r8
 800b366:	4649      	mov	r1, r9
 800b368:	2200      	movs	r2, #0
 800b36a:	f7f5 f945 	bl	80005f8 <__aeabi_dmul>
 800b36e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b370:	4680      	mov	r8, r0
 800b372:	4689      	mov	r9, r1
 800b374:	b933      	cbnz	r3, 800b384 <_strtod_l+0xaac>
 800b376:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b37a:	900e      	str	r0, [sp, #56]	; 0x38
 800b37c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b37e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b382:	e7dd      	b.n	800b340 <_strtod_l+0xa68>
 800b384:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b388:	e7f9      	b.n	800b37e <_strtod_l+0xaa6>
 800b38a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b38e:	9b04      	ldr	r3, [sp, #16]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1a8      	bne.n	800b2e6 <_strtod_l+0xa0e>
 800b394:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b398:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b39a:	0d1b      	lsrs	r3, r3, #20
 800b39c:	051b      	lsls	r3, r3, #20
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d1a1      	bne.n	800b2e6 <_strtod_l+0xa0e>
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	f7f5 fc87 	bl	8000cb8 <__aeabi_d2lz>
 800b3aa:	f7f5 f8f7 	bl	800059c <__aeabi_l2d>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	4640      	mov	r0, r8
 800b3b4:	4649      	mov	r1, r9
 800b3b6:	f7f4 ff67 	bl	8000288 <__aeabi_dsub>
 800b3ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3c0:	ea43 030a 	orr.w	r3, r3, sl
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	4680      	mov	r8, r0
 800b3c8:	4689      	mov	r9, r1
 800b3ca:	d055      	beq.n	800b478 <_strtod_l+0xba0>
 800b3cc:	a336      	add	r3, pc, #216	; (adr r3, 800b4a8 <_strtod_l+0xbd0>)
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	f7f5 fb83 	bl	8000adc <__aeabi_dcmplt>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	f47f acd0 	bne.w	800ad7c <_strtod_l+0x4a4>
 800b3dc:	a334      	add	r3, pc, #208	; (adr r3, 800b4b0 <_strtod_l+0xbd8>)
 800b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e2:	4640      	mov	r0, r8
 800b3e4:	4649      	mov	r1, r9
 800b3e6:	f7f5 fb97 	bl	8000b18 <__aeabi_dcmpgt>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	f43f af7b 	beq.w	800b2e6 <_strtod_l+0xa0e>
 800b3f0:	e4c4      	b.n	800ad7c <_strtod_l+0x4a4>
 800b3f2:	9b04      	ldr	r3, [sp, #16]
 800b3f4:	b333      	cbz	r3, 800b444 <_strtod_l+0xb6c>
 800b3f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b3fc:	d822      	bhi.n	800b444 <_strtod_l+0xb6c>
 800b3fe:	a32e      	add	r3, pc, #184	; (adr r3, 800b4b8 <_strtod_l+0xbe0>)
 800b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b404:	4640      	mov	r0, r8
 800b406:	4649      	mov	r1, r9
 800b408:	f7f5 fb72 	bl	8000af0 <__aeabi_dcmple>
 800b40c:	b1a0      	cbz	r0, 800b438 <_strtod_l+0xb60>
 800b40e:	4649      	mov	r1, r9
 800b410:	4640      	mov	r0, r8
 800b412:	f7f5 fbc9 	bl	8000ba8 <__aeabi_d2uiz>
 800b416:	2801      	cmp	r0, #1
 800b418:	bf38      	it	cc
 800b41a:	2001      	movcc	r0, #1
 800b41c:	f7f5 f872 	bl	8000504 <__aeabi_ui2d>
 800b420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b422:	4680      	mov	r8, r0
 800b424:	4689      	mov	r9, r1
 800b426:	bb23      	cbnz	r3, 800b472 <_strtod_l+0xb9a>
 800b428:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b42c:	9010      	str	r0, [sp, #64]	; 0x40
 800b42e:	9311      	str	r3, [sp, #68]	; 0x44
 800b430:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b434:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b43a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b43c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b440:	1a9b      	subs	r3, r3, r2
 800b442:	9309      	str	r3, [sp, #36]	; 0x24
 800b444:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b448:	eeb0 0a48 	vmov.f32	s0, s16
 800b44c:	eef0 0a68 	vmov.f32	s1, s17
 800b450:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b454:	f001 ff46 	bl	800d2e4 <__ulp>
 800b458:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b45c:	ec53 2b10 	vmov	r2, r3, d0
 800b460:	f7f5 f8ca 	bl	80005f8 <__aeabi_dmul>
 800b464:	ec53 2b18 	vmov	r2, r3, d8
 800b468:	f7f4 ff10 	bl	800028c <__adddf3>
 800b46c:	4682      	mov	sl, r0
 800b46e:	468b      	mov	fp, r1
 800b470:	e78d      	b.n	800b38e <_strtod_l+0xab6>
 800b472:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b476:	e7db      	b.n	800b430 <_strtod_l+0xb58>
 800b478:	a311      	add	r3, pc, #68	; (adr r3, 800b4c0 <_strtod_l+0xbe8>)
 800b47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47e:	f7f5 fb2d 	bl	8000adc <__aeabi_dcmplt>
 800b482:	e7b2      	b.n	800b3ea <_strtod_l+0xb12>
 800b484:	2300      	movs	r3, #0
 800b486:	930a      	str	r3, [sp, #40]	; 0x28
 800b488:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b48a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b48c:	6013      	str	r3, [r2, #0]
 800b48e:	f7ff ba6b 	b.w	800a968 <_strtod_l+0x90>
 800b492:	2a65      	cmp	r2, #101	; 0x65
 800b494:	f43f ab5f 	beq.w	800ab56 <_strtod_l+0x27e>
 800b498:	2a45      	cmp	r2, #69	; 0x45
 800b49a:	f43f ab5c 	beq.w	800ab56 <_strtod_l+0x27e>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	f7ff bb94 	b.w	800abcc <_strtod_l+0x2f4>
 800b4a4:	f3af 8000 	nop.w
 800b4a8:	94a03595 	.word	0x94a03595
 800b4ac:	3fdfffff 	.word	0x3fdfffff
 800b4b0:	35afe535 	.word	0x35afe535
 800b4b4:	3fe00000 	.word	0x3fe00000
 800b4b8:	ffc00000 	.word	0xffc00000
 800b4bc:	41dfffff 	.word	0x41dfffff
 800b4c0:	94a03595 	.word	0x94a03595
 800b4c4:	3fcfffff 	.word	0x3fcfffff
 800b4c8:	3ff00000 	.word	0x3ff00000
 800b4cc:	7ff00000 	.word	0x7ff00000
 800b4d0:	7fe00000 	.word	0x7fe00000
 800b4d4:	7c9fffff 	.word	0x7c9fffff
 800b4d8:	3fe00000 	.word	0x3fe00000
 800b4dc:	bff00000 	.word	0xbff00000
 800b4e0:	7fefffff 	.word	0x7fefffff

0800b4e4 <_strtod_r>:
 800b4e4:	4b01      	ldr	r3, [pc, #4]	; (800b4ec <_strtod_r+0x8>)
 800b4e6:	f7ff b9f7 	b.w	800a8d8 <_strtod_l>
 800b4ea:	bf00      	nop
 800b4ec:	200000f0 	.word	0x200000f0

0800b4f0 <_strtol_l.constprop.0>:
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f6:	d001      	beq.n	800b4fc <_strtol_l.constprop.0+0xc>
 800b4f8:	2b24      	cmp	r3, #36	; 0x24
 800b4fa:	d906      	bls.n	800b50a <_strtol_l.constprop.0+0x1a>
 800b4fc:	f7fe f9d0 	bl	80098a0 <__errno>
 800b500:	2316      	movs	r3, #22
 800b502:	6003      	str	r3, [r0, #0]
 800b504:	2000      	movs	r0, #0
 800b506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b50a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b5f0 <_strtol_l.constprop.0+0x100>
 800b50e:	460d      	mov	r5, r1
 800b510:	462e      	mov	r6, r5
 800b512:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b516:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b51a:	f017 0708 	ands.w	r7, r7, #8
 800b51e:	d1f7      	bne.n	800b510 <_strtol_l.constprop.0+0x20>
 800b520:	2c2d      	cmp	r4, #45	; 0x2d
 800b522:	d132      	bne.n	800b58a <_strtol_l.constprop.0+0x9a>
 800b524:	782c      	ldrb	r4, [r5, #0]
 800b526:	2701      	movs	r7, #1
 800b528:	1cb5      	adds	r5, r6, #2
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d05b      	beq.n	800b5e6 <_strtol_l.constprop.0+0xf6>
 800b52e:	2b10      	cmp	r3, #16
 800b530:	d109      	bne.n	800b546 <_strtol_l.constprop.0+0x56>
 800b532:	2c30      	cmp	r4, #48	; 0x30
 800b534:	d107      	bne.n	800b546 <_strtol_l.constprop.0+0x56>
 800b536:	782c      	ldrb	r4, [r5, #0]
 800b538:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b53c:	2c58      	cmp	r4, #88	; 0x58
 800b53e:	d14d      	bne.n	800b5dc <_strtol_l.constprop.0+0xec>
 800b540:	786c      	ldrb	r4, [r5, #1]
 800b542:	2310      	movs	r3, #16
 800b544:	3502      	adds	r5, #2
 800b546:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b54a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b54e:	f04f 0c00 	mov.w	ip, #0
 800b552:	fbb8 f9f3 	udiv	r9, r8, r3
 800b556:	4666      	mov	r6, ip
 800b558:	fb03 8a19 	mls	sl, r3, r9, r8
 800b55c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b560:	f1be 0f09 	cmp.w	lr, #9
 800b564:	d816      	bhi.n	800b594 <_strtol_l.constprop.0+0xa4>
 800b566:	4674      	mov	r4, lr
 800b568:	42a3      	cmp	r3, r4
 800b56a:	dd24      	ble.n	800b5b6 <_strtol_l.constprop.0+0xc6>
 800b56c:	f1bc 0f00 	cmp.w	ip, #0
 800b570:	db1e      	blt.n	800b5b0 <_strtol_l.constprop.0+0xc0>
 800b572:	45b1      	cmp	r9, r6
 800b574:	d31c      	bcc.n	800b5b0 <_strtol_l.constprop.0+0xc0>
 800b576:	d101      	bne.n	800b57c <_strtol_l.constprop.0+0x8c>
 800b578:	45a2      	cmp	sl, r4
 800b57a:	db19      	blt.n	800b5b0 <_strtol_l.constprop.0+0xc0>
 800b57c:	fb06 4603 	mla	r6, r6, r3, r4
 800b580:	f04f 0c01 	mov.w	ip, #1
 800b584:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b588:	e7e8      	b.n	800b55c <_strtol_l.constprop.0+0x6c>
 800b58a:	2c2b      	cmp	r4, #43	; 0x2b
 800b58c:	bf04      	itt	eq
 800b58e:	782c      	ldrbeq	r4, [r5, #0]
 800b590:	1cb5      	addeq	r5, r6, #2
 800b592:	e7ca      	b.n	800b52a <_strtol_l.constprop.0+0x3a>
 800b594:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b598:	f1be 0f19 	cmp.w	lr, #25
 800b59c:	d801      	bhi.n	800b5a2 <_strtol_l.constprop.0+0xb2>
 800b59e:	3c37      	subs	r4, #55	; 0x37
 800b5a0:	e7e2      	b.n	800b568 <_strtol_l.constprop.0+0x78>
 800b5a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b5a6:	f1be 0f19 	cmp.w	lr, #25
 800b5aa:	d804      	bhi.n	800b5b6 <_strtol_l.constprop.0+0xc6>
 800b5ac:	3c57      	subs	r4, #87	; 0x57
 800b5ae:	e7db      	b.n	800b568 <_strtol_l.constprop.0+0x78>
 800b5b0:	f04f 3cff 	mov.w	ip, #4294967295
 800b5b4:	e7e6      	b.n	800b584 <_strtol_l.constprop.0+0x94>
 800b5b6:	f1bc 0f00 	cmp.w	ip, #0
 800b5ba:	da05      	bge.n	800b5c8 <_strtol_l.constprop.0+0xd8>
 800b5bc:	2322      	movs	r3, #34	; 0x22
 800b5be:	6003      	str	r3, [r0, #0]
 800b5c0:	4646      	mov	r6, r8
 800b5c2:	b942      	cbnz	r2, 800b5d6 <_strtol_l.constprop.0+0xe6>
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	e79e      	b.n	800b506 <_strtol_l.constprop.0+0x16>
 800b5c8:	b107      	cbz	r7, 800b5cc <_strtol_l.constprop.0+0xdc>
 800b5ca:	4276      	negs	r6, r6
 800b5cc:	2a00      	cmp	r2, #0
 800b5ce:	d0f9      	beq.n	800b5c4 <_strtol_l.constprop.0+0xd4>
 800b5d0:	f1bc 0f00 	cmp.w	ip, #0
 800b5d4:	d000      	beq.n	800b5d8 <_strtol_l.constprop.0+0xe8>
 800b5d6:	1e69      	subs	r1, r5, #1
 800b5d8:	6011      	str	r1, [r2, #0]
 800b5da:	e7f3      	b.n	800b5c4 <_strtol_l.constprop.0+0xd4>
 800b5dc:	2430      	movs	r4, #48	; 0x30
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1b1      	bne.n	800b546 <_strtol_l.constprop.0+0x56>
 800b5e2:	2308      	movs	r3, #8
 800b5e4:	e7af      	b.n	800b546 <_strtol_l.constprop.0+0x56>
 800b5e6:	2c30      	cmp	r4, #48	; 0x30
 800b5e8:	d0a5      	beq.n	800b536 <_strtol_l.constprop.0+0x46>
 800b5ea:	230a      	movs	r3, #10
 800b5ec:	e7ab      	b.n	800b546 <_strtol_l.constprop.0+0x56>
 800b5ee:	bf00      	nop
 800b5f0:	0800f531 	.word	0x0800f531

0800b5f4 <_strtol_r>:
 800b5f4:	f7ff bf7c 	b.w	800b4f0 <_strtol_l.constprop.0>

0800b5f8 <quorem>:
 800b5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	6903      	ldr	r3, [r0, #16]
 800b5fe:	690c      	ldr	r4, [r1, #16]
 800b600:	42a3      	cmp	r3, r4
 800b602:	4607      	mov	r7, r0
 800b604:	f2c0 8081 	blt.w	800b70a <quorem+0x112>
 800b608:	3c01      	subs	r4, #1
 800b60a:	f101 0814 	add.w	r8, r1, #20
 800b60e:	f100 0514 	add.w	r5, r0, #20
 800b612:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b616:	9301      	str	r3, [sp, #4]
 800b618:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b61c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b620:	3301      	adds	r3, #1
 800b622:	429a      	cmp	r2, r3
 800b624:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b628:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b62c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b630:	d331      	bcc.n	800b696 <quorem+0x9e>
 800b632:	f04f 0e00 	mov.w	lr, #0
 800b636:	4640      	mov	r0, r8
 800b638:	46ac      	mov	ip, r5
 800b63a:	46f2      	mov	sl, lr
 800b63c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b640:	b293      	uxth	r3, r2
 800b642:	fb06 e303 	mla	r3, r6, r3, lr
 800b646:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	ebaa 0303 	sub.w	r3, sl, r3
 800b650:	f8dc a000 	ldr.w	sl, [ip]
 800b654:	0c12      	lsrs	r2, r2, #16
 800b656:	fa13 f38a 	uxtah	r3, r3, sl
 800b65a:	fb06 e202 	mla	r2, r6, r2, lr
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	9b00      	ldr	r3, [sp, #0]
 800b662:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b666:	b292      	uxth	r2, r2
 800b668:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b66c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b670:	f8bd 3000 	ldrh.w	r3, [sp]
 800b674:	4581      	cmp	r9, r0
 800b676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b67a:	f84c 3b04 	str.w	r3, [ip], #4
 800b67e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b682:	d2db      	bcs.n	800b63c <quorem+0x44>
 800b684:	f855 300b 	ldr.w	r3, [r5, fp]
 800b688:	b92b      	cbnz	r3, 800b696 <quorem+0x9e>
 800b68a:	9b01      	ldr	r3, [sp, #4]
 800b68c:	3b04      	subs	r3, #4
 800b68e:	429d      	cmp	r5, r3
 800b690:	461a      	mov	r2, r3
 800b692:	d32e      	bcc.n	800b6f2 <quorem+0xfa>
 800b694:	613c      	str	r4, [r7, #16]
 800b696:	4638      	mov	r0, r7
 800b698:	f001 fd7e 	bl	800d198 <__mcmp>
 800b69c:	2800      	cmp	r0, #0
 800b69e:	db24      	blt.n	800b6ea <quorem+0xf2>
 800b6a0:	3601      	adds	r6, #1
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	f04f 0c00 	mov.w	ip, #0
 800b6a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6ac:	f8d0 e000 	ldr.w	lr, [r0]
 800b6b0:	b293      	uxth	r3, r2
 800b6b2:	ebac 0303 	sub.w	r3, ip, r3
 800b6b6:	0c12      	lsrs	r2, r2, #16
 800b6b8:	fa13 f38e 	uxtah	r3, r3, lr
 800b6bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b6c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6ca:	45c1      	cmp	r9, r8
 800b6cc:	f840 3b04 	str.w	r3, [r0], #4
 800b6d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b6d4:	d2e8      	bcs.n	800b6a8 <quorem+0xb0>
 800b6d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6de:	b922      	cbnz	r2, 800b6ea <quorem+0xf2>
 800b6e0:	3b04      	subs	r3, #4
 800b6e2:	429d      	cmp	r5, r3
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	d30a      	bcc.n	800b6fe <quorem+0x106>
 800b6e8:	613c      	str	r4, [r7, #16]
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	b003      	add	sp, #12
 800b6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f2:	6812      	ldr	r2, [r2, #0]
 800b6f4:	3b04      	subs	r3, #4
 800b6f6:	2a00      	cmp	r2, #0
 800b6f8:	d1cc      	bne.n	800b694 <quorem+0x9c>
 800b6fa:	3c01      	subs	r4, #1
 800b6fc:	e7c7      	b.n	800b68e <quorem+0x96>
 800b6fe:	6812      	ldr	r2, [r2, #0]
 800b700:	3b04      	subs	r3, #4
 800b702:	2a00      	cmp	r2, #0
 800b704:	d1f0      	bne.n	800b6e8 <quorem+0xf0>
 800b706:	3c01      	subs	r4, #1
 800b708:	e7eb      	b.n	800b6e2 <quorem+0xea>
 800b70a:	2000      	movs	r0, #0
 800b70c:	e7ee      	b.n	800b6ec <quorem+0xf4>
	...

0800b710 <_dtoa_r>:
 800b710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	ed2d 8b04 	vpush	{d8-d9}
 800b718:	ec57 6b10 	vmov	r6, r7, d0
 800b71c:	b093      	sub	sp, #76	; 0x4c
 800b71e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b720:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b724:	9106      	str	r1, [sp, #24]
 800b726:	ee10 aa10 	vmov	sl, s0
 800b72a:	4604      	mov	r4, r0
 800b72c:	9209      	str	r2, [sp, #36]	; 0x24
 800b72e:	930c      	str	r3, [sp, #48]	; 0x30
 800b730:	46bb      	mov	fp, r7
 800b732:	b975      	cbnz	r5, 800b752 <_dtoa_r+0x42>
 800b734:	2010      	movs	r0, #16
 800b736:	f7fe f8dd 	bl	80098f4 <malloc>
 800b73a:	4602      	mov	r2, r0
 800b73c:	6260      	str	r0, [r4, #36]	; 0x24
 800b73e:	b920      	cbnz	r0, 800b74a <_dtoa_r+0x3a>
 800b740:	4ba7      	ldr	r3, [pc, #668]	; (800b9e0 <_dtoa_r+0x2d0>)
 800b742:	21ea      	movs	r1, #234	; 0xea
 800b744:	48a7      	ldr	r0, [pc, #668]	; (800b9e4 <_dtoa_r+0x2d4>)
 800b746:	f002 fb27 	bl	800dd98 <__assert_func>
 800b74a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b74e:	6005      	str	r5, [r0, #0]
 800b750:	60c5      	str	r5, [r0, #12]
 800b752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b754:	6819      	ldr	r1, [r3, #0]
 800b756:	b151      	cbz	r1, 800b76e <_dtoa_r+0x5e>
 800b758:	685a      	ldr	r2, [r3, #4]
 800b75a:	604a      	str	r2, [r1, #4]
 800b75c:	2301      	movs	r3, #1
 800b75e:	4093      	lsls	r3, r2
 800b760:	608b      	str	r3, [r1, #8]
 800b762:	4620      	mov	r0, r4
 800b764:	f001 fa8c 	bl	800cc80 <_Bfree>
 800b768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b76a:	2200      	movs	r2, #0
 800b76c:	601a      	str	r2, [r3, #0]
 800b76e:	1e3b      	subs	r3, r7, #0
 800b770:	bfaa      	itet	ge
 800b772:	2300      	movge	r3, #0
 800b774:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b778:	f8c8 3000 	strge.w	r3, [r8]
 800b77c:	4b9a      	ldr	r3, [pc, #616]	; (800b9e8 <_dtoa_r+0x2d8>)
 800b77e:	bfbc      	itt	lt
 800b780:	2201      	movlt	r2, #1
 800b782:	f8c8 2000 	strlt.w	r2, [r8]
 800b786:	ea33 030b 	bics.w	r3, r3, fp
 800b78a:	d11b      	bne.n	800b7c4 <_dtoa_r+0xb4>
 800b78c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b78e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b792:	6013      	str	r3, [r2, #0]
 800b794:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b798:	4333      	orrs	r3, r6
 800b79a:	f000 8592 	beq.w	800c2c2 <_dtoa_r+0xbb2>
 800b79e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7a0:	b963      	cbnz	r3, 800b7bc <_dtoa_r+0xac>
 800b7a2:	4b92      	ldr	r3, [pc, #584]	; (800b9ec <_dtoa_r+0x2dc>)
 800b7a4:	e022      	b.n	800b7ec <_dtoa_r+0xdc>
 800b7a6:	4b92      	ldr	r3, [pc, #584]	; (800b9f0 <_dtoa_r+0x2e0>)
 800b7a8:	9301      	str	r3, [sp, #4]
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b7ae:	6013      	str	r3, [r2, #0]
 800b7b0:	9801      	ldr	r0, [sp, #4]
 800b7b2:	b013      	add	sp, #76	; 0x4c
 800b7b4:	ecbd 8b04 	vpop	{d8-d9}
 800b7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7bc:	4b8b      	ldr	r3, [pc, #556]	; (800b9ec <_dtoa_r+0x2dc>)
 800b7be:	9301      	str	r3, [sp, #4]
 800b7c0:	3303      	adds	r3, #3
 800b7c2:	e7f3      	b.n	800b7ac <_dtoa_r+0x9c>
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	4650      	mov	r0, sl
 800b7ca:	4659      	mov	r1, fp
 800b7cc:	f7f5 f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7d0:	ec4b ab19 	vmov	d9, sl, fp
 800b7d4:	4680      	mov	r8, r0
 800b7d6:	b158      	cbz	r0, 800b7f0 <_dtoa_r+0xe0>
 800b7d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7da:	2301      	movs	r3, #1
 800b7dc:	6013      	str	r3, [r2, #0]
 800b7de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 856b 	beq.w	800c2bc <_dtoa_r+0xbac>
 800b7e6:	4883      	ldr	r0, [pc, #524]	; (800b9f4 <_dtoa_r+0x2e4>)
 800b7e8:	6018      	str	r0, [r3, #0]
 800b7ea:	1e43      	subs	r3, r0, #1
 800b7ec:	9301      	str	r3, [sp, #4]
 800b7ee:	e7df      	b.n	800b7b0 <_dtoa_r+0xa0>
 800b7f0:	ec4b ab10 	vmov	d0, sl, fp
 800b7f4:	aa10      	add	r2, sp, #64	; 0x40
 800b7f6:	a911      	add	r1, sp, #68	; 0x44
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f001 fdef 	bl	800d3dc <__d2b>
 800b7fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b802:	ee08 0a10 	vmov	s16, r0
 800b806:	2d00      	cmp	r5, #0
 800b808:	f000 8084 	beq.w	800b914 <_dtoa_r+0x204>
 800b80c:	ee19 3a90 	vmov	r3, s19
 800b810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b814:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b818:	4656      	mov	r6, sl
 800b81a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b81e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b822:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b826:	4b74      	ldr	r3, [pc, #464]	; (800b9f8 <_dtoa_r+0x2e8>)
 800b828:	2200      	movs	r2, #0
 800b82a:	4630      	mov	r0, r6
 800b82c:	4639      	mov	r1, r7
 800b82e:	f7f4 fd2b 	bl	8000288 <__aeabi_dsub>
 800b832:	a365      	add	r3, pc, #404	; (adr r3, 800b9c8 <_dtoa_r+0x2b8>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f7f4 fede 	bl	80005f8 <__aeabi_dmul>
 800b83c:	a364      	add	r3, pc, #400	; (adr r3, 800b9d0 <_dtoa_r+0x2c0>)
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	f7f4 fd23 	bl	800028c <__adddf3>
 800b846:	4606      	mov	r6, r0
 800b848:	4628      	mov	r0, r5
 800b84a:	460f      	mov	r7, r1
 800b84c:	f7f4 fe6a 	bl	8000524 <__aeabi_i2d>
 800b850:	a361      	add	r3, pc, #388	; (adr r3, 800b9d8 <_dtoa_r+0x2c8>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f7f4 fecf 	bl	80005f8 <__aeabi_dmul>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	4630      	mov	r0, r6
 800b860:	4639      	mov	r1, r7
 800b862:	f7f4 fd13 	bl	800028c <__adddf3>
 800b866:	4606      	mov	r6, r0
 800b868:	460f      	mov	r7, r1
 800b86a:	f7f5 f975 	bl	8000b58 <__aeabi_d2iz>
 800b86e:	2200      	movs	r2, #0
 800b870:	9000      	str	r0, [sp, #0]
 800b872:	2300      	movs	r3, #0
 800b874:	4630      	mov	r0, r6
 800b876:	4639      	mov	r1, r7
 800b878:	f7f5 f930 	bl	8000adc <__aeabi_dcmplt>
 800b87c:	b150      	cbz	r0, 800b894 <_dtoa_r+0x184>
 800b87e:	9800      	ldr	r0, [sp, #0]
 800b880:	f7f4 fe50 	bl	8000524 <__aeabi_i2d>
 800b884:	4632      	mov	r2, r6
 800b886:	463b      	mov	r3, r7
 800b888:	f7f5 f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b88c:	b910      	cbnz	r0, 800b894 <_dtoa_r+0x184>
 800b88e:	9b00      	ldr	r3, [sp, #0]
 800b890:	3b01      	subs	r3, #1
 800b892:	9300      	str	r3, [sp, #0]
 800b894:	9b00      	ldr	r3, [sp, #0]
 800b896:	2b16      	cmp	r3, #22
 800b898:	d85a      	bhi.n	800b950 <_dtoa_r+0x240>
 800b89a:	9a00      	ldr	r2, [sp, #0]
 800b89c:	4b57      	ldr	r3, [pc, #348]	; (800b9fc <_dtoa_r+0x2ec>)
 800b89e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a6:	ec51 0b19 	vmov	r0, r1, d9
 800b8aa:	f7f5 f917 	bl	8000adc <__aeabi_dcmplt>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	d050      	beq.n	800b954 <_dtoa_r+0x244>
 800b8b2:	9b00      	ldr	r3, [sp, #0]
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	9300      	str	r3, [sp, #0]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8be:	1b5d      	subs	r5, r3, r5
 800b8c0:	1e6b      	subs	r3, r5, #1
 800b8c2:	9305      	str	r3, [sp, #20]
 800b8c4:	bf45      	ittet	mi
 800b8c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b8ca:	9304      	strmi	r3, [sp, #16]
 800b8cc:	2300      	movpl	r3, #0
 800b8ce:	2300      	movmi	r3, #0
 800b8d0:	bf4c      	ite	mi
 800b8d2:	9305      	strmi	r3, [sp, #20]
 800b8d4:	9304      	strpl	r3, [sp, #16]
 800b8d6:	9b00      	ldr	r3, [sp, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	db3d      	blt.n	800b958 <_dtoa_r+0x248>
 800b8dc:	9b05      	ldr	r3, [sp, #20]
 800b8de:	9a00      	ldr	r2, [sp, #0]
 800b8e0:	920a      	str	r2, [sp, #40]	; 0x28
 800b8e2:	4413      	add	r3, r2
 800b8e4:	9305      	str	r3, [sp, #20]
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	9307      	str	r3, [sp, #28]
 800b8ea:	9b06      	ldr	r3, [sp, #24]
 800b8ec:	2b09      	cmp	r3, #9
 800b8ee:	f200 8089 	bhi.w	800ba04 <_dtoa_r+0x2f4>
 800b8f2:	2b05      	cmp	r3, #5
 800b8f4:	bfc4      	itt	gt
 800b8f6:	3b04      	subgt	r3, #4
 800b8f8:	9306      	strgt	r3, [sp, #24]
 800b8fa:	9b06      	ldr	r3, [sp, #24]
 800b8fc:	f1a3 0302 	sub.w	r3, r3, #2
 800b900:	bfcc      	ite	gt
 800b902:	2500      	movgt	r5, #0
 800b904:	2501      	movle	r5, #1
 800b906:	2b03      	cmp	r3, #3
 800b908:	f200 8087 	bhi.w	800ba1a <_dtoa_r+0x30a>
 800b90c:	e8df f003 	tbb	[pc, r3]
 800b910:	59383a2d 	.word	0x59383a2d
 800b914:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b918:	441d      	add	r5, r3
 800b91a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b91e:	2b20      	cmp	r3, #32
 800b920:	bfc1      	itttt	gt
 800b922:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b926:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b92a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b92e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b932:	bfda      	itte	le
 800b934:	f1c3 0320 	rsble	r3, r3, #32
 800b938:	fa06 f003 	lslle.w	r0, r6, r3
 800b93c:	4318      	orrgt	r0, r3
 800b93e:	f7f4 fde1 	bl	8000504 <__aeabi_ui2d>
 800b942:	2301      	movs	r3, #1
 800b944:	4606      	mov	r6, r0
 800b946:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b94a:	3d01      	subs	r5, #1
 800b94c:	930e      	str	r3, [sp, #56]	; 0x38
 800b94e:	e76a      	b.n	800b826 <_dtoa_r+0x116>
 800b950:	2301      	movs	r3, #1
 800b952:	e7b2      	b.n	800b8ba <_dtoa_r+0x1aa>
 800b954:	900b      	str	r0, [sp, #44]	; 0x2c
 800b956:	e7b1      	b.n	800b8bc <_dtoa_r+0x1ac>
 800b958:	9b04      	ldr	r3, [sp, #16]
 800b95a:	9a00      	ldr	r2, [sp, #0]
 800b95c:	1a9b      	subs	r3, r3, r2
 800b95e:	9304      	str	r3, [sp, #16]
 800b960:	4253      	negs	r3, r2
 800b962:	9307      	str	r3, [sp, #28]
 800b964:	2300      	movs	r3, #0
 800b966:	930a      	str	r3, [sp, #40]	; 0x28
 800b968:	e7bf      	b.n	800b8ea <_dtoa_r+0x1da>
 800b96a:	2300      	movs	r3, #0
 800b96c:	9308      	str	r3, [sp, #32]
 800b96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b970:	2b00      	cmp	r3, #0
 800b972:	dc55      	bgt.n	800ba20 <_dtoa_r+0x310>
 800b974:	2301      	movs	r3, #1
 800b976:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b97a:	461a      	mov	r2, r3
 800b97c:	9209      	str	r2, [sp, #36]	; 0x24
 800b97e:	e00c      	b.n	800b99a <_dtoa_r+0x28a>
 800b980:	2301      	movs	r3, #1
 800b982:	e7f3      	b.n	800b96c <_dtoa_r+0x25c>
 800b984:	2300      	movs	r3, #0
 800b986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b988:	9308      	str	r3, [sp, #32]
 800b98a:	9b00      	ldr	r3, [sp, #0]
 800b98c:	4413      	add	r3, r2
 800b98e:	9302      	str	r3, [sp, #8]
 800b990:	3301      	adds	r3, #1
 800b992:	2b01      	cmp	r3, #1
 800b994:	9303      	str	r3, [sp, #12]
 800b996:	bfb8      	it	lt
 800b998:	2301      	movlt	r3, #1
 800b99a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b99c:	2200      	movs	r2, #0
 800b99e:	6042      	str	r2, [r0, #4]
 800b9a0:	2204      	movs	r2, #4
 800b9a2:	f102 0614 	add.w	r6, r2, #20
 800b9a6:	429e      	cmp	r6, r3
 800b9a8:	6841      	ldr	r1, [r0, #4]
 800b9aa:	d93d      	bls.n	800ba28 <_dtoa_r+0x318>
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f001 f927 	bl	800cc00 <_Balloc>
 800b9b2:	9001      	str	r0, [sp, #4]
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d13b      	bne.n	800ba30 <_dtoa_r+0x320>
 800b9b8:	4b11      	ldr	r3, [pc, #68]	; (800ba00 <_dtoa_r+0x2f0>)
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b9c0:	e6c0      	b.n	800b744 <_dtoa_r+0x34>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e7df      	b.n	800b986 <_dtoa_r+0x276>
 800b9c6:	bf00      	nop
 800b9c8:	636f4361 	.word	0x636f4361
 800b9cc:	3fd287a7 	.word	0x3fd287a7
 800b9d0:	8b60c8b3 	.word	0x8b60c8b3
 800b9d4:	3fc68a28 	.word	0x3fc68a28
 800b9d8:	509f79fb 	.word	0x509f79fb
 800b9dc:	3fd34413 	.word	0x3fd34413
 800b9e0:	0800f63e 	.word	0x0800f63e
 800b9e4:	0800f655 	.word	0x0800f655
 800b9e8:	7ff00000 	.word	0x7ff00000
 800b9ec:	0800f63a 	.word	0x0800f63a
 800b9f0:	0800f631 	.word	0x0800f631
 800b9f4:	0800f4b1 	.word	0x0800f4b1
 800b9f8:	3ff80000 	.word	0x3ff80000
 800b9fc:	0800f828 	.word	0x0800f828
 800ba00:	0800f6b0 	.word	0x0800f6b0
 800ba04:	2501      	movs	r5, #1
 800ba06:	2300      	movs	r3, #0
 800ba08:	9306      	str	r3, [sp, #24]
 800ba0a:	9508      	str	r5, [sp, #32]
 800ba0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba14:	2200      	movs	r2, #0
 800ba16:	2312      	movs	r3, #18
 800ba18:	e7b0      	b.n	800b97c <_dtoa_r+0x26c>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	9308      	str	r3, [sp, #32]
 800ba1e:	e7f5      	b.n	800ba0c <_dtoa_r+0x2fc>
 800ba20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba26:	e7b8      	b.n	800b99a <_dtoa_r+0x28a>
 800ba28:	3101      	adds	r1, #1
 800ba2a:	6041      	str	r1, [r0, #4]
 800ba2c:	0052      	lsls	r2, r2, #1
 800ba2e:	e7b8      	b.n	800b9a2 <_dtoa_r+0x292>
 800ba30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba32:	9a01      	ldr	r2, [sp, #4]
 800ba34:	601a      	str	r2, [r3, #0]
 800ba36:	9b03      	ldr	r3, [sp, #12]
 800ba38:	2b0e      	cmp	r3, #14
 800ba3a:	f200 809d 	bhi.w	800bb78 <_dtoa_r+0x468>
 800ba3e:	2d00      	cmp	r5, #0
 800ba40:	f000 809a 	beq.w	800bb78 <_dtoa_r+0x468>
 800ba44:	9b00      	ldr	r3, [sp, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	dd32      	ble.n	800bab0 <_dtoa_r+0x3a0>
 800ba4a:	4ab7      	ldr	r2, [pc, #732]	; (800bd28 <_dtoa_r+0x618>)
 800ba4c:	f003 030f 	and.w	r3, r3, #15
 800ba50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba54:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba58:	9b00      	ldr	r3, [sp, #0]
 800ba5a:	05d8      	lsls	r0, r3, #23
 800ba5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ba60:	d516      	bpl.n	800ba90 <_dtoa_r+0x380>
 800ba62:	4bb2      	ldr	r3, [pc, #712]	; (800bd2c <_dtoa_r+0x61c>)
 800ba64:	ec51 0b19 	vmov	r0, r1, d9
 800ba68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba6c:	f7f4 feee 	bl	800084c <__aeabi_ddiv>
 800ba70:	f007 070f 	and.w	r7, r7, #15
 800ba74:	4682      	mov	sl, r0
 800ba76:	468b      	mov	fp, r1
 800ba78:	2503      	movs	r5, #3
 800ba7a:	4eac      	ldr	r6, [pc, #688]	; (800bd2c <_dtoa_r+0x61c>)
 800ba7c:	b957      	cbnz	r7, 800ba94 <_dtoa_r+0x384>
 800ba7e:	4642      	mov	r2, r8
 800ba80:	464b      	mov	r3, r9
 800ba82:	4650      	mov	r0, sl
 800ba84:	4659      	mov	r1, fp
 800ba86:	f7f4 fee1 	bl	800084c <__aeabi_ddiv>
 800ba8a:	4682      	mov	sl, r0
 800ba8c:	468b      	mov	fp, r1
 800ba8e:	e028      	b.n	800bae2 <_dtoa_r+0x3d2>
 800ba90:	2502      	movs	r5, #2
 800ba92:	e7f2      	b.n	800ba7a <_dtoa_r+0x36a>
 800ba94:	07f9      	lsls	r1, r7, #31
 800ba96:	d508      	bpl.n	800baaa <_dtoa_r+0x39a>
 800ba98:	4640      	mov	r0, r8
 800ba9a:	4649      	mov	r1, r9
 800ba9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800baa0:	f7f4 fdaa 	bl	80005f8 <__aeabi_dmul>
 800baa4:	3501      	adds	r5, #1
 800baa6:	4680      	mov	r8, r0
 800baa8:	4689      	mov	r9, r1
 800baaa:	107f      	asrs	r7, r7, #1
 800baac:	3608      	adds	r6, #8
 800baae:	e7e5      	b.n	800ba7c <_dtoa_r+0x36c>
 800bab0:	f000 809b 	beq.w	800bbea <_dtoa_r+0x4da>
 800bab4:	9b00      	ldr	r3, [sp, #0]
 800bab6:	4f9d      	ldr	r7, [pc, #628]	; (800bd2c <_dtoa_r+0x61c>)
 800bab8:	425e      	negs	r6, r3
 800baba:	4b9b      	ldr	r3, [pc, #620]	; (800bd28 <_dtoa_r+0x618>)
 800babc:	f006 020f 	and.w	r2, r6, #15
 800bac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	ec51 0b19 	vmov	r0, r1, d9
 800bacc:	f7f4 fd94 	bl	80005f8 <__aeabi_dmul>
 800bad0:	1136      	asrs	r6, r6, #4
 800bad2:	4682      	mov	sl, r0
 800bad4:	468b      	mov	fp, r1
 800bad6:	2300      	movs	r3, #0
 800bad8:	2502      	movs	r5, #2
 800bada:	2e00      	cmp	r6, #0
 800badc:	d17a      	bne.n	800bbd4 <_dtoa_r+0x4c4>
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1d3      	bne.n	800ba8a <_dtoa_r+0x37a>
 800bae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f000 8082 	beq.w	800bbee <_dtoa_r+0x4de>
 800baea:	4b91      	ldr	r3, [pc, #580]	; (800bd30 <_dtoa_r+0x620>)
 800baec:	2200      	movs	r2, #0
 800baee:	4650      	mov	r0, sl
 800baf0:	4659      	mov	r1, fp
 800baf2:	f7f4 fff3 	bl	8000adc <__aeabi_dcmplt>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d079      	beq.n	800bbee <_dtoa_r+0x4de>
 800bafa:	9b03      	ldr	r3, [sp, #12]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d076      	beq.n	800bbee <_dtoa_r+0x4de>
 800bb00:	9b02      	ldr	r3, [sp, #8]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	dd36      	ble.n	800bb74 <_dtoa_r+0x464>
 800bb06:	9b00      	ldr	r3, [sp, #0]
 800bb08:	4650      	mov	r0, sl
 800bb0a:	4659      	mov	r1, fp
 800bb0c:	1e5f      	subs	r7, r3, #1
 800bb0e:	2200      	movs	r2, #0
 800bb10:	4b88      	ldr	r3, [pc, #544]	; (800bd34 <_dtoa_r+0x624>)
 800bb12:	f7f4 fd71 	bl	80005f8 <__aeabi_dmul>
 800bb16:	9e02      	ldr	r6, [sp, #8]
 800bb18:	4682      	mov	sl, r0
 800bb1a:	468b      	mov	fp, r1
 800bb1c:	3501      	adds	r5, #1
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f7f4 fd00 	bl	8000524 <__aeabi_i2d>
 800bb24:	4652      	mov	r2, sl
 800bb26:	465b      	mov	r3, fp
 800bb28:	f7f4 fd66 	bl	80005f8 <__aeabi_dmul>
 800bb2c:	4b82      	ldr	r3, [pc, #520]	; (800bd38 <_dtoa_r+0x628>)
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f7f4 fbac 	bl	800028c <__adddf3>
 800bb34:	46d0      	mov	r8, sl
 800bb36:	46d9      	mov	r9, fp
 800bb38:	4682      	mov	sl, r0
 800bb3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bb3e:	2e00      	cmp	r6, #0
 800bb40:	d158      	bne.n	800bbf4 <_dtoa_r+0x4e4>
 800bb42:	4b7e      	ldr	r3, [pc, #504]	; (800bd3c <_dtoa_r+0x62c>)
 800bb44:	2200      	movs	r2, #0
 800bb46:	4640      	mov	r0, r8
 800bb48:	4649      	mov	r1, r9
 800bb4a:	f7f4 fb9d 	bl	8000288 <__aeabi_dsub>
 800bb4e:	4652      	mov	r2, sl
 800bb50:	465b      	mov	r3, fp
 800bb52:	4680      	mov	r8, r0
 800bb54:	4689      	mov	r9, r1
 800bb56:	f7f4 ffdf 	bl	8000b18 <__aeabi_dcmpgt>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	f040 8295 	bne.w	800c08a <_dtoa_r+0x97a>
 800bb60:	4652      	mov	r2, sl
 800bb62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bb66:	4640      	mov	r0, r8
 800bb68:	4649      	mov	r1, r9
 800bb6a:	f7f4 ffb7 	bl	8000adc <__aeabi_dcmplt>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	f040 8289 	bne.w	800c086 <_dtoa_r+0x976>
 800bb74:	ec5b ab19 	vmov	sl, fp, d9
 800bb78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f2c0 8148 	blt.w	800be10 <_dtoa_r+0x700>
 800bb80:	9a00      	ldr	r2, [sp, #0]
 800bb82:	2a0e      	cmp	r2, #14
 800bb84:	f300 8144 	bgt.w	800be10 <_dtoa_r+0x700>
 800bb88:	4b67      	ldr	r3, [pc, #412]	; (800bd28 <_dtoa_r+0x618>)
 800bb8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f280 80d5 	bge.w	800bd44 <_dtoa_r+0x634>
 800bb9a:	9b03      	ldr	r3, [sp, #12]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f300 80d1 	bgt.w	800bd44 <_dtoa_r+0x634>
 800bba2:	f040 826f 	bne.w	800c084 <_dtoa_r+0x974>
 800bba6:	4b65      	ldr	r3, [pc, #404]	; (800bd3c <_dtoa_r+0x62c>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	4640      	mov	r0, r8
 800bbac:	4649      	mov	r1, r9
 800bbae:	f7f4 fd23 	bl	80005f8 <__aeabi_dmul>
 800bbb2:	4652      	mov	r2, sl
 800bbb4:	465b      	mov	r3, fp
 800bbb6:	f7f4 ffa5 	bl	8000b04 <__aeabi_dcmpge>
 800bbba:	9e03      	ldr	r6, [sp, #12]
 800bbbc:	4637      	mov	r7, r6
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	f040 8245 	bne.w	800c04e <_dtoa_r+0x93e>
 800bbc4:	9d01      	ldr	r5, [sp, #4]
 800bbc6:	2331      	movs	r3, #49	; 0x31
 800bbc8:	f805 3b01 	strb.w	r3, [r5], #1
 800bbcc:	9b00      	ldr	r3, [sp, #0]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	e240      	b.n	800c056 <_dtoa_r+0x946>
 800bbd4:	07f2      	lsls	r2, r6, #31
 800bbd6:	d505      	bpl.n	800bbe4 <_dtoa_r+0x4d4>
 800bbd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbdc:	f7f4 fd0c 	bl	80005f8 <__aeabi_dmul>
 800bbe0:	3501      	adds	r5, #1
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	1076      	asrs	r6, r6, #1
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	e777      	b.n	800bada <_dtoa_r+0x3ca>
 800bbea:	2502      	movs	r5, #2
 800bbec:	e779      	b.n	800bae2 <_dtoa_r+0x3d2>
 800bbee:	9f00      	ldr	r7, [sp, #0]
 800bbf0:	9e03      	ldr	r6, [sp, #12]
 800bbf2:	e794      	b.n	800bb1e <_dtoa_r+0x40e>
 800bbf4:	9901      	ldr	r1, [sp, #4]
 800bbf6:	4b4c      	ldr	r3, [pc, #304]	; (800bd28 <_dtoa_r+0x618>)
 800bbf8:	4431      	add	r1, r6
 800bbfa:	910d      	str	r1, [sp, #52]	; 0x34
 800bbfc:	9908      	ldr	r1, [sp, #32]
 800bbfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bc02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc06:	2900      	cmp	r1, #0
 800bc08:	d043      	beq.n	800bc92 <_dtoa_r+0x582>
 800bc0a:	494d      	ldr	r1, [pc, #308]	; (800bd40 <_dtoa_r+0x630>)
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	f7f4 fe1d 	bl	800084c <__aeabi_ddiv>
 800bc12:	4652      	mov	r2, sl
 800bc14:	465b      	mov	r3, fp
 800bc16:	f7f4 fb37 	bl	8000288 <__aeabi_dsub>
 800bc1a:	9d01      	ldr	r5, [sp, #4]
 800bc1c:	4682      	mov	sl, r0
 800bc1e:	468b      	mov	fp, r1
 800bc20:	4649      	mov	r1, r9
 800bc22:	4640      	mov	r0, r8
 800bc24:	f7f4 ff98 	bl	8000b58 <__aeabi_d2iz>
 800bc28:	4606      	mov	r6, r0
 800bc2a:	f7f4 fc7b 	bl	8000524 <__aeabi_i2d>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	460b      	mov	r3, r1
 800bc32:	4640      	mov	r0, r8
 800bc34:	4649      	mov	r1, r9
 800bc36:	f7f4 fb27 	bl	8000288 <__aeabi_dsub>
 800bc3a:	3630      	adds	r6, #48	; 0x30
 800bc3c:	f805 6b01 	strb.w	r6, [r5], #1
 800bc40:	4652      	mov	r2, sl
 800bc42:	465b      	mov	r3, fp
 800bc44:	4680      	mov	r8, r0
 800bc46:	4689      	mov	r9, r1
 800bc48:	f7f4 ff48 	bl	8000adc <__aeabi_dcmplt>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	d163      	bne.n	800bd18 <_dtoa_r+0x608>
 800bc50:	4642      	mov	r2, r8
 800bc52:	464b      	mov	r3, r9
 800bc54:	4936      	ldr	r1, [pc, #216]	; (800bd30 <_dtoa_r+0x620>)
 800bc56:	2000      	movs	r0, #0
 800bc58:	f7f4 fb16 	bl	8000288 <__aeabi_dsub>
 800bc5c:	4652      	mov	r2, sl
 800bc5e:	465b      	mov	r3, fp
 800bc60:	f7f4 ff3c 	bl	8000adc <__aeabi_dcmplt>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	f040 80b5 	bne.w	800bdd4 <_dtoa_r+0x6c4>
 800bc6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc6c:	429d      	cmp	r5, r3
 800bc6e:	d081      	beq.n	800bb74 <_dtoa_r+0x464>
 800bc70:	4b30      	ldr	r3, [pc, #192]	; (800bd34 <_dtoa_r+0x624>)
 800bc72:	2200      	movs	r2, #0
 800bc74:	4650      	mov	r0, sl
 800bc76:	4659      	mov	r1, fp
 800bc78:	f7f4 fcbe 	bl	80005f8 <__aeabi_dmul>
 800bc7c:	4b2d      	ldr	r3, [pc, #180]	; (800bd34 <_dtoa_r+0x624>)
 800bc7e:	4682      	mov	sl, r0
 800bc80:	468b      	mov	fp, r1
 800bc82:	4640      	mov	r0, r8
 800bc84:	4649      	mov	r1, r9
 800bc86:	2200      	movs	r2, #0
 800bc88:	f7f4 fcb6 	bl	80005f8 <__aeabi_dmul>
 800bc8c:	4680      	mov	r8, r0
 800bc8e:	4689      	mov	r9, r1
 800bc90:	e7c6      	b.n	800bc20 <_dtoa_r+0x510>
 800bc92:	4650      	mov	r0, sl
 800bc94:	4659      	mov	r1, fp
 800bc96:	f7f4 fcaf 	bl	80005f8 <__aeabi_dmul>
 800bc9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc9c:	9d01      	ldr	r5, [sp, #4]
 800bc9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bca0:	4682      	mov	sl, r0
 800bca2:	468b      	mov	fp, r1
 800bca4:	4649      	mov	r1, r9
 800bca6:	4640      	mov	r0, r8
 800bca8:	f7f4 ff56 	bl	8000b58 <__aeabi_d2iz>
 800bcac:	4606      	mov	r6, r0
 800bcae:	f7f4 fc39 	bl	8000524 <__aeabi_i2d>
 800bcb2:	3630      	adds	r6, #48	; 0x30
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	4640      	mov	r0, r8
 800bcba:	4649      	mov	r1, r9
 800bcbc:	f7f4 fae4 	bl	8000288 <__aeabi_dsub>
 800bcc0:	f805 6b01 	strb.w	r6, [r5], #1
 800bcc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcc6:	429d      	cmp	r5, r3
 800bcc8:	4680      	mov	r8, r0
 800bcca:	4689      	mov	r9, r1
 800bccc:	f04f 0200 	mov.w	r2, #0
 800bcd0:	d124      	bne.n	800bd1c <_dtoa_r+0x60c>
 800bcd2:	4b1b      	ldr	r3, [pc, #108]	; (800bd40 <_dtoa_r+0x630>)
 800bcd4:	4650      	mov	r0, sl
 800bcd6:	4659      	mov	r1, fp
 800bcd8:	f7f4 fad8 	bl	800028c <__adddf3>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	4640      	mov	r0, r8
 800bce2:	4649      	mov	r1, r9
 800bce4:	f7f4 ff18 	bl	8000b18 <__aeabi_dcmpgt>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d173      	bne.n	800bdd4 <_dtoa_r+0x6c4>
 800bcec:	4652      	mov	r2, sl
 800bcee:	465b      	mov	r3, fp
 800bcf0:	4913      	ldr	r1, [pc, #76]	; (800bd40 <_dtoa_r+0x630>)
 800bcf2:	2000      	movs	r0, #0
 800bcf4:	f7f4 fac8 	bl	8000288 <__aeabi_dsub>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4640      	mov	r0, r8
 800bcfe:	4649      	mov	r1, r9
 800bd00:	f7f4 feec 	bl	8000adc <__aeabi_dcmplt>
 800bd04:	2800      	cmp	r0, #0
 800bd06:	f43f af35 	beq.w	800bb74 <_dtoa_r+0x464>
 800bd0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bd0c:	1e6b      	subs	r3, r5, #1
 800bd0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd14:	2b30      	cmp	r3, #48	; 0x30
 800bd16:	d0f8      	beq.n	800bd0a <_dtoa_r+0x5fa>
 800bd18:	9700      	str	r7, [sp, #0]
 800bd1a:	e049      	b.n	800bdb0 <_dtoa_r+0x6a0>
 800bd1c:	4b05      	ldr	r3, [pc, #20]	; (800bd34 <_dtoa_r+0x624>)
 800bd1e:	f7f4 fc6b 	bl	80005f8 <__aeabi_dmul>
 800bd22:	4680      	mov	r8, r0
 800bd24:	4689      	mov	r9, r1
 800bd26:	e7bd      	b.n	800bca4 <_dtoa_r+0x594>
 800bd28:	0800f828 	.word	0x0800f828
 800bd2c:	0800f800 	.word	0x0800f800
 800bd30:	3ff00000 	.word	0x3ff00000
 800bd34:	40240000 	.word	0x40240000
 800bd38:	401c0000 	.word	0x401c0000
 800bd3c:	40140000 	.word	0x40140000
 800bd40:	3fe00000 	.word	0x3fe00000
 800bd44:	9d01      	ldr	r5, [sp, #4]
 800bd46:	4656      	mov	r6, sl
 800bd48:	465f      	mov	r7, fp
 800bd4a:	4642      	mov	r2, r8
 800bd4c:	464b      	mov	r3, r9
 800bd4e:	4630      	mov	r0, r6
 800bd50:	4639      	mov	r1, r7
 800bd52:	f7f4 fd7b 	bl	800084c <__aeabi_ddiv>
 800bd56:	f7f4 feff 	bl	8000b58 <__aeabi_d2iz>
 800bd5a:	4682      	mov	sl, r0
 800bd5c:	f7f4 fbe2 	bl	8000524 <__aeabi_i2d>
 800bd60:	4642      	mov	r2, r8
 800bd62:	464b      	mov	r3, r9
 800bd64:	f7f4 fc48 	bl	80005f8 <__aeabi_dmul>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	4639      	mov	r1, r7
 800bd70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bd74:	f7f4 fa88 	bl	8000288 <__aeabi_dsub>
 800bd78:	f805 6b01 	strb.w	r6, [r5], #1
 800bd7c:	9e01      	ldr	r6, [sp, #4]
 800bd7e:	9f03      	ldr	r7, [sp, #12]
 800bd80:	1bae      	subs	r6, r5, r6
 800bd82:	42b7      	cmp	r7, r6
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	d135      	bne.n	800bdf6 <_dtoa_r+0x6e6>
 800bd8a:	f7f4 fa7f 	bl	800028c <__adddf3>
 800bd8e:	4642      	mov	r2, r8
 800bd90:	464b      	mov	r3, r9
 800bd92:	4606      	mov	r6, r0
 800bd94:	460f      	mov	r7, r1
 800bd96:	f7f4 febf 	bl	8000b18 <__aeabi_dcmpgt>
 800bd9a:	b9d0      	cbnz	r0, 800bdd2 <_dtoa_r+0x6c2>
 800bd9c:	4642      	mov	r2, r8
 800bd9e:	464b      	mov	r3, r9
 800bda0:	4630      	mov	r0, r6
 800bda2:	4639      	mov	r1, r7
 800bda4:	f7f4 fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 800bda8:	b110      	cbz	r0, 800bdb0 <_dtoa_r+0x6a0>
 800bdaa:	f01a 0f01 	tst.w	sl, #1
 800bdae:	d110      	bne.n	800bdd2 <_dtoa_r+0x6c2>
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	ee18 1a10 	vmov	r1, s16
 800bdb6:	f000 ff63 	bl	800cc80 <_Bfree>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	9800      	ldr	r0, [sp, #0]
 800bdbe:	702b      	strb	r3, [r5, #0]
 800bdc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdc2:	3001      	adds	r0, #1
 800bdc4:	6018      	str	r0, [r3, #0]
 800bdc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f43f acf1 	beq.w	800b7b0 <_dtoa_r+0xa0>
 800bdce:	601d      	str	r5, [r3, #0]
 800bdd0:	e4ee      	b.n	800b7b0 <_dtoa_r+0xa0>
 800bdd2:	9f00      	ldr	r7, [sp, #0]
 800bdd4:	462b      	mov	r3, r5
 800bdd6:	461d      	mov	r5, r3
 800bdd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bddc:	2a39      	cmp	r2, #57	; 0x39
 800bdde:	d106      	bne.n	800bdee <_dtoa_r+0x6de>
 800bde0:	9a01      	ldr	r2, [sp, #4]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d1f7      	bne.n	800bdd6 <_dtoa_r+0x6c6>
 800bde6:	9901      	ldr	r1, [sp, #4]
 800bde8:	2230      	movs	r2, #48	; 0x30
 800bdea:	3701      	adds	r7, #1
 800bdec:	700a      	strb	r2, [r1, #0]
 800bdee:	781a      	ldrb	r2, [r3, #0]
 800bdf0:	3201      	adds	r2, #1
 800bdf2:	701a      	strb	r2, [r3, #0]
 800bdf4:	e790      	b.n	800bd18 <_dtoa_r+0x608>
 800bdf6:	4ba6      	ldr	r3, [pc, #664]	; (800c090 <_dtoa_r+0x980>)
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f7f4 fbfd 	bl	80005f8 <__aeabi_dmul>
 800bdfe:	2200      	movs	r2, #0
 800be00:	2300      	movs	r3, #0
 800be02:	4606      	mov	r6, r0
 800be04:	460f      	mov	r7, r1
 800be06:	f7f4 fe5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d09d      	beq.n	800bd4a <_dtoa_r+0x63a>
 800be0e:	e7cf      	b.n	800bdb0 <_dtoa_r+0x6a0>
 800be10:	9a08      	ldr	r2, [sp, #32]
 800be12:	2a00      	cmp	r2, #0
 800be14:	f000 80d7 	beq.w	800bfc6 <_dtoa_r+0x8b6>
 800be18:	9a06      	ldr	r2, [sp, #24]
 800be1a:	2a01      	cmp	r2, #1
 800be1c:	f300 80ba 	bgt.w	800bf94 <_dtoa_r+0x884>
 800be20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be22:	2a00      	cmp	r2, #0
 800be24:	f000 80b2 	beq.w	800bf8c <_dtoa_r+0x87c>
 800be28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be2c:	9e07      	ldr	r6, [sp, #28]
 800be2e:	9d04      	ldr	r5, [sp, #16]
 800be30:	9a04      	ldr	r2, [sp, #16]
 800be32:	441a      	add	r2, r3
 800be34:	9204      	str	r2, [sp, #16]
 800be36:	9a05      	ldr	r2, [sp, #20]
 800be38:	2101      	movs	r1, #1
 800be3a:	441a      	add	r2, r3
 800be3c:	4620      	mov	r0, r4
 800be3e:	9205      	str	r2, [sp, #20]
 800be40:	f001 f820 	bl	800ce84 <__i2b>
 800be44:	4607      	mov	r7, r0
 800be46:	2d00      	cmp	r5, #0
 800be48:	dd0c      	ble.n	800be64 <_dtoa_r+0x754>
 800be4a:	9b05      	ldr	r3, [sp, #20]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	dd09      	ble.n	800be64 <_dtoa_r+0x754>
 800be50:	42ab      	cmp	r3, r5
 800be52:	9a04      	ldr	r2, [sp, #16]
 800be54:	bfa8      	it	ge
 800be56:	462b      	movge	r3, r5
 800be58:	1ad2      	subs	r2, r2, r3
 800be5a:	9204      	str	r2, [sp, #16]
 800be5c:	9a05      	ldr	r2, [sp, #20]
 800be5e:	1aed      	subs	r5, r5, r3
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	9305      	str	r3, [sp, #20]
 800be64:	9b07      	ldr	r3, [sp, #28]
 800be66:	b31b      	cbz	r3, 800beb0 <_dtoa_r+0x7a0>
 800be68:	9b08      	ldr	r3, [sp, #32]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f000 80af 	beq.w	800bfce <_dtoa_r+0x8be>
 800be70:	2e00      	cmp	r6, #0
 800be72:	dd13      	ble.n	800be9c <_dtoa_r+0x78c>
 800be74:	4639      	mov	r1, r7
 800be76:	4632      	mov	r2, r6
 800be78:	4620      	mov	r0, r4
 800be7a:	f001 f8c3 	bl	800d004 <__pow5mult>
 800be7e:	ee18 2a10 	vmov	r2, s16
 800be82:	4601      	mov	r1, r0
 800be84:	4607      	mov	r7, r0
 800be86:	4620      	mov	r0, r4
 800be88:	f001 f812 	bl	800ceb0 <__multiply>
 800be8c:	ee18 1a10 	vmov	r1, s16
 800be90:	4680      	mov	r8, r0
 800be92:	4620      	mov	r0, r4
 800be94:	f000 fef4 	bl	800cc80 <_Bfree>
 800be98:	ee08 8a10 	vmov	s16, r8
 800be9c:	9b07      	ldr	r3, [sp, #28]
 800be9e:	1b9a      	subs	r2, r3, r6
 800bea0:	d006      	beq.n	800beb0 <_dtoa_r+0x7a0>
 800bea2:	ee18 1a10 	vmov	r1, s16
 800bea6:	4620      	mov	r0, r4
 800bea8:	f001 f8ac 	bl	800d004 <__pow5mult>
 800beac:	ee08 0a10 	vmov	s16, r0
 800beb0:	2101      	movs	r1, #1
 800beb2:	4620      	mov	r0, r4
 800beb4:	f000 ffe6 	bl	800ce84 <__i2b>
 800beb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beba:	2b00      	cmp	r3, #0
 800bebc:	4606      	mov	r6, r0
 800bebe:	f340 8088 	ble.w	800bfd2 <_dtoa_r+0x8c2>
 800bec2:	461a      	mov	r2, r3
 800bec4:	4601      	mov	r1, r0
 800bec6:	4620      	mov	r0, r4
 800bec8:	f001 f89c 	bl	800d004 <__pow5mult>
 800becc:	9b06      	ldr	r3, [sp, #24]
 800bece:	2b01      	cmp	r3, #1
 800bed0:	4606      	mov	r6, r0
 800bed2:	f340 8081 	ble.w	800bfd8 <_dtoa_r+0x8c8>
 800bed6:	f04f 0800 	mov.w	r8, #0
 800beda:	6933      	ldr	r3, [r6, #16]
 800bedc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bee0:	6918      	ldr	r0, [r3, #16]
 800bee2:	f000 ff7f 	bl	800cde4 <__hi0bits>
 800bee6:	f1c0 0020 	rsb	r0, r0, #32
 800beea:	9b05      	ldr	r3, [sp, #20]
 800beec:	4418      	add	r0, r3
 800beee:	f010 001f 	ands.w	r0, r0, #31
 800bef2:	f000 8092 	beq.w	800c01a <_dtoa_r+0x90a>
 800bef6:	f1c0 0320 	rsb	r3, r0, #32
 800befa:	2b04      	cmp	r3, #4
 800befc:	f340 808a 	ble.w	800c014 <_dtoa_r+0x904>
 800bf00:	f1c0 001c 	rsb	r0, r0, #28
 800bf04:	9b04      	ldr	r3, [sp, #16]
 800bf06:	4403      	add	r3, r0
 800bf08:	9304      	str	r3, [sp, #16]
 800bf0a:	9b05      	ldr	r3, [sp, #20]
 800bf0c:	4403      	add	r3, r0
 800bf0e:	4405      	add	r5, r0
 800bf10:	9305      	str	r3, [sp, #20]
 800bf12:	9b04      	ldr	r3, [sp, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	dd07      	ble.n	800bf28 <_dtoa_r+0x818>
 800bf18:	ee18 1a10 	vmov	r1, s16
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f001 f8ca 	bl	800d0b8 <__lshift>
 800bf24:	ee08 0a10 	vmov	s16, r0
 800bf28:	9b05      	ldr	r3, [sp, #20]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	dd05      	ble.n	800bf3a <_dtoa_r+0x82a>
 800bf2e:	4631      	mov	r1, r6
 800bf30:	461a      	mov	r2, r3
 800bf32:	4620      	mov	r0, r4
 800bf34:	f001 f8c0 	bl	800d0b8 <__lshift>
 800bf38:	4606      	mov	r6, r0
 800bf3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d06e      	beq.n	800c01e <_dtoa_r+0x90e>
 800bf40:	ee18 0a10 	vmov	r0, s16
 800bf44:	4631      	mov	r1, r6
 800bf46:	f001 f927 	bl	800d198 <__mcmp>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	da67      	bge.n	800c01e <_dtoa_r+0x90e>
 800bf4e:	9b00      	ldr	r3, [sp, #0]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	ee18 1a10 	vmov	r1, s16
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	220a      	movs	r2, #10
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	f000 feb1 	bl	800ccc4 <__multadd>
 800bf62:	9b08      	ldr	r3, [sp, #32]
 800bf64:	ee08 0a10 	vmov	s16, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 81b1 	beq.w	800c2d0 <_dtoa_r+0xbc0>
 800bf6e:	2300      	movs	r3, #0
 800bf70:	4639      	mov	r1, r7
 800bf72:	220a      	movs	r2, #10
 800bf74:	4620      	mov	r0, r4
 800bf76:	f000 fea5 	bl	800ccc4 <__multadd>
 800bf7a:	9b02      	ldr	r3, [sp, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	4607      	mov	r7, r0
 800bf80:	f300 808e 	bgt.w	800c0a0 <_dtoa_r+0x990>
 800bf84:	9b06      	ldr	r3, [sp, #24]
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	dc51      	bgt.n	800c02e <_dtoa_r+0x91e>
 800bf8a:	e089      	b.n	800c0a0 <_dtoa_r+0x990>
 800bf8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf92:	e74b      	b.n	800be2c <_dtoa_r+0x71c>
 800bf94:	9b03      	ldr	r3, [sp, #12]
 800bf96:	1e5e      	subs	r6, r3, #1
 800bf98:	9b07      	ldr	r3, [sp, #28]
 800bf9a:	42b3      	cmp	r3, r6
 800bf9c:	bfbf      	itttt	lt
 800bf9e:	9b07      	ldrlt	r3, [sp, #28]
 800bfa0:	9607      	strlt	r6, [sp, #28]
 800bfa2:	1af2      	sublt	r2, r6, r3
 800bfa4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bfa6:	bfb6      	itet	lt
 800bfa8:	189b      	addlt	r3, r3, r2
 800bfaa:	1b9e      	subge	r6, r3, r6
 800bfac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bfae:	9b03      	ldr	r3, [sp, #12]
 800bfb0:	bfb8      	it	lt
 800bfb2:	2600      	movlt	r6, #0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	bfb7      	itett	lt
 800bfb8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bfbc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bfc0:	1a9d      	sublt	r5, r3, r2
 800bfc2:	2300      	movlt	r3, #0
 800bfc4:	e734      	b.n	800be30 <_dtoa_r+0x720>
 800bfc6:	9e07      	ldr	r6, [sp, #28]
 800bfc8:	9d04      	ldr	r5, [sp, #16]
 800bfca:	9f08      	ldr	r7, [sp, #32]
 800bfcc:	e73b      	b.n	800be46 <_dtoa_r+0x736>
 800bfce:	9a07      	ldr	r2, [sp, #28]
 800bfd0:	e767      	b.n	800bea2 <_dtoa_r+0x792>
 800bfd2:	9b06      	ldr	r3, [sp, #24]
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	dc18      	bgt.n	800c00a <_dtoa_r+0x8fa>
 800bfd8:	f1ba 0f00 	cmp.w	sl, #0
 800bfdc:	d115      	bne.n	800c00a <_dtoa_r+0x8fa>
 800bfde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bfe2:	b993      	cbnz	r3, 800c00a <_dtoa_r+0x8fa>
 800bfe4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bfe8:	0d1b      	lsrs	r3, r3, #20
 800bfea:	051b      	lsls	r3, r3, #20
 800bfec:	b183      	cbz	r3, 800c010 <_dtoa_r+0x900>
 800bfee:	9b04      	ldr	r3, [sp, #16]
 800bff0:	3301      	adds	r3, #1
 800bff2:	9304      	str	r3, [sp, #16]
 800bff4:	9b05      	ldr	r3, [sp, #20]
 800bff6:	3301      	adds	r3, #1
 800bff8:	9305      	str	r3, [sp, #20]
 800bffa:	f04f 0801 	mov.w	r8, #1
 800bffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c000:	2b00      	cmp	r3, #0
 800c002:	f47f af6a 	bne.w	800beda <_dtoa_r+0x7ca>
 800c006:	2001      	movs	r0, #1
 800c008:	e76f      	b.n	800beea <_dtoa_r+0x7da>
 800c00a:	f04f 0800 	mov.w	r8, #0
 800c00e:	e7f6      	b.n	800bffe <_dtoa_r+0x8ee>
 800c010:	4698      	mov	r8, r3
 800c012:	e7f4      	b.n	800bffe <_dtoa_r+0x8ee>
 800c014:	f43f af7d 	beq.w	800bf12 <_dtoa_r+0x802>
 800c018:	4618      	mov	r0, r3
 800c01a:	301c      	adds	r0, #28
 800c01c:	e772      	b.n	800bf04 <_dtoa_r+0x7f4>
 800c01e:	9b03      	ldr	r3, [sp, #12]
 800c020:	2b00      	cmp	r3, #0
 800c022:	dc37      	bgt.n	800c094 <_dtoa_r+0x984>
 800c024:	9b06      	ldr	r3, [sp, #24]
 800c026:	2b02      	cmp	r3, #2
 800c028:	dd34      	ble.n	800c094 <_dtoa_r+0x984>
 800c02a:	9b03      	ldr	r3, [sp, #12]
 800c02c:	9302      	str	r3, [sp, #8]
 800c02e:	9b02      	ldr	r3, [sp, #8]
 800c030:	b96b      	cbnz	r3, 800c04e <_dtoa_r+0x93e>
 800c032:	4631      	mov	r1, r6
 800c034:	2205      	movs	r2, #5
 800c036:	4620      	mov	r0, r4
 800c038:	f000 fe44 	bl	800ccc4 <__multadd>
 800c03c:	4601      	mov	r1, r0
 800c03e:	4606      	mov	r6, r0
 800c040:	ee18 0a10 	vmov	r0, s16
 800c044:	f001 f8a8 	bl	800d198 <__mcmp>
 800c048:	2800      	cmp	r0, #0
 800c04a:	f73f adbb 	bgt.w	800bbc4 <_dtoa_r+0x4b4>
 800c04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c050:	9d01      	ldr	r5, [sp, #4]
 800c052:	43db      	mvns	r3, r3
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	f04f 0800 	mov.w	r8, #0
 800c05a:	4631      	mov	r1, r6
 800c05c:	4620      	mov	r0, r4
 800c05e:	f000 fe0f 	bl	800cc80 <_Bfree>
 800c062:	2f00      	cmp	r7, #0
 800c064:	f43f aea4 	beq.w	800bdb0 <_dtoa_r+0x6a0>
 800c068:	f1b8 0f00 	cmp.w	r8, #0
 800c06c:	d005      	beq.n	800c07a <_dtoa_r+0x96a>
 800c06e:	45b8      	cmp	r8, r7
 800c070:	d003      	beq.n	800c07a <_dtoa_r+0x96a>
 800c072:	4641      	mov	r1, r8
 800c074:	4620      	mov	r0, r4
 800c076:	f000 fe03 	bl	800cc80 <_Bfree>
 800c07a:	4639      	mov	r1, r7
 800c07c:	4620      	mov	r0, r4
 800c07e:	f000 fdff 	bl	800cc80 <_Bfree>
 800c082:	e695      	b.n	800bdb0 <_dtoa_r+0x6a0>
 800c084:	2600      	movs	r6, #0
 800c086:	4637      	mov	r7, r6
 800c088:	e7e1      	b.n	800c04e <_dtoa_r+0x93e>
 800c08a:	9700      	str	r7, [sp, #0]
 800c08c:	4637      	mov	r7, r6
 800c08e:	e599      	b.n	800bbc4 <_dtoa_r+0x4b4>
 800c090:	40240000 	.word	0x40240000
 800c094:	9b08      	ldr	r3, [sp, #32]
 800c096:	2b00      	cmp	r3, #0
 800c098:	f000 80ca 	beq.w	800c230 <_dtoa_r+0xb20>
 800c09c:	9b03      	ldr	r3, [sp, #12]
 800c09e:	9302      	str	r3, [sp, #8]
 800c0a0:	2d00      	cmp	r5, #0
 800c0a2:	dd05      	ble.n	800c0b0 <_dtoa_r+0x9a0>
 800c0a4:	4639      	mov	r1, r7
 800c0a6:	462a      	mov	r2, r5
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f001 f805 	bl	800d0b8 <__lshift>
 800c0ae:	4607      	mov	r7, r0
 800c0b0:	f1b8 0f00 	cmp.w	r8, #0
 800c0b4:	d05b      	beq.n	800c16e <_dtoa_r+0xa5e>
 800c0b6:	6879      	ldr	r1, [r7, #4]
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f000 fda1 	bl	800cc00 <_Balloc>
 800c0be:	4605      	mov	r5, r0
 800c0c0:	b928      	cbnz	r0, 800c0ce <_dtoa_r+0x9be>
 800c0c2:	4b87      	ldr	r3, [pc, #540]	; (800c2e0 <_dtoa_r+0xbd0>)
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c0ca:	f7ff bb3b 	b.w	800b744 <_dtoa_r+0x34>
 800c0ce:	693a      	ldr	r2, [r7, #16]
 800c0d0:	3202      	adds	r2, #2
 800c0d2:	0092      	lsls	r2, r2, #2
 800c0d4:	f107 010c 	add.w	r1, r7, #12
 800c0d8:	300c      	adds	r0, #12
 800c0da:	f7fd fc23 	bl	8009924 <memcpy>
 800c0de:	2201      	movs	r2, #1
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f000 ffe8 	bl	800d0b8 <__lshift>
 800c0e8:	9b01      	ldr	r3, [sp, #4]
 800c0ea:	f103 0901 	add.w	r9, r3, #1
 800c0ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	9305      	str	r3, [sp, #20]
 800c0f6:	f00a 0301 	and.w	r3, sl, #1
 800c0fa:	46b8      	mov	r8, r7
 800c0fc:	9304      	str	r3, [sp, #16]
 800c0fe:	4607      	mov	r7, r0
 800c100:	4631      	mov	r1, r6
 800c102:	ee18 0a10 	vmov	r0, s16
 800c106:	f7ff fa77 	bl	800b5f8 <quorem>
 800c10a:	4641      	mov	r1, r8
 800c10c:	9002      	str	r0, [sp, #8]
 800c10e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c112:	ee18 0a10 	vmov	r0, s16
 800c116:	f001 f83f 	bl	800d198 <__mcmp>
 800c11a:	463a      	mov	r2, r7
 800c11c:	9003      	str	r0, [sp, #12]
 800c11e:	4631      	mov	r1, r6
 800c120:	4620      	mov	r0, r4
 800c122:	f001 f855 	bl	800d1d0 <__mdiff>
 800c126:	68c2      	ldr	r2, [r0, #12]
 800c128:	f109 3bff 	add.w	fp, r9, #4294967295
 800c12c:	4605      	mov	r5, r0
 800c12e:	bb02      	cbnz	r2, 800c172 <_dtoa_r+0xa62>
 800c130:	4601      	mov	r1, r0
 800c132:	ee18 0a10 	vmov	r0, s16
 800c136:	f001 f82f 	bl	800d198 <__mcmp>
 800c13a:	4602      	mov	r2, r0
 800c13c:	4629      	mov	r1, r5
 800c13e:	4620      	mov	r0, r4
 800c140:	9207      	str	r2, [sp, #28]
 800c142:	f000 fd9d 	bl	800cc80 <_Bfree>
 800c146:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c14a:	ea43 0102 	orr.w	r1, r3, r2
 800c14e:	9b04      	ldr	r3, [sp, #16]
 800c150:	430b      	orrs	r3, r1
 800c152:	464d      	mov	r5, r9
 800c154:	d10f      	bne.n	800c176 <_dtoa_r+0xa66>
 800c156:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c15a:	d02a      	beq.n	800c1b2 <_dtoa_r+0xaa2>
 800c15c:	9b03      	ldr	r3, [sp, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	dd02      	ble.n	800c168 <_dtoa_r+0xa58>
 800c162:	9b02      	ldr	r3, [sp, #8]
 800c164:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c168:	f88b a000 	strb.w	sl, [fp]
 800c16c:	e775      	b.n	800c05a <_dtoa_r+0x94a>
 800c16e:	4638      	mov	r0, r7
 800c170:	e7ba      	b.n	800c0e8 <_dtoa_r+0x9d8>
 800c172:	2201      	movs	r2, #1
 800c174:	e7e2      	b.n	800c13c <_dtoa_r+0xa2c>
 800c176:	9b03      	ldr	r3, [sp, #12]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	db04      	blt.n	800c186 <_dtoa_r+0xa76>
 800c17c:	9906      	ldr	r1, [sp, #24]
 800c17e:	430b      	orrs	r3, r1
 800c180:	9904      	ldr	r1, [sp, #16]
 800c182:	430b      	orrs	r3, r1
 800c184:	d122      	bne.n	800c1cc <_dtoa_r+0xabc>
 800c186:	2a00      	cmp	r2, #0
 800c188:	ddee      	ble.n	800c168 <_dtoa_r+0xa58>
 800c18a:	ee18 1a10 	vmov	r1, s16
 800c18e:	2201      	movs	r2, #1
 800c190:	4620      	mov	r0, r4
 800c192:	f000 ff91 	bl	800d0b8 <__lshift>
 800c196:	4631      	mov	r1, r6
 800c198:	ee08 0a10 	vmov	s16, r0
 800c19c:	f000 fffc 	bl	800d198 <__mcmp>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	dc03      	bgt.n	800c1ac <_dtoa_r+0xa9c>
 800c1a4:	d1e0      	bne.n	800c168 <_dtoa_r+0xa58>
 800c1a6:	f01a 0f01 	tst.w	sl, #1
 800c1aa:	d0dd      	beq.n	800c168 <_dtoa_r+0xa58>
 800c1ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c1b0:	d1d7      	bne.n	800c162 <_dtoa_r+0xa52>
 800c1b2:	2339      	movs	r3, #57	; 0x39
 800c1b4:	f88b 3000 	strb.w	r3, [fp]
 800c1b8:	462b      	mov	r3, r5
 800c1ba:	461d      	mov	r5, r3
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c1c2:	2a39      	cmp	r2, #57	; 0x39
 800c1c4:	d071      	beq.n	800c2aa <_dtoa_r+0xb9a>
 800c1c6:	3201      	adds	r2, #1
 800c1c8:	701a      	strb	r2, [r3, #0]
 800c1ca:	e746      	b.n	800c05a <_dtoa_r+0x94a>
 800c1cc:	2a00      	cmp	r2, #0
 800c1ce:	dd07      	ble.n	800c1e0 <_dtoa_r+0xad0>
 800c1d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c1d4:	d0ed      	beq.n	800c1b2 <_dtoa_r+0xaa2>
 800c1d6:	f10a 0301 	add.w	r3, sl, #1
 800c1da:	f88b 3000 	strb.w	r3, [fp]
 800c1de:	e73c      	b.n	800c05a <_dtoa_r+0x94a>
 800c1e0:	9b05      	ldr	r3, [sp, #20]
 800c1e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c1e6:	4599      	cmp	r9, r3
 800c1e8:	d047      	beq.n	800c27a <_dtoa_r+0xb6a>
 800c1ea:	ee18 1a10 	vmov	r1, s16
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	220a      	movs	r2, #10
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f000 fd66 	bl	800ccc4 <__multadd>
 800c1f8:	45b8      	cmp	r8, r7
 800c1fa:	ee08 0a10 	vmov	s16, r0
 800c1fe:	f04f 0300 	mov.w	r3, #0
 800c202:	f04f 020a 	mov.w	r2, #10
 800c206:	4641      	mov	r1, r8
 800c208:	4620      	mov	r0, r4
 800c20a:	d106      	bne.n	800c21a <_dtoa_r+0xb0a>
 800c20c:	f000 fd5a 	bl	800ccc4 <__multadd>
 800c210:	4680      	mov	r8, r0
 800c212:	4607      	mov	r7, r0
 800c214:	f109 0901 	add.w	r9, r9, #1
 800c218:	e772      	b.n	800c100 <_dtoa_r+0x9f0>
 800c21a:	f000 fd53 	bl	800ccc4 <__multadd>
 800c21e:	4639      	mov	r1, r7
 800c220:	4680      	mov	r8, r0
 800c222:	2300      	movs	r3, #0
 800c224:	220a      	movs	r2, #10
 800c226:	4620      	mov	r0, r4
 800c228:	f000 fd4c 	bl	800ccc4 <__multadd>
 800c22c:	4607      	mov	r7, r0
 800c22e:	e7f1      	b.n	800c214 <_dtoa_r+0xb04>
 800c230:	9b03      	ldr	r3, [sp, #12]
 800c232:	9302      	str	r3, [sp, #8]
 800c234:	9d01      	ldr	r5, [sp, #4]
 800c236:	ee18 0a10 	vmov	r0, s16
 800c23a:	4631      	mov	r1, r6
 800c23c:	f7ff f9dc 	bl	800b5f8 <quorem>
 800c240:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c244:	9b01      	ldr	r3, [sp, #4]
 800c246:	f805 ab01 	strb.w	sl, [r5], #1
 800c24a:	1aea      	subs	r2, r5, r3
 800c24c:	9b02      	ldr	r3, [sp, #8]
 800c24e:	4293      	cmp	r3, r2
 800c250:	dd09      	ble.n	800c266 <_dtoa_r+0xb56>
 800c252:	ee18 1a10 	vmov	r1, s16
 800c256:	2300      	movs	r3, #0
 800c258:	220a      	movs	r2, #10
 800c25a:	4620      	mov	r0, r4
 800c25c:	f000 fd32 	bl	800ccc4 <__multadd>
 800c260:	ee08 0a10 	vmov	s16, r0
 800c264:	e7e7      	b.n	800c236 <_dtoa_r+0xb26>
 800c266:	9b02      	ldr	r3, [sp, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	bfc8      	it	gt
 800c26c:	461d      	movgt	r5, r3
 800c26e:	9b01      	ldr	r3, [sp, #4]
 800c270:	bfd8      	it	le
 800c272:	2501      	movle	r5, #1
 800c274:	441d      	add	r5, r3
 800c276:	f04f 0800 	mov.w	r8, #0
 800c27a:	ee18 1a10 	vmov	r1, s16
 800c27e:	2201      	movs	r2, #1
 800c280:	4620      	mov	r0, r4
 800c282:	f000 ff19 	bl	800d0b8 <__lshift>
 800c286:	4631      	mov	r1, r6
 800c288:	ee08 0a10 	vmov	s16, r0
 800c28c:	f000 ff84 	bl	800d198 <__mcmp>
 800c290:	2800      	cmp	r0, #0
 800c292:	dc91      	bgt.n	800c1b8 <_dtoa_r+0xaa8>
 800c294:	d102      	bne.n	800c29c <_dtoa_r+0xb8c>
 800c296:	f01a 0f01 	tst.w	sl, #1
 800c29a:	d18d      	bne.n	800c1b8 <_dtoa_r+0xaa8>
 800c29c:	462b      	mov	r3, r5
 800c29e:	461d      	mov	r5, r3
 800c2a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2a4:	2a30      	cmp	r2, #48	; 0x30
 800c2a6:	d0fa      	beq.n	800c29e <_dtoa_r+0xb8e>
 800c2a8:	e6d7      	b.n	800c05a <_dtoa_r+0x94a>
 800c2aa:	9a01      	ldr	r2, [sp, #4]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d184      	bne.n	800c1ba <_dtoa_r+0xaaa>
 800c2b0:	9b00      	ldr	r3, [sp, #0]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	2331      	movs	r3, #49	; 0x31
 800c2b8:	7013      	strb	r3, [r2, #0]
 800c2ba:	e6ce      	b.n	800c05a <_dtoa_r+0x94a>
 800c2bc:	4b09      	ldr	r3, [pc, #36]	; (800c2e4 <_dtoa_r+0xbd4>)
 800c2be:	f7ff ba95 	b.w	800b7ec <_dtoa_r+0xdc>
 800c2c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f47f aa6e 	bne.w	800b7a6 <_dtoa_r+0x96>
 800c2ca:	4b07      	ldr	r3, [pc, #28]	; (800c2e8 <_dtoa_r+0xbd8>)
 800c2cc:	f7ff ba8e 	b.w	800b7ec <_dtoa_r+0xdc>
 800c2d0:	9b02      	ldr	r3, [sp, #8]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	dcae      	bgt.n	800c234 <_dtoa_r+0xb24>
 800c2d6:	9b06      	ldr	r3, [sp, #24]
 800c2d8:	2b02      	cmp	r3, #2
 800c2da:	f73f aea8 	bgt.w	800c02e <_dtoa_r+0x91e>
 800c2de:	e7a9      	b.n	800c234 <_dtoa_r+0xb24>
 800c2e0:	0800f6b0 	.word	0x0800f6b0
 800c2e4:	0800f4b0 	.word	0x0800f4b0
 800c2e8:	0800f631 	.word	0x0800f631

0800c2ec <std>:
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	b510      	push	{r4, lr}
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	e9c0 3300 	strd	r3, r3, [r0]
 800c2f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2fa:	6083      	str	r3, [r0, #8]
 800c2fc:	8181      	strh	r1, [r0, #12]
 800c2fe:	6643      	str	r3, [r0, #100]	; 0x64
 800c300:	81c2      	strh	r2, [r0, #14]
 800c302:	6183      	str	r3, [r0, #24]
 800c304:	4619      	mov	r1, r3
 800c306:	2208      	movs	r2, #8
 800c308:	305c      	adds	r0, #92	; 0x5c
 800c30a:	f7fd fb19 	bl	8009940 <memset>
 800c30e:	4b05      	ldr	r3, [pc, #20]	; (800c324 <std+0x38>)
 800c310:	6263      	str	r3, [r4, #36]	; 0x24
 800c312:	4b05      	ldr	r3, [pc, #20]	; (800c328 <std+0x3c>)
 800c314:	62a3      	str	r3, [r4, #40]	; 0x28
 800c316:	4b05      	ldr	r3, [pc, #20]	; (800c32c <std+0x40>)
 800c318:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c31a:	4b05      	ldr	r3, [pc, #20]	; (800c330 <std+0x44>)
 800c31c:	6224      	str	r4, [r4, #32]
 800c31e:	6323      	str	r3, [r4, #48]	; 0x30
 800c320:	bd10      	pop	{r4, pc}
 800c322:	bf00      	nop
 800c324:	0800db29 	.word	0x0800db29
 800c328:	0800db4b 	.word	0x0800db4b
 800c32c:	0800db83 	.word	0x0800db83
 800c330:	0800dba7 	.word	0x0800dba7

0800c334 <_cleanup_r>:
 800c334:	4901      	ldr	r1, [pc, #4]	; (800c33c <_cleanup_r+0x8>)
 800c336:	f000 b8af 	b.w	800c498 <_fwalk_reent>
 800c33a:	bf00      	nop
 800c33c:	0800df01 	.word	0x0800df01

0800c340 <__sfmoreglue>:
 800c340:	b570      	push	{r4, r5, r6, lr}
 800c342:	2268      	movs	r2, #104	; 0x68
 800c344:	1e4d      	subs	r5, r1, #1
 800c346:	4355      	muls	r5, r2
 800c348:	460e      	mov	r6, r1
 800c34a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c34e:	f7fd fb6b 	bl	8009a28 <_malloc_r>
 800c352:	4604      	mov	r4, r0
 800c354:	b140      	cbz	r0, 800c368 <__sfmoreglue+0x28>
 800c356:	2100      	movs	r1, #0
 800c358:	e9c0 1600 	strd	r1, r6, [r0]
 800c35c:	300c      	adds	r0, #12
 800c35e:	60a0      	str	r0, [r4, #8]
 800c360:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c364:	f7fd faec 	bl	8009940 <memset>
 800c368:	4620      	mov	r0, r4
 800c36a:	bd70      	pop	{r4, r5, r6, pc}

0800c36c <__sfp_lock_acquire>:
 800c36c:	4801      	ldr	r0, [pc, #4]	; (800c374 <__sfp_lock_acquire+0x8>)
 800c36e:	f000 bc26 	b.w	800cbbe <__retarget_lock_acquire_recursive>
 800c372:	bf00      	nop
 800c374:	20000675 	.word	0x20000675

0800c378 <__sfp_lock_release>:
 800c378:	4801      	ldr	r0, [pc, #4]	; (800c380 <__sfp_lock_release+0x8>)
 800c37a:	f000 bc21 	b.w	800cbc0 <__retarget_lock_release_recursive>
 800c37e:	bf00      	nop
 800c380:	20000675 	.word	0x20000675

0800c384 <__sinit_lock_acquire>:
 800c384:	4801      	ldr	r0, [pc, #4]	; (800c38c <__sinit_lock_acquire+0x8>)
 800c386:	f000 bc1a 	b.w	800cbbe <__retarget_lock_acquire_recursive>
 800c38a:	bf00      	nop
 800c38c:	20000676 	.word	0x20000676

0800c390 <__sinit_lock_release>:
 800c390:	4801      	ldr	r0, [pc, #4]	; (800c398 <__sinit_lock_release+0x8>)
 800c392:	f000 bc15 	b.w	800cbc0 <__retarget_lock_release_recursive>
 800c396:	bf00      	nop
 800c398:	20000676 	.word	0x20000676

0800c39c <__sinit>:
 800c39c:	b510      	push	{r4, lr}
 800c39e:	4604      	mov	r4, r0
 800c3a0:	f7ff fff0 	bl	800c384 <__sinit_lock_acquire>
 800c3a4:	69a3      	ldr	r3, [r4, #24]
 800c3a6:	b11b      	cbz	r3, 800c3b0 <__sinit+0x14>
 800c3a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3ac:	f7ff bff0 	b.w	800c390 <__sinit_lock_release>
 800c3b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c3b4:	6523      	str	r3, [r4, #80]	; 0x50
 800c3b6:	4b13      	ldr	r3, [pc, #76]	; (800c404 <__sinit+0x68>)
 800c3b8:	4a13      	ldr	r2, [pc, #76]	; (800c408 <__sinit+0x6c>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c3be:	42a3      	cmp	r3, r4
 800c3c0:	bf04      	itt	eq
 800c3c2:	2301      	moveq	r3, #1
 800c3c4:	61a3      	streq	r3, [r4, #24]
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f000 f820 	bl	800c40c <__sfp>
 800c3cc:	6060      	str	r0, [r4, #4]
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f000 f81c 	bl	800c40c <__sfp>
 800c3d4:	60a0      	str	r0, [r4, #8]
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f000 f818 	bl	800c40c <__sfp>
 800c3dc:	2200      	movs	r2, #0
 800c3de:	60e0      	str	r0, [r4, #12]
 800c3e0:	2104      	movs	r1, #4
 800c3e2:	6860      	ldr	r0, [r4, #4]
 800c3e4:	f7ff ff82 	bl	800c2ec <std>
 800c3e8:	68a0      	ldr	r0, [r4, #8]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	2109      	movs	r1, #9
 800c3ee:	f7ff ff7d 	bl	800c2ec <std>
 800c3f2:	68e0      	ldr	r0, [r4, #12]
 800c3f4:	2202      	movs	r2, #2
 800c3f6:	2112      	movs	r1, #18
 800c3f8:	f7ff ff78 	bl	800c2ec <std>
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	61a3      	str	r3, [r4, #24]
 800c400:	e7d2      	b.n	800c3a8 <__sinit+0xc>
 800c402:	bf00      	nop
 800c404:	0800f49c 	.word	0x0800f49c
 800c408:	0800c335 	.word	0x0800c335

0800c40c <__sfp>:
 800c40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c40e:	4607      	mov	r7, r0
 800c410:	f7ff ffac 	bl	800c36c <__sfp_lock_acquire>
 800c414:	4b1e      	ldr	r3, [pc, #120]	; (800c490 <__sfp+0x84>)
 800c416:	681e      	ldr	r6, [r3, #0]
 800c418:	69b3      	ldr	r3, [r6, #24]
 800c41a:	b913      	cbnz	r3, 800c422 <__sfp+0x16>
 800c41c:	4630      	mov	r0, r6
 800c41e:	f7ff ffbd 	bl	800c39c <__sinit>
 800c422:	3648      	adds	r6, #72	; 0x48
 800c424:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c428:	3b01      	subs	r3, #1
 800c42a:	d503      	bpl.n	800c434 <__sfp+0x28>
 800c42c:	6833      	ldr	r3, [r6, #0]
 800c42e:	b30b      	cbz	r3, 800c474 <__sfp+0x68>
 800c430:	6836      	ldr	r6, [r6, #0]
 800c432:	e7f7      	b.n	800c424 <__sfp+0x18>
 800c434:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c438:	b9d5      	cbnz	r5, 800c470 <__sfp+0x64>
 800c43a:	4b16      	ldr	r3, [pc, #88]	; (800c494 <__sfp+0x88>)
 800c43c:	60e3      	str	r3, [r4, #12]
 800c43e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c442:	6665      	str	r5, [r4, #100]	; 0x64
 800c444:	f000 fbba 	bl	800cbbc <__retarget_lock_init_recursive>
 800c448:	f7ff ff96 	bl	800c378 <__sfp_lock_release>
 800c44c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c450:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c454:	6025      	str	r5, [r4, #0]
 800c456:	61a5      	str	r5, [r4, #24]
 800c458:	2208      	movs	r2, #8
 800c45a:	4629      	mov	r1, r5
 800c45c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c460:	f7fd fa6e 	bl	8009940 <memset>
 800c464:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c468:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c46c:	4620      	mov	r0, r4
 800c46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c470:	3468      	adds	r4, #104	; 0x68
 800c472:	e7d9      	b.n	800c428 <__sfp+0x1c>
 800c474:	2104      	movs	r1, #4
 800c476:	4638      	mov	r0, r7
 800c478:	f7ff ff62 	bl	800c340 <__sfmoreglue>
 800c47c:	4604      	mov	r4, r0
 800c47e:	6030      	str	r0, [r6, #0]
 800c480:	2800      	cmp	r0, #0
 800c482:	d1d5      	bne.n	800c430 <__sfp+0x24>
 800c484:	f7ff ff78 	bl	800c378 <__sfp_lock_release>
 800c488:	230c      	movs	r3, #12
 800c48a:	603b      	str	r3, [r7, #0]
 800c48c:	e7ee      	b.n	800c46c <__sfp+0x60>
 800c48e:	bf00      	nop
 800c490:	0800f49c 	.word	0x0800f49c
 800c494:	ffff0001 	.word	0xffff0001

0800c498 <_fwalk_reent>:
 800c498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c49c:	4606      	mov	r6, r0
 800c49e:	4688      	mov	r8, r1
 800c4a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c4a4:	2700      	movs	r7, #0
 800c4a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4aa:	f1b9 0901 	subs.w	r9, r9, #1
 800c4ae:	d505      	bpl.n	800c4bc <_fwalk_reent+0x24>
 800c4b0:	6824      	ldr	r4, [r4, #0]
 800c4b2:	2c00      	cmp	r4, #0
 800c4b4:	d1f7      	bne.n	800c4a6 <_fwalk_reent+0xe>
 800c4b6:	4638      	mov	r0, r7
 800c4b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4bc:	89ab      	ldrh	r3, [r5, #12]
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d907      	bls.n	800c4d2 <_fwalk_reent+0x3a>
 800c4c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	d003      	beq.n	800c4d2 <_fwalk_reent+0x3a>
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	47c0      	blx	r8
 800c4d0:	4307      	orrs	r7, r0
 800c4d2:	3568      	adds	r5, #104	; 0x68
 800c4d4:	e7e9      	b.n	800c4aa <_fwalk_reent+0x12>

0800c4d6 <rshift>:
 800c4d6:	6903      	ldr	r3, [r0, #16]
 800c4d8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c4dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4e0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c4e4:	f100 0414 	add.w	r4, r0, #20
 800c4e8:	dd45      	ble.n	800c576 <rshift+0xa0>
 800c4ea:	f011 011f 	ands.w	r1, r1, #31
 800c4ee:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c4f2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c4f6:	d10c      	bne.n	800c512 <rshift+0x3c>
 800c4f8:	f100 0710 	add.w	r7, r0, #16
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	42b1      	cmp	r1, r6
 800c500:	d334      	bcc.n	800c56c <rshift+0x96>
 800c502:	1a9b      	subs	r3, r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	1eea      	subs	r2, r5, #3
 800c508:	4296      	cmp	r6, r2
 800c50a:	bf38      	it	cc
 800c50c:	2300      	movcc	r3, #0
 800c50e:	4423      	add	r3, r4
 800c510:	e015      	b.n	800c53e <rshift+0x68>
 800c512:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c516:	f1c1 0820 	rsb	r8, r1, #32
 800c51a:	40cf      	lsrs	r7, r1
 800c51c:	f105 0e04 	add.w	lr, r5, #4
 800c520:	46a1      	mov	r9, r4
 800c522:	4576      	cmp	r6, lr
 800c524:	46f4      	mov	ip, lr
 800c526:	d815      	bhi.n	800c554 <rshift+0x7e>
 800c528:	1a9a      	subs	r2, r3, r2
 800c52a:	0092      	lsls	r2, r2, #2
 800c52c:	3a04      	subs	r2, #4
 800c52e:	3501      	adds	r5, #1
 800c530:	42ae      	cmp	r6, r5
 800c532:	bf38      	it	cc
 800c534:	2200      	movcc	r2, #0
 800c536:	18a3      	adds	r3, r4, r2
 800c538:	50a7      	str	r7, [r4, r2]
 800c53a:	b107      	cbz	r7, 800c53e <rshift+0x68>
 800c53c:	3304      	adds	r3, #4
 800c53e:	1b1a      	subs	r2, r3, r4
 800c540:	42a3      	cmp	r3, r4
 800c542:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c546:	bf08      	it	eq
 800c548:	2300      	moveq	r3, #0
 800c54a:	6102      	str	r2, [r0, #16]
 800c54c:	bf08      	it	eq
 800c54e:	6143      	streq	r3, [r0, #20]
 800c550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c554:	f8dc c000 	ldr.w	ip, [ip]
 800c558:	fa0c fc08 	lsl.w	ip, ip, r8
 800c55c:	ea4c 0707 	orr.w	r7, ip, r7
 800c560:	f849 7b04 	str.w	r7, [r9], #4
 800c564:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c568:	40cf      	lsrs	r7, r1
 800c56a:	e7da      	b.n	800c522 <rshift+0x4c>
 800c56c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c570:	f847 cf04 	str.w	ip, [r7, #4]!
 800c574:	e7c3      	b.n	800c4fe <rshift+0x28>
 800c576:	4623      	mov	r3, r4
 800c578:	e7e1      	b.n	800c53e <rshift+0x68>

0800c57a <__hexdig_fun>:
 800c57a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c57e:	2b09      	cmp	r3, #9
 800c580:	d802      	bhi.n	800c588 <__hexdig_fun+0xe>
 800c582:	3820      	subs	r0, #32
 800c584:	b2c0      	uxtb	r0, r0
 800c586:	4770      	bx	lr
 800c588:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c58c:	2b05      	cmp	r3, #5
 800c58e:	d801      	bhi.n	800c594 <__hexdig_fun+0x1a>
 800c590:	3847      	subs	r0, #71	; 0x47
 800c592:	e7f7      	b.n	800c584 <__hexdig_fun+0xa>
 800c594:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c598:	2b05      	cmp	r3, #5
 800c59a:	d801      	bhi.n	800c5a0 <__hexdig_fun+0x26>
 800c59c:	3827      	subs	r0, #39	; 0x27
 800c59e:	e7f1      	b.n	800c584 <__hexdig_fun+0xa>
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	4770      	bx	lr

0800c5a4 <__gethex>:
 800c5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a8:	ed2d 8b02 	vpush	{d8}
 800c5ac:	b089      	sub	sp, #36	; 0x24
 800c5ae:	ee08 0a10 	vmov	s16, r0
 800c5b2:	9304      	str	r3, [sp, #16]
 800c5b4:	4bb4      	ldr	r3, [pc, #720]	; (800c888 <__gethex+0x2e4>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	9301      	str	r3, [sp, #4]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	468b      	mov	fp, r1
 800c5be:	4690      	mov	r8, r2
 800c5c0:	f7f3 fe06 	bl	80001d0 <strlen>
 800c5c4:	9b01      	ldr	r3, [sp, #4]
 800c5c6:	f8db 2000 	ldr.w	r2, [fp]
 800c5ca:	4403      	add	r3, r0
 800c5cc:	4682      	mov	sl, r0
 800c5ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c5d2:	9305      	str	r3, [sp, #20]
 800c5d4:	1c93      	adds	r3, r2, #2
 800c5d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c5da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c5de:	32fe      	adds	r2, #254	; 0xfe
 800c5e0:	18d1      	adds	r1, r2, r3
 800c5e2:	461f      	mov	r7, r3
 800c5e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c5e8:	9100      	str	r1, [sp, #0]
 800c5ea:	2830      	cmp	r0, #48	; 0x30
 800c5ec:	d0f8      	beq.n	800c5e0 <__gethex+0x3c>
 800c5ee:	f7ff ffc4 	bl	800c57a <__hexdig_fun>
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	d13a      	bne.n	800c66e <__gethex+0xca>
 800c5f8:	9901      	ldr	r1, [sp, #4]
 800c5fa:	4652      	mov	r2, sl
 800c5fc:	4638      	mov	r0, r7
 800c5fe:	f001 fad6 	bl	800dbae <strncmp>
 800c602:	4605      	mov	r5, r0
 800c604:	2800      	cmp	r0, #0
 800c606:	d168      	bne.n	800c6da <__gethex+0x136>
 800c608:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c60c:	eb07 060a 	add.w	r6, r7, sl
 800c610:	f7ff ffb3 	bl	800c57a <__hexdig_fun>
 800c614:	2800      	cmp	r0, #0
 800c616:	d062      	beq.n	800c6de <__gethex+0x13a>
 800c618:	4633      	mov	r3, r6
 800c61a:	7818      	ldrb	r0, [r3, #0]
 800c61c:	2830      	cmp	r0, #48	; 0x30
 800c61e:	461f      	mov	r7, r3
 800c620:	f103 0301 	add.w	r3, r3, #1
 800c624:	d0f9      	beq.n	800c61a <__gethex+0x76>
 800c626:	f7ff ffa8 	bl	800c57a <__hexdig_fun>
 800c62a:	2301      	movs	r3, #1
 800c62c:	fab0 f480 	clz	r4, r0
 800c630:	0964      	lsrs	r4, r4, #5
 800c632:	4635      	mov	r5, r6
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	463a      	mov	r2, r7
 800c638:	4616      	mov	r6, r2
 800c63a:	3201      	adds	r2, #1
 800c63c:	7830      	ldrb	r0, [r6, #0]
 800c63e:	f7ff ff9c 	bl	800c57a <__hexdig_fun>
 800c642:	2800      	cmp	r0, #0
 800c644:	d1f8      	bne.n	800c638 <__gethex+0x94>
 800c646:	9901      	ldr	r1, [sp, #4]
 800c648:	4652      	mov	r2, sl
 800c64a:	4630      	mov	r0, r6
 800c64c:	f001 faaf 	bl	800dbae <strncmp>
 800c650:	b980      	cbnz	r0, 800c674 <__gethex+0xd0>
 800c652:	b94d      	cbnz	r5, 800c668 <__gethex+0xc4>
 800c654:	eb06 050a 	add.w	r5, r6, sl
 800c658:	462a      	mov	r2, r5
 800c65a:	4616      	mov	r6, r2
 800c65c:	3201      	adds	r2, #1
 800c65e:	7830      	ldrb	r0, [r6, #0]
 800c660:	f7ff ff8b 	bl	800c57a <__hexdig_fun>
 800c664:	2800      	cmp	r0, #0
 800c666:	d1f8      	bne.n	800c65a <__gethex+0xb6>
 800c668:	1bad      	subs	r5, r5, r6
 800c66a:	00ad      	lsls	r5, r5, #2
 800c66c:	e004      	b.n	800c678 <__gethex+0xd4>
 800c66e:	2400      	movs	r4, #0
 800c670:	4625      	mov	r5, r4
 800c672:	e7e0      	b.n	800c636 <__gethex+0x92>
 800c674:	2d00      	cmp	r5, #0
 800c676:	d1f7      	bne.n	800c668 <__gethex+0xc4>
 800c678:	7833      	ldrb	r3, [r6, #0]
 800c67a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c67e:	2b50      	cmp	r3, #80	; 0x50
 800c680:	d13b      	bne.n	800c6fa <__gethex+0x156>
 800c682:	7873      	ldrb	r3, [r6, #1]
 800c684:	2b2b      	cmp	r3, #43	; 0x2b
 800c686:	d02c      	beq.n	800c6e2 <__gethex+0x13e>
 800c688:	2b2d      	cmp	r3, #45	; 0x2d
 800c68a:	d02e      	beq.n	800c6ea <__gethex+0x146>
 800c68c:	1c71      	adds	r1, r6, #1
 800c68e:	f04f 0900 	mov.w	r9, #0
 800c692:	7808      	ldrb	r0, [r1, #0]
 800c694:	f7ff ff71 	bl	800c57a <__hexdig_fun>
 800c698:	1e43      	subs	r3, r0, #1
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	2b18      	cmp	r3, #24
 800c69e:	d82c      	bhi.n	800c6fa <__gethex+0x156>
 800c6a0:	f1a0 0210 	sub.w	r2, r0, #16
 800c6a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c6a8:	f7ff ff67 	bl	800c57a <__hexdig_fun>
 800c6ac:	1e43      	subs	r3, r0, #1
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	2b18      	cmp	r3, #24
 800c6b2:	d91d      	bls.n	800c6f0 <__gethex+0x14c>
 800c6b4:	f1b9 0f00 	cmp.w	r9, #0
 800c6b8:	d000      	beq.n	800c6bc <__gethex+0x118>
 800c6ba:	4252      	negs	r2, r2
 800c6bc:	4415      	add	r5, r2
 800c6be:	f8cb 1000 	str.w	r1, [fp]
 800c6c2:	b1e4      	cbz	r4, 800c6fe <__gethex+0x15a>
 800c6c4:	9b00      	ldr	r3, [sp, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	bf14      	ite	ne
 800c6ca:	2700      	movne	r7, #0
 800c6cc:	2706      	moveq	r7, #6
 800c6ce:	4638      	mov	r0, r7
 800c6d0:	b009      	add	sp, #36	; 0x24
 800c6d2:	ecbd 8b02 	vpop	{d8}
 800c6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6da:	463e      	mov	r6, r7
 800c6dc:	4625      	mov	r5, r4
 800c6de:	2401      	movs	r4, #1
 800c6e0:	e7ca      	b.n	800c678 <__gethex+0xd4>
 800c6e2:	f04f 0900 	mov.w	r9, #0
 800c6e6:	1cb1      	adds	r1, r6, #2
 800c6e8:	e7d3      	b.n	800c692 <__gethex+0xee>
 800c6ea:	f04f 0901 	mov.w	r9, #1
 800c6ee:	e7fa      	b.n	800c6e6 <__gethex+0x142>
 800c6f0:	230a      	movs	r3, #10
 800c6f2:	fb03 0202 	mla	r2, r3, r2, r0
 800c6f6:	3a10      	subs	r2, #16
 800c6f8:	e7d4      	b.n	800c6a4 <__gethex+0x100>
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	e7df      	b.n	800c6be <__gethex+0x11a>
 800c6fe:	1bf3      	subs	r3, r6, r7
 800c700:	3b01      	subs	r3, #1
 800c702:	4621      	mov	r1, r4
 800c704:	2b07      	cmp	r3, #7
 800c706:	dc0b      	bgt.n	800c720 <__gethex+0x17c>
 800c708:	ee18 0a10 	vmov	r0, s16
 800c70c:	f000 fa78 	bl	800cc00 <_Balloc>
 800c710:	4604      	mov	r4, r0
 800c712:	b940      	cbnz	r0, 800c726 <__gethex+0x182>
 800c714:	4b5d      	ldr	r3, [pc, #372]	; (800c88c <__gethex+0x2e8>)
 800c716:	4602      	mov	r2, r0
 800c718:	21de      	movs	r1, #222	; 0xde
 800c71a:	485d      	ldr	r0, [pc, #372]	; (800c890 <__gethex+0x2ec>)
 800c71c:	f001 fb3c 	bl	800dd98 <__assert_func>
 800c720:	3101      	adds	r1, #1
 800c722:	105b      	asrs	r3, r3, #1
 800c724:	e7ee      	b.n	800c704 <__gethex+0x160>
 800c726:	f100 0914 	add.w	r9, r0, #20
 800c72a:	f04f 0b00 	mov.w	fp, #0
 800c72e:	f1ca 0301 	rsb	r3, sl, #1
 800c732:	f8cd 9008 	str.w	r9, [sp, #8]
 800c736:	f8cd b000 	str.w	fp, [sp]
 800c73a:	9306      	str	r3, [sp, #24]
 800c73c:	42b7      	cmp	r7, r6
 800c73e:	d340      	bcc.n	800c7c2 <__gethex+0x21e>
 800c740:	9802      	ldr	r0, [sp, #8]
 800c742:	9b00      	ldr	r3, [sp, #0]
 800c744:	f840 3b04 	str.w	r3, [r0], #4
 800c748:	eba0 0009 	sub.w	r0, r0, r9
 800c74c:	1080      	asrs	r0, r0, #2
 800c74e:	0146      	lsls	r6, r0, #5
 800c750:	6120      	str	r0, [r4, #16]
 800c752:	4618      	mov	r0, r3
 800c754:	f000 fb46 	bl	800cde4 <__hi0bits>
 800c758:	1a30      	subs	r0, r6, r0
 800c75a:	f8d8 6000 	ldr.w	r6, [r8]
 800c75e:	42b0      	cmp	r0, r6
 800c760:	dd63      	ble.n	800c82a <__gethex+0x286>
 800c762:	1b87      	subs	r7, r0, r6
 800c764:	4639      	mov	r1, r7
 800c766:	4620      	mov	r0, r4
 800c768:	f000 feea 	bl	800d540 <__any_on>
 800c76c:	4682      	mov	sl, r0
 800c76e:	b1a8      	cbz	r0, 800c79c <__gethex+0x1f8>
 800c770:	1e7b      	subs	r3, r7, #1
 800c772:	1159      	asrs	r1, r3, #5
 800c774:	f003 021f 	and.w	r2, r3, #31
 800c778:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c77c:	f04f 0a01 	mov.w	sl, #1
 800c780:	fa0a f202 	lsl.w	r2, sl, r2
 800c784:	420a      	tst	r2, r1
 800c786:	d009      	beq.n	800c79c <__gethex+0x1f8>
 800c788:	4553      	cmp	r3, sl
 800c78a:	dd05      	ble.n	800c798 <__gethex+0x1f4>
 800c78c:	1eb9      	subs	r1, r7, #2
 800c78e:	4620      	mov	r0, r4
 800c790:	f000 fed6 	bl	800d540 <__any_on>
 800c794:	2800      	cmp	r0, #0
 800c796:	d145      	bne.n	800c824 <__gethex+0x280>
 800c798:	f04f 0a02 	mov.w	sl, #2
 800c79c:	4639      	mov	r1, r7
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f7ff fe99 	bl	800c4d6 <rshift>
 800c7a4:	443d      	add	r5, r7
 800c7a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7aa:	42ab      	cmp	r3, r5
 800c7ac:	da4c      	bge.n	800c848 <__gethex+0x2a4>
 800c7ae:	ee18 0a10 	vmov	r0, s16
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	f000 fa64 	bl	800cc80 <_Bfree>
 800c7b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	6013      	str	r3, [r2, #0]
 800c7be:	27a3      	movs	r7, #163	; 0xa3
 800c7c0:	e785      	b.n	800c6ce <__gethex+0x12a>
 800c7c2:	1e73      	subs	r3, r6, #1
 800c7c4:	9a05      	ldr	r2, [sp, #20]
 800c7c6:	9303      	str	r3, [sp, #12]
 800c7c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d019      	beq.n	800c804 <__gethex+0x260>
 800c7d0:	f1bb 0f20 	cmp.w	fp, #32
 800c7d4:	d107      	bne.n	800c7e6 <__gethex+0x242>
 800c7d6:	9b02      	ldr	r3, [sp, #8]
 800c7d8:	9a00      	ldr	r2, [sp, #0]
 800c7da:	f843 2b04 	str.w	r2, [r3], #4
 800c7de:	9302      	str	r3, [sp, #8]
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	9300      	str	r3, [sp, #0]
 800c7e4:	469b      	mov	fp, r3
 800c7e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c7ea:	f7ff fec6 	bl	800c57a <__hexdig_fun>
 800c7ee:	9b00      	ldr	r3, [sp, #0]
 800c7f0:	f000 000f 	and.w	r0, r0, #15
 800c7f4:	fa00 f00b 	lsl.w	r0, r0, fp
 800c7f8:	4303      	orrs	r3, r0
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	f10b 0b04 	add.w	fp, fp, #4
 800c800:	9b03      	ldr	r3, [sp, #12]
 800c802:	e00d      	b.n	800c820 <__gethex+0x27c>
 800c804:	9b03      	ldr	r3, [sp, #12]
 800c806:	9a06      	ldr	r2, [sp, #24]
 800c808:	4413      	add	r3, r2
 800c80a:	42bb      	cmp	r3, r7
 800c80c:	d3e0      	bcc.n	800c7d0 <__gethex+0x22c>
 800c80e:	4618      	mov	r0, r3
 800c810:	9901      	ldr	r1, [sp, #4]
 800c812:	9307      	str	r3, [sp, #28]
 800c814:	4652      	mov	r2, sl
 800c816:	f001 f9ca 	bl	800dbae <strncmp>
 800c81a:	9b07      	ldr	r3, [sp, #28]
 800c81c:	2800      	cmp	r0, #0
 800c81e:	d1d7      	bne.n	800c7d0 <__gethex+0x22c>
 800c820:	461e      	mov	r6, r3
 800c822:	e78b      	b.n	800c73c <__gethex+0x198>
 800c824:	f04f 0a03 	mov.w	sl, #3
 800c828:	e7b8      	b.n	800c79c <__gethex+0x1f8>
 800c82a:	da0a      	bge.n	800c842 <__gethex+0x29e>
 800c82c:	1a37      	subs	r7, r6, r0
 800c82e:	4621      	mov	r1, r4
 800c830:	ee18 0a10 	vmov	r0, s16
 800c834:	463a      	mov	r2, r7
 800c836:	f000 fc3f 	bl	800d0b8 <__lshift>
 800c83a:	1bed      	subs	r5, r5, r7
 800c83c:	4604      	mov	r4, r0
 800c83e:	f100 0914 	add.w	r9, r0, #20
 800c842:	f04f 0a00 	mov.w	sl, #0
 800c846:	e7ae      	b.n	800c7a6 <__gethex+0x202>
 800c848:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c84c:	42a8      	cmp	r0, r5
 800c84e:	dd72      	ble.n	800c936 <__gethex+0x392>
 800c850:	1b45      	subs	r5, r0, r5
 800c852:	42ae      	cmp	r6, r5
 800c854:	dc36      	bgt.n	800c8c4 <__gethex+0x320>
 800c856:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c85a:	2b02      	cmp	r3, #2
 800c85c:	d02a      	beq.n	800c8b4 <__gethex+0x310>
 800c85e:	2b03      	cmp	r3, #3
 800c860:	d02c      	beq.n	800c8bc <__gethex+0x318>
 800c862:	2b01      	cmp	r3, #1
 800c864:	d11c      	bne.n	800c8a0 <__gethex+0x2fc>
 800c866:	42ae      	cmp	r6, r5
 800c868:	d11a      	bne.n	800c8a0 <__gethex+0x2fc>
 800c86a:	2e01      	cmp	r6, #1
 800c86c:	d112      	bne.n	800c894 <__gethex+0x2f0>
 800c86e:	9a04      	ldr	r2, [sp, #16]
 800c870:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c874:	6013      	str	r3, [r2, #0]
 800c876:	2301      	movs	r3, #1
 800c878:	6123      	str	r3, [r4, #16]
 800c87a:	f8c9 3000 	str.w	r3, [r9]
 800c87e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c880:	2762      	movs	r7, #98	; 0x62
 800c882:	601c      	str	r4, [r3, #0]
 800c884:	e723      	b.n	800c6ce <__gethex+0x12a>
 800c886:	bf00      	nop
 800c888:	0800f78c 	.word	0x0800f78c
 800c88c:	0800f6b0 	.word	0x0800f6b0
 800c890:	0800f724 	.word	0x0800f724
 800c894:	1e71      	subs	r1, r6, #1
 800c896:	4620      	mov	r0, r4
 800c898:	f000 fe52 	bl	800d540 <__any_on>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	d1e6      	bne.n	800c86e <__gethex+0x2ca>
 800c8a0:	ee18 0a10 	vmov	r0, s16
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	f000 f9eb 	bl	800cc80 <_Bfree>
 800c8aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	6013      	str	r3, [r2, #0]
 800c8b0:	2750      	movs	r7, #80	; 0x50
 800c8b2:	e70c      	b.n	800c6ce <__gethex+0x12a>
 800c8b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1f2      	bne.n	800c8a0 <__gethex+0x2fc>
 800c8ba:	e7d8      	b.n	800c86e <__gethex+0x2ca>
 800c8bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1d5      	bne.n	800c86e <__gethex+0x2ca>
 800c8c2:	e7ed      	b.n	800c8a0 <__gethex+0x2fc>
 800c8c4:	1e6f      	subs	r7, r5, #1
 800c8c6:	f1ba 0f00 	cmp.w	sl, #0
 800c8ca:	d131      	bne.n	800c930 <__gethex+0x38c>
 800c8cc:	b127      	cbz	r7, 800c8d8 <__gethex+0x334>
 800c8ce:	4639      	mov	r1, r7
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f000 fe35 	bl	800d540 <__any_on>
 800c8d6:	4682      	mov	sl, r0
 800c8d8:	117b      	asrs	r3, r7, #5
 800c8da:	2101      	movs	r1, #1
 800c8dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c8e0:	f007 071f 	and.w	r7, r7, #31
 800c8e4:	fa01 f707 	lsl.w	r7, r1, r7
 800c8e8:	421f      	tst	r7, r3
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	bf18      	it	ne
 800c8f0:	f04a 0a02 	orrne.w	sl, sl, #2
 800c8f4:	1b76      	subs	r6, r6, r5
 800c8f6:	f7ff fdee 	bl	800c4d6 <rshift>
 800c8fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c8fe:	2702      	movs	r7, #2
 800c900:	f1ba 0f00 	cmp.w	sl, #0
 800c904:	d048      	beq.n	800c998 <__gethex+0x3f4>
 800c906:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c90a:	2b02      	cmp	r3, #2
 800c90c:	d015      	beq.n	800c93a <__gethex+0x396>
 800c90e:	2b03      	cmp	r3, #3
 800c910:	d017      	beq.n	800c942 <__gethex+0x39e>
 800c912:	2b01      	cmp	r3, #1
 800c914:	d109      	bne.n	800c92a <__gethex+0x386>
 800c916:	f01a 0f02 	tst.w	sl, #2
 800c91a:	d006      	beq.n	800c92a <__gethex+0x386>
 800c91c:	f8d9 0000 	ldr.w	r0, [r9]
 800c920:	ea4a 0a00 	orr.w	sl, sl, r0
 800c924:	f01a 0f01 	tst.w	sl, #1
 800c928:	d10e      	bne.n	800c948 <__gethex+0x3a4>
 800c92a:	f047 0710 	orr.w	r7, r7, #16
 800c92e:	e033      	b.n	800c998 <__gethex+0x3f4>
 800c930:	f04f 0a01 	mov.w	sl, #1
 800c934:	e7d0      	b.n	800c8d8 <__gethex+0x334>
 800c936:	2701      	movs	r7, #1
 800c938:	e7e2      	b.n	800c900 <__gethex+0x35c>
 800c93a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c93c:	f1c3 0301 	rsb	r3, r3, #1
 800c940:	9315      	str	r3, [sp, #84]	; 0x54
 800c942:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c944:	2b00      	cmp	r3, #0
 800c946:	d0f0      	beq.n	800c92a <__gethex+0x386>
 800c948:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c94c:	f104 0314 	add.w	r3, r4, #20
 800c950:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c954:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c958:	f04f 0c00 	mov.w	ip, #0
 800c95c:	4618      	mov	r0, r3
 800c95e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c962:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c966:	d01c      	beq.n	800c9a2 <__gethex+0x3fe>
 800c968:	3201      	adds	r2, #1
 800c96a:	6002      	str	r2, [r0, #0]
 800c96c:	2f02      	cmp	r7, #2
 800c96e:	f104 0314 	add.w	r3, r4, #20
 800c972:	d13f      	bne.n	800c9f4 <__gethex+0x450>
 800c974:	f8d8 2000 	ldr.w	r2, [r8]
 800c978:	3a01      	subs	r2, #1
 800c97a:	42b2      	cmp	r2, r6
 800c97c:	d10a      	bne.n	800c994 <__gethex+0x3f0>
 800c97e:	1171      	asrs	r1, r6, #5
 800c980:	2201      	movs	r2, #1
 800c982:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c986:	f006 061f 	and.w	r6, r6, #31
 800c98a:	fa02 f606 	lsl.w	r6, r2, r6
 800c98e:	421e      	tst	r6, r3
 800c990:	bf18      	it	ne
 800c992:	4617      	movne	r7, r2
 800c994:	f047 0720 	orr.w	r7, r7, #32
 800c998:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c99a:	601c      	str	r4, [r3, #0]
 800c99c:	9b04      	ldr	r3, [sp, #16]
 800c99e:	601d      	str	r5, [r3, #0]
 800c9a0:	e695      	b.n	800c6ce <__gethex+0x12a>
 800c9a2:	4299      	cmp	r1, r3
 800c9a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c9a8:	d8d8      	bhi.n	800c95c <__gethex+0x3b8>
 800c9aa:	68a3      	ldr	r3, [r4, #8]
 800c9ac:	459b      	cmp	fp, r3
 800c9ae:	db19      	blt.n	800c9e4 <__gethex+0x440>
 800c9b0:	6861      	ldr	r1, [r4, #4]
 800c9b2:	ee18 0a10 	vmov	r0, s16
 800c9b6:	3101      	adds	r1, #1
 800c9b8:	f000 f922 	bl	800cc00 <_Balloc>
 800c9bc:	4681      	mov	r9, r0
 800c9be:	b918      	cbnz	r0, 800c9c8 <__gethex+0x424>
 800c9c0:	4b1a      	ldr	r3, [pc, #104]	; (800ca2c <__gethex+0x488>)
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	2184      	movs	r1, #132	; 0x84
 800c9c6:	e6a8      	b.n	800c71a <__gethex+0x176>
 800c9c8:	6922      	ldr	r2, [r4, #16]
 800c9ca:	3202      	adds	r2, #2
 800c9cc:	f104 010c 	add.w	r1, r4, #12
 800c9d0:	0092      	lsls	r2, r2, #2
 800c9d2:	300c      	adds	r0, #12
 800c9d4:	f7fc ffa6 	bl	8009924 <memcpy>
 800c9d8:	4621      	mov	r1, r4
 800c9da:	ee18 0a10 	vmov	r0, s16
 800c9de:	f000 f94f 	bl	800cc80 <_Bfree>
 800c9e2:	464c      	mov	r4, r9
 800c9e4:	6923      	ldr	r3, [r4, #16]
 800c9e6:	1c5a      	adds	r2, r3, #1
 800c9e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9ec:	6122      	str	r2, [r4, #16]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	615a      	str	r2, [r3, #20]
 800c9f2:	e7bb      	b.n	800c96c <__gethex+0x3c8>
 800c9f4:	6922      	ldr	r2, [r4, #16]
 800c9f6:	455a      	cmp	r2, fp
 800c9f8:	dd0b      	ble.n	800ca12 <__gethex+0x46e>
 800c9fa:	2101      	movs	r1, #1
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f7ff fd6a 	bl	800c4d6 <rshift>
 800ca02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca06:	3501      	adds	r5, #1
 800ca08:	42ab      	cmp	r3, r5
 800ca0a:	f6ff aed0 	blt.w	800c7ae <__gethex+0x20a>
 800ca0e:	2701      	movs	r7, #1
 800ca10:	e7c0      	b.n	800c994 <__gethex+0x3f0>
 800ca12:	f016 061f 	ands.w	r6, r6, #31
 800ca16:	d0fa      	beq.n	800ca0e <__gethex+0x46a>
 800ca18:	4453      	add	r3, sl
 800ca1a:	f1c6 0620 	rsb	r6, r6, #32
 800ca1e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ca22:	f000 f9df 	bl	800cde4 <__hi0bits>
 800ca26:	42b0      	cmp	r0, r6
 800ca28:	dbe7      	blt.n	800c9fa <__gethex+0x456>
 800ca2a:	e7f0      	b.n	800ca0e <__gethex+0x46a>
 800ca2c:	0800f6b0 	.word	0x0800f6b0

0800ca30 <L_shift>:
 800ca30:	f1c2 0208 	rsb	r2, r2, #8
 800ca34:	0092      	lsls	r2, r2, #2
 800ca36:	b570      	push	{r4, r5, r6, lr}
 800ca38:	f1c2 0620 	rsb	r6, r2, #32
 800ca3c:	6843      	ldr	r3, [r0, #4]
 800ca3e:	6804      	ldr	r4, [r0, #0]
 800ca40:	fa03 f506 	lsl.w	r5, r3, r6
 800ca44:	432c      	orrs	r4, r5
 800ca46:	40d3      	lsrs	r3, r2
 800ca48:	6004      	str	r4, [r0, #0]
 800ca4a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca4e:	4288      	cmp	r0, r1
 800ca50:	d3f4      	bcc.n	800ca3c <L_shift+0xc>
 800ca52:	bd70      	pop	{r4, r5, r6, pc}

0800ca54 <__match>:
 800ca54:	b530      	push	{r4, r5, lr}
 800ca56:	6803      	ldr	r3, [r0, #0]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca5e:	b914      	cbnz	r4, 800ca66 <__match+0x12>
 800ca60:	6003      	str	r3, [r0, #0]
 800ca62:	2001      	movs	r0, #1
 800ca64:	bd30      	pop	{r4, r5, pc}
 800ca66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca6a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ca6e:	2d19      	cmp	r5, #25
 800ca70:	bf98      	it	ls
 800ca72:	3220      	addls	r2, #32
 800ca74:	42a2      	cmp	r2, r4
 800ca76:	d0f0      	beq.n	800ca5a <__match+0x6>
 800ca78:	2000      	movs	r0, #0
 800ca7a:	e7f3      	b.n	800ca64 <__match+0x10>

0800ca7c <__hexnan>:
 800ca7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca80:	680b      	ldr	r3, [r1, #0]
 800ca82:	115e      	asrs	r6, r3, #5
 800ca84:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca88:	f013 031f 	ands.w	r3, r3, #31
 800ca8c:	b087      	sub	sp, #28
 800ca8e:	bf18      	it	ne
 800ca90:	3604      	addne	r6, #4
 800ca92:	2500      	movs	r5, #0
 800ca94:	1f37      	subs	r7, r6, #4
 800ca96:	4690      	mov	r8, r2
 800ca98:	6802      	ldr	r2, [r0, #0]
 800ca9a:	9301      	str	r3, [sp, #4]
 800ca9c:	4682      	mov	sl, r0
 800ca9e:	f846 5c04 	str.w	r5, [r6, #-4]
 800caa2:	46b9      	mov	r9, r7
 800caa4:	463c      	mov	r4, r7
 800caa6:	9502      	str	r5, [sp, #8]
 800caa8:	46ab      	mov	fp, r5
 800caaa:	7851      	ldrb	r1, [r2, #1]
 800caac:	1c53      	adds	r3, r2, #1
 800caae:	9303      	str	r3, [sp, #12]
 800cab0:	b341      	cbz	r1, 800cb04 <__hexnan+0x88>
 800cab2:	4608      	mov	r0, r1
 800cab4:	9205      	str	r2, [sp, #20]
 800cab6:	9104      	str	r1, [sp, #16]
 800cab8:	f7ff fd5f 	bl	800c57a <__hexdig_fun>
 800cabc:	2800      	cmp	r0, #0
 800cabe:	d14f      	bne.n	800cb60 <__hexnan+0xe4>
 800cac0:	9904      	ldr	r1, [sp, #16]
 800cac2:	9a05      	ldr	r2, [sp, #20]
 800cac4:	2920      	cmp	r1, #32
 800cac6:	d818      	bhi.n	800cafa <__hexnan+0x7e>
 800cac8:	9b02      	ldr	r3, [sp, #8]
 800caca:	459b      	cmp	fp, r3
 800cacc:	dd13      	ble.n	800caf6 <__hexnan+0x7a>
 800cace:	454c      	cmp	r4, r9
 800cad0:	d206      	bcs.n	800cae0 <__hexnan+0x64>
 800cad2:	2d07      	cmp	r5, #7
 800cad4:	dc04      	bgt.n	800cae0 <__hexnan+0x64>
 800cad6:	462a      	mov	r2, r5
 800cad8:	4649      	mov	r1, r9
 800cada:	4620      	mov	r0, r4
 800cadc:	f7ff ffa8 	bl	800ca30 <L_shift>
 800cae0:	4544      	cmp	r4, r8
 800cae2:	d950      	bls.n	800cb86 <__hexnan+0x10a>
 800cae4:	2300      	movs	r3, #0
 800cae6:	f1a4 0904 	sub.w	r9, r4, #4
 800caea:	f844 3c04 	str.w	r3, [r4, #-4]
 800caee:	f8cd b008 	str.w	fp, [sp, #8]
 800caf2:	464c      	mov	r4, r9
 800caf4:	461d      	mov	r5, r3
 800caf6:	9a03      	ldr	r2, [sp, #12]
 800caf8:	e7d7      	b.n	800caaa <__hexnan+0x2e>
 800cafa:	2929      	cmp	r1, #41	; 0x29
 800cafc:	d156      	bne.n	800cbac <__hexnan+0x130>
 800cafe:	3202      	adds	r2, #2
 800cb00:	f8ca 2000 	str.w	r2, [sl]
 800cb04:	f1bb 0f00 	cmp.w	fp, #0
 800cb08:	d050      	beq.n	800cbac <__hexnan+0x130>
 800cb0a:	454c      	cmp	r4, r9
 800cb0c:	d206      	bcs.n	800cb1c <__hexnan+0xa0>
 800cb0e:	2d07      	cmp	r5, #7
 800cb10:	dc04      	bgt.n	800cb1c <__hexnan+0xa0>
 800cb12:	462a      	mov	r2, r5
 800cb14:	4649      	mov	r1, r9
 800cb16:	4620      	mov	r0, r4
 800cb18:	f7ff ff8a 	bl	800ca30 <L_shift>
 800cb1c:	4544      	cmp	r4, r8
 800cb1e:	d934      	bls.n	800cb8a <__hexnan+0x10e>
 800cb20:	f1a8 0204 	sub.w	r2, r8, #4
 800cb24:	4623      	mov	r3, r4
 800cb26:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb2a:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb2e:	429f      	cmp	r7, r3
 800cb30:	d2f9      	bcs.n	800cb26 <__hexnan+0xaa>
 800cb32:	1b3b      	subs	r3, r7, r4
 800cb34:	f023 0303 	bic.w	r3, r3, #3
 800cb38:	3304      	adds	r3, #4
 800cb3a:	3401      	adds	r4, #1
 800cb3c:	3e03      	subs	r6, #3
 800cb3e:	42b4      	cmp	r4, r6
 800cb40:	bf88      	it	hi
 800cb42:	2304      	movhi	r3, #4
 800cb44:	4443      	add	r3, r8
 800cb46:	2200      	movs	r2, #0
 800cb48:	f843 2b04 	str.w	r2, [r3], #4
 800cb4c:	429f      	cmp	r7, r3
 800cb4e:	d2fb      	bcs.n	800cb48 <__hexnan+0xcc>
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	b91b      	cbnz	r3, 800cb5c <__hexnan+0xe0>
 800cb54:	4547      	cmp	r7, r8
 800cb56:	d127      	bne.n	800cba8 <__hexnan+0x12c>
 800cb58:	2301      	movs	r3, #1
 800cb5a:	603b      	str	r3, [r7, #0]
 800cb5c:	2005      	movs	r0, #5
 800cb5e:	e026      	b.n	800cbae <__hexnan+0x132>
 800cb60:	3501      	adds	r5, #1
 800cb62:	2d08      	cmp	r5, #8
 800cb64:	f10b 0b01 	add.w	fp, fp, #1
 800cb68:	dd06      	ble.n	800cb78 <__hexnan+0xfc>
 800cb6a:	4544      	cmp	r4, r8
 800cb6c:	d9c3      	bls.n	800caf6 <__hexnan+0x7a>
 800cb6e:	2300      	movs	r3, #0
 800cb70:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb74:	2501      	movs	r5, #1
 800cb76:	3c04      	subs	r4, #4
 800cb78:	6822      	ldr	r2, [r4, #0]
 800cb7a:	f000 000f 	and.w	r0, r0, #15
 800cb7e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cb82:	6022      	str	r2, [r4, #0]
 800cb84:	e7b7      	b.n	800caf6 <__hexnan+0x7a>
 800cb86:	2508      	movs	r5, #8
 800cb88:	e7b5      	b.n	800caf6 <__hexnan+0x7a>
 800cb8a:	9b01      	ldr	r3, [sp, #4]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d0df      	beq.n	800cb50 <__hexnan+0xd4>
 800cb90:	f04f 32ff 	mov.w	r2, #4294967295
 800cb94:	f1c3 0320 	rsb	r3, r3, #32
 800cb98:	fa22 f303 	lsr.w	r3, r2, r3
 800cb9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cba0:	401a      	ands	r2, r3
 800cba2:	f846 2c04 	str.w	r2, [r6, #-4]
 800cba6:	e7d3      	b.n	800cb50 <__hexnan+0xd4>
 800cba8:	3f04      	subs	r7, #4
 800cbaa:	e7d1      	b.n	800cb50 <__hexnan+0xd4>
 800cbac:	2004      	movs	r0, #4
 800cbae:	b007      	add	sp, #28
 800cbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cbb4 <_localeconv_r>:
 800cbb4:	4800      	ldr	r0, [pc, #0]	; (800cbb8 <_localeconv_r+0x4>)
 800cbb6:	4770      	bx	lr
 800cbb8:	200001e0 	.word	0x200001e0

0800cbbc <__retarget_lock_init_recursive>:
 800cbbc:	4770      	bx	lr

0800cbbe <__retarget_lock_acquire_recursive>:
 800cbbe:	4770      	bx	lr

0800cbc0 <__retarget_lock_release_recursive>:
 800cbc0:	4770      	bx	lr

0800cbc2 <__ascii_mbtowc>:
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	b901      	cbnz	r1, 800cbc8 <__ascii_mbtowc+0x6>
 800cbc6:	a901      	add	r1, sp, #4
 800cbc8:	b142      	cbz	r2, 800cbdc <__ascii_mbtowc+0x1a>
 800cbca:	b14b      	cbz	r3, 800cbe0 <__ascii_mbtowc+0x1e>
 800cbcc:	7813      	ldrb	r3, [r2, #0]
 800cbce:	600b      	str	r3, [r1, #0]
 800cbd0:	7812      	ldrb	r2, [r2, #0]
 800cbd2:	1e10      	subs	r0, r2, #0
 800cbd4:	bf18      	it	ne
 800cbd6:	2001      	movne	r0, #1
 800cbd8:	b002      	add	sp, #8
 800cbda:	4770      	bx	lr
 800cbdc:	4610      	mov	r0, r2
 800cbde:	e7fb      	b.n	800cbd8 <__ascii_mbtowc+0x16>
 800cbe0:	f06f 0001 	mvn.w	r0, #1
 800cbe4:	e7f8      	b.n	800cbd8 <__ascii_mbtowc+0x16>
	...

0800cbe8 <__malloc_lock>:
 800cbe8:	4801      	ldr	r0, [pc, #4]	; (800cbf0 <__malloc_lock+0x8>)
 800cbea:	f7ff bfe8 	b.w	800cbbe <__retarget_lock_acquire_recursive>
 800cbee:	bf00      	nop
 800cbf0:	20000674 	.word	0x20000674

0800cbf4 <__malloc_unlock>:
 800cbf4:	4801      	ldr	r0, [pc, #4]	; (800cbfc <__malloc_unlock+0x8>)
 800cbf6:	f7ff bfe3 	b.w	800cbc0 <__retarget_lock_release_recursive>
 800cbfa:	bf00      	nop
 800cbfc:	20000674 	.word	0x20000674

0800cc00 <_Balloc>:
 800cc00:	b570      	push	{r4, r5, r6, lr}
 800cc02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc04:	4604      	mov	r4, r0
 800cc06:	460d      	mov	r5, r1
 800cc08:	b976      	cbnz	r6, 800cc28 <_Balloc+0x28>
 800cc0a:	2010      	movs	r0, #16
 800cc0c:	f7fc fe72 	bl	80098f4 <malloc>
 800cc10:	4602      	mov	r2, r0
 800cc12:	6260      	str	r0, [r4, #36]	; 0x24
 800cc14:	b920      	cbnz	r0, 800cc20 <_Balloc+0x20>
 800cc16:	4b18      	ldr	r3, [pc, #96]	; (800cc78 <_Balloc+0x78>)
 800cc18:	4818      	ldr	r0, [pc, #96]	; (800cc7c <_Balloc+0x7c>)
 800cc1a:	2166      	movs	r1, #102	; 0x66
 800cc1c:	f001 f8bc 	bl	800dd98 <__assert_func>
 800cc20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc24:	6006      	str	r6, [r0, #0]
 800cc26:	60c6      	str	r6, [r0, #12]
 800cc28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc2a:	68f3      	ldr	r3, [r6, #12]
 800cc2c:	b183      	cbz	r3, 800cc50 <_Balloc+0x50>
 800cc2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc36:	b9b8      	cbnz	r0, 800cc68 <_Balloc+0x68>
 800cc38:	2101      	movs	r1, #1
 800cc3a:	fa01 f605 	lsl.w	r6, r1, r5
 800cc3e:	1d72      	adds	r2, r6, #5
 800cc40:	0092      	lsls	r2, r2, #2
 800cc42:	4620      	mov	r0, r4
 800cc44:	f000 fc9d 	bl	800d582 <_calloc_r>
 800cc48:	b160      	cbz	r0, 800cc64 <_Balloc+0x64>
 800cc4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc4e:	e00e      	b.n	800cc6e <_Balloc+0x6e>
 800cc50:	2221      	movs	r2, #33	; 0x21
 800cc52:	2104      	movs	r1, #4
 800cc54:	4620      	mov	r0, r4
 800cc56:	f000 fc94 	bl	800d582 <_calloc_r>
 800cc5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc5c:	60f0      	str	r0, [r6, #12]
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e4      	bne.n	800cc2e <_Balloc+0x2e>
 800cc64:	2000      	movs	r0, #0
 800cc66:	bd70      	pop	{r4, r5, r6, pc}
 800cc68:	6802      	ldr	r2, [r0, #0]
 800cc6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc6e:	2300      	movs	r3, #0
 800cc70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc74:	e7f7      	b.n	800cc66 <_Balloc+0x66>
 800cc76:	bf00      	nop
 800cc78:	0800f63e 	.word	0x0800f63e
 800cc7c:	0800f7a0 	.word	0x0800f7a0

0800cc80 <_Bfree>:
 800cc80:	b570      	push	{r4, r5, r6, lr}
 800cc82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc84:	4605      	mov	r5, r0
 800cc86:	460c      	mov	r4, r1
 800cc88:	b976      	cbnz	r6, 800cca8 <_Bfree+0x28>
 800cc8a:	2010      	movs	r0, #16
 800cc8c:	f7fc fe32 	bl	80098f4 <malloc>
 800cc90:	4602      	mov	r2, r0
 800cc92:	6268      	str	r0, [r5, #36]	; 0x24
 800cc94:	b920      	cbnz	r0, 800cca0 <_Bfree+0x20>
 800cc96:	4b09      	ldr	r3, [pc, #36]	; (800ccbc <_Bfree+0x3c>)
 800cc98:	4809      	ldr	r0, [pc, #36]	; (800ccc0 <_Bfree+0x40>)
 800cc9a:	218a      	movs	r1, #138	; 0x8a
 800cc9c:	f001 f87c 	bl	800dd98 <__assert_func>
 800cca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cca4:	6006      	str	r6, [r0, #0]
 800cca6:	60c6      	str	r6, [r0, #12]
 800cca8:	b13c      	cbz	r4, 800ccba <_Bfree+0x3a>
 800ccaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ccac:	6862      	ldr	r2, [r4, #4]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccb4:	6021      	str	r1, [r4, #0]
 800ccb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccba:	bd70      	pop	{r4, r5, r6, pc}
 800ccbc:	0800f63e 	.word	0x0800f63e
 800ccc0:	0800f7a0 	.word	0x0800f7a0

0800ccc4 <__multadd>:
 800ccc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc8:	690d      	ldr	r5, [r1, #16]
 800ccca:	4607      	mov	r7, r0
 800cccc:	460c      	mov	r4, r1
 800ccce:	461e      	mov	r6, r3
 800ccd0:	f101 0c14 	add.w	ip, r1, #20
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	f8dc 3000 	ldr.w	r3, [ip]
 800ccda:	b299      	uxth	r1, r3
 800ccdc:	fb02 6101 	mla	r1, r2, r1, r6
 800cce0:	0c1e      	lsrs	r6, r3, #16
 800cce2:	0c0b      	lsrs	r3, r1, #16
 800cce4:	fb02 3306 	mla	r3, r2, r6, r3
 800cce8:	b289      	uxth	r1, r1
 800ccea:	3001      	adds	r0, #1
 800ccec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ccf0:	4285      	cmp	r5, r0
 800ccf2:	f84c 1b04 	str.w	r1, [ip], #4
 800ccf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ccfa:	dcec      	bgt.n	800ccd6 <__multadd+0x12>
 800ccfc:	b30e      	cbz	r6, 800cd42 <__multadd+0x7e>
 800ccfe:	68a3      	ldr	r3, [r4, #8]
 800cd00:	42ab      	cmp	r3, r5
 800cd02:	dc19      	bgt.n	800cd38 <__multadd+0x74>
 800cd04:	6861      	ldr	r1, [r4, #4]
 800cd06:	4638      	mov	r0, r7
 800cd08:	3101      	adds	r1, #1
 800cd0a:	f7ff ff79 	bl	800cc00 <_Balloc>
 800cd0e:	4680      	mov	r8, r0
 800cd10:	b928      	cbnz	r0, 800cd1e <__multadd+0x5a>
 800cd12:	4602      	mov	r2, r0
 800cd14:	4b0c      	ldr	r3, [pc, #48]	; (800cd48 <__multadd+0x84>)
 800cd16:	480d      	ldr	r0, [pc, #52]	; (800cd4c <__multadd+0x88>)
 800cd18:	21b5      	movs	r1, #181	; 0xb5
 800cd1a:	f001 f83d 	bl	800dd98 <__assert_func>
 800cd1e:	6922      	ldr	r2, [r4, #16]
 800cd20:	3202      	adds	r2, #2
 800cd22:	f104 010c 	add.w	r1, r4, #12
 800cd26:	0092      	lsls	r2, r2, #2
 800cd28:	300c      	adds	r0, #12
 800cd2a:	f7fc fdfb 	bl	8009924 <memcpy>
 800cd2e:	4621      	mov	r1, r4
 800cd30:	4638      	mov	r0, r7
 800cd32:	f7ff ffa5 	bl	800cc80 <_Bfree>
 800cd36:	4644      	mov	r4, r8
 800cd38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd3c:	3501      	adds	r5, #1
 800cd3e:	615e      	str	r6, [r3, #20]
 800cd40:	6125      	str	r5, [r4, #16]
 800cd42:	4620      	mov	r0, r4
 800cd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd48:	0800f6b0 	.word	0x0800f6b0
 800cd4c:	0800f7a0 	.word	0x0800f7a0

0800cd50 <__s2b>:
 800cd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd54:	460c      	mov	r4, r1
 800cd56:	4615      	mov	r5, r2
 800cd58:	461f      	mov	r7, r3
 800cd5a:	2209      	movs	r2, #9
 800cd5c:	3308      	adds	r3, #8
 800cd5e:	4606      	mov	r6, r0
 800cd60:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd64:	2100      	movs	r1, #0
 800cd66:	2201      	movs	r2, #1
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	db09      	blt.n	800cd80 <__s2b+0x30>
 800cd6c:	4630      	mov	r0, r6
 800cd6e:	f7ff ff47 	bl	800cc00 <_Balloc>
 800cd72:	b940      	cbnz	r0, 800cd86 <__s2b+0x36>
 800cd74:	4602      	mov	r2, r0
 800cd76:	4b19      	ldr	r3, [pc, #100]	; (800cddc <__s2b+0x8c>)
 800cd78:	4819      	ldr	r0, [pc, #100]	; (800cde0 <__s2b+0x90>)
 800cd7a:	21ce      	movs	r1, #206	; 0xce
 800cd7c:	f001 f80c 	bl	800dd98 <__assert_func>
 800cd80:	0052      	lsls	r2, r2, #1
 800cd82:	3101      	adds	r1, #1
 800cd84:	e7f0      	b.n	800cd68 <__s2b+0x18>
 800cd86:	9b08      	ldr	r3, [sp, #32]
 800cd88:	6143      	str	r3, [r0, #20]
 800cd8a:	2d09      	cmp	r5, #9
 800cd8c:	f04f 0301 	mov.w	r3, #1
 800cd90:	6103      	str	r3, [r0, #16]
 800cd92:	dd16      	ble.n	800cdc2 <__s2b+0x72>
 800cd94:	f104 0909 	add.w	r9, r4, #9
 800cd98:	46c8      	mov	r8, r9
 800cd9a:	442c      	add	r4, r5
 800cd9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cda0:	4601      	mov	r1, r0
 800cda2:	3b30      	subs	r3, #48	; 0x30
 800cda4:	220a      	movs	r2, #10
 800cda6:	4630      	mov	r0, r6
 800cda8:	f7ff ff8c 	bl	800ccc4 <__multadd>
 800cdac:	45a0      	cmp	r8, r4
 800cdae:	d1f5      	bne.n	800cd9c <__s2b+0x4c>
 800cdb0:	f1a5 0408 	sub.w	r4, r5, #8
 800cdb4:	444c      	add	r4, r9
 800cdb6:	1b2d      	subs	r5, r5, r4
 800cdb8:	1963      	adds	r3, r4, r5
 800cdba:	42bb      	cmp	r3, r7
 800cdbc:	db04      	blt.n	800cdc8 <__s2b+0x78>
 800cdbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdc2:	340a      	adds	r4, #10
 800cdc4:	2509      	movs	r5, #9
 800cdc6:	e7f6      	b.n	800cdb6 <__s2b+0x66>
 800cdc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cdcc:	4601      	mov	r1, r0
 800cdce:	3b30      	subs	r3, #48	; 0x30
 800cdd0:	220a      	movs	r2, #10
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	f7ff ff76 	bl	800ccc4 <__multadd>
 800cdd8:	e7ee      	b.n	800cdb8 <__s2b+0x68>
 800cdda:	bf00      	nop
 800cddc:	0800f6b0 	.word	0x0800f6b0
 800cde0:	0800f7a0 	.word	0x0800f7a0

0800cde4 <__hi0bits>:
 800cde4:	0c03      	lsrs	r3, r0, #16
 800cde6:	041b      	lsls	r3, r3, #16
 800cde8:	b9d3      	cbnz	r3, 800ce20 <__hi0bits+0x3c>
 800cdea:	0400      	lsls	r0, r0, #16
 800cdec:	2310      	movs	r3, #16
 800cdee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cdf2:	bf04      	itt	eq
 800cdf4:	0200      	lsleq	r0, r0, #8
 800cdf6:	3308      	addeq	r3, #8
 800cdf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cdfc:	bf04      	itt	eq
 800cdfe:	0100      	lsleq	r0, r0, #4
 800ce00:	3304      	addeq	r3, #4
 800ce02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ce06:	bf04      	itt	eq
 800ce08:	0080      	lsleq	r0, r0, #2
 800ce0a:	3302      	addeq	r3, #2
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	db05      	blt.n	800ce1c <__hi0bits+0x38>
 800ce10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ce14:	f103 0301 	add.w	r3, r3, #1
 800ce18:	bf08      	it	eq
 800ce1a:	2320      	moveq	r3, #32
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	4770      	bx	lr
 800ce20:	2300      	movs	r3, #0
 800ce22:	e7e4      	b.n	800cdee <__hi0bits+0xa>

0800ce24 <__lo0bits>:
 800ce24:	6803      	ldr	r3, [r0, #0]
 800ce26:	f013 0207 	ands.w	r2, r3, #7
 800ce2a:	4601      	mov	r1, r0
 800ce2c:	d00b      	beq.n	800ce46 <__lo0bits+0x22>
 800ce2e:	07da      	lsls	r2, r3, #31
 800ce30:	d423      	bmi.n	800ce7a <__lo0bits+0x56>
 800ce32:	0798      	lsls	r0, r3, #30
 800ce34:	bf49      	itett	mi
 800ce36:	085b      	lsrmi	r3, r3, #1
 800ce38:	089b      	lsrpl	r3, r3, #2
 800ce3a:	2001      	movmi	r0, #1
 800ce3c:	600b      	strmi	r3, [r1, #0]
 800ce3e:	bf5c      	itt	pl
 800ce40:	600b      	strpl	r3, [r1, #0]
 800ce42:	2002      	movpl	r0, #2
 800ce44:	4770      	bx	lr
 800ce46:	b298      	uxth	r0, r3
 800ce48:	b9a8      	cbnz	r0, 800ce76 <__lo0bits+0x52>
 800ce4a:	0c1b      	lsrs	r3, r3, #16
 800ce4c:	2010      	movs	r0, #16
 800ce4e:	b2da      	uxtb	r2, r3
 800ce50:	b90a      	cbnz	r2, 800ce56 <__lo0bits+0x32>
 800ce52:	3008      	adds	r0, #8
 800ce54:	0a1b      	lsrs	r3, r3, #8
 800ce56:	071a      	lsls	r2, r3, #28
 800ce58:	bf04      	itt	eq
 800ce5a:	091b      	lsreq	r3, r3, #4
 800ce5c:	3004      	addeq	r0, #4
 800ce5e:	079a      	lsls	r2, r3, #30
 800ce60:	bf04      	itt	eq
 800ce62:	089b      	lsreq	r3, r3, #2
 800ce64:	3002      	addeq	r0, #2
 800ce66:	07da      	lsls	r2, r3, #31
 800ce68:	d403      	bmi.n	800ce72 <__lo0bits+0x4e>
 800ce6a:	085b      	lsrs	r3, r3, #1
 800ce6c:	f100 0001 	add.w	r0, r0, #1
 800ce70:	d005      	beq.n	800ce7e <__lo0bits+0x5a>
 800ce72:	600b      	str	r3, [r1, #0]
 800ce74:	4770      	bx	lr
 800ce76:	4610      	mov	r0, r2
 800ce78:	e7e9      	b.n	800ce4e <__lo0bits+0x2a>
 800ce7a:	2000      	movs	r0, #0
 800ce7c:	4770      	bx	lr
 800ce7e:	2020      	movs	r0, #32
 800ce80:	4770      	bx	lr
	...

0800ce84 <__i2b>:
 800ce84:	b510      	push	{r4, lr}
 800ce86:	460c      	mov	r4, r1
 800ce88:	2101      	movs	r1, #1
 800ce8a:	f7ff feb9 	bl	800cc00 <_Balloc>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	b928      	cbnz	r0, 800ce9e <__i2b+0x1a>
 800ce92:	4b05      	ldr	r3, [pc, #20]	; (800cea8 <__i2b+0x24>)
 800ce94:	4805      	ldr	r0, [pc, #20]	; (800ceac <__i2b+0x28>)
 800ce96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ce9a:	f000 ff7d 	bl	800dd98 <__assert_func>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	6144      	str	r4, [r0, #20]
 800cea2:	6103      	str	r3, [r0, #16]
 800cea4:	bd10      	pop	{r4, pc}
 800cea6:	bf00      	nop
 800cea8:	0800f6b0 	.word	0x0800f6b0
 800ceac:	0800f7a0 	.word	0x0800f7a0

0800ceb0 <__multiply>:
 800ceb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb4:	4691      	mov	r9, r2
 800ceb6:	690a      	ldr	r2, [r1, #16]
 800ceb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	bfb8      	it	lt
 800cec0:	460b      	movlt	r3, r1
 800cec2:	460c      	mov	r4, r1
 800cec4:	bfbc      	itt	lt
 800cec6:	464c      	movlt	r4, r9
 800cec8:	4699      	movlt	r9, r3
 800ceca:	6927      	ldr	r7, [r4, #16]
 800cecc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ced0:	68a3      	ldr	r3, [r4, #8]
 800ced2:	6861      	ldr	r1, [r4, #4]
 800ced4:	eb07 060a 	add.w	r6, r7, sl
 800ced8:	42b3      	cmp	r3, r6
 800ceda:	b085      	sub	sp, #20
 800cedc:	bfb8      	it	lt
 800cede:	3101      	addlt	r1, #1
 800cee0:	f7ff fe8e 	bl	800cc00 <_Balloc>
 800cee4:	b930      	cbnz	r0, 800cef4 <__multiply+0x44>
 800cee6:	4602      	mov	r2, r0
 800cee8:	4b44      	ldr	r3, [pc, #272]	; (800cffc <__multiply+0x14c>)
 800ceea:	4845      	ldr	r0, [pc, #276]	; (800d000 <__multiply+0x150>)
 800ceec:	f240 115d 	movw	r1, #349	; 0x15d
 800cef0:	f000 ff52 	bl	800dd98 <__assert_func>
 800cef4:	f100 0514 	add.w	r5, r0, #20
 800cef8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cefc:	462b      	mov	r3, r5
 800cefe:	2200      	movs	r2, #0
 800cf00:	4543      	cmp	r3, r8
 800cf02:	d321      	bcc.n	800cf48 <__multiply+0x98>
 800cf04:	f104 0314 	add.w	r3, r4, #20
 800cf08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cf0c:	f109 0314 	add.w	r3, r9, #20
 800cf10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cf14:	9202      	str	r2, [sp, #8]
 800cf16:	1b3a      	subs	r2, r7, r4
 800cf18:	3a15      	subs	r2, #21
 800cf1a:	f022 0203 	bic.w	r2, r2, #3
 800cf1e:	3204      	adds	r2, #4
 800cf20:	f104 0115 	add.w	r1, r4, #21
 800cf24:	428f      	cmp	r7, r1
 800cf26:	bf38      	it	cc
 800cf28:	2204      	movcc	r2, #4
 800cf2a:	9201      	str	r2, [sp, #4]
 800cf2c:	9a02      	ldr	r2, [sp, #8]
 800cf2e:	9303      	str	r3, [sp, #12]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d80c      	bhi.n	800cf4e <__multiply+0x9e>
 800cf34:	2e00      	cmp	r6, #0
 800cf36:	dd03      	ble.n	800cf40 <__multiply+0x90>
 800cf38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d05a      	beq.n	800cff6 <__multiply+0x146>
 800cf40:	6106      	str	r6, [r0, #16]
 800cf42:	b005      	add	sp, #20
 800cf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf48:	f843 2b04 	str.w	r2, [r3], #4
 800cf4c:	e7d8      	b.n	800cf00 <__multiply+0x50>
 800cf4e:	f8b3 a000 	ldrh.w	sl, [r3]
 800cf52:	f1ba 0f00 	cmp.w	sl, #0
 800cf56:	d024      	beq.n	800cfa2 <__multiply+0xf2>
 800cf58:	f104 0e14 	add.w	lr, r4, #20
 800cf5c:	46a9      	mov	r9, r5
 800cf5e:	f04f 0c00 	mov.w	ip, #0
 800cf62:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cf66:	f8d9 1000 	ldr.w	r1, [r9]
 800cf6a:	fa1f fb82 	uxth.w	fp, r2
 800cf6e:	b289      	uxth	r1, r1
 800cf70:	fb0a 110b 	mla	r1, sl, fp, r1
 800cf74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cf78:	f8d9 2000 	ldr.w	r2, [r9]
 800cf7c:	4461      	add	r1, ip
 800cf7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf82:	fb0a c20b 	mla	r2, sl, fp, ip
 800cf86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cf8a:	b289      	uxth	r1, r1
 800cf8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cf90:	4577      	cmp	r7, lr
 800cf92:	f849 1b04 	str.w	r1, [r9], #4
 800cf96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf9a:	d8e2      	bhi.n	800cf62 <__multiply+0xb2>
 800cf9c:	9a01      	ldr	r2, [sp, #4]
 800cf9e:	f845 c002 	str.w	ip, [r5, r2]
 800cfa2:	9a03      	ldr	r2, [sp, #12]
 800cfa4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cfa8:	3304      	adds	r3, #4
 800cfaa:	f1b9 0f00 	cmp.w	r9, #0
 800cfae:	d020      	beq.n	800cff2 <__multiply+0x142>
 800cfb0:	6829      	ldr	r1, [r5, #0]
 800cfb2:	f104 0c14 	add.w	ip, r4, #20
 800cfb6:	46ae      	mov	lr, r5
 800cfb8:	f04f 0a00 	mov.w	sl, #0
 800cfbc:	f8bc b000 	ldrh.w	fp, [ip]
 800cfc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cfc4:	fb09 220b 	mla	r2, r9, fp, r2
 800cfc8:	4492      	add	sl, r2
 800cfca:	b289      	uxth	r1, r1
 800cfcc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cfd0:	f84e 1b04 	str.w	r1, [lr], #4
 800cfd4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cfd8:	f8be 1000 	ldrh.w	r1, [lr]
 800cfdc:	0c12      	lsrs	r2, r2, #16
 800cfde:	fb09 1102 	mla	r1, r9, r2, r1
 800cfe2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cfe6:	4567      	cmp	r7, ip
 800cfe8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cfec:	d8e6      	bhi.n	800cfbc <__multiply+0x10c>
 800cfee:	9a01      	ldr	r2, [sp, #4]
 800cff0:	50a9      	str	r1, [r5, r2]
 800cff2:	3504      	adds	r5, #4
 800cff4:	e79a      	b.n	800cf2c <__multiply+0x7c>
 800cff6:	3e01      	subs	r6, #1
 800cff8:	e79c      	b.n	800cf34 <__multiply+0x84>
 800cffa:	bf00      	nop
 800cffc:	0800f6b0 	.word	0x0800f6b0
 800d000:	0800f7a0 	.word	0x0800f7a0

0800d004 <__pow5mult>:
 800d004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d008:	4615      	mov	r5, r2
 800d00a:	f012 0203 	ands.w	r2, r2, #3
 800d00e:	4606      	mov	r6, r0
 800d010:	460f      	mov	r7, r1
 800d012:	d007      	beq.n	800d024 <__pow5mult+0x20>
 800d014:	4c25      	ldr	r4, [pc, #148]	; (800d0ac <__pow5mult+0xa8>)
 800d016:	3a01      	subs	r2, #1
 800d018:	2300      	movs	r3, #0
 800d01a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d01e:	f7ff fe51 	bl	800ccc4 <__multadd>
 800d022:	4607      	mov	r7, r0
 800d024:	10ad      	asrs	r5, r5, #2
 800d026:	d03d      	beq.n	800d0a4 <__pow5mult+0xa0>
 800d028:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d02a:	b97c      	cbnz	r4, 800d04c <__pow5mult+0x48>
 800d02c:	2010      	movs	r0, #16
 800d02e:	f7fc fc61 	bl	80098f4 <malloc>
 800d032:	4602      	mov	r2, r0
 800d034:	6270      	str	r0, [r6, #36]	; 0x24
 800d036:	b928      	cbnz	r0, 800d044 <__pow5mult+0x40>
 800d038:	4b1d      	ldr	r3, [pc, #116]	; (800d0b0 <__pow5mult+0xac>)
 800d03a:	481e      	ldr	r0, [pc, #120]	; (800d0b4 <__pow5mult+0xb0>)
 800d03c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d040:	f000 feaa 	bl	800dd98 <__assert_func>
 800d044:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d048:	6004      	str	r4, [r0, #0]
 800d04a:	60c4      	str	r4, [r0, #12]
 800d04c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d050:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d054:	b94c      	cbnz	r4, 800d06a <__pow5mult+0x66>
 800d056:	f240 2171 	movw	r1, #625	; 0x271
 800d05a:	4630      	mov	r0, r6
 800d05c:	f7ff ff12 	bl	800ce84 <__i2b>
 800d060:	2300      	movs	r3, #0
 800d062:	f8c8 0008 	str.w	r0, [r8, #8]
 800d066:	4604      	mov	r4, r0
 800d068:	6003      	str	r3, [r0, #0]
 800d06a:	f04f 0900 	mov.w	r9, #0
 800d06e:	07eb      	lsls	r3, r5, #31
 800d070:	d50a      	bpl.n	800d088 <__pow5mult+0x84>
 800d072:	4639      	mov	r1, r7
 800d074:	4622      	mov	r2, r4
 800d076:	4630      	mov	r0, r6
 800d078:	f7ff ff1a 	bl	800ceb0 <__multiply>
 800d07c:	4639      	mov	r1, r7
 800d07e:	4680      	mov	r8, r0
 800d080:	4630      	mov	r0, r6
 800d082:	f7ff fdfd 	bl	800cc80 <_Bfree>
 800d086:	4647      	mov	r7, r8
 800d088:	106d      	asrs	r5, r5, #1
 800d08a:	d00b      	beq.n	800d0a4 <__pow5mult+0xa0>
 800d08c:	6820      	ldr	r0, [r4, #0]
 800d08e:	b938      	cbnz	r0, 800d0a0 <__pow5mult+0x9c>
 800d090:	4622      	mov	r2, r4
 800d092:	4621      	mov	r1, r4
 800d094:	4630      	mov	r0, r6
 800d096:	f7ff ff0b 	bl	800ceb0 <__multiply>
 800d09a:	6020      	str	r0, [r4, #0]
 800d09c:	f8c0 9000 	str.w	r9, [r0]
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	e7e4      	b.n	800d06e <__pow5mult+0x6a>
 800d0a4:	4638      	mov	r0, r7
 800d0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0aa:	bf00      	nop
 800d0ac:	0800f8f0 	.word	0x0800f8f0
 800d0b0:	0800f63e 	.word	0x0800f63e
 800d0b4:	0800f7a0 	.word	0x0800f7a0

0800d0b8 <__lshift>:
 800d0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0bc:	460c      	mov	r4, r1
 800d0be:	6849      	ldr	r1, [r1, #4]
 800d0c0:	6923      	ldr	r3, [r4, #16]
 800d0c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d0c6:	68a3      	ldr	r3, [r4, #8]
 800d0c8:	4607      	mov	r7, r0
 800d0ca:	4691      	mov	r9, r2
 800d0cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d0d0:	f108 0601 	add.w	r6, r8, #1
 800d0d4:	42b3      	cmp	r3, r6
 800d0d6:	db0b      	blt.n	800d0f0 <__lshift+0x38>
 800d0d8:	4638      	mov	r0, r7
 800d0da:	f7ff fd91 	bl	800cc00 <_Balloc>
 800d0de:	4605      	mov	r5, r0
 800d0e0:	b948      	cbnz	r0, 800d0f6 <__lshift+0x3e>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	4b2a      	ldr	r3, [pc, #168]	; (800d190 <__lshift+0xd8>)
 800d0e6:	482b      	ldr	r0, [pc, #172]	; (800d194 <__lshift+0xdc>)
 800d0e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d0ec:	f000 fe54 	bl	800dd98 <__assert_func>
 800d0f0:	3101      	adds	r1, #1
 800d0f2:	005b      	lsls	r3, r3, #1
 800d0f4:	e7ee      	b.n	800d0d4 <__lshift+0x1c>
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	f100 0114 	add.w	r1, r0, #20
 800d0fc:	f100 0210 	add.w	r2, r0, #16
 800d100:	4618      	mov	r0, r3
 800d102:	4553      	cmp	r3, sl
 800d104:	db37      	blt.n	800d176 <__lshift+0xbe>
 800d106:	6920      	ldr	r0, [r4, #16]
 800d108:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d10c:	f104 0314 	add.w	r3, r4, #20
 800d110:	f019 091f 	ands.w	r9, r9, #31
 800d114:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d118:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d11c:	d02f      	beq.n	800d17e <__lshift+0xc6>
 800d11e:	f1c9 0e20 	rsb	lr, r9, #32
 800d122:	468a      	mov	sl, r1
 800d124:	f04f 0c00 	mov.w	ip, #0
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	fa02 f209 	lsl.w	r2, r2, r9
 800d12e:	ea42 020c 	orr.w	r2, r2, ip
 800d132:	f84a 2b04 	str.w	r2, [sl], #4
 800d136:	f853 2b04 	ldr.w	r2, [r3], #4
 800d13a:	4298      	cmp	r0, r3
 800d13c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d140:	d8f2      	bhi.n	800d128 <__lshift+0x70>
 800d142:	1b03      	subs	r3, r0, r4
 800d144:	3b15      	subs	r3, #21
 800d146:	f023 0303 	bic.w	r3, r3, #3
 800d14a:	3304      	adds	r3, #4
 800d14c:	f104 0215 	add.w	r2, r4, #21
 800d150:	4290      	cmp	r0, r2
 800d152:	bf38      	it	cc
 800d154:	2304      	movcc	r3, #4
 800d156:	f841 c003 	str.w	ip, [r1, r3]
 800d15a:	f1bc 0f00 	cmp.w	ip, #0
 800d15e:	d001      	beq.n	800d164 <__lshift+0xac>
 800d160:	f108 0602 	add.w	r6, r8, #2
 800d164:	3e01      	subs	r6, #1
 800d166:	4638      	mov	r0, r7
 800d168:	612e      	str	r6, [r5, #16]
 800d16a:	4621      	mov	r1, r4
 800d16c:	f7ff fd88 	bl	800cc80 <_Bfree>
 800d170:	4628      	mov	r0, r5
 800d172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d176:	f842 0f04 	str.w	r0, [r2, #4]!
 800d17a:	3301      	adds	r3, #1
 800d17c:	e7c1      	b.n	800d102 <__lshift+0x4a>
 800d17e:	3904      	subs	r1, #4
 800d180:	f853 2b04 	ldr.w	r2, [r3], #4
 800d184:	f841 2f04 	str.w	r2, [r1, #4]!
 800d188:	4298      	cmp	r0, r3
 800d18a:	d8f9      	bhi.n	800d180 <__lshift+0xc8>
 800d18c:	e7ea      	b.n	800d164 <__lshift+0xac>
 800d18e:	bf00      	nop
 800d190:	0800f6b0 	.word	0x0800f6b0
 800d194:	0800f7a0 	.word	0x0800f7a0

0800d198 <__mcmp>:
 800d198:	b530      	push	{r4, r5, lr}
 800d19a:	6902      	ldr	r2, [r0, #16]
 800d19c:	690c      	ldr	r4, [r1, #16]
 800d19e:	1b12      	subs	r2, r2, r4
 800d1a0:	d10e      	bne.n	800d1c0 <__mcmp+0x28>
 800d1a2:	f100 0314 	add.w	r3, r0, #20
 800d1a6:	3114      	adds	r1, #20
 800d1a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d1ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d1b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d1b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d1b8:	42a5      	cmp	r5, r4
 800d1ba:	d003      	beq.n	800d1c4 <__mcmp+0x2c>
 800d1bc:	d305      	bcc.n	800d1ca <__mcmp+0x32>
 800d1be:	2201      	movs	r2, #1
 800d1c0:	4610      	mov	r0, r2
 800d1c2:	bd30      	pop	{r4, r5, pc}
 800d1c4:	4283      	cmp	r3, r0
 800d1c6:	d3f3      	bcc.n	800d1b0 <__mcmp+0x18>
 800d1c8:	e7fa      	b.n	800d1c0 <__mcmp+0x28>
 800d1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ce:	e7f7      	b.n	800d1c0 <__mcmp+0x28>

0800d1d0 <__mdiff>:
 800d1d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d4:	460c      	mov	r4, r1
 800d1d6:	4606      	mov	r6, r0
 800d1d8:	4611      	mov	r1, r2
 800d1da:	4620      	mov	r0, r4
 800d1dc:	4690      	mov	r8, r2
 800d1de:	f7ff ffdb 	bl	800d198 <__mcmp>
 800d1e2:	1e05      	subs	r5, r0, #0
 800d1e4:	d110      	bne.n	800d208 <__mdiff+0x38>
 800d1e6:	4629      	mov	r1, r5
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	f7ff fd09 	bl	800cc00 <_Balloc>
 800d1ee:	b930      	cbnz	r0, 800d1fe <__mdiff+0x2e>
 800d1f0:	4b3a      	ldr	r3, [pc, #232]	; (800d2dc <__mdiff+0x10c>)
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	f240 2132 	movw	r1, #562	; 0x232
 800d1f8:	4839      	ldr	r0, [pc, #228]	; (800d2e0 <__mdiff+0x110>)
 800d1fa:	f000 fdcd 	bl	800dd98 <__assert_func>
 800d1fe:	2301      	movs	r3, #1
 800d200:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d208:	bfa4      	itt	ge
 800d20a:	4643      	movge	r3, r8
 800d20c:	46a0      	movge	r8, r4
 800d20e:	4630      	mov	r0, r6
 800d210:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d214:	bfa6      	itte	ge
 800d216:	461c      	movge	r4, r3
 800d218:	2500      	movge	r5, #0
 800d21a:	2501      	movlt	r5, #1
 800d21c:	f7ff fcf0 	bl	800cc00 <_Balloc>
 800d220:	b920      	cbnz	r0, 800d22c <__mdiff+0x5c>
 800d222:	4b2e      	ldr	r3, [pc, #184]	; (800d2dc <__mdiff+0x10c>)
 800d224:	4602      	mov	r2, r0
 800d226:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d22a:	e7e5      	b.n	800d1f8 <__mdiff+0x28>
 800d22c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d230:	6926      	ldr	r6, [r4, #16]
 800d232:	60c5      	str	r5, [r0, #12]
 800d234:	f104 0914 	add.w	r9, r4, #20
 800d238:	f108 0514 	add.w	r5, r8, #20
 800d23c:	f100 0e14 	add.w	lr, r0, #20
 800d240:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d244:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d248:	f108 0210 	add.w	r2, r8, #16
 800d24c:	46f2      	mov	sl, lr
 800d24e:	2100      	movs	r1, #0
 800d250:	f859 3b04 	ldr.w	r3, [r9], #4
 800d254:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d258:	fa1f f883 	uxth.w	r8, r3
 800d25c:	fa11 f18b 	uxtah	r1, r1, fp
 800d260:	0c1b      	lsrs	r3, r3, #16
 800d262:	eba1 0808 	sub.w	r8, r1, r8
 800d266:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d26a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d26e:	fa1f f888 	uxth.w	r8, r8
 800d272:	1419      	asrs	r1, r3, #16
 800d274:	454e      	cmp	r6, r9
 800d276:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d27a:	f84a 3b04 	str.w	r3, [sl], #4
 800d27e:	d8e7      	bhi.n	800d250 <__mdiff+0x80>
 800d280:	1b33      	subs	r3, r6, r4
 800d282:	3b15      	subs	r3, #21
 800d284:	f023 0303 	bic.w	r3, r3, #3
 800d288:	3304      	adds	r3, #4
 800d28a:	3415      	adds	r4, #21
 800d28c:	42a6      	cmp	r6, r4
 800d28e:	bf38      	it	cc
 800d290:	2304      	movcc	r3, #4
 800d292:	441d      	add	r5, r3
 800d294:	4473      	add	r3, lr
 800d296:	469e      	mov	lr, r3
 800d298:	462e      	mov	r6, r5
 800d29a:	4566      	cmp	r6, ip
 800d29c:	d30e      	bcc.n	800d2bc <__mdiff+0xec>
 800d29e:	f10c 0203 	add.w	r2, ip, #3
 800d2a2:	1b52      	subs	r2, r2, r5
 800d2a4:	f022 0203 	bic.w	r2, r2, #3
 800d2a8:	3d03      	subs	r5, #3
 800d2aa:	45ac      	cmp	ip, r5
 800d2ac:	bf38      	it	cc
 800d2ae:	2200      	movcc	r2, #0
 800d2b0:	441a      	add	r2, r3
 800d2b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d2b6:	b17b      	cbz	r3, 800d2d8 <__mdiff+0x108>
 800d2b8:	6107      	str	r7, [r0, #16]
 800d2ba:	e7a3      	b.n	800d204 <__mdiff+0x34>
 800d2bc:	f856 8b04 	ldr.w	r8, [r6], #4
 800d2c0:	fa11 f288 	uxtah	r2, r1, r8
 800d2c4:	1414      	asrs	r4, r2, #16
 800d2c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d2ca:	b292      	uxth	r2, r2
 800d2cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d2d0:	f84e 2b04 	str.w	r2, [lr], #4
 800d2d4:	1421      	asrs	r1, r4, #16
 800d2d6:	e7e0      	b.n	800d29a <__mdiff+0xca>
 800d2d8:	3f01      	subs	r7, #1
 800d2da:	e7ea      	b.n	800d2b2 <__mdiff+0xe2>
 800d2dc:	0800f6b0 	.word	0x0800f6b0
 800d2e0:	0800f7a0 	.word	0x0800f7a0

0800d2e4 <__ulp>:
 800d2e4:	b082      	sub	sp, #8
 800d2e6:	ed8d 0b00 	vstr	d0, [sp]
 800d2ea:	9b01      	ldr	r3, [sp, #4]
 800d2ec:	4912      	ldr	r1, [pc, #72]	; (800d338 <__ulp+0x54>)
 800d2ee:	4019      	ands	r1, r3
 800d2f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d2f4:	2900      	cmp	r1, #0
 800d2f6:	dd05      	ble.n	800d304 <__ulp+0x20>
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	ec43 2b10 	vmov	d0, r2, r3
 800d300:	b002      	add	sp, #8
 800d302:	4770      	bx	lr
 800d304:	4249      	negs	r1, r1
 800d306:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d30a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d30e:	f04f 0200 	mov.w	r2, #0
 800d312:	f04f 0300 	mov.w	r3, #0
 800d316:	da04      	bge.n	800d322 <__ulp+0x3e>
 800d318:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d31c:	fa41 f300 	asr.w	r3, r1, r0
 800d320:	e7ec      	b.n	800d2fc <__ulp+0x18>
 800d322:	f1a0 0114 	sub.w	r1, r0, #20
 800d326:	291e      	cmp	r1, #30
 800d328:	bfda      	itte	le
 800d32a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d32e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d332:	2101      	movgt	r1, #1
 800d334:	460a      	mov	r2, r1
 800d336:	e7e1      	b.n	800d2fc <__ulp+0x18>
 800d338:	7ff00000 	.word	0x7ff00000

0800d33c <__b2d>:
 800d33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33e:	6905      	ldr	r5, [r0, #16]
 800d340:	f100 0714 	add.w	r7, r0, #20
 800d344:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d348:	1f2e      	subs	r6, r5, #4
 800d34a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d34e:	4620      	mov	r0, r4
 800d350:	f7ff fd48 	bl	800cde4 <__hi0bits>
 800d354:	f1c0 0320 	rsb	r3, r0, #32
 800d358:	280a      	cmp	r0, #10
 800d35a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d3d8 <__b2d+0x9c>
 800d35e:	600b      	str	r3, [r1, #0]
 800d360:	dc14      	bgt.n	800d38c <__b2d+0x50>
 800d362:	f1c0 0e0b 	rsb	lr, r0, #11
 800d366:	fa24 f10e 	lsr.w	r1, r4, lr
 800d36a:	42b7      	cmp	r7, r6
 800d36c:	ea41 030c 	orr.w	r3, r1, ip
 800d370:	bf34      	ite	cc
 800d372:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d376:	2100      	movcs	r1, #0
 800d378:	3015      	adds	r0, #21
 800d37a:	fa04 f000 	lsl.w	r0, r4, r0
 800d37e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d382:	ea40 0201 	orr.w	r2, r0, r1
 800d386:	ec43 2b10 	vmov	d0, r2, r3
 800d38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d38c:	42b7      	cmp	r7, r6
 800d38e:	bf3a      	itte	cc
 800d390:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d394:	f1a5 0608 	subcc.w	r6, r5, #8
 800d398:	2100      	movcs	r1, #0
 800d39a:	380b      	subs	r0, #11
 800d39c:	d017      	beq.n	800d3ce <__b2d+0x92>
 800d39e:	f1c0 0c20 	rsb	ip, r0, #32
 800d3a2:	fa04 f500 	lsl.w	r5, r4, r0
 800d3a6:	42be      	cmp	r6, r7
 800d3a8:	fa21 f40c 	lsr.w	r4, r1, ip
 800d3ac:	ea45 0504 	orr.w	r5, r5, r4
 800d3b0:	bf8c      	ite	hi
 800d3b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d3b6:	2400      	movls	r4, #0
 800d3b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d3bc:	fa01 f000 	lsl.w	r0, r1, r0
 800d3c0:	fa24 f40c 	lsr.w	r4, r4, ip
 800d3c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d3c8:	ea40 0204 	orr.w	r2, r0, r4
 800d3cc:	e7db      	b.n	800d386 <__b2d+0x4a>
 800d3ce:	ea44 030c 	orr.w	r3, r4, ip
 800d3d2:	460a      	mov	r2, r1
 800d3d4:	e7d7      	b.n	800d386 <__b2d+0x4a>
 800d3d6:	bf00      	nop
 800d3d8:	3ff00000 	.word	0x3ff00000

0800d3dc <__d2b>:
 800d3dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d3e0:	4689      	mov	r9, r1
 800d3e2:	2101      	movs	r1, #1
 800d3e4:	ec57 6b10 	vmov	r6, r7, d0
 800d3e8:	4690      	mov	r8, r2
 800d3ea:	f7ff fc09 	bl	800cc00 <_Balloc>
 800d3ee:	4604      	mov	r4, r0
 800d3f0:	b930      	cbnz	r0, 800d400 <__d2b+0x24>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	4b25      	ldr	r3, [pc, #148]	; (800d48c <__d2b+0xb0>)
 800d3f6:	4826      	ldr	r0, [pc, #152]	; (800d490 <__d2b+0xb4>)
 800d3f8:	f240 310a 	movw	r1, #778	; 0x30a
 800d3fc:	f000 fccc 	bl	800dd98 <__assert_func>
 800d400:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d404:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d408:	bb35      	cbnz	r5, 800d458 <__d2b+0x7c>
 800d40a:	2e00      	cmp	r6, #0
 800d40c:	9301      	str	r3, [sp, #4]
 800d40e:	d028      	beq.n	800d462 <__d2b+0x86>
 800d410:	4668      	mov	r0, sp
 800d412:	9600      	str	r6, [sp, #0]
 800d414:	f7ff fd06 	bl	800ce24 <__lo0bits>
 800d418:	9900      	ldr	r1, [sp, #0]
 800d41a:	b300      	cbz	r0, 800d45e <__d2b+0x82>
 800d41c:	9a01      	ldr	r2, [sp, #4]
 800d41e:	f1c0 0320 	rsb	r3, r0, #32
 800d422:	fa02 f303 	lsl.w	r3, r2, r3
 800d426:	430b      	orrs	r3, r1
 800d428:	40c2      	lsrs	r2, r0
 800d42a:	6163      	str	r3, [r4, #20]
 800d42c:	9201      	str	r2, [sp, #4]
 800d42e:	9b01      	ldr	r3, [sp, #4]
 800d430:	61a3      	str	r3, [r4, #24]
 800d432:	2b00      	cmp	r3, #0
 800d434:	bf14      	ite	ne
 800d436:	2202      	movne	r2, #2
 800d438:	2201      	moveq	r2, #1
 800d43a:	6122      	str	r2, [r4, #16]
 800d43c:	b1d5      	cbz	r5, 800d474 <__d2b+0x98>
 800d43e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d442:	4405      	add	r5, r0
 800d444:	f8c9 5000 	str.w	r5, [r9]
 800d448:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d44c:	f8c8 0000 	str.w	r0, [r8]
 800d450:	4620      	mov	r0, r4
 800d452:	b003      	add	sp, #12
 800d454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d45c:	e7d5      	b.n	800d40a <__d2b+0x2e>
 800d45e:	6161      	str	r1, [r4, #20]
 800d460:	e7e5      	b.n	800d42e <__d2b+0x52>
 800d462:	a801      	add	r0, sp, #4
 800d464:	f7ff fcde 	bl	800ce24 <__lo0bits>
 800d468:	9b01      	ldr	r3, [sp, #4]
 800d46a:	6163      	str	r3, [r4, #20]
 800d46c:	2201      	movs	r2, #1
 800d46e:	6122      	str	r2, [r4, #16]
 800d470:	3020      	adds	r0, #32
 800d472:	e7e3      	b.n	800d43c <__d2b+0x60>
 800d474:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d478:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d47c:	f8c9 0000 	str.w	r0, [r9]
 800d480:	6918      	ldr	r0, [r3, #16]
 800d482:	f7ff fcaf 	bl	800cde4 <__hi0bits>
 800d486:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d48a:	e7df      	b.n	800d44c <__d2b+0x70>
 800d48c:	0800f6b0 	.word	0x0800f6b0
 800d490:	0800f7a0 	.word	0x0800f7a0

0800d494 <__ratio>:
 800d494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d498:	4688      	mov	r8, r1
 800d49a:	4669      	mov	r1, sp
 800d49c:	4681      	mov	r9, r0
 800d49e:	f7ff ff4d 	bl	800d33c <__b2d>
 800d4a2:	a901      	add	r1, sp, #4
 800d4a4:	4640      	mov	r0, r8
 800d4a6:	ec55 4b10 	vmov	r4, r5, d0
 800d4aa:	f7ff ff47 	bl	800d33c <__b2d>
 800d4ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d4b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d4b6:	eba3 0c02 	sub.w	ip, r3, r2
 800d4ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d4be:	1a9b      	subs	r3, r3, r2
 800d4c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d4c4:	ec51 0b10 	vmov	r0, r1, d0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	bfd6      	itet	le
 800d4cc:	460a      	movle	r2, r1
 800d4ce:	462a      	movgt	r2, r5
 800d4d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d4d4:	468b      	mov	fp, r1
 800d4d6:	462f      	mov	r7, r5
 800d4d8:	bfd4      	ite	le
 800d4da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d4de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	ee10 2a10 	vmov	r2, s0
 800d4e8:	465b      	mov	r3, fp
 800d4ea:	4639      	mov	r1, r7
 800d4ec:	f7f3 f9ae 	bl	800084c <__aeabi_ddiv>
 800d4f0:	ec41 0b10 	vmov	d0, r0, r1
 800d4f4:	b003      	add	sp, #12
 800d4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d4fa <__copybits>:
 800d4fa:	3901      	subs	r1, #1
 800d4fc:	b570      	push	{r4, r5, r6, lr}
 800d4fe:	1149      	asrs	r1, r1, #5
 800d500:	6914      	ldr	r4, [r2, #16]
 800d502:	3101      	adds	r1, #1
 800d504:	f102 0314 	add.w	r3, r2, #20
 800d508:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d50c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d510:	1f05      	subs	r5, r0, #4
 800d512:	42a3      	cmp	r3, r4
 800d514:	d30c      	bcc.n	800d530 <__copybits+0x36>
 800d516:	1aa3      	subs	r3, r4, r2
 800d518:	3b11      	subs	r3, #17
 800d51a:	f023 0303 	bic.w	r3, r3, #3
 800d51e:	3211      	adds	r2, #17
 800d520:	42a2      	cmp	r2, r4
 800d522:	bf88      	it	hi
 800d524:	2300      	movhi	r3, #0
 800d526:	4418      	add	r0, r3
 800d528:	2300      	movs	r3, #0
 800d52a:	4288      	cmp	r0, r1
 800d52c:	d305      	bcc.n	800d53a <__copybits+0x40>
 800d52e:	bd70      	pop	{r4, r5, r6, pc}
 800d530:	f853 6b04 	ldr.w	r6, [r3], #4
 800d534:	f845 6f04 	str.w	r6, [r5, #4]!
 800d538:	e7eb      	b.n	800d512 <__copybits+0x18>
 800d53a:	f840 3b04 	str.w	r3, [r0], #4
 800d53e:	e7f4      	b.n	800d52a <__copybits+0x30>

0800d540 <__any_on>:
 800d540:	f100 0214 	add.w	r2, r0, #20
 800d544:	6900      	ldr	r0, [r0, #16]
 800d546:	114b      	asrs	r3, r1, #5
 800d548:	4298      	cmp	r0, r3
 800d54a:	b510      	push	{r4, lr}
 800d54c:	db11      	blt.n	800d572 <__any_on+0x32>
 800d54e:	dd0a      	ble.n	800d566 <__any_on+0x26>
 800d550:	f011 011f 	ands.w	r1, r1, #31
 800d554:	d007      	beq.n	800d566 <__any_on+0x26>
 800d556:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d55a:	fa24 f001 	lsr.w	r0, r4, r1
 800d55e:	fa00 f101 	lsl.w	r1, r0, r1
 800d562:	428c      	cmp	r4, r1
 800d564:	d10b      	bne.n	800d57e <__any_on+0x3e>
 800d566:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d803      	bhi.n	800d576 <__any_on+0x36>
 800d56e:	2000      	movs	r0, #0
 800d570:	bd10      	pop	{r4, pc}
 800d572:	4603      	mov	r3, r0
 800d574:	e7f7      	b.n	800d566 <__any_on+0x26>
 800d576:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d57a:	2900      	cmp	r1, #0
 800d57c:	d0f5      	beq.n	800d56a <__any_on+0x2a>
 800d57e:	2001      	movs	r0, #1
 800d580:	e7f6      	b.n	800d570 <__any_on+0x30>

0800d582 <_calloc_r>:
 800d582:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d584:	fba1 2402 	umull	r2, r4, r1, r2
 800d588:	b94c      	cbnz	r4, 800d59e <_calloc_r+0x1c>
 800d58a:	4611      	mov	r1, r2
 800d58c:	9201      	str	r2, [sp, #4]
 800d58e:	f7fc fa4b 	bl	8009a28 <_malloc_r>
 800d592:	9a01      	ldr	r2, [sp, #4]
 800d594:	4605      	mov	r5, r0
 800d596:	b930      	cbnz	r0, 800d5a6 <_calloc_r+0x24>
 800d598:	4628      	mov	r0, r5
 800d59a:	b003      	add	sp, #12
 800d59c:	bd30      	pop	{r4, r5, pc}
 800d59e:	220c      	movs	r2, #12
 800d5a0:	6002      	str	r2, [r0, #0]
 800d5a2:	2500      	movs	r5, #0
 800d5a4:	e7f8      	b.n	800d598 <_calloc_r+0x16>
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	f7fc f9ca 	bl	8009940 <memset>
 800d5ac:	e7f4      	b.n	800d598 <_calloc_r+0x16>

0800d5ae <__ssputs_r>:
 800d5ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b2:	688e      	ldr	r6, [r1, #8]
 800d5b4:	429e      	cmp	r6, r3
 800d5b6:	4682      	mov	sl, r0
 800d5b8:	460c      	mov	r4, r1
 800d5ba:	4690      	mov	r8, r2
 800d5bc:	461f      	mov	r7, r3
 800d5be:	d838      	bhi.n	800d632 <__ssputs_r+0x84>
 800d5c0:	898a      	ldrh	r2, [r1, #12]
 800d5c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d5c6:	d032      	beq.n	800d62e <__ssputs_r+0x80>
 800d5c8:	6825      	ldr	r5, [r4, #0]
 800d5ca:	6909      	ldr	r1, [r1, #16]
 800d5cc:	eba5 0901 	sub.w	r9, r5, r1
 800d5d0:	6965      	ldr	r5, [r4, #20]
 800d5d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5da:	3301      	adds	r3, #1
 800d5dc:	444b      	add	r3, r9
 800d5de:	106d      	asrs	r5, r5, #1
 800d5e0:	429d      	cmp	r5, r3
 800d5e2:	bf38      	it	cc
 800d5e4:	461d      	movcc	r5, r3
 800d5e6:	0553      	lsls	r3, r2, #21
 800d5e8:	d531      	bpl.n	800d64e <__ssputs_r+0xa0>
 800d5ea:	4629      	mov	r1, r5
 800d5ec:	f7fc fa1c 	bl	8009a28 <_malloc_r>
 800d5f0:	4606      	mov	r6, r0
 800d5f2:	b950      	cbnz	r0, 800d60a <__ssputs_r+0x5c>
 800d5f4:	230c      	movs	r3, #12
 800d5f6:	f8ca 3000 	str.w	r3, [sl]
 800d5fa:	89a3      	ldrh	r3, [r4, #12]
 800d5fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d600:	81a3      	strh	r3, [r4, #12]
 800d602:	f04f 30ff 	mov.w	r0, #4294967295
 800d606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d60a:	6921      	ldr	r1, [r4, #16]
 800d60c:	464a      	mov	r2, r9
 800d60e:	f7fc f989 	bl	8009924 <memcpy>
 800d612:	89a3      	ldrh	r3, [r4, #12]
 800d614:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d61c:	81a3      	strh	r3, [r4, #12]
 800d61e:	6126      	str	r6, [r4, #16]
 800d620:	6165      	str	r5, [r4, #20]
 800d622:	444e      	add	r6, r9
 800d624:	eba5 0509 	sub.w	r5, r5, r9
 800d628:	6026      	str	r6, [r4, #0]
 800d62a:	60a5      	str	r5, [r4, #8]
 800d62c:	463e      	mov	r6, r7
 800d62e:	42be      	cmp	r6, r7
 800d630:	d900      	bls.n	800d634 <__ssputs_r+0x86>
 800d632:	463e      	mov	r6, r7
 800d634:	6820      	ldr	r0, [r4, #0]
 800d636:	4632      	mov	r2, r6
 800d638:	4641      	mov	r1, r8
 800d63a:	f000 fd27 	bl	800e08c <memmove>
 800d63e:	68a3      	ldr	r3, [r4, #8]
 800d640:	1b9b      	subs	r3, r3, r6
 800d642:	60a3      	str	r3, [r4, #8]
 800d644:	6823      	ldr	r3, [r4, #0]
 800d646:	4433      	add	r3, r6
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	2000      	movs	r0, #0
 800d64c:	e7db      	b.n	800d606 <__ssputs_r+0x58>
 800d64e:	462a      	mov	r2, r5
 800d650:	f000 fd36 	bl	800e0c0 <_realloc_r>
 800d654:	4606      	mov	r6, r0
 800d656:	2800      	cmp	r0, #0
 800d658:	d1e1      	bne.n	800d61e <__ssputs_r+0x70>
 800d65a:	6921      	ldr	r1, [r4, #16]
 800d65c:	4650      	mov	r0, sl
 800d65e:	f7fc f977 	bl	8009950 <_free_r>
 800d662:	e7c7      	b.n	800d5f4 <__ssputs_r+0x46>

0800d664 <_svfiprintf_r>:
 800d664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d668:	4698      	mov	r8, r3
 800d66a:	898b      	ldrh	r3, [r1, #12]
 800d66c:	061b      	lsls	r3, r3, #24
 800d66e:	b09d      	sub	sp, #116	; 0x74
 800d670:	4607      	mov	r7, r0
 800d672:	460d      	mov	r5, r1
 800d674:	4614      	mov	r4, r2
 800d676:	d50e      	bpl.n	800d696 <_svfiprintf_r+0x32>
 800d678:	690b      	ldr	r3, [r1, #16]
 800d67a:	b963      	cbnz	r3, 800d696 <_svfiprintf_r+0x32>
 800d67c:	2140      	movs	r1, #64	; 0x40
 800d67e:	f7fc f9d3 	bl	8009a28 <_malloc_r>
 800d682:	6028      	str	r0, [r5, #0]
 800d684:	6128      	str	r0, [r5, #16]
 800d686:	b920      	cbnz	r0, 800d692 <_svfiprintf_r+0x2e>
 800d688:	230c      	movs	r3, #12
 800d68a:	603b      	str	r3, [r7, #0]
 800d68c:	f04f 30ff 	mov.w	r0, #4294967295
 800d690:	e0d1      	b.n	800d836 <_svfiprintf_r+0x1d2>
 800d692:	2340      	movs	r3, #64	; 0x40
 800d694:	616b      	str	r3, [r5, #20]
 800d696:	2300      	movs	r3, #0
 800d698:	9309      	str	r3, [sp, #36]	; 0x24
 800d69a:	2320      	movs	r3, #32
 800d69c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6a4:	2330      	movs	r3, #48	; 0x30
 800d6a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d850 <_svfiprintf_r+0x1ec>
 800d6aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6ae:	f04f 0901 	mov.w	r9, #1
 800d6b2:	4623      	mov	r3, r4
 800d6b4:	469a      	mov	sl, r3
 800d6b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6ba:	b10a      	cbz	r2, 800d6c0 <_svfiprintf_r+0x5c>
 800d6bc:	2a25      	cmp	r2, #37	; 0x25
 800d6be:	d1f9      	bne.n	800d6b4 <_svfiprintf_r+0x50>
 800d6c0:	ebba 0b04 	subs.w	fp, sl, r4
 800d6c4:	d00b      	beq.n	800d6de <_svfiprintf_r+0x7a>
 800d6c6:	465b      	mov	r3, fp
 800d6c8:	4622      	mov	r2, r4
 800d6ca:	4629      	mov	r1, r5
 800d6cc:	4638      	mov	r0, r7
 800d6ce:	f7ff ff6e 	bl	800d5ae <__ssputs_r>
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	f000 80aa 	beq.w	800d82c <_svfiprintf_r+0x1c8>
 800d6d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6da:	445a      	add	r2, fp
 800d6dc:	9209      	str	r2, [sp, #36]	; 0x24
 800d6de:	f89a 3000 	ldrb.w	r3, [sl]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	f000 80a2 	beq.w	800d82c <_svfiprintf_r+0x1c8>
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6f2:	f10a 0a01 	add.w	sl, sl, #1
 800d6f6:	9304      	str	r3, [sp, #16]
 800d6f8:	9307      	str	r3, [sp, #28]
 800d6fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6fe:	931a      	str	r3, [sp, #104]	; 0x68
 800d700:	4654      	mov	r4, sl
 800d702:	2205      	movs	r2, #5
 800d704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d708:	4851      	ldr	r0, [pc, #324]	; (800d850 <_svfiprintf_r+0x1ec>)
 800d70a:	f7f2 fd69 	bl	80001e0 <memchr>
 800d70e:	9a04      	ldr	r2, [sp, #16]
 800d710:	b9d8      	cbnz	r0, 800d74a <_svfiprintf_r+0xe6>
 800d712:	06d0      	lsls	r0, r2, #27
 800d714:	bf44      	itt	mi
 800d716:	2320      	movmi	r3, #32
 800d718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d71c:	0711      	lsls	r1, r2, #28
 800d71e:	bf44      	itt	mi
 800d720:	232b      	movmi	r3, #43	; 0x2b
 800d722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d726:	f89a 3000 	ldrb.w	r3, [sl]
 800d72a:	2b2a      	cmp	r3, #42	; 0x2a
 800d72c:	d015      	beq.n	800d75a <_svfiprintf_r+0xf6>
 800d72e:	9a07      	ldr	r2, [sp, #28]
 800d730:	4654      	mov	r4, sl
 800d732:	2000      	movs	r0, #0
 800d734:	f04f 0c0a 	mov.w	ip, #10
 800d738:	4621      	mov	r1, r4
 800d73a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d73e:	3b30      	subs	r3, #48	; 0x30
 800d740:	2b09      	cmp	r3, #9
 800d742:	d94e      	bls.n	800d7e2 <_svfiprintf_r+0x17e>
 800d744:	b1b0      	cbz	r0, 800d774 <_svfiprintf_r+0x110>
 800d746:	9207      	str	r2, [sp, #28]
 800d748:	e014      	b.n	800d774 <_svfiprintf_r+0x110>
 800d74a:	eba0 0308 	sub.w	r3, r0, r8
 800d74e:	fa09 f303 	lsl.w	r3, r9, r3
 800d752:	4313      	orrs	r3, r2
 800d754:	9304      	str	r3, [sp, #16]
 800d756:	46a2      	mov	sl, r4
 800d758:	e7d2      	b.n	800d700 <_svfiprintf_r+0x9c>
 800d75a:	9b03      	ldr	r3, [sp, #12]
 800d75c:	1d19      	adds	r1, r3, #4
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	9103      	str	r1, [sp, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	bfbb      	ittet	lt
 800d766:	425b      	neglt	r3, r3
 800d768:	f042 0202 	orrlt.w	r2, r2, #2
 800d76c:	9307      	strge	r3, [sp, #28]
 800d76e:	9307      	strlt	r3, [sp, #28]
 800d770:	bfb8      	it	lt
 800d772:	9204      	strlt	r2, [sp, #16]
 800d774:	7823      	ldrb	r3, [r4, #0]
 800d776:	2b2e      	cmp	r3, #46	; 0x2e
 800d778:	d10c      	bne.n	800d794 <_svfiprintf_r+0x130>
 800d77a:	7863      	ldrb	r3, [r4, #1]
 800d77c:	2b2a      	cmp	r3, #42	; 0x2a
 800d77e:	d135      	bne.n	800d7ec <_svfiprintf_r+0x188>
 800d780:	9b03      	ldr	r3, [sp, #12]
 800d782:	1d1a      	adds	r2, r3, #4
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	9203      	str	r2, [sp, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	bfb8      	it	lt
 800d78c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d790:	3402      	adds	r4, #2
 800d792:	9305      	str	r3, [sp, #20]
 800d794:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d860 <_svfiprintf_r+0x1fc>
 800d798:	7821      	ldrb	r1, [r4, #0]
 800d79a:	2203      	movs	r2, #3
 800d79c:	4650      	mov	r0, sl
 800d79e:	f7f2 fd1f 	bl	80001e0 <memchr>
 800d7a2:	b140      	cbz	r0, 800d7b6 <_svfiprintf_r+0x152>
 800d7a4:	2340      	movs	r3, #64	; 0x40
 800d7a6:	eba0 000a 	sub.w	r0, r0, sl
 800d7aa:	fa03 f000 	lsl.w	r0, r3, r0
 800d7ae:	9b04      	ldr	r3, [sp, #16]
 800d7b0:	4303      	orrs	r3, r0
 800d7b2:	3401      	adds	r4, #1
 800d7b4:	9304      	str	r3, [sp, #16]
 800d7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ba:	4826      	ldr	r0, [pc, #152]	; (800d854 <_svfiprintf_r+0x1f0>)
 800d7bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7c0:	2206      	movs	r2, #6
 800d7c2:	f7f2 fd0d 	bl	80001e0 <memchr>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d038      	beq.n	800d83c <_svfiprintf_r+0x1d8>
 800d7ca:	4b23      	ldr	r3, [pc, #140]	; (800d858 <_svfiprintf_r+0x1f4>)
 800d7cc:	bb1b      	cbnz	r3, 800d816 <_svfiprintf_r+0x1b2>
 800d7ce:	9b03      	ldr	r3, [sp, #12]
 800d7d0:	3307      	adds	r3, #7
 800d7d2:	f023 0307 	bic.w	r3, r3, #7
 800d7d6:	3308      	adds	r3, #8
 800d7d8:	9303      	str	r3, [sp, #12]
 800d7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7dc:	4433      	add	r3, r6
 800d7de:	9309      	str	r3, [sp, #36]	; 0x24
 800d7e0:	e767      	b.n	800d6b2 <_svfiprintf_r+0x4e>
 800d7e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7e6:	460c      	mov	r4, r1
 800d7e8:	2001      	movs	r0, #1
 800d7ea:	e7a5      	b.n	800d738 <_svfiprintf_r+0xd4>
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	3401      	adds	r4, #1
 800d7f0:	9305      	str	r3, [sp, #20]
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	f04f 0c0a 	mov.w	ip, #10
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7fe:	3a30      	subs	r2, #48	; 0x30
 800d800:	2a09      	cmp	r2, #9
 800d802:	d903      	bls.n	800d80c <_svfiprintf_r+0x1a8>
 800d804:	2b00      	cmp	r3, #0
 800d806:	d0c5      	beq.n	800d794 <_svfiprintf_r+0x130>
 800d808:	9105      	str	r1, [sp, #20]
 800d80a:	e7c3      	b.n	800d794 <_svfiprintf_r+0x130>
 800d80c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d810:	4604      	mov	r4, r0
 800d812:	2301      	movs	r3, #1
 800d814:	e7f0      	b.n	800d7f8 <_svfiprintf_r+0x194>
 800d816:	ab03      	add	r3, sp, #12
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	462a      	mov	r2, r5
 800d81c:	4b0f      	ldr	r3, [pc, #60]	; (800d85c <_svfiprintf_r+0x1f8>)
 800d81e:	a904      	add	r1, sp, #16
 800d820:	4638      	mov	r0, r7
 800d822:	f7fc fa15 	bl	8009c50 <_printf_float>
 800d826:	1c42      	adds	r2, r0, #1
 800d828:	4606      	mov	r6, r0
 800d82a:	d1d6      	bne.n	800d7da <_svfiprintf_r+0x176>
 800d82c:	89ab      	ldrh	r3, [r5, #12]
 800d82e:	065b      	lsls	r3, r3, #25
 800d830:	f53f af2c 	bmi.w	800d68c <_svfiprintf_r+0x28>
 800d834:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d836:	b01d      	add	sp, #116	; 0x74
 800d838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d83c:	ab03      	add	r3, sp, #12
 800d83e:	9300      	str	r3, [sp, #0]
 800d840:	462a      	mov	r2, r5
 800d842:	4b06      	ldr	r3, [pc, #24]	; (800d85c <_svfiprintf_r+0x1f8>)
 800d844:	a904      	add	r1, sp, #16
 800d846:	4638      	mov	r0, r7
 800d848:	f7fc fca6 	bl	800a198 <_printf_i>
 800d84c:	e7eb      	b.n	800d826 <_svfiprintf_r+0x1c2>
 800d84e:	bf00      	nop
 800d850:	0800f8fc 	.word	0x0800f8fc
 800d854:	0800f906 	.word	0x0800f906
 800d858:	08009c51 	.word	0x08009c51
 800d85c:	0800d5af 	.word	0x0800d5af
 800d860:	0800f902 	.word	0x0800f902

0800d864 <__sfputc_r>:
 800d864:	6893      	ldr	r3, [r2, #8]
 800d866:	3b01      	subs	r3, #1
 800d868:	2b00      	cmp	r3, #0
 800d86a:	b410      	push	{r4}
 800d86c:	6093      	str	r3, [r2, #8]
 800d86e:	da08      	bge.n	800d882 <__sfputc_r+0x1e>
 800d870:	6994      	ldr	r4, [r2, #24]
 800d872:	42a3      	cmp	r3, r4
 800d874:	db01      	blt.n	800d87a <__sfputc_r+0x16>
 800d876:	290a      	cmp	r1, #10
 800d878:	d103      	bne.n	800d882 <__sfputc_r+0x1e>
 800d87a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d87e:	f000 b9ab 	b.w	800dbd8 <__swbuf_r>
 800d882:	6813      	ldr	r3, [r2, #0]
 800d884:	1c58      	adds	r0, r3, #1
 800d886:	6010      	str	r0, [r2, #0]
 800d888:	7019      	strb	r1, [r3, #0]
 800d88a:	4608      	mov	r0, r1
 800d88c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d890:	4770      	bx	lr

0800d892 <__sfputs_r>:
 800d892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d894:	4606      	mov	r6, r0
 800d896:	460f      	mov	r7, r1
 800d898:	4614      	mov	r4, r2
 800d89a:	18d5      	adds	r5, r2, r3
 800d89c:	42ac      	cmp	r4, r5
 800d89e:	d101      	bne.n	800d8a4 <__sfputs_r+0x12>
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	e007      	b.n	800d8b4 <__sfputs_r+0x22>
 800d8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8a8:	463a      	mov	r2, r7
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	f7ff ffda 	bl	800d864 <__sfputc_r>
 800d8b0:	1c43      	adds	r3, r0, #1
 800d8b2:	d1f3      	bne.n	800d89c <__sfputs_r+0xa>
 800d8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d8b8 <_vfiprintf_r>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	460d      	mov	r5, r1
 800d8be:	b09d      	sub	sp, #116	; 0x74
 800d8c0:	4614      	mov	r4, r2
 800d8c2:	4698      	mov	r8, r3
 800d8c4:	4606      	mov	r6, r0
 800d8c6:	b118      	cbz	r0, 800d8d0 <_vfiprintf_r+0x18>
 800d8c8:	6983      	ldr	r3, [r0, #24]
 800d8ca:	b90b      	cbnz	r3, 800d8d0 <_vfiprintf_r+0x18>
 800d8cc:	f7fe fd66 	bl	800c39c <__sinit>
 800d8d0:	4b89      	ldr	r3, [pc, #548]	; (800daf8 <_vfiprintf_r+0x240>)
 800d8d2:	429d      	cmp	r5, r3
 800d8d4:	d11b      	bne.n	800d90e <_vfiprintf_r+0x56>
 800d8d6:	6875      	ldr	r5, [r6, #4]
 800d8d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8da:	07d9      	lsls	r1, r3, #31
 800d8dc:	d405      	bmi.n	800d8ea <_vfiprintf_r+0x32>
 800d8de:	89ab      	ldrh	r3, [r5, #12]
 800d8e0:	059a      	lsls	r2, r3, #22
 800d8e2:	d402      	bmi.n	800d8ea <_vfiprintf_r+0x32>
 800d8e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8e6:	f7ff f96a 	bl	800cbbe <__retarget_lock_acquire_recursive>
 800d8ea:	89ab      	ldrh	r3, [r5, #12]
 800d8ec:	071b      	lsls	r3, r3, #28
 800d8ee:	d501      	bpl.n	800d8f4 <_vfiprintf_r+0x3c>
 800d8f0:	692b      	ldr	r3, [r5, #16]
 800d8f2:	b9eb      	cbnz	r3, 800d930 <_vfiprintf_r+0x78>
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	f000 f9e0 	bl	800dcbc <__swsetup_r>
 800d8fc:	b1c0      	cbz	r0, 800d930 <_vfiprintf_r+0x78>
 800d8fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d900:	07dc      	lsls	r4, r3, #31
 800d902:	d50e      	bpl.n	800d922 <_vfiprintf_r+0x6a>
 800d904:	f04f 30ff 	mov.w	r0, #4294967295
 800d908:	b01d      	add	sp, #116	; 0x74
 800d90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d90e:	4b7b      	ldr	r3, [pc, #492]	; (800dafc <_vfiprintf_r+0x244>)
 800d910:	429d      	cmp	r5, r3
 800d912:	d101      	bne.n	800d918 <_vfiprintf_r+0x60>
 800d914:	68b5      	ldr	r5, [r6, #8]
 800d916:	e7df      	b.n	800d8d8 <_vfiprintf_r+0x20>
 800d918:	4b79      	ldr	r3, [pc, #484]	; (800db00 <_vfiprintf_r+0x248>)
 800d91a:	429d      	cmp	r5, r3
 800d91c:	bf08      	it	eq
 800d91e:	68f5      	ldreq	r5, [r6, #12]
 800d920:	e7da      	b.n	800d8d8 <_vfiprintf_r+0x20>
 800d922:	89ab      	ldrh	r3, [r5, #12]
 800d924:	0598      	lsls	r0, r3, #22
 800d926:	d4ed      	bmi.n	800d904 <_vfiprintf_r+0x4c>
 800d928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d92a:	f7ff f949 	bl	800cbc0 <__retarget_lock_release_recursive>
 800d92e:	e7e9      	b.n	800d904 <_vfiprintf_r+0x4c>
 800d930:	2300      	movs	r3, #0
 800d932:	9309      	str	r3, [sp, #36]	; 0x24
 800d934:	2320      	movs	r3, #32
 800d936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d93a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d93e:	2330      	movs	r3, #48	; 0x30
 800d940:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800db04 <_vfiprintf_r+0x24c>
 800d944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d948:	f04f 0901 	mov.w	r9, #1
 800d94c:	4623      	mov	r3, r4
 800d94e:	469a      	mov	sl, r3
 800d950:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d954:	b10a      	cbz	r2, 800d95a <_vfiprintf_r+0xa2>
 800d956:	2a25      	cmp	r2, #37	; 0x25
 800d958:	d1f9      	bne.n	800d94e <_vfiprintf_r+0x96>
 800d95a:	ebba 0b04 	subs.w	fp, sl, r4
 800d95e:	d00b      	beq.n	800d978 <_vfiprintf_r+0xc0>
 800d960:	465b      	mov	r3, fp
 800d962:	4622      	mov	r2, r4
 800d964:	4629      	mov	r1, r5
 800d966:	4630      	mov	r0, r6
 800d968:	f7ff ff93 	bl	800d892 <__sfputs_r>
 800d96c:	3001      	adds	r0, #1
 800d96e:	f000 80aa 	beq.w	800dac6 <_vfiprintf_r+0x20e>
 800d972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d974:	445a      	add	r2, fp
 800d976:	9209      	str	r2, [sp, #36]	; 0x24
 800d978:	f89a 3000 	ldrb.w	r3, [sl]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	f000 80a2 	beq.w	800dac6 <_vfiprintf_r+0x20e>
 800d982:	2300      	movs	r3, #0
 800d984:	f04f 32ff 	mov.w	r2, #4294967295
 800d988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d98c:	f10a 0a01 	add.w	sl, sl, #1
 800d990:	9304      	str	r3, [sp, #16]
 800d992:	9307      	str	r3, [sp, #28]
 800d994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d998:	931a      	str	r3, [sp, #104]	; 0x68
 800d99a:	4654      	mov	r4, sl
 800d99c:	2205      	movs	r2, #5
 800d99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9a2:	4858      	ldr	r0, [pc, #352]	; (800db04 <_vfiprintf_r+0x24c>)
 800d9a4:	f7f2 fc1c 	bl	80001e0 <memchr>
 800d9a8:	9a04      	ldr	r2, [sp, #16]
 800d9aa:	b9d8      	cbnz	r0, 800d9e4 <_vfiprintf_r+0x12c>
 800d9ac:	06d1      	lsls	r1, r2, #27
 800d9ae:	bf44      	itt	mi
 800d9b0:	2320      	movmi	r3, #32
 800d9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9b6:	0713      	lsls	r3, r2, #28
 800d9b8:	bf44      	itt	mi
 800d9ba:	232b      	movmi	r3, #43	; 0x2b
 800d9bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d9c4:	2b2a      	cmp	r3, #42	; 0x2a
 800d9c6:	d015      	beq.n	800d9f4 <_vfiprintf_r+0x13c>
 800d9c8:	9a07      	ldr	r2, [sp, #28]
 800d9ca:	4654      	mov	r4, sl
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	f04f 0c0a 	mov.w	ip, #10
 800d9d2:	4621      	mov	r1, r4
 800d9d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9d8:	3b30      	subs	r3, #48	; 0x30
 800d9da:	2b09      	cmp	r3, #9
 800d9dc:	d94e      	bls.n	800da7c <_vfiprintf_r+0x1c4>
 800d9de:	b1b0      	cbz	r0, 800da0e <_vfiprintf_r+0x156>
 800d9e0:	9207      	str	r2, [sp, #28]
 800d9e2:	e014      	b.n	800da0e <_vfiprintf_r+0x156>
 800d9e4:	eba0 0308 	sub.w	r3, r0, r8
 800d9e8:	fa09 f303 	lsl.w	r3, r9, r3
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	9304      	str	r3, [sp, #16]
 800d9f0:	46a2      	mov	sl, r4
 800d9f2:	e7d2      	b.n	800d99a <_vfiprintf_r+0xe2>
 800d9f4:	9b03      	ldr	r3, [sp, #12]
 800d9f6:	1d19      	adds	r1, r3, #4
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	9103      	str	r1, [sp, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	bfbb      	ittet	lt
 800da00:	425b      	neglt	r3, r3
 800da02:	f042 0202 	orrlt.w	r2, r2, #2
 800da06:	9307      	strge	r3, [sp, #28]
 800da08:	9307      	strlt	r3, [sp, #28]
 800da0a:	bfb8      	it	lt
 800da0c:	9204      	strlt	r2, [sp, #16]
 800da0e:	7823      	ldrb	r3, [r4, #0]
 800da10:	2b2e      	cmp	r3, #46	; 0x2e
 800da12:	d10c      	bne.n	800da2e <_vfiprintf_r+0x176>
 800da14:	7863      	ldrb	r3, [r4, #1]
 800da16:	2b2a      	cmp	r3, #42	; 0x2a
 800da18:	d135      	bne.n	800da86 <_vfiprintf_r+0x1ce>
 800da1a:	9b03      	ldr	r3, [sp, #12]
 800da1c:	1d1a      	adds	r2, r3, #4
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	9203      	str	r2, [sp, #12]
 800da22:	2b00      	cmp	r3, #0
 800da24:	bfb8      	it	lt
 800da26:	f04f 33ff 	movlt.w	r3, #4294967295
 800da2a:	3402      	adds	r4, #2
 800da2c:	9305      	str	r3, [sp, #20]
 800da2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800db14 <_vfiprintf_r+0x25c>
 800da32:	7821      	ldrb	r1, [r4, #0]
 800da34:	2203      	movs	r2, #3
 800da36:	4650      	mov	r0, sl
 800da38:	f7f2 fbd2 	bl	80001e0 <memchr>
 800da3c:	b140      	cbz	r0, 800da50 <_vfiprintf_r+0x198>
 800da3e:	2340      	movs	r3, #64	; 0x40
 800da40:	eba0 000a 	sub.w	r0, r0, sl
 800da44:	fa03 f000 	lsl.w	r0, r3, r0
 800da48:	9b04      	ldr	r3, [sp, #16]
 800da4a:	4303      	orrs	r3, r0
 800da4c:	3401      	adds	r4, #1
 800da4e:	9304      	str	r3, [sp, #16]
 800da50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da54:	482c      	ldr	r0, [pc, #176]	; (800db08 <_vfiprintf_r+0x250>)
 800da56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da5a:	2206      	movs	r2, #6
 800da5c:	f7f2 fbc0 	bl	80001e0 <memchr>
 800da60:	2800      	cmp	r0, #0
 800da62:	d03f      	beq.n	800dae4 <_vfiprintf_r+0x22c>
 800da64:	4b29      	ldr	r3, [pc, #164]	; (800db0c <_vfiprintf_r+0x254>)
 800da66:	bb1b      	cbnz	r3, 800dab0 <_vfiprintf_r+0x1f8>
 800da68:	9b03      	ldr	r3, [sp, #12]
 800da6a:	3307      	adds	r3, #7
 800da6c:	f023 0307 	bic.w	r3, r3, #7
 800da70:	3308      	adds	r3, #8
 800da72:	9303      	str	r3, [sp, #12]
 800da74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da76:	443b      	add	r3, r7
 800da78:	9309      	str	r3, [sp, #36]	; 0x24
 800da7a:	e767      	b.n	800d94c <_vfiprintf_r+0x94>
 800da7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800da80:	460c      	mov	r4, r1
 800da82:	2001      	movs	r0, #1
 800da84:	e7a5      	b.n	800d9d2 <_vfiprintf_r+0x11a>
 800da86:	2300      	movs	r3, #0
 800da88:	3401      	adds	r4, #1
 800da8a:	9305      	str	r3, [sp, #20]
 800da8c:	4619      	mov	r1, r3
 800da8e:	f04f 0c0a 	mov.w	ip, #10
 800da92:	4620      	mov	r0, r4
 800da94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da98:	3a30      	subs	r2, #48	; 0x30
 800da9a:	2a09      	cmp	r2, #9
 800da9c:	d903      	bls.n	800daa6 <_vfiprintf_r+0x1ee>
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d0c5      	beq.n	800da2e <_vfiprintf_r+0x176>
 800daa2:	9105      	str	r1, [sp, #20]
 800daa4:	e7c3      	b.n	800da2e <_vfiprintf_r+0x176>
 800daa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800daaa:	4604      	mov	r4, r0
 800daac:	2301      	movs	r3, #1
 800daae:	e7f0      	b.n	800da92 <_vfiprintf_r+0x1da>
 800dab0:	ab03      	add	r3, sp, #12
 800dab2:	9300      	str	r3, [sp, #0]
 800dab4:	462a      	mov	r2, r5
 800dab6:	4b16      	ldr	r3, [pc, #88]	; (800db10 <_vfiprintf_r+0x258>)
 800dab8:	a904      	add	r1, sp, #16
 800daba:	4630      	mov	r0, r6
 800dabc:	f7fc f8c8 	bl	8009c50 <_printf_float>
 800dac0:	4607      	mov	r7, r0
 800dac2:	1c78      	adds	r0, r7, #1
 800dac4:	d1d6      	bne.n	800da74 <_vfiprintf_r+0x1bc>
 800dac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dac8:	07d9      	lsls	r1, r3, #31
 800daca:	d405      	bmi.n	800dad8 <_vfiprintf_r+0x220>
 800dacc:	89ab      	ldrh	r3, [r5, #12]
 800dace:	059a      	lsls	r2, r3, #22
 800dad0:	d402      	bmi.n	800dad8 <_vfiprintf_r+0x220>
 800dad2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dad4:	f7ff f874 	bl	800cbc0 <__retarget_lock_release_recursive>
 800dad8:	89ab      	ldrh	r3, [r5, #12]
 800dada:	065b      	lsls	r3, r3, #25
 800dadc:	f53f af12 	bmi.w	800d904 <_vfiprintf_r+0x4c>
 800dae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dae2:	e711      	b.n	800d908 <_vfiprintf_r+0x50>
 800dae4:	ab03      	add	r3, sp, #12
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	462a      	mov	r2, r5
 800daea:	4b09      	ldr	r3, [pc, #36]	; (800db10 <_vfiprintf_r+0x258>)
 800daec:	a904      	add	r1, sp, #16
 800daee:	4630      	mov	r0, r6
 800daf0:	f7fc fb52 	bl	800a198 <_printf_i>
 800daf4:	e7e4      	b.n	800dac0 <_vfiprintf_r+0x208>
 800daf6:	bf00      	nop
 800daf8:	0800f6e4 	.word	0x0800f6e4
 800dafc:	0800f704 	.word	0x0800f704
 800db00:	0800f6c4 	.word	0x0800f6c4
 800db04:	0800f8fc 	.word	0x0800f8fc
 800db08:	0800f906 	.word	0x0800f906
 800db0c:	08009c51 	.word	0x08009c51
 800db10:	0800d893 	.word	0x0800d893
 800db14:	0800f902 	.word	0x0800f902

0800db18 <nan>:
 800db18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800db20 <nan+0x8>
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop
 800db20:	00000000 	.word	0x00000000
 800db24:	7ff80000 	.word	0x7ff80000

0800db28 <__sread>:
 800db28:	b510      	push	{r4, lr}
 800db2a:	460c      	mov	r4, r1
 800db2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db30:	f000 faf6 	bl	800e120 <_read_r>
 800db34:	2800      	cmp	r0, #0
 800db36:	bfab      	itete	ge
 800db38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db3a:	89a3      	ldrhlt	r3, [r4, #12]
 800db3c:	181b      	addge	r3, r3, r0
 800db3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db42:	bfac      	ite	ge
 800db44:	6563      	strge	r3, [r4, #84]	; 0x54
 800db46:	81a3      	strhlt	r3, [r4, #12]
 800db48:	bd10      	pop	{r4, pc}

0800db4a <__swrite>:
 800db4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db4e:	461f      	mov	r7, r3
 800db50:	898b      	ldrh	r3, [r1, #12]
 800db52:	05db      	lsls	r3, r3, #23
 800db54:	4605      	mov	r5, r0
 800db56:	460c      	mov	r4, r1
 800db58:	4616      	mov	r6, r2
 800db5a:	d505      	bpl.n	800db68 <__swrite+0x1e>
 800db5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db60:	2302      	movs	r3, #2
 800db62:	2200      	movs	r2, #0
 800db64:	f000 fa1a 	bl	800df9c <_lseek_r>
 800db68:	89a3      	ldrh	r3, [r4, #12]
 800db6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db72:	81a3      	strh	r3, [r4, #12]
 800db74:	4632      	mov	r2, r6
 800db76:	463b      	mov	r3, r7
 800db78:	4628      	mov	r0, r5
 800db7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db7e:	f000 b88b 	b.w	800dc98 <_write_r>

0800db82 <__sseek>:
 800db82:	b510      	push	{r4, lr}
 800db84:	460c      	mov	r4, r1
 800db86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db8a:	f000 fa07 	bl	800df9c <_lseek_r>
 800db8e:	1c43      	adds	r3, r0, #1
 800db90:	89a3      	ldrh	r3, [r4, #12]
 800db92:	bf15      	itete	ne
 800db94:	6560      	strne	r0, [r4, #84]	; 0x54
 800db96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db9e:	81a3      	strheq	r3, [r4, #12]
 800dba0:	bf18      	it	ne
 800dba2:	81a3      	strhne	r3, [r4, #12]
 800dba4:	bd10      	pop	{r4, pc}

0800dba6 <__sclose>:
 800dba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbaa:	f000 b913 	b.w	800ddd4 <_close_r>

0800dbae <strncmp>:
 800dbae:	b510      	push	{r4, lr}
 800dbb0:	b17a      	cbz	r2, 800dbd2 <strncmp+0x24>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	3901      	subs	r1, #1
 800dbb6:	1884      	adds	r4, r0, r2
 800dbb8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dbbc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dbc0:	4290      	cmp	r0, r2
 800dbc2:	d101      	bne.n	800dbc8 <strncmp+0x1a>
 800dbc4:	42a3      	cmp	r3, r4
 800dbc6:	d101      	bne.n	800dbcc <strncmp+0x1e>
 800dbc8:	1a80      	subs	r0, r0, r2
 800dbca:	bd10      	pop	{r4, pc}
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d1f3      	bne.n	800dbb8 <strncmp+0xa>
 800dbd0:	e7fa      	b.n	800dbc8 <strncmp+0x1a>
 800dbd2:	4610      	mov	r0, r2
 800dbd4:	e7f9      	b.n	800dbca <strncmp+0x1c>
	...

0800dbd8 <__swbuf_r>:
 800dbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbda:	460e      	mov	r6, r1
 800dbdc:	4614      	mov	r4, r2
 800dbde:	4605      	mov	r5, r0
 800dbe0:	b118      	cbz	r0, 800dbea <__swbuf_r+0x12>
 800dbe2:	6983      	ldr	r3, [r0, #24]
 800dbe4:	b90b      	cbnz	r3, 800dbea <__swbuf_r+0x12>
 800dbe6:	f7fe fbd9 	bl	800c39c <__sinit>
 800dbea:	4b21      	ldr	r3, [pc, #132]	; (800dc70 <__swbuf_r+0x98>)
 800dbec:	429c      	cmp	r4, r3
 800dbee:	d12b      	bne.n	800dc48 <__swbuf_r+0x70>
 800dbf0:	686c      	ldr	r4, [r5, #4]
 800dbf2:	69a3      	ldr	r3, [r4, #24]
 800dbf4:	60a3      	str	r3, [r4, #8]
 800dbf6:	89a3      	ldrh	r3, [r4, #12]
 800dbf8:	071a      	lsls	r2, r3, #28
 800dbfa:	d52f      	bpl.n	800dc5c <__swbuf_r+0x84>
 800dbfc:	6923      	ldr	r3, [r4, #16]
 800dbfe:	b36b      	cbz	r3, 800dc5c <__swbuf_r+0x84>
 800dc00:	6923      	ldr	r3, [r4, #16]
 800dc02:	6820      	ldr	r0, [r4, #0]
 800dc04:	1ac0      	subs	r0, r0, r3
 800dc06:	6963      	ldr	r3, [r4, #20]
 800dc08:	b2f6      	uxtb	r6, r6
 800dc0a:	4283      	cmp	r3, r0
 800dc0c:	4637      	mov	r7, r6
 800dc0e:	dc04      	bgt.n	800dc1a <__swbuf_r+0x42>
 800dc10:	4621      	mov	r1, r4
 800dc12:	4628      	mov	r0, r5
 800dc14:	f000 f974 	bl	800df00 <_fflush_r>
 800dc18:	bb30      	cbnz	r0, 800dc68 <__swbuf_r+0x90>
 800dc1a:	68a3      	ldr	r3, [r4, #8]
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	60a3      	str	r3, [r4, #8]
 800dc20:	6823      	ldr	r3, [r4, #0]
 800dc22:	1c5a      	adds	r2, r3, #1
 800dc24:	6022      	str	r2, [r4, #0]
 800dc26:	701e      	strb	r6, [r3, #0]
 800dc28:	6963      	ldr	r3, [r4, #20]
 800dc2a:	3001      	adds	r0, #1
 800dc2c:	4283      	cmp	r3, r0
 800dc2e:	d004      	beq.n	800dc3a <__swbuf_r+0x62>
 800dc30:	89a3      	ldrh	r3, [r4, #12]
 800dc32:	07db      	lsls	r3, r3, #31
 800dc34:	d506      	bpl.n	800dc44 <__swbuf_r+0x6c>
 800dc36:	2e0a      	cmp	r6, #10
 800dc38:	d104      	bne.n	800dc44 <__swbuf_r+0x6c>
 800dc3a:	4621      	mov	r1, r4
 800dc3c:	4628      	mov	r0, r5
 800dc3e:	f000 f95f 	bl	800df00 <_fflush_r>
 800dc42:	b988      	cbnz	r0, 800dc68 <__swbuf_r+0x90>
 800dc44:	4638      	mov	r0, r7
 800dc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc48:	4b0a      	ldr	r3, [pc, #40]	; (800dc74 <__swbuf_r+0x9c>)
 800dc4a:	429c      	cmp	r4, r3
 800dc4c:	d101      	bne.n	800dc52 <__swbuf_r+0x7a>
 800dc4e:	68ac      	ldr	r4, [r5, #8]
 800dc50:	e7cf      	b.n	800dbf2 <__swbuf_r+0x1a>
 800dc52:	4b09      	ldr	r3, [pc, #36]	; (800dc78 <__swbuf_r+0xa0>)
 800dc54:	429c      	cmp	r4, r3
 800dc56:	bf08      	it	eq
 800dc58:	68ec      	ldreq	r4, [r5, #12]
 800dc5a:	e7ca      	b.n	800dbf2 <__swbuf_r+0x1a>
 800dc5c:	4621      	mov	r1, r4
 800dc5e:	4628      	mov	r0, r5
 800dc60:	f000 f82c 	bl	800dcbc <__swsetup_r>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d0cb      	beq.n	800dc00 <__swbuf_r+0x28>
 800dc68:	f04f 37ff 	mov.w	r7, #4294967295
 800dc6c:	e7ea      	b.n	800dc44 <__swbuf_r+0x6c>
 800dc6e:	bf00      	nop
 800dc70:	0800f6e4 	.word	0x0800f6e4
 800dc74:	0800f704 	.word	0x0800f704
 800dc78:	0800f6c4 	.word	0x0800f6c4

0800dc7c <__ascii_wctomb>:
 800dc7c:	b149      	cbz	r1, 800dc92 <__ascii_wctomb+0x16>
 800dc7e:	2aff      	cmp	r2, #255	; 0xff
 800dc80:	bf85      	ittet	hi
 800dc82:	238a      	movhi	r3, #138	; 0x8a
 800dc84:	6003      	strhi	r3, [r0, #0]
 800dc86:	700a      	strbls	r2, [r1, #0]
 800dc88:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc8c:	bf98      	it	ls
 800dc8e:	2001      	movls	r0, #1
 800dc90:	4770      	bx	lr
 800dc92:	4608      	mov	r0, r1
 800dc94:	4770      	bx	lr
	...

0800dc98 <_write_r>:
 800dc98:	b538      	push	{r3, r4, r5, lr}
 800dc9a:	4d07      	ldr	r5, [pc, #28]	; (800dcb8 <_write_r+0x20>)
 800dc9c:	4604      	mov	r4, r0
 800dc9e:	4608      	mov	r0, r1
 800dca0:	4611      	mov	r1, r2
 800dca2:	2200      	movs	r2, #0
 800dca4:	602a      	str	r2, [r5, #0]
 800dca6:	461a      	mov	r2, r3
 800dca8:	f7f5 fd4d 	bl	8003746 <_write>
 800dcac:	1c43      	adds	r3, r0, #1
 800dcae:	d102      	bne.n	800dcb6 <_write_r+0x1e>
 800dcb0:	682b      	ldr	r3, [r5, #0]
 800dcb2:	b103      	cbz	r3, 800dcb6 <_write_r+0x1e>
 800dcb4:	6023      	str	r3, [r4, #0]
 800dcb6:	bd38      	pop	{r3, r4, r5, pc}
 800dcb8:	20000678 	.word	0x20000678

0800dcbc <__swsetup_r>:
 800dcbc:	4b32      	ldr	r3, [pc, #200]	; (800dd88 <__swsetup_r+0xcc>)
 800dcbe:	b570      	push	{r4, r5, r6, lr}
 800dcc0:	681d      	ldr	r5, [r3, #0]
 800dcc2:	4606      	mov	r6, r0
 800dcc4:	460c      	mov	r4, r1
 800dcc6:	b125      	cbz	r5, 800dcd2 <__swsetup_r+0x16>
 800dcc8:	69ab      	ldr	r3, [r5, #24]
 800dcca:	b913      	cbnz	r3, 800dcd2 <__swsetup_r+0x16>
 800dccc:	4628      	mov	r0, r5
 800dcce:	f7fe fb65 	bl	800c39c <__sinit>
 800dcd2:	4b2e      	ldr	r3, [pc, #184]	; (800dd8c <__swsetup_r+0xd0>)
 800dcd4:	429c      	cmp	r4, r3
 800dcd6:	d10f      	bne.n	800dcf8 <__swsetup_r+0x3c>
 800dcd8:	686c      	ldr	r4, [r5, #4]
 800dcda:	89a3      	ldrh	r3, [r4, #12]
 800dcdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dce0:	0719      	lsls	r1, r3, #28
 800dce2:	d42c      	bmi.n	800dd3e <__swsetup_r+0x82>
 800dce4:	06dd      	lsls	r5, r3, #27
 800dce6:	d411      	bmi.n	800dd0c <__swsetup_r+0x50>
 800dce8:	2309      	movs	r3, #9
 800dcea:	6033      	str	r3, [r6, #0]
 800dcec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dcf0:	81a3      	strh	r3, [r4, #12]
 800dcf2:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf6:	e03e      	b.n	800dd76 <__swsetup_r+0xba>
 800dcf8:	4b25      	ldr	r3, [pc, #148]	; (800dd90 <__swsetup_r+0xd4>)
 800dcfa:	429c      	cmp	r4, r3
 800dcfc:	d101      	bne.n	800dd02 <__swsetup_r+0x46>
 800dcfe:	68ac      	ldr	r4, [r5, #8]
 800dd00:	e7eb      	b.n	800dcda <__swsetup_r+0x1e>
 800dd02:	4b24      	ldr	r3, [pc, #144]	; (800dd94 <__swsetup_r+0xd8>)
 800dd04:	429c      	cmp	r4, r3
 800dd06:	bf08      	it	eq
 800dd08:	68ec      	ldreq	r4, [r5, #12]
 800dd0a:	e7e6      	b.n	800dcda <__swsetup_r+0x1e>
 800dd0c:	0758      	lsls	r0, r3, #29
 800dd0e:	d512      	bpl.n	800dd36 <__swsetup_r+0x7a>
 800dd10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd12:	b141      	cbz	r1, 800dd26 <__swsetup_r+0x6a>
 800dd14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd18:	4299      	cmp	r1, r3
 800dd1a:	d002      	beq.n	800dd22 <__swsetup_r+0x66>
 800dd1c:	4630      	mov	r0, r6
 800dd1e:	f7fb fe17 	bl	8009950 <_free_r>
 800dd22:	2300      	movs	r3, #0
 800dd24:	6363      	str	r3, [r4, #52]	; 0x34
 800dd26:	89a3      	ldrh	r3, [r4, #12]
 800dd28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd2c:	81a3      	strh	r3, [r4, #12]
 800dd2e:	2300      	movs	r3, #0
 800dd30:	6063      	str	r3, [r4, #4]
 800dd32:	6923      	ldr	r3, [r4, #16]
 800dd34:	6023      	str	r3, [r4, #0]
 800dd36:	89a3      	ldrh	r3, [r4, #12]
 800dd38:	f043 0308 	orr.w	r3, r3, #8
 800dd3c:	81a3      	strh	r3, [r4, #12]
 800dd3e:	6923      	ldr	r3, [r4, #16]
 800dd40:	b94b      	cbnz	r3, 800dd56 <__swsetup_r+0x9a>
 800dd42:	89a3      	ldrh	r3, [r4, #12]
 800dd44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd4c:	d003      	beq.n	800dd56 <__swsetup_r+0x9a>
 800dd4e:	4621      	mov	r1, r4
 800dd50:	4630      	mov	r0, r6
 800dd52:	f000 f95b 	bl	800e00c <__smakebuf_r>
 800dd56:	89a0      	ldrh	r0, [r4, #12]
 800dd58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd5c:	f010 0301 	ands.w	r3, r0, #1
 800dd60:	d00a      	beq.n	800dd78 <__swsetup_r+0xbc>
 800dd62:	2300      	movs	r3, #0
 800dd64:	60a3      	str	r3, [r4, #8]
 800dd66:	6963      	ldr	r3, [r4, #20]
 800dd68:	425b      	negs	r3, r3
 800dd6a:	61a3      	str	r3, [r4, #24]
 800dd6c:	6923      	ldr	r3, [r4, #16]
 800dd6e:	b943      	cbnz	r3, 800dd82 <__swsetup_r+0xc6>
 800dd70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd74:	d1ba      	bne.n	800dcec <__swsetup_r+0x30>
 800dd76:	bd70      	pop	{r4, r5, r6, pc}
 800dd78:	0781      	lsls	r1, r0, #30
 800dd7a:	bf58      	it	pl
 800dd7c:	6963      	ldrpl	r3, [r4, #20]
 800dd7e:	60a3      	str	r3, [r4, #8]
 800dd80:	e7f4      	b.n	800dd6c <__swsetup_r+0xb0>
 800dd82:	2000      	movs	r0, #0
 800dd84:	e7f7      	b.n	800dd76 <__swsetup_r+0xba>
 800dd86:	bf00      	nop
 800dd88:	20000088 	.word	0x20000088
 800dd8c:	0800f6e4 	.word	0x0800f6e4
 800dd90:	0800f704 	.word	0x0800f704
 800dd94:	0800f6c4 	.word	0x0800f6c4

0800dd98 <__assert_func>:
 800dd98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd9a:	4614      	mov	r4, r2
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	4b09      	ldr	r3, [pc, #36]	; (800ddc4 <__assert_func+0x2c>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4605      	mov	r5, r0
 800dda4:	68d8      	ldr	r0, [r3, #12]
 800dda6:	b14c      	cbz	r4, 800ddbc <__assert_func+0x24>
 800dda8:	4b07      	ldr	r3, [pc, #28]	; (800ddc8 <__assert_func+0x30>)
 800ddaa:	9100      	str	r1, [sp, #0]
 800ddac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddb0:	4906      	ldr	r1, [pc, #24]	; (800ddcc <__assert_func+0x34>)
 800ddb2:	462b      	mov	r3, r5
 800ddb4:	f000 f8e0 	bl	800df78 <fiprintf>
 800ddb8:	f000 f9c4 	bl	800e144 <abort>
 800ddbc:	4b04      	ldr	r3, [pc, #16]	; (800ddd0 <__assert_func+0x38>)
 800ddbe:	461c      	mov	r4, r3
 800ddc0:	e7f3      	b.n	800ddaa <__assert_func+0x12>
 800ddc2:	bf00      	nop
 800ddc4:	20000088 	.word	0x20000088
 800ddc8:	0800f90d 	.word	0x0800f90d
 800ddcc:	0800f91a 	.word	0x0800f91a
 800ddd0:	0800f948 	.word	0x0800f948

0800ddd4 <_close_r>:
 800ddd4:	b538      	push	{r3, r4, r5, lr}
 800ddd6:	4d06      	ldr	r5, [pc, #24]	; (800ddf0 <_close_r+0x1c>)
 800ddd8:	2300      	movs	r3, #0
 800ddda:	4604      	mov	r4, r0
 800dddc:	4608      	mov	r0, r1
 800ddde:	602b      	str	r3, [r5, #0]
 800dde0:	f7f5 fccd 	bl	800377e <_close>
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	d102      	bne.n	800ddee <_close_r+0x1a>
 800dde8:	682b      	ldr	r3, [r5, #0]
 800ddea:	b103      	cbz	r3, 800ddee <_close_r+0x1a>
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	bd38      	pop	{r3, r4, r5, pc}
 800ddf0:	20000678 	.word	0x20000678

0800ddf4 <__sflush_r>:
 800ddf4:	898a      	ldrh	r2, [r1, #12]
 800ddf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddfa:	4605      	mov	r5, r0
 800ddfc:	0710      	lsls	r0, r2, #28
 800ddfe:	460c      	mov	r4, r1
 800de00:	d458      	bmi.n	800deb4 <__sflush_r+0xc0>
 800de02:	684b      	ldr	r3, [r1, #4]
 800de04:	2b00      	cmp	r3, #0
 800de06:	dc05      	bgt.n	800de14 <__sflush_r+0x20>
 800de08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	dc02      	bgt.n	800de14 <__sflush_r+0x20>
 800de0e:	2000      	movs	r0, #0
 800de10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de16:	2e00      	cmp	r6, #0
 800de18:	d0f9      	beq.n	800de0e <__sflush_r+0x1a>
 800de1a:	2300      	movs	r3, #0
 800de1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de20:	682f      	ldr	r7, [r5, #0]
 800de22:	602b      	str	r3, [r5, #0]
 800de24:	d032      	beq.n	800de8c <__sflush_r+0x98>
 800de26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de28:	89a3      	ldrh	r3, [r4, #12]
 800de2a:	075a      	lsls	r2, r3, #29
 800de2c:	d505      	bpl.n	800de3a <__sflush_r+0x46>
 800de2e:	6863      	ldr	r3, [r4, #4]
 800de30:	1ac0      	subs	r0, r0, r3
 800de32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de34:	b10b      	cbz	r3, 800de3a <__sflush_r+0x46>
 800de36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de38:	1ac0      	subs	r0, r0, r3
 800de3a:	2300      	movs	r3, #0
 800de3c:	4602      	mov	r2, r0
 800de3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de40:	6a21      	ldr	r1, [r4, #32]
 800de42:	4628      	mov	r0, r5
 800de44:	47b0      	blx	r6
 800de46:	1c43      	adds	r3, r0, #1
 800de48:	89a3      	ldrh	r3, [r4, #12]
 800de4a:	d106      	bne.n	800de5a <__sflush_r+0x66>
 800de4c:	6829      	ldr	r1, [r5, #0]
 800de4e:	291d      	cmp	r1, #29
 800de50:	d82c      	bhi.n	800deac <__sflush_r+0xb8>
 800de52:	4a2a      	ldr	r2, [pc, #168]	; (800defc <__sflush_r+0x108>)
 800de54:	40ca      	lsrs	r2, r1
 800de56:	07d6      	lsls	r6, r2, #31
 800de58:	d528      	bpl.n	800deac <__sflush_r+0xb8>
 800de5a:	2200      	movs	r2, #0
 800de5c:	6062      	str	r2, [r4, #4]
 800de5e:	04d9      	lsls	r1, r3, #19
 800de60:	6922      	ldr	r2, [r4, #16]
 800de62:	6022      	str	r2, [r4, #0]
 800de64:	d504      	bpl.n	800de70 <__sflush_r+0x7c>
 800de66:	1c42      	adds	r2, r0, #1
 800de68:	d101      	bne.n	800de6e <__sflush_r+0x7a>
 800de6a:	682b      	ldr	r3, [r5, #0]
 800de6c:	b903      	cbnz	r3, 800de70 <__sflush_r+0x7c>
 800de6e:	6560      	str	r0, [r4, #84]	; 0x54
 800de70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de72:	602f      	str	r7, [r5, #0]
 800de74:	2900      	cmp	r1, #0
 800de76:	d0ca      	beq.n	800de0e <__sflush_r+0x1a>
 800de78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de7c:	4299      	cmp	r1, r3
 800de7e:	d002      	beq.n	800de86 <__sflush_r+0x92>
 800de80:	4628      	mov	r0, r5
 800de82:	f7fb fd65 	bl	8009950 <_free_r>
 800de86:	2000      	movs	r0, #0
 800de88:	6360      	str	r0, [r4, #52]	; 0x34
 800de8a:	e7c1      	b.n	800de10 <__sflush_r+0x1c>
 800de8c:	6a21      	ldr	r1, [r4, #32]
 800de8e:	2301      	movs	r3, #1
 800de90:	4628      	mov	r0, r5
 800de92:	47b0      	blx	r6
 800de94:	1c41      	adds	r1, r0, #1
 800de96:	d1c7      	bne.n	800de28 <__sflush_r+0x34>
 800de98:	682b      	ldr	r3, [r5, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d0c4      	beq.n	800de28 <__sflush_r+0x34>
 800de9e:	2b1d      	cmp	r3, #29
 800dea0:	d001      	beq.n	800dea6 <__sflush_r+0xb2>
 800dea2:	2b16      	cmp	r3, #22
 800dea4:	d101      	bne.n	800deaa <__sflush_r+0xb6>
 800dea6:	602f      	str	r7, [r5, #0]
 800dea8:	e7b1      	b.n	800de0e <__sflush_r+0x1a>
 800deaa:	89a3      	ldrh	r3, [r4, #12]
 800deac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800deb0:	81a3      	strh	r3, [r4, #12]
 800deb2:	e7ad      	b.n	800de10 <__sflush_r+0x1c>
 800deb4:	690f      	ldr	r7, [r1, #16]
 800deb6:	2f00      	cmp	r7, #0
 800deb8:	d0a9      	beq.n	800de0e <__sflush_r+0x1a>
 800deba:	0793      	lsls	r3, r2, #30
 800debc:	680e      	ldr	r6, [r1, #0]
 800debe:	bf08      	it	eq
 800dec0:	694b      	ldreq	r3, [r1, #20]
 800dec2:	600f      	str	r7, [r1, #0]
 800dec4:	bf18      	it	ne
 800dec6:	2300      	movne	r3, #0
 800dec8:	eba6 0807 	sub.w	r8, r6, r7
 800decc:	608b      	str	r3, [r1, #8]
 800dece:	f1b8 0f00 	cmp.w	r8, #0
 800ded2:	dd9c      	ble.n	800de0e <__sflush_r+0x1a>
 800ded4:	6a21      	ldr	r1, [r4, #32]
 800ded6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ded8:	4643      	mov	r3, r8
 800deda:	463a      	mov	r2, r7
 800dedc:	4628      	mov	r0, r5
 800dede:	47b0      	blx	r6
 800dee0:	2800      	cmp	r0, #0
 800dee2:	dc06      	bgt.n	800def2 <__sflush_r+0xfe>
 800dee4:	89a3      	ldrh	r3, [r4, #12]
 800dee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800deea:	81a3      	strh	r3, [r4, #12]
 800deec:	f04f 30ff 	mov.w	r0, #4294967295
 800def0:	e78e      	b.n	800de10 <__sflush_r+0x1c>
 800def2:	4407      	add	r7, r0
 800def4:	eba8 0800 	sub.w	r8, r8, r0
 800def8:	e7e9      	b.n	800dece <__sflush_r+0xda>
 800defa:	bf00      	nop
 800defc:	20400001 	.word	0x20400001

0800df00 <_fflush_r>:
 800df00:	b538      	push	{r3, r4, r5, lr}
 800df02:	690b      	ldr	r3, [r1, #16]
 800df04:	4605      	mov	r5, r0
 800df06:	460c      	mov	r4, r1
 800df08:	b913      	cbnz	r3, 800df10 <_fflush_r+0x10>
 800df0a:	2500      	movs	r5, #0
 800df0c:	4628      	mov	r0, r5
 800df0e:	bd38      	pop	{r3, r4, r5, pc}
 800df10:	b118      	cbz	r0, 800df1a <_fflush_r+0x1a>
 800df12:	6983      	ldr	r3, [r0, #24]
 800df14:	b90b      	cbnz	r3, 800df1a <_fflush_r+0x1a>
 800df16:	f7fe fa41 	bl	800c39c <__sinit>
 800df1a:	4b14      	ldr	r3, [pc, #80]	; (800df6c <_fflush_r+0x6c>)
 800df1c:	429c      	cmp	r4, r3
 800df1e:	d11b      	bne.n	800df58 <_fflush_r+0x58>
 800df20:	686c      	ldr	r4, [r5, #4]
 800df22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d0ef      	beq.n	800df0a <_fflush_r+0xa>
 800df2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df2c:	07d0      	lsls	r0, r2, #31
 800df2e:	d404      	bmi.n	800df3a <_fflush_r+0x3a>
 800df30:	0599      	lsls	r1, r3, #22
 800df32:	d402      	bmi.n	800df3a <_fflush_r+0x3a>
 800df34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df36:	f7fe fe42 	bl	800cbbe <__retarget_lock_acquire_recursive>
 800df3a:	4628      	mov	r0, r5
 800df3c:	4621      	mov	r1, r4
 800df3e:	f7ff ff59 	bl	800ddf4 <__sflush_r>
 800df42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df44:	07da      	lsls	r2, r3, #31
 800df46:	4605      	mov	r5, r0
 800df48:	d4e0      	bmi.n	800df0c <_fflush_r+0xc>
 800df4a:	89a3      	ldrh	r3, [r4, #12]
 800df4c:	059b      	lsls	r3, r3, #22
 800df4e:	d4dd      	bmi.n	800df0c <_fflush_r+0xc>
 800df50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df52:	f7fe fe35 	bl	800cbc0 <__retarget_lock_release_recursive>
 800df56:	e7d9      	b.n	800df0c <_fflush_r+0xc>
 800df58:	4b05      	ldr	r3, [pc, #20]	; (800df70 <_fflush_r+0x70>)
 800df5a:	429c      	cmp	r4, r3
 800df5c:	d101      	bne.n	800df62 <_fflush_r+0x62>
 800df5e:	68ac      	ldr	r4, [r5, #8]
 800df60:	e7df      	b.n	800df22 <_fflush_r+0x22>
 800df62:	4b04      	ldr	r3, [pc, #16]	; (800df74 <_fflush_r+0x74>)
 800df64:	429c      	cmp	r4, r3
 800df66:	bf08      	it	eq
 800df68:	68ec      	ldreq	r4, [r5, #12]
 800df6a:	e7da      	b.n	800df22 <_fflush_r+0x22>
 800df6c:	0800f6e4 	.word	0x0800f6e4
 800df70:	0800f704 	.word	0x0800f704
 800df74:	0800f6c4 	.word	0x0800f6c4

0800df78 <fiprintf>:
 800df78:	b40e      	push	{r1, r2, r3}
 800df7a:	b503      	push	{r0, r1, lr}
 800df7c:	4601      	mov	r1, r0
 800df7e:	ab03      	add	r3, sp, #12
 800df80:	4805      	ldr	r0, [pc, #20]	; (800df98 <fiprintf+0x20>)
 800df82:	f853 2b04 	ldr.w	r2, [r3], #4
 800df86:	6800      	ldr	r0, [r0, #0]
 800df88:	9301      	str	r3, [sp, #4]
 800df8a:	f7ff fc95 	bl	800d8b8 <_vfiprintf_r>
 800df8e:	b002      	add	sp, #8
 800df90:	f85d eb04 	ldr.w	lr, [sp], #4
 800df94:	b003      	add	sp, #12
 800df96:	4770      	bx	lr
 800df98:	20000088 	.word	0x20000088

0800df9c <_lseek_r>:
 800df9c:	b538      	push	{r3, r4, r5, lr}
 800df9e:	4d07      	ldr	r5, [pc, #28]	; (800dfbc <_lseek_r+0x20>)
 800dfa0:	4604      	mov	r4, r0
 800dfa2:	4608      	mov	r0, r1
 800dfa4:	4611      	mov	r1, r2
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	602a      	str	r2, [r5, #0]
 800dfaa:	461a      	mov	r2, r3
 800dfac:	f7f5 fc0e 	bl	80037cc <_lseek>
 800dfb0:	1c43      	adds	r3, r0, #1
 800dfb2:	d102      	bne.n	800dfba <_lseek_r+0x1e>
 800dfb4:	682b      	ldr	r3, [r5, #0]
 800dfb6:	b103      	cbz	r3, 800dfba <_lseek_r+0x1e>
 800dfb8:	6023      	str	r3, [r4, #0]
 800dfba:	bd38      	pop	{r3, r4, r5, pc}
 800dfbc:	20000678 	.word	0x20000678

0800dfc0 <__swhatbuf_r>:
 800dfc0:	b570      	push	{r4, r5, r6, lr}
 800dfc2:	460e      	mov	r6, r1
 800dfc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfc8:	2900      	cmp	r1, #0
 800dfca:	b096      	sub	sp, #88	; 0x58
 800dfcc:	4614      	mov	r4, r2
 800dfce:	461d      	mov	r5, r3
 800dfd0:	da08      	bge.n	800dfe4 <__swhatbuf_r+0x24>
 800dfd2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	602a      	str	r2, [r5, #0]
 800dfda:	061a      	lsls	r2, r3, #24
 800dfdc:	d410      	bmi.n	800e000 <__swhatbuf_r+0x40>
 800dfde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfe2:	e00e      	b.n	800e002 <__swhatbuf_r+0x42>
 800dfe4:	466a      	mov	r2, sp
 800dfe6:	f000 f8b5 	bl	800e154 <_fstat_r>
 800dfea:	2800      	cmp	r0, #0
 800dfec:	dbf1      	blt.n	800dfd2 <__swhatbuf_r+0x12>
 800dfee:	9a01      	ldr	r2, [sp, #4]
 800dff0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dff4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dff8:	425a      	negs	r2, r3
 800dffa:	415a      	adcs	r2, r3
 800dffc:	602a      	str	r2, [r5, #0]
 800dffe:	e7ee      	b.n	800dfde <__swhatbuf_r+0x1e>
 800e000:	2340      	movs	r3, #64	; 0x40
 800e002:	2000      	movs	r0, #0
 800e004:	6023      	str	r3, [r4, #0]
 800e006:	b016      	add	sp, #88	; 0x58
 800e008:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e00c <__smakebuf_r>:
 800e00c:	898b      	ldrh	r3, [r1, #12]
 800e00e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e010:	079d      	lsls	r5, r3, #30
 800e012:	4606      	mov	r6, r0
 800e014:	460c      	mov	r4, r1
 800e016:	d507      	bpl.n	800e028 <__smakebuf_r+0x1c>
 800e018:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e01c:	6023      	str	r3, [r4, #0]
 800e01e:	6123      	str	r3, [r4, #16]
 800e020:	2301      	movs	r3, #1
 800e022:	6163      	str	r3, [r4, #20]
 800e024:	b002      	add	sp, #8
 800e026:	bd70      	pop	{r4, r5, r6, pc}
 800e028:	ab01      	add	r3, sp, #4
 800e02a:	466a      	mov	r2, sp
 800e02c:	f7ff ffc8 	bl	800dfc0 <__swhatbuf_r>
 800e030:	9900      	ldr	r1, [sp, #0]
 800e032:	4605      	mov	r5, r0
 800e034:	4630      	mov	r0, r6
 800e036:	f7fb fcf7 	bl	8009a28 <_malloc_r>
 800e03a:	b948      	cbnz	r0, 800e050 <__smakebuf_r+0x44>
 800e03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e040:	059a      	lsls	r2, r3, #22
 800e042:	d4ef      	bmi.n	800e024 <__smakebuf_r+0x18>
 800e044:	f023 0303 	bic.w	r3, r3, #3
 800e048:	f043 0302 	orr.w	r3, r3, #2
 800e04c:	81a3      	strh	r3, [r4, #12]
 800e04e:	e7e3      	b.n	800e018 <__smakebuf_r+0xc>
 800e050:	4b0d      	ldr	r3, [pc, #52]	; (800e088 <__smakebuf_r+0x7c>)
 800e052:	62b3      	str	r3, [r6, #40]	; 0x28
 800e054:	89a3      	ldrh	r3, [r4, #12]
 800e056:	6020      	str	r0, [r4, #0]
 800e058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e05c:	81a3      	strh	r3, [r4, #12]
 800e05e:	9b00      	ldr	r3, [sp, #0]
 800e060:	6163      	str	r3, [r4, #20]
 800e062:	9b01      	ldr	r3, [sp, #4]
 800e064:	6120      	str	r0, [r4, #16]
 800e066:	b15b      	cbz	r3, 800e080 <__smakebuf_r+0x74>
 800e068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e06c:	4630      	mov	r0, r6
 800e06e:	f000 f883 	bl	800e178 <_isatty_r>
 800e072:	b128      	cbz	r0, 800e080 <__smakebuf_r+0x74>
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	f023 0303 	bic.w	r3, r3, #3
 800e07a:	f043 0301 	orr.w	r3, r3, #1
 800e07e:	81a3      	strh	r3, [r4, #12]
 800e080:	89a0      	ldrh	r0, [r4, #12]
 800e082:	4305      	orrs	r5, r0
 800e084:	81a5      	strh	r5, [r4, #12]
 800e086:	e7cd      	b.n	800e024 <__smakebuf_r+0x18>
 800e088:	0800c335 	.word	0x0800c335

0800e08c <memmove>:
 800e08c:	4288      	cmp	r0, r1
 800e08e:	b510      	push	{r4, lr}
 800e090:	eb01 0402 	add.w	r4, r1, r2
 800e094:	d902      	bls.n	800e09c <memmove+0x10>
 800e096:	4284      	cmp	r4, r0
 800e098:	4623      	mov	r3, r4
 800e09a:	d807      	bhi.n	800e0ac <memmove+0x20>
 800e09c:	1e43      	subs	r3, r0, #1
 800e09e:	42a1      	cmp	r1, r4
 800e0a0:	d008      	beq.n	800e0b4 <memmove+0x28>
 800e0a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0aa:	e7f8      	b.n	800e09e <memmove+0x12>
 800e0ac:	4402      	add	r2, r0
 800e0ae:	4601      	mov	r1, r0
 800e0b0:	428a      	cmp	r2, r1
 800e0b2:	d100      	bne.n	800e0b6 <memmove+0x2a>
 800e0b4:	bd10      	pop	{r4, pc}
 800e0b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0be:	e7f7      	b.n	800e0b0 <memmove+0x24>

0800e0c0 <_realloc_r>:
 800e0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c4:	4680      	mov	r8, r0
 800e0c6:	4614      	mov	r4, r2
 800e0c8:	460e      	mov	r6, r1
 800e0ca:	b921      	cbnz	r1, 800e0d6 <_realloc_r+0x16>
 800e0cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d0:	4611      	mov	r1, r2
 800e0d2:	f7fb bca9 	b.w	8009a28 <_malloc_r>
 800e0d6:	b92a      	cbnz	r2, 800e0e4 <_realloc_r+0x24>
 800e0d8:	f7fb fc3a 	bl	8009950 <_free_r>
 800e0dc:	4625      	mov	r5, r4
 800e0de:	4628      	mov	r0, r5
 800e0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e4:	f000 f858 	bl	800e198 <_malloc_usable_size_r>
 800e0e8:	4284      	cmp	r4, r0
 800e0ea:	4607      	mov	r7, r0
 800e0ec:	d802      	bhi.n	800e0f4 <_realloc_r+0x34>
 800e0ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e0f2:	d812      	bhi.n	800e11a <_realloc_r+0x5a>
 800e0f4:	4621      	mov	r1, r4
 800e0f6:	4640      	mov	r0, r8
 800e0f8:	f7fb fc96 	bl	8009a28 <_malloc_r>
 800e0fc:	4605      	mov	r5, r0
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d0ed      	beq.n	800e0de <_realloc_r+0x1e>
 800e102:	42bc      	cmp	r4, r7
 800e104:	4622      	mov	r2, r4
 800e106:	4631      	mov	r1, r6
 800e108:	bf28      	it	cs
 800e10a:	463a      	movcs	r2, r7
 800e10c:	f7fb fc0a 	bl	8009924 <memcpy>
 800e110:	4631      	mov	r1, r6
 800e112:	4640      	mov	r0, r8
 800e114:	f7fb fc1c 	bl	8009950 <_free_r>
 800e118:	e7e1      	b.n	800e0de <_realloc_r+0x1e>
 800e11a:	4635      	mov	r5, r6
 800e11c:	e7df      	b.n	800e0de <_realloc_r+0x1e>
	...

0800e120 <_read_r>:
 800e120:	b538      	push	{r3, r4, r5, lr}
 800e122:	4d07      	ldr	r5, [pc, #28]	; (800e140 <_read_r+0x20>)
 800e124:	4604      	mov	r4, r0
 800e126:	4608      	mov	r0, r1
 800e128:	4611      	mov	r1, r2
 800e12a:	2200      	movs	r2, #0
 800e12c:	602a      	str	r2, [r5, #0]
 800e12e:	461a      	mov	r2, r3
 800e130:	f7f5 faec 	bl	800370c <_read>
 800e134:	1c43      	adds	r3, r0, #1
 800e136:	d102      	bne.n	800e13e <_read_r+0x1e>
 800e138:	682b      	ldr	r3, [r5, #0]
 800e13a:	b103      	cbz	r3, 800e13e <_read_r+0x1e>
 800e13c:	6023      	str	r3, [r4, #0]
 800e13e:	bd38      	pop	{r3, r4, r5, pc}
 800e140:	20000678 	.word	0x20000678

0800e144 <abort>:
 800e144:	b508      	push	{r3, lr}
 800e146:	2006      	movs	r0, #6
 800e148:	f000 f856 	bl	800e1f8 <raise>
 800e14c:	2001      	movs	r0, #1
 800e14e:	f7f5 fad3 	bl	80036f8 <_exit>
	...

0800e154 <_fstat_r>:
 800e154:	b538      	push	{r3, r4, r5, lr}
 800e156:	4d07      	ldr	r5, [pc, #28]	; (800e174 <_fstat_r+0x20>)
 800e158:	2300      	movs	r3, #0
 800e15a:	4604      	mov	r4, r0
 800e15c:	4608      	mov	r0, r1
 800e15e:	4611      	mov	r1, r2
 800e160:	602b      	str	r3, [r5, #0]
 800e162:	f7f5 fb18 	bl	8003796 <_fstat>
 800e166:	1c43      	adds	r3, r0, #1
 800e168:	d102      	bne.n	800e170 <_fstat_r+0x1c>
 800e16a:	682b      	ldr	r3, [r5, #0]
 800e16c:	b103      	cbz	r3, 800e170 <_fstat_r+0x1c>
 800e16e:	6023      	str	r3, [r4, #0]
 800e170:	bd38      	pop	{r3, r4, r5, pc}
 800e172:	bf00      	nop
 800e174:	20000678 	.word	0x20000678

0800e178 <_isatty_r>:
 800e178:	b538      	push	{r3, r4, r5, lr}
 800e17a:	4d06      	ldr	r5, [pc, #24]	; (800e194 <_isatty_r+0x1c>)
 800e17c:	2300      	movs	r3, #0
 800e17e:	4604      	mov	r4, r0
 800e180:	4608      	mov	r0, r1
 800e182:	602b      	str	r3, [r5, #0]
 800e184:	f7f5 fb17 	bl	80037b6 <_isatty>
 800e188:	1c43      	adds	r3, r0, #1
 800e18a:	d102      	bne.n	800e192 <_isatty_r+0x1a>
 800e18c:	682b      	ldr	r3, [r5, #0]
 800e18e:	b103      	cbz	r3, 800e192 <_isatty_r+0x1a>
 800e190:	6023      	str	r3, [r4, #0]
 800e192:	bd38      	pop	{r3, r4, r5, pc}
 800e194:	20000678 	.word	0x20000678

0800e198 <_malloc_usable_size_r>:
 800e198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e19c:	1f18      	subs	r0, r3, #4
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	bfbc      	itt	lt
 800e1a2:	580b      	ldrlt	r3, [r1, r0]
 800e1a4:	18c0      	addlt	r0, r0, r3
 800e1a6:	4770      	bx	lr

0800e1a8 <_raise_r>:
 800e1a8:	291f      	cmp	r1, #31
 800e1aa:	b538      	push	{r3, r4, r5, lr}
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	460d      	mov	r5, r1
 800e1b0:	d904      	bls.n	800e1bc <_raise_r+0x14>
 800e1b2:	2316      	movs	r3, #22
 800e1b4:	6003      	str	r3, [r0, #0]
 800e1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ba:	bd38      	pop	{r3, r4, r5, pc}
 800e1bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e1be:	b112      	cbz	r2, 800e1c6 <_raise_r+0x1e>
 800e1c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1c4:	b94b      	cbnz	r3, 800e1da <_raise_r+0x32>
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f000 f830 	bl	800e22c <_getpid_r>
 800e1cc:	462a      	mov	r2, r5
 800e1ce:	4601      	mov	r1, r0
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1d6:	f000 b817 	b.w	800e208 <_kill_r>
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	d00a      	beq.n	800e1f4 <_raise_r+0x4c>
 800e1de:	1c59      	adds	r1, r3, #1
 800e1e0:	d103      	bne.n	800e1ea <_raise_r+0x42>
 800e1e2:	2316      	movs	r3, #22
 800e1e4:	6003      	str	r3, [r0, #0]
 800e1e6:	2001      	movs	r0, #1
 800e1e8:	e7e7      	b.n	800e1ba <_raise_r+0x12>
 800e1ea:	2400      	movs	r4, #0
 800e1ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	4798      	blx	r3
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	e7e0      	b.n	800e1ba <_raise_r+0x12>

0800e1f8 <raise>:
 800e1f8:	4b02      	ldr	r3, [pc, #8]	; (800e204 <raise+0xc>)
 800e1fa:	4601      	mov	r1, r0
 800e1fc:	6818      	ldr	r0, [r3, #0]
 800e1fe:	f7ff bfd3 	b.w	800e1a8 <_raise_r>
 800e202:	bf00      	nop
 800e204:	20000088 	.word	0x20000088

0800e208 <_kill_r>:
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	4d07      	ldr	r5, [pc, #28]	; (800e228 <_kill_r+0x20>)
 800e20c:	2300      	movs	r3, #0
 800e20e:	4604      	mov	r4, r0
 800e210:	4608      	mov	r0, r1
 800e212:	4611      	mov	r1, r2
 800e214:	602b      	str	r3, [r5, #0]
 800e216:	f7f5 fa5f 	bl	80036d8 <_kill>
 800e21a:	1c43      	adds	r3, r0, #1
 800e21c:	d102      	bne.n	800e224 <_kill_r+0x1c>
 800e21e:	682b      	ldr	r3, [r5, #0]
 800e220:	b103      	cbz	r3, 800e224 <_kill_r+0x1c>
 800e222:	6023      	str	r3, [r4, #0]
 800e224:	bd38      	pop	{r3, r4, r5, pc}
 800e226:	bf00      	nop
 800e228:	20000678 	.word	0x20000678

0800e22c <_getpid_r>:
 800e22c:	f7f5 ba4c 	b.w	80036c8 <_getpid>

0800e230 <pow>:
 800e230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e232:	ed2d 8b02 	vpush	{d8}
 800e236:	eeb0 8a40 	vmov.f32	s16, s0
 800e23a:	eef0 8a60 	vmov.f32	s17, s1
 800e23e:	ec55 4b11 	vmov	r4, r5, d1
 800e242:	f000 f8c1 	bl	800e3c8 <__ieee754_pow>
 800e246:	4622      	mov	r2, r4
 800e248:	462b      	mov	r3, r5
 800e24a:	4620      	mov	r0, r4
 800e24c:	4629      	mov	r1, r5
 800e24e:	ec57 6b10 	vmov	r6, r7, d0
 800e252:	f7f2 fc6b 	bl	8000b2c <__aeabi_dcmpun>
 800e256:	2800      	cmp	r0, #0
 800e258:	d13b      	bne.n	800e2d2 <pow+0xa2>
 800e25a:	ec51 0b18 	vmov	r0, r1, d8
 800e25e:	2200      	movs	r2, #0
 800e260:	2300      	movs	r3, #0
 800e262:	f7f2 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 800e266:	b1b8      	cbz	r0, 800e298 <pow+0x68>
 800e268:	2200      	movs	r2, #0
 800e26a:	2300      	movs	r3, #0
 800e26c:	4620      	mov	r0, r4
 800e26e:	4629      	mov	r1, r5
 800e270:	f7f2 fc2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e274:	2800      	cmp	r0, #0
 800e276:	d146      	bne.n	800e306 <pow+0xd6>
 800e278:	ec45 4b10 	vmov	d0, r4, r5
 800e27c:	f000 ff15 	bl	800f0aa <finite>
 800e280:	b338      	cbz	r0, 800e2d2 <pow+0xa2>
 800e282:	2200      	movs	r2, #0
 800e284:	2300      	movs	r3, #0
 800e286:	4620      	mov	r0, r4
 800e288:	4629      	mov	r1, r5
 800e28a:	f7f2 fc27 	bl	8000adc <__aeabi_dcmplt>
 800e28e:	b300      	cbz	r0, 800e2d2 <pow+0xa2>
 800e290:	f7fb fb06 	bl	80098a0 <__errno>
 800e294:	2322      	movs	r3, #34	; 0x22
 800e296:	e01b      	b.n	800e2d0 <pow+0xa0>
 800e298:	ec47 6b10 	vmov	d0, r6, r7
 800e29c:	f000 ff05 	bl	800f0aa <finite>
 800e2a0:	b9e0      	cbnz	r0, 800e2dc <pow+0xac>
 800e2a2:	eeb0 0a48 	vmov.f32	s0, s16
 800e2a6:	eef0 0a68 	vmov.f32	s1, s17
 800e2aa:	f000 fefe 	bl	800f0aa <finite>
 800e2ae:	b1a8      	cbz	r0, 800e2dc <pow+0xac>
 800e2b0:	ec45 4b10 	vmov	d0, r4, r5
 800e2b4:	f000 fef9 	bl	800f0aa <finite>
 800e2b8:	b180      	cbz	r0, 800e2dc <pow+0xac>
 800e2ba:	4632      	mov	r2, r6
 800e2bc:	463b      	mov	r3, r7
 800e2be:	4630      	mov	r0, r6
 800e2c0:	4639      	mov	r1, r7
 800e2c2:	f7f2 fc33 	bl	8000b2c <__aeabi_dcmpun>
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	d0e2      	beq.n	800e290 <pow+0x60>
 800e2ca:	f7fb fae9 	bl	80098a0 <__errno>
 800e2ce:	2321      	movs	r3, #33	; 0x21
 800e2d0:	6003      	str	r3, [r0, #0]
 800e2d2:	ecbd 8b02 	vpop	{d8}
 800e2d6:	ec47 6b10 	vmov	d0, r6, r7
 800e2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2dc:	2200      	movs	r2, #0
 800e2de:	2300      	movs	r3, #0
 800e2e0:	4630      	mov	r0, r6
 800e2e2:	4639      	mov	r1, r7
 800e2e4:	f7f2 fbf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	d0f2      	beq.n	800e2d2 <pow+0xa2>
 800e2ec:	eeb0 0a48 	vmov.f32	s0, s16
 800e2f0:	eef0 0a68 	vmov.f32	s1, s17
 800e2f4:	f000 fed9 	bl	800f0aa <finite>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d0ea      	beq.n	800e2d2 <pow+0xa2>
 800e2fc:	ec45 4b10 	vmov	d0, r4, r5
 800e300:	f000 fed3 	bl	800f0aa <finite>
 800e304:	e7c3      	b.n	800e28e <pow+0x5e>
 800e306:	4f01      	ldr	r7, [pc, #4]	; (800e30c <pow+0xdc>)
 800e308:	2600      	movs	r6, #0
 800e30a:	e7e2      	b.n	800e2d2 <pow+0xa2>
 800e30c:	3ff00000 	.word	0x3ff00000

0800e310 <sqrt>:
 800e310:	b538      	push	{r3, r4, r5, lr}
 800e312:	ed2d 8b02 	vpush	{d8}
 800e316:	ec55 4b10 	vmov	r4, r5, d0
 800e31a:	f000 fd83 	bl	800ee24 <__ieee754_sqrt>
 800e31e:	4622      	mov	r2, r4
 800e320:	462b      	mov	r3, r5
 800e322:	4620      	mov	r0, r4
 800e324:	4629      	mov	r1, r5
 800e326:	eeb0 8a40 	vmov.f32	s16, s0
 800e32a:	eef0 8a60 	vmov.f32	s17, s1
 800e32e:	f7f2 fbfd 	bl	8000b2c <__aeabi_dcmpun>
 800e332:	b990      	cbnz	r0, 800e35a <sqrt+0x4a>
 800e334:	2200      	movs	r2, #0
 800e336:	2300      	movs	r3, #0
 800e338:	4620      	mov	r0, r4
 800e33a:	4629      	mov	r1, r5
 800e33c:	f7f2 fbce 	bl	8000adc <__aeabi_dcmplt>
 800e340:	b158      	cbz	r0, 800e35a <sqrt+0x4a>
 800e342:	f7fb faad 	bl	80098a0 <__errno>
 800e346:	2321      	movs	r3, #33	; 0x21
 800e348:	6003      	str	r3, [r0, #0]
 800e34a:	2200      	movs	r2, #0
 800e34c:	2300      	movs	r3, #0
 800e34e:	4610      	mov	r0, r2
 800e350:	4619      	mov	r1, r3
 800e352:	f7f2 fa7b 	bl	800084c <__aeabi_ddiv>
 800e356:	ec41 0b18 	vmov	d8, r0, r1
 800e35a:	eeb0 0a48 	vmov.f32	s0, s16
 800e35e:	eef0 0a68 	vmov.f32	s1, s17
 800e362:	ecbd 8b02 	vpop	{d8}
 800e366:	bd38      	pop	{r3, r4, r5, pc}

0800e368 <log10f>:
 800e368:	b508      	push	{r3, lr}
 800e36a:	ed2d 8b02 	vpush	{d8}
 800e36e:	eeb0 8a40 	vmov.f32	s16, s0
 800e372:	f000 fe09 	bl	800ef88 <__ieee754_log10f>
 800e376:	eeb4 8a48 	vcmp.f32	s16, s16
 800e37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e37e:	d60f      	bvs.n	800e3a0 <log10f+0x38>
 800e380:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e388:	d80a      	bhi.n	800e3a0 <log10f+0x38>
 800e38a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e392:	d108      	bne.n	800e3a6 <log10f+0x3e>
 800e394:	f7fb fa84 	bl	80098a0 <__errno>
 800e398:	2322      	movs	r3, #34	; 0x22
 800e39a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800e3bc <log10f+0x54>
 800e39e:	6003      	str	r3, [r0, #0]
 800e3a0:	ecbd 8b02 	vpop	{d8}
 800e3a4:	bd08      	pop	{r3, pc}
 800e3a6:	f7fb fa7b 	bl	80098a0 <__errno>
 800e3aa:	ecbd 8b02 	vpop	{d8}
 800e3ae:	2321      	movs	r3, #33	; 0x21
 800e3b0:	6003      	str	r3, [r0, #0]
 800e3b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e3b6:	4802      	ldr	r0, [pc, #8]	; (800e3c0 <log10f+0x58>)
 800e3b8:	f7fc ba4c 	b.w	800a854 <nanf>
 800e3bc:	ff800000 	.word	0xff800000
 800e3c0:	0800f948 	.word	0x0800f948
 800e3c4:	00000000 	.word	0x00000000

0800e3c8 <__ieee754_pow>:
 800e3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3cc:	ed2d 8b06 	vpush	{d8-d10}
 800e3d0:	b089      	sub	sp, #36	; 0x24
 800e3d2:	ed8d 1b00 	vstr	d1, [sp]
 800e3d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e3da:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e3de:	ea58 0102 	orrs.w	r1, r8, r2
 800e3e2:	ec57 6b10 	vmov	r6, r7, d0
 800e3e6:	d115      	bne.n	800e414 <__ieee754_pow+0x4c>
 800e3e8:	19b3      	adds	r3, r6, r6
 800e3ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e3ee:	4152      	adcs	r2, r2
 800e3f0:	4299      	cmp	r1, r3
 800e3f2:	4b89      	ldr	r3, [pc, #548]	; (800e618 <__ieee754_pow+0x250>)
 800e3f4:	4193      	sbcs	r3, r2
 800e3f6:	f080 84d2 	bcs.w	800ed9e <__ieee754_pow+0x9d6>
 800e3fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3fe:	4630      	mov	r0, r6
 800e400:	4639      	mov	r1, r7
 800e402:	f7f1 ff43 	bl	800028c <__adddf3>
 800e406:	ec41 0b10 	vmov	d0, r0, r1
 800e40a:	b009      	add	sp, #36	; 0x24
 800e40c:	ecbd 8b06 	vpop	{d8-d10}
 800e410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e414:	4b81      	ldr	r3, [pc, #516]	; (800e61c <__ieee754_pow+0x254>)
 800e416:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e41a:	429c      	cmp	r4, r3
 800e41c:	ee10 aa10 	vmov	sl, s0
 800e420:	463d      	mov	r5, r7
 800e422:	dc06      	bgt.n	800e432 <__ieee754_pow+0x6a>
 800e424:	d101      	bne.n	800e42a <__ieee754_pow+0x62>
 800e426:	2e00      	cmp	r6, #0
 800e428:	d1e7      	bne.n	800e3fa <__ieee754_pow+0x32>
 800e42a:	4598      	cmp	r8, r3
 800e42c:	dc01      	bgt.n	800e432 <__ieee754_pow+0x6a>
 800e42e:	d10f      	bne.n	800e450 <__ieee754_pow+0x88>
 800e430:	b172      	cbz	r2, 800e450 <__ieee754_pow+0x88>
 800e432:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e436:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e43a:	ea55 050a 	orrs.w	r5, r5, sl
 800e43e:	d1dc      	bne.n	800e3fa <__ieee754_pow+0x32>
 800e440:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e444:	18db      	adds	r3, r3, r3
 800e446:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e44a:	4152      	adcs	r2, r2
 800e44c:	429d      	cmp	r5, r3
 800e44e:	e7d0      	b.n	800e3f2 <__ieee754_pow+0x2a>
 800e450:	2d00      	cmp	r5, #0
 800e452:	da3b      	bge.n	800e4cc <__ieee754_pow+0x104>
 800e454:	4b72      	ldr	r3, [pc, #456]	; (800e620 <__ieee754_pow+0x258>)
 800e456:	4598      	cmp	r8, r3
 800e458:	dc51      	bgt.n	800e4fe <__ieee754_pow+0x136>
 800e45a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e45e:	4598      	cmp	r8, r3
 800e460:	f340 84ac 	ble.w	800edbc <__ieee754_pow+0x9f4>
 800e464:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e468:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e46c:	2b14      	cmp	r3, #20
 800e46e:	dd0f      	ble.n	800e490 <__ieee754_pow+0xc8>
 800e470:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e474:	fa22 f103 	lsr.w	r1, r2, r3
 800e478:	fa01 f303 	lsl.w	r3, r1, r3
 800e47c:	4293      	cmp	r3, r2
 800e47e:	f040 849d 	bne.w	800edbc <__ieee754_pow+0x9f4>
 800e482:	f001 0101 	and.w	r1, r1, #1
 800e486:	f1c1 0302 	rsb	r3, r1, #2
 800e48a:	9304      	str	r3, [sp, #16]
 800e48c:	b182      	cbz	r2, 800e4b0 <__ieee754_pow+0xe8>
 800e48e:	e05f      	b.n	800e550 <__ieee754_pow+0x188>
 800e490:	2a00      	cmp	r2, #0
 800e492:	d15b      	bne.n	800e54c <__ieee754_pow+0x184>
 800e494:	f1c3 0314 	rsb	r3, r3, #20
 800e498:	fa48 f103 	asr.w	r1, r8, r3
 800e49c:	fa01 f303 	lsl.w	r3, r1, r3
 800e4a0:	4543      	cmp	r3, r8
 800e4a2:	f040 8488 	bne.w	800edb6 <__ieee754_pow+0x9ee>
 800e4a6:	f001 0101 	and.w	r1, r1, #1
 800e4aa:	f1c1 0302 	rsb	r3, r1, #2
 800e4ae:	9304      	str	r3, [sp, #16]
 800e4b0:	4b5c      	ldr	r3, [pc, #368]	; (800e624 <__ieee754_pow+0x25c>)
 800e4b2:	4598      	cmp	r8, r3
 800e4b4:	d132      	bne.n	800e51c <__ieee754_pow+0x154>
 800e4b6:	f1b9 0f00 	cmp.w	r9, #0
 800e4ba:	f280 8478 	bge.w	800edae <__ieee754_pow+0x9e6>
 800e4be:	4959      	ldr	r1, [pc, #356]	; (800e624 <__ieee754_pow+0x25c>)
 800e4c0:	4632      	mov	r2, r6
 800e4c2:	463b      	mov	r3, r7
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	f7f2 f9c1 	bl	800084c <__aeabi_ddiv>
 800e4ca:	e79c      	b.n	800e406 <__ieee754_pow+0x3e>
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	9304      	str	r3, [sp, #16]
 800e4d0:	2a00      	cmp	r2, #0
 800e4d2:	d13d      	bne.n	800e550 <__ieee754_pow+0x188>
 800e4d4:	4b51      	ldr	r3, [pc, #324]	; (800e61c <__ieee754_pow+0x254>)
 800e4d6:	4598      	cmp	r8, r3
 800e4d8:	d1ea      	bne.n	800e4b0 <__ieee754_pow+0xe8>
 800e4da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e4de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e4e2:	ea53 030a 	orrs.w	r3, r3, sl
 800e4e6:	f000 845a 	beq.w	800ed9e <__ieee754_pow+0x9d6>
 800e4ea:	4b4f      	ldr	r3, [pc, #316]	; (800e628 <__ieee754_pow+0x260>)
 800e4ec:	429c      	cmp	r4, r3
 800e4ee:	dd08      	ble.n	800e502 <__ieee754_pow+0x13a>
 800e4f0:	f1b9 0f00 	cmp.w	r9, #0
 800e4f4:	f2c0 8457 	blt.w	800eda6 <__ieee754_pow+0x9de>
 800e4f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4fc:	e783      	b.n	800e406 <__ieee754_pow+0x3e>
 800e4fe:	2302      	movs	r3, #2
 800e500:	e7e5      	b.n	800e4ce <__ieee754_pow+0x106>
 800e502:	f1b9 0f00 	cmp.w	r9, #0
 800e506:	f04f 0000 	mov.w	r0, #0
 800e50a:	f04f 0100 	mov.w	r1, #0
 800e50e:	f6bf af7a 	bge.w	800e406 <__ieee754_pow+0x3e>
 800e512:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e516:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e51a:	e774      	b.n	800e406 <__ieee754_pow+0x3e>
 800e51c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e520:	d106      	bne.n	800e530 <__ieee754_pow+0x168>
 800e522:	4632      	mov	r2, r6
 800e524:	463b      	mov	r3, r7
 800e526:	4630      	mov	r0, r6
 800e528:	4639      	mov	r1, r7
 800e52a:	f7f2 f865 	bl	80005f8 <__aeabi_dmul>
 800e52e:	e76a      	b.n	800e406 <__ieee754_pow+0x3e>
 800e530:	4b3e      	ldr	r3, [pc, #248]	; (800e62c <__ieee754_pow+0x264>)
 800e532:	4599      	cmp	r9, r3
 800e534:	d10c      	bne.n	800e550 <__ieee754_pow+0x188>
 800e536:	2d00      	cmp	r5, #0
 800e538:	db0a      	blt.n	800e550 <__ieee754_pow+0x188>
 800e53a:	ec47 6b10 	vmov	d0, r6, r7
 800e53e:	b009      	add	sp, #36	; 0x24
 800e540:	ecbd 8b06 	vpop	{d8-d10}
 800e544:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e548:	f000 bc6c 	b.w	800ee24 <__ieee754_sqrt>
 800e54c:	2300      	movs	r3, #0
 800e54e:	9304      	str	r3, [sp, #16]
 800e550:	ec47 6b10 	vmov	d0, r6, r7
 800e554:	f000 fda0 	bl	800f098 <fabs>
 800e558:	ec51 0b10 	vmov	r0, r1, d0
 800e55c:	f1ba 0f00 	cmp.w	sl, #0
 800e560:	d129      	bne.n	800e5b6 <__ieee754_pow+0x1ee>
 800e562:	b124      	cbz	r4, 800e56e <__ieee754_pow+0x1a6>
 800e564:	4b2f      	ldr	r3, [pc, #188]	; (800e624 <__ieee754_pow+0x25c>)
 800e566:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d123      	bne.n	800e5b6 <__ieee754_pow+0x1ee>
 800e56e:	f1b9 0f00 	cmp.w	r9, #0
 800e572:	da05      	bge.n	800e580 <__ieee754_pow+0x1b8>
 800e574:	4602      	mov	r2, r0
 800e576:	460b      	mov	r3, r1
 800e578:	2000      	movs	r0, #0
 800e57a:	492a      	ldr	r1, [pc, #168]	; (800e624 <__ieee754_pow+0x25c>)
 800e57c:	f7f2 f966 	bl	800084c <__aeabi_ddiv>
 800e580:	2d00      	cmp	r5, #0
 800e582:	f6bf af40 	bge.w	800e406 <__ieee754_pow+0x3e>
 800e586:	9b04      	ldr	r3, [sp, #16]
 800e588:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e58c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e590:	4323      	orrs	r3, r4
 800e592:	d108      	bne.n	800e5a6 <__ieee754_pow+0x1de>
 800e594:	4602      	mov	r2, r0
 800e596:	460b      	mov	r3, r1
 800e598:	4610      	mov	r0, r2
 800e59a:	4619      	mov	r1, r3
 800e59c:	f7f1 fe74 	bl	8000288 <__aeabi_dsub>
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	460b      	mov	r3, r1
 800e5a4:	e78f      	b.n	800e4c6 <__ieee754_pow+0xfe>
 800e5a6:	9b04      	ldr	r3, [sp, #16]
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	f47f af2c 	bne.w	800e406 <__ieee754_pow+0x3e>
 800e5ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	e727      	b.n	800e406 <__ieee754_pow+0x3e>
 800e5b6:	0feb      	lsrs	r3, r5, #31
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	9306      	str	r3, [sp, #24]
 800e5bc:	9a06      	ldr	r2, [sp, #24]
 800e5be:	9b04      	ldr	r3, [sp, #16]
 800e5c0:	4313      	orrs	r3, r2
 800e5c2:	d102      	bne.n	800e5ca <__ieee754_pow+0x202>
 800e5c4:	4632      	mov	r2, r6
 800e5c6:	463b      	mov	r3, r7
 800e5c8:	e7e6      	b.n	800e598 <__ieee754_pow+0x1d0>
 800e5ca:	4b19      	ldr	r3, [pc, #100]	; (800e630 <__ieee754_pow+0x268>)
 800e5cc:	4598      	cmp	r8, r3
 800e5ce:	f340 80fb 	ble.w	800e7c8 <__ieee754_pow+0x400>
 800e5d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e5d6:	4598      	cmp	r8, r3
 800e5d8:	4b13      	ldr	r3, [pc, #76]	; (800e628 <__ieee754_pow+0x260>)
 800e5da:	dd0c      	ble.n	800e5f6 <__ieee754_pow+0x22e>
 800e5dc:	429c      	cmp	r4, r3
 800e5de:	dc0f      	bgt.n	800e600 <__ieee754_pow+0x238>
 800e5e0:	f1b9 0f00 	cmp.w	r9, #0
 800e5e4:	da0f      	bge.n	800e606 <__ieee754_pow+0x23e>
 800e5e6:	2000      	movs	r0, #0
 800e5e8:	b009      	add	sp, #36	; 0x24
 800e5ea:	ecbd 8b06 	vpop	{d8-d10}
 800e5ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f2:	f000 bd48 	b.w	800f086 <__math_oflow>
 800e5f6:	429c      	cmp	r4, r3
 800e5f8:	dbf2      	blt.n	800e5e0 <__ieee754_pow+0x218>
 800e5fa:	4b0a      	ldr	r3, [pc, #40]	; (800e624 <__ieee754_pow+0x25c>)
 800e5fc:	429c      	cmp	r4, r3
 800e5fe:	dd19      	ble.n	800e634 <__ieee754_pow+0x26c>
 800e600:	f1b9 0f00 	cmp.w	r9, #0
 800e604:	dcef      	bgt.n	800e5e6 <__ieee754_pow+0x21e>
 800e606:	2000      	movs	r0, #0
 800e608:	b009      	add	sp, #36	; 0x24
 800e60a:	ecbd 8b06 	vpop	{d8-d10}
 800e60e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e612:	f000 bd2f 	b.w	800f074 <__math_uflow>
 800e616:	bf00      	nop
 800e618:	fff00000 	.word	0xfff00000
 800e61c:	7ff00000 	.word	0x7ff00000
 800e620:	433fffff 	.word	0x433fffff
 800e624:	3ff00000 	.word	0x3ff00000
 800e628:	3fefffff 	.word	0x3fefffff
 800e62c:	3fe00000 	.word	0x3fe00000
 800e630:	41e00000 	.word	0x41e00000
 800e634:	4b60      	ldr	r3, [pc, #384]	; (800e7b8 <__ieee754_pow+0x3f0>)
 800e636:	2200      	movs	r2, #0
 800e638:	f7f1 fe26 	bl	8000288 <__aeabi_dsub>
 800e63c:	a354      	add	r3, pc, #336	; (adr r3, 800e790 <__ieee754_pow+0x3c8>)
 800e63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e642:	4604      	mov	r4, r0
 800e644:	460d      	mov	r5, r1
 800e646:	f7f1 ffd7 	bl	80005f8 <__aeabi_dmul>
 800e64a:	a353      	add	r3, pc, #332	; (adr r3, 800e798 <__ieee754_pow+0x3d0>)
 800e64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e650:	4606      	mov	r6, r0
 800e652:	460f      	mov	r7, r1
 800e654:	4620      	mov	r0, r4
 800e656:	4629      	mov	r1, r5
 800e658:	f7f1 ffce 	bl	80005f8 <__aeabi_dmul>
 800e65c:	4b57      	ldr	r3, [pc, #348]	; (800e7bc <__ieee754_pow+0x3f4>)
 800e65e:	4682      	mov	sl, r0
 800e660:	468b      	mov	fp, r1
 800e662:	2200      	movs	r2, #0
 800e664:	4620      	mov	r0, r4
 800e666:	4629      	mov	r1, r5
 800e668:	f7f1 ffc6 	bl	80005f8 <__aeabi_dmul>
 800e66c:	4602      	mov	r2, r0
 800e66e:	460b      	mov	r3, r1
 800e670:	a14b      	add	r1, pc, #300	; (adr r1, 800e7a0 <__ieee754_pow+0x3d8>)
 800e672:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e676:	f7f1 fe07 	bl	8000288 <__aeabi_dsub>
 800e67a:	4622      	mov	r2, r4
 800e67c:	462b      	mov	r3, r5
 800e67e:	f7f1 ffbb 	bl	80005f8 <__aeabi_dmul>
 800e682:	4602      	mov	r2, r0
 800e684:	460b      	mov	r3, r1
 800e686:	2000      	movs	r0, #0
 800e688:	494d      	ldr	r1, [pc, #308]	; (800e7c0 <__ieee754_pow+0x3f8>)
 800e68a:	f7f1 fdfd 	bl	8000288 <__aeabi_dsub>
 800e68e:	4622      	mov	r2, r4
 800e690:	4680      	mov	r8, r0
 800e692:	4689      	mov	r9, r1
 800e694:	462b      	mov	r3, r5
 800e696:	4620      	mov	r0, r4
 800e698:	4629      	mov	r1, r5
 800e69a:	f7f1 ffad 	bl	80005f8 <__aeabi_dmul>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	4640      	mov	r0, r8
 800e6a4:	4649      	mov	r1, r9
 800e6a6:	f7f1 ffa7 	bl	80005f8 <__aeabi_dmul>
 800e6aa:	a33f      	add	r3, pc, #252	; (adr r3, 800e7a8 <__ieee754_pow+0x3e0>)
 800e6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b0:	f7f1 ffa2 	bl	80005f8 <__aeabi_dmul>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	4650      	mov	r0, sl
 800e6ba:	4659      	mov	r1, fp
 800e6bc:	f7f1 fde4 	bl	8000288 <__aeabi_dsub>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	4680      	mov	r8, r0
 800e6c6:	4689      	mov	r9, r1
 800e6c8:	4630      	mov	r0, r6
 800e6ca:	4639      	mov	r1, r7
 800e6cc:	f7f1 fdde 	bl	800028c <__adddf3>
 800e6d0:	2000      	movs	r0, #0
 800e6d2:	4632      	mov	r2, r6
 800e6d4:	463b      	mov	r3, r7
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	460d      	mov	r5, r1
 800e6da:	f7f1 fdd5 	bl	8000288 <__aeabi_dsub>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	460b      	mov	r3, r1
 800e6e2:	4640      	mov	r0, r8
 800e6e4:	4649      	mov	r1, r9
 800e6e6:	f7f1 fdcf 	bl	8000288 <__aeabi_dsub>
 800e6ea:	9b04      	ldr	r3, [sp, #16]
 800e6ec:	9a06      	ldr	r2, [sp, #24]
 800e6ee:	3b01      	subs	r3, #1
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	4682      	mov	sl, r0
 800e6f4:	468b      	mov	fp, r1
 800e6f6:	f040 81e7 	bne.w	800eac8 <__ieee754_pow+0x700>
 800e6fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e7b0 <__ieee754_pow+0x3e8>
 800e6fe:	eeb0 8a47 	vmov.f32	s16, s14
 800e702:	eef0 8a67 	vmov.f32	s17, s15
 800e706:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e70a:	2600      	movs	r6, #0
 800e70c:	4632      	mov	r2, r6
 800e70e:	463b      	mov	r3, r7
 800e710:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e714:	f7f1 fdb8 	bl	8000288 <__aeabi_dsub>
 800e718:	4622      	mov	r2, r4
 800e71a:	462b      	mov	r3, r5
 800e71c:	f7f1 ff6c 	bl	80005f8 <__aeabi_dmul>
 800e720:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e724:	4680      	mov	r8, r0
 800e726:	4689      	mov	r9, r1
 800e728:	4650      	mov	r0, sl
 800e72a:	4659      	mov	r1, fp
 800e72c:	f7f1 ff64 	bl	80005f8 <__aeabi_dmul>
 800e730:	4602      	mov	r2, r0
 800e732:	460b      	mov	r3, r1
 800e734:	4640      	mov	r0, r8
 800e736:	4649      	mov	r1, r9
 800e738:	f7f1 fda8 	bl	800028c <__adddf3>
 800e73c:	4632      	mov	r2, r6
 800e73e:	463b      	mov	r3, r7
 800e740:	4680      	mov	r8, r0
 800e742:	4689      	mov	r9, r1
 800e744:	4620      	mov	r0, r4
 800e746:	4629      	mov	r1, r5
 800e748:	f7f1 ff56 	bl	80005f8 <__aeabi_dmul>
 800e74c:	460b      	mov	r3, r1
 800e74e:	4604      	mov	r4, r0
 800e750:	460d      	mov	r5, r1
 800e752:	4602      	mov	r2, r0
 800e754:	4649      	mov	r1, r9
 800e756:	4640      	mov	r0, r8
 800e758:	f7f1 fd98 	bl	800028c <__adddf3>
 800e75c:	4b19      	ldr	r3, [pc, #100]	; (800e7c4 <__ieee754_pow+0x3fc>)
 800e75e:	4299      	cmp	r1, r3
 800e760:	ec45 4b19 	vmov	d9, r4, r5
 800e764:	4606      	mov	r6, r0
 800e766:	460f      	mov	r7, r1
 800e768:	468b      	mov	fp, r1
 800e76a:	f340 82f1 	ble.w	800ed50 <__ieee754_pow+0x988>
 800e76e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e772:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e776:	4303      	orrs	r3, r0
 800e778:	f000 81e4 	beq.w	800eb44 <__ieee754_pow+0x77c>
 800e77c:	ec51 0b18 	vmov	r0, r1, d8
 800e780:	2200      	movs	r2, #0
 800e782:	2300      	movs	r3, #0
 800e784:	f7f2 f9aa 	bl	8000adc <__aeabi_dcmplt>
 800e788:	3800      	subs	r0, #0
 800e78a:	bf18      	it	ne
 800e78c:	2001      	movne	r0, #1
 800e78e:	e72b      	b.n	800e5e8 <__ieee754_pow+0x220>
 800e790:	60000000 	.word	0x60000000
 800e794:	3ff71547 	.word	0x3ff71547
 800e798:	f85ddf44 	.word	0xf85ddf44
 800e79c:	3e54ae0b 	.word	0x3e54ae0b
 800e7a0:	55555555 	.word	0x55555555
 800e7a4:	3fd55555 	.word	0x3fd55555
 800e7a8:	652b82fe 	.word	0x652b82fe
 800e7ac:	3ff71547 	.word	0x3ff71547
 800e7b0:	00000000 	.word	0x00000000
 800e7b4:	bff00000 	.word	0xbff00000
 800e7b8:	3ff00000 	.word	0x3ff00000
 800e7bc:	3fd00000 	.word	0x3fd00000
 800e7c0:	3fe00000 	.word	0x3fe00000
 800e7c4:	408fffff 	.word	0x408fffff
 800e7c8:	4bd5      	ldr	r3, [pc, #852]	; (800eb20 <__ieee754_pow+0x758>)
 800e7ca:	402b      	ands	r3, r5
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	b92b      	cbnz	r3, 800e7dc <__ieee754_pow+0x414>
 800e7d0:	4bd4      	ldr	r3, [pc, #848]	; (800eb24 <__ieee754_pow+0x75c>)
 800e7d2:	f7f1 ff11 	bl	80005f8 <__aeabi_dmul>
 800e7d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e7da:	460c      	mov	r4, r1
 800e7dc:	1523      	asrs	r3, r4, #20
 800e7de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e7e2:	4413      	add	r3, r2
 800e7e4:	9305      	str	r3, [sp, #20]
 800e7e6:	4bd0      	ldr	r3, [pc, #832]	; (800eb28 <__ieee754_pow+0x760>)
 800e7e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e7ec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e7f0:	429c      	cmp	r4, r3
 800e7f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e7f6:	dd08      	ble.n	800e80a <__ieee754_pow+0x442>
 800e7f8:	4bcc      	ldr	r3, [pc, #816]	; (800eb2c <__ieee754_pow+0x764>)
 800e7fa:	429c      	cmp	r4, r3
 800e7fc:	f340 8162 	ble.w	800eac4 <__ieee754_pow+0x6fc>
 800e800:	9b05      	ldr	r3, [sp, #20]
 800e802:	3301      	adds	r3, #1
 800e804:	9305      	str	r3, [sp, #20]
 800e806:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e80a:	2400      	movs	r4, #0
 800e80c:	00e3      	lsls	r3, r4, #3
 800e80e:	9307      	str	r3, [sp, #28]
 800e810:	4bc7      	ldr	r3, [pc, #796]	; (800eb30 <__ieee754_pow+0x768>)
 800e812:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e816:	ed93 7b00 	vldr	d7, [r3]
 800e81a:	4629      	mov	r1, r5
 800e81c:	ec53 2b17 	vmov	r2, r3, d7
 800e820:	eeb0 9a47 	vmov.f32	s18, s14
 800e824:	eef0 9a67 	vmov.f32	s19, s15
 800e828:	4682      	mov	sl, r0
 800e82a:	f7f1 fd2d 	bl	8000288 <__aeabi_dsub>
 800e82e:	4652      	mov	r2, sl
 800e830:	4606      	mov	r6, r0
 800e832:	460f      	mov	r7, r1
 800e834:	462b      	mov	r3, r5
 800e836:	ec51 0b19 	vmov	r0, r1, d9
 800e83a:	f7f1 fd27 	bl	800028c <__adddf3>
 800e83e:	4602      	mov	r2, r0
 800e840:	460b      	mov	r3, r1
 800e842:	2000      	movs	r0, #0
 800e844:	49bb      	ldr	r1, [pc, #748]	; (800eb34 <__ieee754_pow+0x76c>)
 800e846:	f7f2 f801 	bl	800084c <__aeabi_ddiv>
 800e84a:	ec41 0b1a 	vmov	d10, r0, r1
 800e84e:	4602      	mov	r2, r0
 800e850:	460b      	mov	r3, r1
 800e852:	4630      	mov	r0, r6
 800e854:	4639      	mov	r1, r7
 800e856:	f7f1 fecf 	bl	80005f8 <__aeabi_dmul>
 800e85a:	2300      	movs	r3, #0
 800e85c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e860:	9302      	str	r3, [sp, #8]
 800e862:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e866:	46ab      	mov	fp, r5
 800e868:	106d      	asrs	r5, r5, #1
 800e86a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e86e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e872:	ec41 0b18 	vmov	d8, r0, r1
 800e876:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e87a:	2200      	movs	r2, #0
 800e87c:	4640      	mov	r0, r8
 800e87e:	4649      	mov	r1, r9
 800e880:	4614      	mov	r4, r2
 800e882:	461d      	mov	r5, r3
 800e884:	f7f1 feb8 	bl	80005f8 <__aeabi_dmul>
 800e888:	4602      	mov	r2, r0
 800e88a:	460b      	mov	r3, r1
 800e88c:	4630      	mov	r0, r6
 800e88e:	4639      	mov	r1, r7
 800e890:	f7f1 fcfa 	bl	8000288 <__aeabi_dsub>
 800e894:	ec53 2b19 	vmov	r2, r3, d9
 800e898:	4606      	mov	r6, r0
 800e89a:	460f      	mov	r7, r1
 800e89c:	4620      	mov	r0, r4
 800e89e:	4629      	mov	r1, r5
 800e8a0:	f7f1 fcf2 	bl	8000288 <__aeabi_dsub>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	4650      	mov	r0, sl
 800e8aa:	4659      	mov	r1, fp
 800e8ac:	f7f1 fcec 	bl	8000288 <__aeabi_dsub>
 800e8b0:	4642      	mov	r2, r8
 800e8b2:	464b      	mov	r3, r9
 800e8b4:	f7f1 fea0 	bl	80005f8 <__aeabi_dmul>
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	4630      	mov	r0, r6
 800e8be:	4639      	mov	r1, r7
 800e8c0:	f7f1 fce2 	bl	8000288 <__aeabi_dsub>
 800e8c4:	ec53 2b1a 	vmov	r2, r3, d10
 800e8c8:	f7f1 fe96 	bl	80005f8 <__aeabi_dmul>
 800e8cc:	ec53 2b18 	vmov	r2, r3, d8
 800e8d0:	ec41 0b19 	vmov	d9, r0, r1
 800e8d4:	ec51 0b18 	vmov	r0, r1, d8
 800e8d8:	f7f1 fe8e 	bl	80005f8 <__aeabi_dmul>
 800e8dc:	a37c      	add	r3, pc, #496	; (adr r3, 800ead0 <__ieee754_pow+0x708>)
 800e8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e2:	4604      	mov	r4, r0
 800e8e4:	460d      	mov	r5, r1
 800e8e6:	f7f1 fe87 	bl	80005f8 <__aeabi_dmul>
 800e8ea:	a37b      	add	r3, pc, #492	; (adr r3, 800ead8 <__ieee754_pow+0x710>)
 800e8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f0:	f7f1 fccc 	bl	800028c <__adddf3>
 800e8f4:	4622      	mov	r2, r4
 800e8f6:	462b      	mov	r3, r5
 800e8f8:	f7f1 fe7e 	bl	80005f8 <__aeabi_dmul>
 800e8fc:	a378      	add	r3, pc, #480	; (adr r3, 800eae0 <__ieee754_pow+0x718>)
 800e8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e902:	f7f1 fcc3 	bl	800028c <__adddf3>
 800e906:	4622      	mov	r2, r4
 800e908:	462b      	mov	r3, r5
 800e90a:	f7f1 fe75 	bl	80005f8 <__aeabi_dmul>
 800e90e:	a376      	add	r3, pc, #472	; (adr r3, 800eae8 <__ieee754_pow+0x720>)
 800e910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e914:	f7f1 fcba 	bl	800028c <__adddf3>
 800e918:	4622      	mov	r2, r4
 800e91a:	462b      	mov	r3, r5
 800e91c:	f7f1 fe6c 	bl	80005f8 <__aeabi_dmul>
 800e920:	a373      	add	r3, pc, #460	; (adr r3, 800eaf0 <__ieee754_pow+0x728>)
 800e922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e926:	f7f1 fcb1 	bl	800028c <__adddf3>
 800e92a:	4622      	mov	r2, r4
 800e92c:	462b      	mov	r3, r5
 800e92e:	f7f1 fe63 	bl	80005f8 <__aeabi_dmul>
 800e932:	a371      	add	r3, pc, #452	; (adr r3, 800eaf8 <__ieee754_pow+0x730>)
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	f7f1 fca8 	bl	800028c <__adddf3>
 800e93c:	4622      	mov	r2, r4
 800e93e:	4606      	mov	r6, r0
 800e940:	460f      	mov	r7, r1
 800e942:	462b      	mov	r3, r5
 800e944:	4620      	mov	r0, r4
 800e946:	4629      	mov	r1, r5
 800e948:	f7f1 fe56 	bl	80005f8 <__aeabi_dmul>
 800e94c:	4602      	mov	r2, r0
 800e94e:	460b      	mov	r3, r1
 800e950:	4630      	mov	r0, r6
 800e952:	4639      	mov	r1, r7
 800e954:	f7f1 fe50 	bl	80005f8 <__aeabi_dmul>
 800e958:	4642      	mov	r2, r8
 800e95a:	4604      	mov	r4, r0
 800e95c:	460d      	mov	r5, r1
 800e95e:	464b      	mov	r3, r9
 800e960:	ec51 0b18 	vmov	r0, r1, d8
 800e964:	f7f1 fc92 	bl	800028c <__adddf3>
 800e968:	ec53 2b19 	vmov	r2, r3, d9
 800e96c:	f7f1 fe44 	bl	80005f8 <__aeabi_dmul>
 800e970:	4622      	mov	r2, r4
 800e972:	462b      	mov	r3, r5
 800e974:	f7f1 fc8a 	bl	800028c <__adddf3>
 800e978:	4642      	mov	r2, r8
 800e97a:	4682      	mov	sl, r0
 800e97c:	468b      	mov	fp, r1
 800e97e:	464b      	mov	r3, r9
 800e980:	4640      	mov	r0, r8
 800e982:	4649      	mov	r1, r9
 800e984:	f7f1 fe38 	bl	80005f8 <__aeabi_dmul>
 800e988:	4b6b      	ldr	r3, [pc, #428]	; (800eb38 <__ieee754_pow+0x770>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	4606      	mov	r6, r0
 800e98e:	460f      	mov	r7, r1
 800e990:	f7f1 fc7c 	bl	800028c <__adddf3>
 800e994:	4652      	mov	r2, sl
 800e996:	465b      	mov	r3, fp
 800e998:	f7f1 fc78 	bl	800028c <__adddf3>
 800e99c:	2000      	movs	r0, #0
 800e99e:	4604      	mov	r4, r0
 800e9a0:	460d      	mov	r5, r1
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	4640      	mov	r0, r8
 800e9a8:	4649      	mov	r1, r9
 800e9aa:	f7f1 fe25 	bl	80005f8 <__aeabi_dmul>
 800e9ae:	4b62      	ldr	r3, [pc, #392]	; (800eb38 <__ieee754_pow+0x770>)
 800e9b0:	4680      	mov	r8, r0
 800e9b2:	4689      	mov	r9, r1
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	4629      	mov	r1, r5
 800e9ba:	f7f1 fc65 	bl	8000288 <__aeabi_dsub>
 800e9be:	4632      	mov	r2, r6
 800e9c0:	463b      	mov	r3, r7
 800e9c2:	f7f1 fc61 	bl	8000288 <__aeabi_dsub>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	4650      	mov	r0, sl
 800e9cc:	4659      	mov	r1, fp
 800e9ce:	f7f1 fc5b 	bl	8000288 <__aeabi_dsub>
 800e9d2:	ec53 2b18 	vmov	r2, r3, d8
 800e9d6:	f7f1 fe0f 	bl	80005f8 <__aeabi_dmul>
 800e9da:	4622      	mov	r2, r4
 800e9dc:	4606      	mov	r6, r0
 800e9de:	460f      	mov	r7, r1
 800e9e0:	462b      	mov	r3, r5
 800e9e2:	ec51 0b19 	vmov	r0, r1, d9
 800e9e6:	f7f1 fe07 	bl	80005f8 <__aeabi_dmul>
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	4639      	mov	r1, r7
 800e9f2:	f7f1 fc4b 	bl	800028c <__adddf3>
 800e9f6:	4606      	mov	r6, r0
 800e9f8:	460f      	mov	r7, r1
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	4640      	mov	r0, r8
 800ea00:	4649      	mov	r1, r9
 800ea02:	f7f1 fc43 	bl	800028c <__adddf3>
 800ea06:	a33e      	add	r3, pc, #248	; (adr r3, 800eb00 <__ieee754_pow+0x738>)
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	4604      	mov	r4, r0
 800ea10:	460d      	mov	r5, r1
 800ea12:	f7f1 fdf1 	bl	80005f8 <__aeabi_dmul>
 800ea16:	4642      	mov	r2, r8
 800ea18:	ec41 0b18 	vmov	d8, r0, r1
 800ea1c:	464b      	mov	r3, r9
 800ea1e:	4620      	mov	r0, r4
 800ea20:	4629      	mov	r1, r5
 800ea22:	f7f1 fc31 	bl	8000288 <__aeabi_dsub>
 800ea26:	4602      	mov	r2, r0
 800ea28:	460b      	mov	r3, r1
 800ea2a:	4630      	mov	r0, r6
 800ea2c:	4639      	mov	r1, r7
 800ea2e:	f7f1 fc2b 	bl	8000288 <__aeabi_dsub>
 800ea32:	a335      	add	r3, pc, #212	; (adr r3, 800eb08 <__ieee754_pow+0x740>)
 800ea34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea38:	f7f1 fdde 	bl	80005f8 <__aeabi_dmul>
 800ea3c:	a334      	add	r3, pc, #208	; (adr r3, 800eb10 <__ieee754_pow+0x748>)
 800ea3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea42:	4606      	mov	r6, r0
 800ea44:	460f      	mov	r7, r1
 800ea46:	4620      	mov	r0, r4
 800ea48:	4629      	mov	r1, r5
 800ea4a:	f7f1 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	460b      	mov	r3, r1
 800ea52:	4630      	mov	r0, r6
 800ea54:	4639      	mov	r1, r7
 800ea56:	f7f1 fc19 	bl	800028c <__adddf3>
 800ea5a:	9a07      	ldr	r2, [sp, #28]
 800ea5c:	4b37      	ldr	r3, [pc, #220]	; (800eb3c <__ieee754_pow+0x774>)
 800ea5e:	4413      	add	r3, r2
 800ea60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea64:	f7f1 fc12 	bl	800028c <__adddf3>
 800ea68:	4682      	mov	sl, r0
 800ea6a:	9805      	ldr	r0, [sp, #20]
 800ea6c:	468b      	mov	fp, r1
 800ea6e:	f7f1 fd59 	bl	8000524 <__aeabi_i2d>
 800ea72:	9a07      	ldr	r2, [sp, #28]
 800ea74:	4b32      	ldr	r3, [pc, #200]	; (800eb40 <__ieee754_pow+0x778>)
 800ea76:	4413      	add	r3, r2
 800ea78:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea7c:	4606      	mov	r6, r0
 800ea7e:	460f      	mov	r7, r1
 800ea80:	4652      	mov	r2, sl
 800ea82:	465b      	mov	r3, fp
 800ea84:	ec51 0b18 	vmov	r0, r1, d8
 800ea88:	f7f1 fc00 	bl	800028c <__adddf3>
 800ea8c:	4642      	mov	r2, r8
 800ea8e:	464b      	mov	r3, r9
 800ea90:	f7f1 fbfc 	bl	800028c <__adddf3>
 800ea94:	4632      	mov	r2, r6
 800ea96:	463b      	mov	r3, r7
 800ea98:	f7f1 fbf8 	bl	800028c <__adddf3>
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	4632      	mov	r2, r6
 800eaa0:	463b      	mov	r3, r7
 800eaa2:	4604      	mov	r4, r0
 800eaa4:	460d      	mov	r5, r1
 800eaa6:	f7f1 fbef 	bl	8000288 <__aeabi_dsub>
 800eaaa:	4642      	mov	r2, r8
 800eaac:	464b      	mov	r3, r9
 800eaae:	f7f1 fbeb 	bl	8000288 <__aeabi_dsub>
 800eab2:	ec53 2b18 	vmov	r2, r3, d8
 800eab6:	f7f1 fbe7 	bl	8000288 <__aeabi_dsub>
 800eaba:	4602      	mov	r2, r0
 800eabc:	460b      	mov	r3, r1
 800eabe:	4650      	mov	r0, sl
 800eac0:	4659      	mov	r1, fp
 800eac2:	e610      	b.n	800e6e6 <__ieee754_pow+0x31e>
 800eac4:	2401      	movs	r4, #1
 800eac6:	e6a1      	b.n	800e80c <__ieee754_pow+0x444>
 800eac8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800eb18 <__ieee754_pow+0x750>
 800eacc:	e617      	b.n	800e6fe <__ieee754_pow+0x336>
 800eace:	bf00      	nop
 800ead0:	4a454eef 	.word	0x4a454eef
 800ead4:	3fca7e28 	.word	0x3fca7e28
 800ead8:	93c9db65 	.word	0x93c9db65
 800eadc:	3fcd864a 	.word	0x3fcd864a
 800eae0:	a91d4101 	.word	0xa91d4101
 800eae4:	3fd17460 	.word	0x3fd17460
 800eae8:	518f264d 	.word	0x518f264d
 800eaec:	3fd55555 	.word	0x3fd55555
 800eaf0:	db6fabff 	.word	0xdb6fabff
 800eaf4:	3fdb6db6 	.word	0x3fdb6db6
 800eaf8:	33333303 	.word	0x33333303
 800eafc:	3fe33333 	.word	0x3fe33333
 800eb00:	e0000000 	.word	0xe0000000
 800eb04:	3feec709 	.word	0x3feec709
 800eb08:	dc3a03fd 	.word	0xdc3a03fd
 800eb0c:	3feec709 	.word	0x3feec709
 800eb10:	145b01f5 	.word	0x145b01f5
 800eb14:	be3e2fe0 	.word	0xbe3e2fe0
 800eb18:	00000000 	.word	0x00000000
 800eb1c:	3ff00000 	.word	0x3ff00000
 800eb20:	7ff00000 	.word	0x7ff00000
 800eb24:	43400000 	.word	0x43400000
 800eb28:	0003988e 	.word	0x0003988e
 800eb2c:	000bb679 	.word	0x000bb679
 800eb30:	0800f950 	.word	0x0800f950
 800eb34:	3ff00000 	.word	0x3ff00000
 800eb38:	40080000 	.word	0x40080000
 800eb3c:	0800f970 	.word	0x0800f970
 800eb40:	0800f960 	.word	0x0800f960
 800eb44:	a3b5      	add	r3, pc, #724	; (adr r3, 800ee1c <__ieee754_pow+0xa54>)
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	4640      	mov	r0, r8
 800eb4c:	4649      	mov	r1, r9
 800eb4e:	f7f1 fb9d 	bl	800028c <__adddf3>
 800eb52:	4622      	mov	r2, r4
 800eb54:	ec41 0b1a 	vmov	d10, r0, r1
 800eb58:	462b      	mov	r3, r5
 800eb5a:	4630      	mov	r0, r6
 800eb5c:	4639      	mov	r1, r7
 800eb5e:	f7f1 fb93 	bl	8000288 <__aeabi_dsub>
 800eb62:	4602      	mov	r2, r0
 800eb64:	460b      	mov	r3, r1
 800eb66:	ec51 0b1a 	vmov	r0, r1, d10
 800eb6a:	f7f1 ffd5 	bl	8000b18 <__aeabi_dcmpgt>
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	f47f ae04 	bne.w	800e77c <__ieee754_pow+0x3b4>
 800eb74:	4aa4      	ldr	r2, [pc, #656]	; (800ee08 <__ieee754_pow+0xa40>)
 800eb76:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	f340 8108 	ble.w	800ed90 <__ieee754_pow+0x9c8>
 800eb80:	151b      	asrs	r3, r3, #20
 800eb82:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800eb86:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800eb8a:	fa4a f303 	asr.w	r3, sl, r3
 800eb8e:	445b      	add	r3, fp
 800eb90:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800eb94:	4e9d      	ldr	r6, [pc, #628]	; (800ee0c <__ieee754_pow+0xa44>)
 800eb96:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800eb9a:	4116      	asrs	r6, r2
 800eb9c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800eba0:	2000      	movs	r0, #0
 800eba2:	ea23 0106 	bic.w	r1, r3, r6
 800eba6:	f1c2 0214 	rsb	r2, r2, #20
 800ebaa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ebae:	fa4a fa02 	asr.w	sl, sl, r2
 800ebb2:	f1bb 0f00 	cmp.w	fp, #0
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	460b      	mov	r3, r1
 800ebba:	4620      	mov	r0, r4
 800ebbc:	4629      	mov	r1, r5
 800ebbe:	bfb8      	it	lt
 800ebc0:	f1ca 0a00 	rsblt	sl, sl, #0
 800ebc4:	f7f1 fb60 	bl	8000288 <__aeabi_dsub>
 800ebc8:	ec41 0b19 	vmov	d9, r0, r1
 800ebcc:	4642      	mov	r2, r8
 800ebce:	464b      	mov	r3, r9
 800ebd0:	ec51 0b19 	vmov	r0, r1, d9
 800ebd4:	f7f1 fb5a 	bl	800028c <__adddf3>
 800ebd8:	a37b      	add	r3, pc, #492	; (adr r3, 800edc8 <__ieee754_pow+0xa00>)
 800ebda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebde:	2000      	movs	r0, #0
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	460d      	mov	r5, r1
 800ebe4:	f7f1 fd08 	bl	80005f8 <__aeabi_dmul>
 800ebe8:	ec53 2b19 	vmov	r2, r3, d9
 800ebec:	4606      	mov	r6, r0
 800ebee:	460f      	mov	r7, r1
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	4629      	mov	r1, r5
 800ebf4:	f7f1 fb48 	bl	8000288 <__aeabi_dsub>
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	4640      	mov	r0, r8
 800ebfe:	4649      	mov	r1, r9
 800ec00:	f7f1 fb42 	bl	8000288 <__aeabi_dsub>
 800ec04:	a372      	add	r3, pc, #456	; (adr r3, 800edd0 <__ieee754_pow+0xa08>)
 800ec06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0a:	f7f1 fcf5 	bl	80005f8 <__aeabi_dmul>
 800ec0e:	a372      	add	r3, pc, #456	; (adr r3, 800edd8 <__ieee754_pow+0xa10>)
 800ec10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec14:	4680      	mov	r8, r0
 800ec16:	4689      	mov	r9, r1
 800ec18:	4620      	mov	r0, r4
 800ec1a:	4629      	mov	r1, r5
 800ec1c:	f7f1 fcec 	bl	80005f8 <__aeabi_dmul>
 800ec20:	4602      	mov	r2, r0
 800ec22:	460b      	mov	r3, r1
 800ec24:	4640      	mov	r0, r8
 800ec26:	4649      	mov	r1, r9
 800ec28:	f7f1 fb30 	bl	800028c <__adddf3>
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	460d      	mov	r5, r1
 800ec30:	4602      	mov	r2, r0
 800ec32:	460b      	mov	r3, r1
 800ec34:	4630      	mov	r0, r6
 800ec36:	4639      	mov	r1, r7
 800ec38:	f7f1 fb28 	bl	800028c <__adddf3>
 800ec3c:	4632      	mov	r2, r6
 800ec3e:	463b      	mov	r3, r7
 800ec40:	4680      	mov	r8, r0
 800ec42:	4689      	mov	r9, r1
 800ec44:	f7f1 fb20 	bl	8000288 <__aeabi_dsub>
 800ec48:	4602      	mov	r2, r0
 800ec4a:	460b      	mov	r3, r1
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	4629      	mov	r1, r5
 800ec50:	f7f1 fb1a 	bl	8000288 <__aeabi_dsub>
 800ec54:	4642      	mov	r2, r8
 800ec56:	4606      	mov	r6, r0
 800ec58:	460f      	mov	r7, r1
 800ec5a:	464b      	mov	r3, r9
 800ec5c:	4640      	mov	r0, r8
 800ec5e:	4649      	mov	r1, r9
 800ec60:	f7f1 fcca 	bl	80005f8 <__aeabi_dmul>
 800ec64:	a35e      	add	r3, pc, #376	; (adr r3, 800ede0 <__ieee754_pow+0xa18>)
 800ec66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6a:	4604      	mov	r4, r0
 800ec6c:	460d      	mov	r5, r1
 800ec6e:	f7f1 fcc3 	bl	80005f8 <__aeabi_dmul>
 800ec72:	a35d      	add	r3, pc, #372	; (adr r3, 800ede8 <__ieee754_pow+0xa20>)
 800ec74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec78:	f7f1 fb06 	bl	8000288 <__aeabi_dsub>
 800ec7c:	4622      	mov	r2, r4
 800ec7e:	462b      	mov	r3, r5
 800ec80:	f7f1 fcba 	bl	80005f8 <__aeabi_dmul>
 800ec84:	a35a      	add	r3, pc, #360	; (adr r3, 800edf0 <__ieee754_pow+0xa28>)
 800ec86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8a:	f7f1 faff 	bl	800028c <__adddf3>
 800ec8e:	4622      	mov	r2, r4
 800ec90:	462b      	mov	r3, r5
 800ec92:	f7f1 fcb1 	bl	80005f8 <__aeabi_dmul>
 800ec96:	a358      	add	r3, pc, #352	; (adr r3, 800edf8 <__ieee754_pow+0xa30>)
 800ec98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9c:	f7f1 faf4 	bl	8000288 <__aeabi_dsub>
 800eca0:	4622      	mov	r2, r4
 800eca2:	462b      	mov	r3, r5
 800eca4:	f7f1 fca8 	bl	80005f8 <__aeabi_dmul>
 800eca8:	a355      	add	r3, pc, #340	; (adr r3, 800ee00 <__ieee754_pow+0xa38>)
 800ecaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecae:	f7f1 faed 	bl	800028c <__adddf3>
 800ecb2:	4622      	mov	r2, r4
 800ecb4:	462b      	mov	r3, r5
 800ecb6:	f7f1 fc9f 	bl	80005f8 <__aeabi_dmul>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	4640      	mov	r0, r8
 800ecc0:	4649      	mov	r1, r9
 800ecc2:	f7f1 fae1 	bl	8000288 <__aeabi_dsub>
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	460d      	mov	r5, r1
 800ecca:	4602      	mov	r2, r0
 800eccc:	460b      	mov	r3, r1
 800ecce:	4640      	mov	r0, r8
 800ecd0:	4649      	mov	r1, r9
 800ecd2:	f7f1 fc91 	bl	80005f8 <__aeabi_dmul>
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	ec41 0b19 	vmov	d9, r0, r1
 800ecdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ece0:	4620      	mov	r0, r4
 800ece2:	4629      	mov	r1, r5
 800ece4:	f7f1 fad0 	bl	8000288 <__aeabi_dsub>
 800ece8:	4602      	mov	r2, r0
 800ecea:	460b      	mov	r3, r1
 800ecec:	ec51 0b19 	vmov	r0, r1, d9
 800ecf0:	f7f1 fdac 	bl	800084c <__aeabi_ddiv>
 800ecf4:	4632      	mov	r2, r6
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	460d      	mov	r5, r1
 800ecfa:	463b      	mov	r3, r7
 800ecfc:	4640      	mov	r0, r8
 800ecfe:	4649      	mov	r1, r9
 800ed00:	f7f1 fc7a 	bl	80005f8 <__aeabi_dmul>
 800ed04:	4632      	mov	r2, r6
 800ed06:	463b      	mov	r3, r7
 800ed08:	f7f1 fac0 	bl	800028c <__adddf3>
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	460b      	mov	r3, r1
 800ed10:	4620      	mov	r0, r4
 800ed12:	4629      	mov	r1, r5
 800ed14:	f7f1 fab8 	bl	8000288 <__aeabi_dsub>
 800ed18:	4642      	mov	r2, r8
 800ed1a:	464b      	mov	r3, r9
 800ed1c:	f7f1 fab4 	bl	8000288 <__aeabi_dsub>
 800ed20:	460b      	mov	r3, r1
 800ed22:	4602      	mov	r2, r0
 800ed24:	493a      	ldr	r1, [pc, #232]	; (800ee10 <__ieee754_pow+0xa48>)
 800ed26:	2000      	movs	r0, #0
 800ed28:	f7f1 faae 	bl	8000288 <__aeabi_dsub>
 800ed2c:	ec41 0b10 	vmov	d0, r0, r1
 800ed30:	ee10 3a90 	vmov	r3, s1
 800ed34:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ed38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed3c:	da2b      	bge.n	800ed96 <__ieee754_pow+0x9ce>
 800ed3e:	4650      	mov	r0, sl
 800ed40:	f000 f9be 	bl	800f0c0 <scalbn>
 800ed44:	ec51 0b10 	vmov	r0, r1, d0
 800ed48:	ec53 2b18 	vmov	r2, r3, d8
 800ed4c:	f7ff bbed 	b.w	800e52a <__ieee754_pow+0x162>
 800ed50:	4b30      	ldr	r3, [pc, #192]	; (800ee14 <__ieee754_pow+0xa4c>)
 800ed52:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ed56:	429e      	cmp	r6, r3
 800ed58:	f77f af0c 	ble.w	800eb74 <__ieee754_pow+0x7ac>
 800ed5c:	4b2e      	ldr	r3, [pc, #184]	; (800ee18 <__ieee754_pow+0xa50>)
 800ed5e:	440b      	add	r3, r1
 800ed60:	4303      	orrs	r3, r0
 800ed62:	d009      	beq.n	800ed78 <__ieee754_pow+0x9b0>
 800ed64:	ec51 0b18 	vmov	r0, r1, d8
 800ed68:	2200      	movs	r2, #0
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	f7f1 feb6 	bl	8000adc <__aeabi_dcmplt>
 800ed70:	3800      	subs	r0, #0
 800ed72:	bf18      	it	ne
 800ed74:	2001      	movne	r0, #1
 800ed76:	e447      	b.n	800e608 <__ieee754_pow+0x240>
 800ed78:	4622      	mov	r2, r4
 800ed7a:	462b      	mov	r3, r5
 800ed7c:	f7f1 fa84 	bl	8000288 <__aeabi_dsub>
 800ed80:	4642      	mov	r2, r8
 800ed82:	464b      	mov	r3, r9
 800ed84:	f7f1 febe 	bl	8000b04 <__aeabi_dcmpge>
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	f43f aef3 	beq.w	800eb74 <__ieee754_pow+0x7ac>
 800ed8e:	e7e9      	b.n	800ed64 <__ieee754_pow+0x99c>
 800ed90:	f04f 0a00 	mov.w	sl, #0
 800ed94:	e71a      	b.n	800ebcc <__ieee754_pow+0x804>
 800ed96:	ec51 0b10 	vmov	r0, r1, d0
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	e7d4      	b.n	800ed48 <__ieee754_pow+0x980>
 800ed9e:	491c      	ldr	r1, [pc, #112]	; (800ee10 <__ieee754_pow+0xa48>)
 800eda0:	2000      	movs	r0, #0
 800eda2:	f7ff bb30 	b.w	800e406 <__ieee754_pow+0x3e>
 800eda6:	2000      	movs	r0, #0
 800eda8:	2100      	movs	r1, #0
 800edaa:	f7ff bb2c 	b.w	800e406 <__ieee754_pow+0x3e>
 800edae:	4630      	mov	r0, r6
 800edb0:	4639      	mov	r1, r7
 800edb2:	f7ff bb28 	b.w	800e406 <__ieee754_pow+0x3e>
 800edb6:	9204      	str	r2, [sp, #16]
 800edb8:	f7ff bb7a 	b.w	800e4b0 <__ieee754_pow+0xe8>
 800edbc:	2300      	movs	r3, #0
 800edbe:	f7ff bb64 	b.w	800e48a <__ieee754_pow+0xc2>
 800edc2:	bf00      	nop
 800edc4:	f3af 8000 	nop.w
 800edc8:	00000000 	.word	0x00000000
 800edcc:	3fe62e43 	.word	0x3fe62e43
 800edd0:	fefa39ef 	.word	0xfefa39ef
 800edd4:	3fe62e42 	.word	0x3fe62e42
 800edd8:	0ca86c39 	.word	0x0ca86c39
 800eddc:	be205c61 	.word	0xbe205c61
 800ede0:	72bea4d0 	.word	0x72bea4d0
 800ede4:	3e663769 	.word	0x3e663769
 800ede8:	c5d26bf1 	.word	0xc5d26bf1
 800edec:	3ebbbd41 	.word	0x3ebbbd41
 800edf0:	af25de2c 	.word	0xaf25de2c
 800edf4:	3f11566a 	.word	0x3f11566a
 800edf8:	16bebd93 	.word	0x16bebd93
 800edfc:	3f66c16c 	.word	0x3f66c16c
 800ee00:	5555553e 	.word	0x5555553e
 800ee04:	3fc55555 	.word	0x3fc55555
 800ee08:	3fe00000 	.word	0x3fe00000
 800ee0c:	000fffff 	.word	0x000fffff
 800ee10:	3ff00000 	.word	0x3ff00000
 800ee14:	4090cbff 	.word	0x4090cbff
 800ee18:	3f6f3400 	.word	0x3f6f3400
 800ee1c:	652b82fe 	.word	0x652b82fe
 800ee20:	3c971547 	.word	0x3c971547

0800ee24 <__ieee754_sqrt>:
 800ee24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee28:	ec55 4b10 	vmov	r4, r5, d0
 800ee2c:	4e55      	ldr	r6, [pc, #340]	; (800ef84 <__ieee754_sqrt+0x160>)
 800ee2e:	43ae      	bics	r6, r5
 800ee30:	ee10 0a10 	vmov	r0, s0
 800ee34:	ee10 3a10 	vmov	r3, s0
 800ee38:	462a      	mov	r2, r5
 800ee3a:	4629      	mov	r1, r5
 800ee3c:	d110      	bne.n	800ee60 <__ieee754_sqrt+0x3c>
 800ee3e:	ee10 2a10 	vmov	r2, s0
 800ee42:	462b      	mov	r3, r5
 800ee44:	f7f1 fbd8 	bl	80005f8 <__aeabi_dmul>
 800ee48:	4602      	mov	r2, r0
 800ee4a:	460b      	mov	r3, r1
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	4629      	mov	r1, r5
 800ee50:	f7f1 fa1c 	bl	800028c <__adddf3>
 800ee54:	4604      	mov	r4, r0
 800ee56:	460d      	mov	r5, r1
 800ee58:	ec45 4b10 	vmov	d0, r4, r5
 800ee5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee60:	2d00      	cmp	r5, #0
 800ee62:	dc10      	bgt.n	800ee86 <__ieee754_sqrt+0x62>
 800ee64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ee68:	4330      	orrs	r0, r6
 800ee6a:	d0f5      	beq.n	800ee58 <__ieee754_sqrt+0x34>
 800ee6c:	b15d      	cbz	r5, 800ee86 <__ieee754_sqrt+0x62>
 800ee6e:	ee10 2a10 	vmov	r2, s0
 800ee72:	462b      	mov	r3, r5
 800ee74:	ee10 0a10 	vmov	r0, s0
 800ee78:	f7f1 fa06 	bl	8000288 <__aeabi_dsub>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	460b      	mov	r3, r1
 800ee80:	f7f1 fce4 	bl	800084c <__aeabi_ddiv>
 800ee84:	e7e6      	b.n	800ee54 <__ieee754_sqrt+0x30>
 800ee86:	1512      	asrs	r2, r2, #20
 800ee88:	d074      	beq.n	800ef74 <__ieee754_sqrt+0x150>
 800ee8a:	07d4      	lsls	r4, r2, #31
 800ee8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ee90:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ee94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ee98:	bf5e      	ittt	pl
 800ee9a:	0fda      	lsrpl	r2, r3, #31
 800ee9c:	005b      	lslpl	r3, r3, #1
 800ee9e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800eea2:	2400      	movs	r4, #0
 800eea4:	0fda      	lsrs	r2, r3, #31
 800eea6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800eeaa:	107f      	asrs	r7, r7, #1
 800eeac:	005b      	lsls	r3, r3, #1
 800eeae:	2516      	movs	r5, #22
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800eeb6:	1886      	adds	r6, r0, r2
 800eeb8:	428e      	cmp	r6, r1
 800eeba:	bfde      	ittt	le
 800eebc:	1b89      	suble	r1, r1, r6
 800eebe:	18b0      	addle	r0, r6, r2
 800eec0:	18a4      	addle	r4, r4, r2
 800eec2:	0049      	lsls	r1, r1, #1
 800eec4:	3d01      	subs	r5, #1
 800eec6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800eeca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800eece:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eed2:	d1f0      	bne.n	800eeb6 <__ieee754_sqrt+0x92>
 800eed4:	462a      	mov	r2, r5
 800eed6:	f04f 0e20 	mov.w	lr, #32
 800eeda:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800eede:	4281      	cmp	r1, r0
 800eee0:	eb06 0c05 	add.w	ip, r6, r5
 800eee4:	dc02      	bgt.n	800eeec <__ieee754_sqrt+0xc8>
 800eee6:	d113      	bne.n	800ef10 <__ieee754_sqrt+0xec>
 800eee8:	459c      	cmp	ip, r3
 800eeea:	d811      	bhi.n	800ef10 <__ieee754_sqrt+0xec>
 800eeec:	f1bc 0f00 	cmp.w	ip, #0
 800eef0:	eb0c 0506 	add.w	r5, ip, r6
 800eef4:	da43      	bge.n	800ef7e <__ieee754_sqrt+0x15a>
 800eef6:	2d00      	cmp	r5, #0
 800eef8:	db41      	blt.n	800ef7e <__ieee754_sqrt+0x15a>
 800eefa:	f100 0801 	add.w	r8, r0, #1
 800eefe:	1a09      	subs	r1, r1, r0
 800ef00:	459c      	cmp	ip, r3
 800ef02:	bf88      	it	hi
 800ef04:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ef08:	eba3 030c 	sub.w	r3, r3, ip
 800ef0c:	4432      	add	r2, r6
 800ef0e:	4640      	mov	r0, r8
 800ef10:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ef14:	f1be 0e01 	subs.w	lr, lr, #1
 800ef18:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ef1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ef20:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ef24:	d1db      	bne.n	800eede <__ieee754_sqrt+0xba>
 800ef26:	430b      	orrs	r3, r1
 800ef28:	d006      	beq.n	800ef38 <__ieee754_sqrt+0x114>
 800ef2a:	1c50      	adds	r0, r2, #1
 800ef2c:	bf13      	iteet	ne
 800ef2e:	3201      	addne	r2, #1
 800ef30:	3401      	addeq	r4, #1
 800ef32:	4672      	moveq	r2, lr
 800ef34:	f022 0201 	bicne.w	r2, r2, #1
 800ef38:	1063      	asrs	r3, r4, #1
 800ef3a:	0852      	lsrs	r2, r2, #1
 800ef3c:	07e1      	lsls	r1, r4, #31
 800ef3e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ef42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ef46:	bf48      	it	mi
 800ef48:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ef4c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ef50:	4614      	mov	r4, r2
 800ef52:	e781      	b.n	800ee58 <__ieee754_sqrt+0x34>
 800ef54:	0ad9      	lsrs	r1, r3, #11
 800ef56:	3815      	subs	r0, #21
 800ef58:	055b      	lsls	r3, r3, #21
 800ef5a:	2900      	cmp	r1, #0
 800ef5c:	d0fa      	beq.n	800ef54 <__ieee754_sqrt+0x130>
 800ef5e:	02cd      	lsls	r5, r1, #11
 800ef60:	d50a      	bpl.n	800ef78 <__ieee754_sqrt+0x154>
 800ef62:	f1c2 0420 	rsb	r4, r2, #32
 800ef66:	fa23 f404 	lsr.w	r4, r3, r4
 800ef6a:	1e55      	subs	r5, r2, #1
 800ef6c:	4093      	lsls	r3, r2
 800ef6e:	4321      	orrs	r1, r4
 800ef70:	1b42      	subs	r2, r0, r5
 800ef72:	e78a      	b.n	800ee8a <__ieee754_sqrt+0x66>
 800ef74:	4610      	mov	r0, r2
 800ef76:	e7f0      	b.n	800ef5a <__ieee754_sqrt+0x136>
 800ef78:	0049      	lsls	r1, r1, #1
 800ef7a:	3201      	adds	r2, #1
 800ef7c:	e7ef      	b.n	800ef5e <__ieee754_sqrt+0x13a>
 800ef7e:	4680      	mov	r8, r0
 800ef80:	e7bd      	b.n	800eefe <__ieee754_sqrt+0xda>
 800ef82:	bf00      	nop
 800ef84:	7ff00000 	.word	0x7ff00000

0800ef88 <__ieee754_log10f>:
 800ef88:	b508      	push	{r3, lr}
 800ef8a:	ee10 2a10 	vmov	r2, s0
 800ef8e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800ef92:	ed2d 8b02 	vpush	{d8}
 800ef96:	d108      	bne.n	800efaa <__ieee754_log10f+0x22>
 800ef98:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800f020 <__ieee754_log10f+0x98>
 800ef9c:	eddf 7a21 	vldr	s15, [pc, #132]	; 800f024 <__ieee754_log10f+0x9c>
 800efa0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800efa4:	ecbd 8b02 	vpop	{d8}
 800efa8:	bd08      	pop	{r3, pc}
 800efaa:	2a00      	cmp	r2, #0
 800efac:	da02      	bge.n	800efb4 <__ieee754_log10f+0x2c>
 800efae:	ee30 7a40 	vsub.f32	s14, s0, s0
 800efb2:	e7f3      	b.n	800ef9c <__ieee754_log10f+0x14>
 800efb4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800efb8:	db02      	blt.n	800efc0 <__ieee754_log10f+0x38>
 800efba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800efbe:	e7f1      	b.n	800efa4 <__ieee754_log10f+0x1c>
 800efc0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800efc4:	bfbf      	itttt	lt
 800efc6:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800f028 <__ieee754_log10f+0xa0>
 800efca:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800efce:	f06f 0118 	mvnlt.w	r1, #24
 800efd2:	ee17 2a90 	vmovlt	r2, s15
 800efd6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800efda:	bfa8      	it	ge
 800efdc:	2100      	movge	r1, #0
 800efde:	3b7f      	subs	r3, #127	; 0x7f
 800efe0:	440b      	add	r3, r1
 800efe2:	0fd9      	lsrs	r1, r3, #31
 800efe4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800efe8:	ee07 3a90 	vmov	s15, r3
 800efec:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800eff0:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800eff4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800eff8:	ee00 3a10 	vmov	s0, r3
 800effc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800f000:	f000 f8e4 	bl	800f1cc <__ieee754_logf>
 800f004:	eddf 7a09 	vldr	s15, [pc, #36]	; 800f02c <__ieee754_log10f+0xa4>
 800f008:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f00c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f030 <__ieee754_log10f+0xa8>
 800f010:	eea8 0a27 	vfma.f32	s0, s16, s15
 800f014:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f034 <__ieee754_log10f+0xac>
 800f018:	eea8 0a27 	vfma.f32	s0, s16, s15
 800f01c:	e7c2      	b.n	800efa4 <__ieee754_log10f+0x1c>
 800f01e:	bf00      	nop
 800f020:	cc000000 	.word	0xcc000000
 800f024:	00000000 	.word	0x00000000
 800f028:	4c000000 	.word	0x4c000000
 800f02c:	3ede5bd9 	.word	0x3ede5bd9
 800f030:	355427db 	.word	0x355427db
 800f034:	3e9a2080 	.word	0x3e9a2080

0800f038 <with_errno>:
 800f038:	b570      	push	{r4, r5, r6, lr}
 800f03a:	4604      	mov	r4, r0
 800f03c:	460d      	mov	r5, r1
 800f03e:	4616      	mov	r6, r2
 800f040:	f7fa fc2e 	bl	80098a0 <__errno>
 800f044:	4629      	mov	r1, r5
 800f046:	6006      	str	r6, [r0, #0]
 800f048:	4620      	mov	r0, r4
 800f04a:	bd70      	pop	{r4, r5, r6, pc}

0800f04c <xflow>:
 800f04c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f04e:	4614      	mov	r4, r2
 800f050:	461d      	mov	r5, r3
 800f052:	b108      	cbz	r0, 800f058 <xflow+0xc>
 800f054:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f058:	e9cd 2300 	strd	r2, r3, [sp]
 800f05c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f060:	4620      	mov	r0, r4
 800f062:	4629      	mov	r1, r5
 800f064:	f7f1 fac8 	bl	80005f8 <__aeabi_dmul>
 800f068:	2222      	movs	r2, #34	; 0x22
 800f06a:	b003      	add	sp, #12
 800f06c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f070:	f7ff bfe2 	b.w	800f038 <with_errno>

0800f074 <__math_uflow>:
 800f074:	b508      	push	{r3, lr}
 800f076:	2200      	movs	r2, #0
 800f078:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f07c:	f7ff ffe6 	bl	800f04c <xflow>
 800f080:	ec41 0b10 	vmov	d0, r0, r1
 800f084:	bd08      	pop	{r3, pc}

0800f086 <__math_oflow>:
 800f086:	b508      	push	{r3, lr}
 800f088:	2200      	movs	r2, #0
 800f08a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f08e:	f7ff ffdd 	bl	800f04c <xflow>
 800f092:	ec41 0b10 	vmov	d0, r0, r1
 800f096:	bd08      	pop	{r3, pc}

0800f098 <fabs>:
 800f098:	ec51 0b10 	vmov	r0, r1, d0
 800f09c:	ee10 2a10 	vmov	r2, s0
 800f0a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f0a4:	ec43 2b10 	vmov	d0, r2, r3
 800f0a8:	4770      	bx	lr

0800f0aa <finite>:
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	ed8d 0b00 	vstr	d0, [sp]
 800f0b0:	9801      	ldr	r0, [sp, #4]
 800f0b2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f0b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f0ba:	0fc0      	lsrs	r0, r0, #31
 800f0bc:	b002      	add	sp, #8
 800f0be:	4770      	bx	lr

0800f0c0 <scalbn>:
 800f0c0:	b570      	push	{r4, r5, r6, lr}
 800f0c2:	ec55 4b10 	vmov	r4, r5, d0
 800f0c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f0ca:	4606      	mov	r6, r0
 800f0cc:	462b      	mov	r3, r5
 800f0ce:	b99a      	cbnz	r2, 800f0f8 <scalbn+0x38>
 800f0d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f0d4:	4323      	orrs	r3, r4
 800f0d6:	d036      	beq.n	800f146 <scalbn+0x86>
 800f0d8:	4b39      	ldr	r3, [pc, #228]	; (800f1c0 <scalbn+0x100>)
 800f0da:	4629      	mov	r1, r5
 800f0dc:	ee10 0a10 	vmov	r0, s0
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	f7f1 fa89 	bl	80005f8 <__aeabi_dmul>
 800f0e6:	4b37      	ldr	r3, [pc, #220]	; (800f1c4 <scalbn+0x104>)
 800f0e8:	429e      	cmp	r6, r3
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	460d      	mov	r5, r1
 800f0ee:	da10      	bge.n	800f112 <scalbn+0x52>
 800f0f0:	a32b      	add	r3, pc, #172	; (adr r3, 800f1a0 <scalbn+0xe0>)
 800f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f6:	e03a      	b.n	800f16e <scalbn+0xae>
 800f0f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f0fc:	428a      	cmp	r2, r1
 800f0fe:	d10c      	bne.n	800f11a <scalbn+0x5a>
 800f100:	ee10 2a10 	vmov	r2, s0
 800f104:	4620      	mov	r0, r4
 800f106:	4629      	mov	r1, r5
 800f108:	f7f1 f8c0 	bl	800028c <__adddf3>
 800f10c:	4604      	mov	r4, r0
 800f10e:	460d      	mov	r5, r1
 800f110:	e019      	b.n	800f146 <scalbn+0x86>
 800f112:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f116:	460b      	mov	r3, r1
 800f118:	3a36      	subs	r2, #54	; 0x36
 800f11a:	4432      	add	r2, r6
 800f11c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f120:	428a      	cmp	r2, r1
 800f122:	dd08      	ble.n	800f136 <scalbn+0x76>
 800f124:	2d00      	cmp	r5, #0
 800f126:	a120      	add	r1, pc, #128	; (adr r1, 800f1a8 <scalbn+0xe8>)
 800f128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f12c:	da1c      	bge.n	800f168 <scalbn+0xa8>
 800f12e:	a120      	add	r1, pc, #128	; (adr r1, 800f1b0 <scalbn+0xf0>)
 800f130:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f134:	e018      	b.n	800f168 <scalbn+0xa8>
 800f136:	2a00      	cmp	r2, #0
 800f138:	dd08      	ble.n	800f14c <scalbn+0x8c>
 800f13a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f13e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f142:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f146:	ec45 4b10 	vmov	d0, r4, r5
 800f14a:	bd70      	pop	{r4, r5, r6, pc}
 800f14c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f150:	da19      	bge.n	800f186 <scalbn+0xc6>
 800f152:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f156:	429e      	cmp	r6, r3
 800f158:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f15c:	dd0a      	ble.n	800f174 <scalbn+0xb4>
 800f15e:	a112      	add	r1, pc, #72	; (adr r1, 800f1a8 <scalbn+0xe8>)
 800f160:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d1e2      	bne.n	800f12e <scalbn+0x6e>
 800f168:	a30f      	add	r3, pc, #60	; (adr r3, 800f1a8 <scalbn+0xe8>)
 800f16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16e:	f7f1 fa43 	bl	80005f8 <__aeabi_dmul>
 800f172:	e7cb      	b.n	800f10c <scalbn+0x4c>
 800f174:	a10a      	add	r1, pc, #40	; (adr r1, 800f1a0 <scalbn+0xe0>)
 800f176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d0b8      	beq.n	800f0f0 <scalbn+0x30>
 800f17e:	a10e      	add	r1, pc, #56	; (adr r1, 800f1b8 <scalbn+0xf8>)
 800f180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f184:	e7b4      	b.n	800f0f0 <scalbn+0x30>
 800f186:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f18a:	3236      	adds	r2, #54	; 0x36
 800f18c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f190:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f194:	4620      	mov	r0, r4
 800f196:	4b0c      	ldr	r3, [pc, #48]	; (800f1c8 <scalbn+0x108>)
 800f198:	2200      	movs	r2, #0
 800f19a:	e7e8      	b.n	800f16e <scalbn+0xae>
 800f19c:	f3af 8000 	nop.w
 800f1a0:	c2f8f359 	.word	0xc2f8f359
 800f1a4:	01a56e1f 	.word	0x01a56e1f
 800f1a8:	8800759c 	.word	0x8800759c
 800f1ac:	7e37e43c 	.word	0x7e37e43c
 800f1b0:	8800759c 	.word	0x8800759c
 800f1b4:	fe37e43c 	.word	0xfe37e43c
 800f1b8:	c2f8f359 	.word	0xc2f8f359
 800f1bc:	81a56e1f 	.word	0x81a56e1f
 800f1c0:	43500000 	.word	0x43500000
 800f1c4:	ffff3cb0 	.word	0xffff3cb0
 800f1c8:	3c900000 	.word	0x3c900000

0800f1cc <__ieee754_logf>:
 800f1cc:	ee10 3a10 	vmov	r3, s0
 800f1d0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f1d4:	d106      	bne.n	800f1e4 <__ieee754_logf+0x18>
 800f1d6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800f36c <__ieee754_logf+0x1a0>
 800f1da:	eddf 7a65 	vldr	s15, [pc, #404]	; 800f370 <__ieee754_logf+0x1a4>
 800f1de:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f1e2:	4770      	bx	lr
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	da02      	bge.n	800f1ee <__ieee754_logf+0x22>
 800f1e8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f1ec:	e7f5      	b.n	800f1da <__ieee754_logf+0xe>
 800f1ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f1f2:	db02      	blt.n	800f1fa <__ieee754_logf+0x2e>
 800f1f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f1f8:	4770      	bx	lr
 800f1fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f1fe:	bfb8      	it	lt
 800f200:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800f374 <__ieee754_logf+0x1a8>
 800f204:	485c      	ldr	r0, [pc, #368]	; (800f378 <__ieee754_logf+0x1ac>)
 800f206:	bfbe      	ittt	lt
 800f208:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f20c:	f06f 0118 	mvnlt.w	r1, #24
 800f210:	ee17 3a90 	vmovlt	r3, s15
 800f214:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800f218:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f21c:	4418      	add	r0, r3
 800f21e:	bfa8      	it	ge
 800f220:	2100      	movge	r1, #0
 800f222:	3a7f      	subs	r2, #127	; 0x7f
 800f224:	440a      	add	r2, r1
 800f226:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800f22a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800f22e:	4319      	orrs	r1, r3
 800f230:	ee00 1a10 	vmov	s0, r1
 800f234:	4951      	ldr	r1, [pc, #324]	; (800f37c <__ieee754_logf+0x1b0>)
 800f236:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800f23a:	f103 000f 	add.w	r0, r3, #15
 800f23e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f242:	4001      	ands	r1, r0
 800f244:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f248:	bb89      	cbnz	r1, 800f2ae <__ieee754_logf+0xe2>
 800f24a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f252:	d10f      	bne.n	800f274 <__ieee754_logf+0xa8>
 800f254:	2a00      	cmp	r2, #0
 800f256:	f000 8085 	beq.w	800f364 <__ieee754_logf+0x198>
 800f25a:	ee07 2a90 	vmov	s15, r2
 800f25e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800f380 <__ieee754_logf+0x1b4>
 800f262:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f384 <__ieee754_logf+0x1b8>
 800f266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f26a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f26e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800f272:	4770      	bx	lr
 800f274:	eddf 6a44 	vldr	s13, [pc, #272]	; 800f388 <__ieee754_logf+0x1bc>
 800f278:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f27c:	eee0 7a66 	vfms.f32	s15, s0, s13
 800f280:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f284:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f288:	b912      	cbnz	r2, 800f290 <__ieee754_logf+0xc4>
 800f28a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f28e:	4770      	bx	lr
 800f290:	ee07 2a90 	vmov	s15, r2
 800f294:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800f380 <__ieee754_logf+0x1b4>
 800f298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f29c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f2a0:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f2a4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800f384 <__ieee754_logf+0x1b8>
 800f2a8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800f2ac:	4770      	bx	lr
 800f2ae:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f2b2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f2b6:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f38c <__ieee754_logf+0x1c0>
 800f2ba:	eddf 4a35 	vldr	s9, [pc, #212]	; 800f390 <__ieee754_logf+0x1c4>
 800f2be:	4935      	ldr	r1, [pc, #212]	; (800f394 <__ieee754_logf+0x1c8>)
 800f2c0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800f2c4:	4419      	add	r1, r3
 800f2c6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800f2ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f2ce:	430b      	orrs	r3, r1
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	ee07 2a90 	vmov	s15, r2
 800f2d6:	ee26 5a06 	vmul.f32	s10, s12, s12
 800f2da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f2de:	ee25 7a05 	vmul.f32	s14, s10, s10
 800f2e2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800f398 <__ieee754_logf+0x1cc>
 800f2e6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f2ea:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800f39c <__ieee754_logf+0x1d0>
 800f2ee:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f2f2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f3a0 <__ieee754_logf+0x1d4>
 800f2f6:	eee7 7a24 	vfma.f32	s15, s14, s9
 800f2fa:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800f3a4 <__ieee754_logf+0x1d8>
 800f2fe:	eee7 4a87 	vfma.f32	s9, s15, s14
 800f302:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f3a8 <__ieee754_logf+0x1dc>
 800f306:	eee4 7a87 	vfma.f32	s15, s9, s14
 800f30a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f30e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f312:	dd1c      	ble.n	800f34e <__ieee754_logf+0x182>
 800f314:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f318:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f31c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f320:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f324:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f328:	b922      	cbnz	r2, 800f334 <__ieee754_logf+0x168>
 800f32a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f32e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f332:	4770      	bx	lr
 800f334:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800f380 <__ieee754_logf+0x1b4>
 800f338:	eee6 7a86 	vfma.f32	s15, s13, s12
 800f33c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f340:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f344:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800f384 <__ieee754_logf+0x1b8>
 800f348:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800f34c:	4770      	bx	lr
 800f34e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f352:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f356:	2a00      	cmp	r2, #0
 800f358:	d0e9      	beq.n	800f32e <__ieee754_logf+0x162>
 800f35a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800f380 <__ieee754_logf+0x1b4>
 800f35e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f362:	e7ed      	b.n	800f340 <__ieee754_logf+0x174>
 800f364:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800f370 <__ieee754_logf+0x1a4>
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	cc000000 	.word	0xcc000000
 800f370:	00000000 	.word	0x00000000
 800f374:	4c000000 	.word	0x4c000000
 800f378:	004afb20 	.word	0x004afb20
 800f37c:	007ffff0 	.word	0x007ffff0
 800f380:	3717f7d1 	.word	0x3717f7d1
 800f384:	3f317180 	.word	0x3f317180
 800f388:	3eaaaaab 	.word	0x3eaaaaab
 800f38c:	3e1cd04f 	.word	0x3e1cd04f
 800f390:	3e178897 	.word	0x3e178897
 800f394:	ffcf5c30 	.word	0xffcf5c30
 800f398:	3e638e29 	.word	0x3e638e29
 800f39c:	3ecccccd 	.word	0x3ecccccd
 800f3a0:	3e3a3325 	.word	0x3e3a3325
 800f3a4:	3e924925 	.word	0x3e924925
 800f3a8:	3f2aaaab 	.word	0x3f2aaaab

0800f3ac <_init>:
 800f3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ae:	bf00      	nop
 800f3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3b2:	bc08      	pop	{r3}
 800f3b4:	469e      	mov	lr, r3
 800f3b6:	4770      	bx	lr

0800f3b8 <_fini>:
 800f3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ba:	bf00      	nop
 800f3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3be:	bc08      	pop	{r3}
 800f3c0:	469e      	mov	lr, r3
 800f3c2:	4770      	bx	lr
